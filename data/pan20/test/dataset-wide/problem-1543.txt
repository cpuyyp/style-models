Also, keep your style similar. In the above, you have a statement with one line without braces, and another with braces. You should always choose one style, preferably braces, and stick to it; the same applies to loops: 

Feel free to comment on any and all of it. I am most interested in reviews on my design - are my relationships built correctly? Do any of my tables have too much responsibility? 

Most of the code in is duplicated - more functions would really help here. Early exit As mentioned in the comments in the previous (deleted) answer, you can early-return as soon as you know which value is sorted higher. For example, sorting "aa" against "bb" should be able to return after checking the first character of each, while "aaa" vs. "aba" should be able return after checking the second, and so on. 

The top node(s) are the nodes that separate the nodes by OneNote tutorial version. The next level of nodes are my menus, and the third level are my items. The reason I set the two top nodes as directories, not items, is because I am not fully done with those sections, but they are directories that will be filled with items later. I have many of these nodes, but this is the deepest I am going to nest my values for UI reasons. So, I wrote these three methods to get the values of the tree, also hosted in : 

To start with, C# conventions often state that you should always use braces around statements, loops, and similar statements. That means this statement: 

I'm not sure why you throw an unhandled exception in Main to make your program crash here when an error message and would suffice. On the other hand, why are you limiting the number of invalid input the user can enter at all? If I understand this correctly, they get 5 invalid inputs total, but otherwise they can input as many values as they want? Why make a limit at all? 

Overall, your naming is pretty good. is an excellent name, but , , , and in aren't so good. I assume the and stand for and ? Why not name them that directly? 

I would put each of these conditions on its own line to emphasize the fact that they all have equal weight. Also (this may be better in your IDE than in the SE chat), they are just a little long for having two on a line. 

The indentation on your CSS and JS is also erratic. One excellent thing is that your HTML and CSS validates to the W3C validators: 

Unnecessary assignment - value is already . These are all dead code for the programmer to read that the compiler is likely (and hopefully) optimizing away. 

Your code validates at the HTML and CSS validators, except for one thing: You need to place a doctype at the top of the page: 

First, your CSS has no errors, which is very good. You can check for errors at the W3C validator. Looking through your CSS, it looks very neat, and I would only remove a little bit of unnecessary code. Also, the display seems to be optimized for IE. I set it for FireFox and Chrome, and it displays almost correctly in IE. The trouble is, the box for displaying the output is visibly small in FireFox and Chrome. With my changes, it is 1 pixel too large in IE, but it is not as noticeable. First, I would just use the element here, instead of : 

In my college Java course, I wrote an ASCII Turtle Graphics. My professor said the only thing he could suggest was to turn the turtle into a class and create an instance of it (I hadn't because we hadn't covered classes yet). What do you think? 

Kill dead code, don't comment it. Next guy along to read your code will wonder why it is there, whether someone is in the process of fixing a bug and the code shouldn't be touched, or worse, was in the process of fixing a bug and never finished. If you need to remember this code for some reason or other, use source control. 

Your CSS is perfect according to the CSS validator at W3C; however, you should either remove the comments at the top of each section or actually use them to state what is happening or what is being modified. 

FSharpExtensions.fs This module contains many functions for internal use only. Most of these functions are designed to be based on a certain type to make calling them easier; perhaps they should be included in the type rather than being extensions like this? 

The third post in the Code Explorer series is about the UI and main VM. This is the XAML, except a few hundred lines of styling: 

Fourth, you've got a bad case of the fever. Please, oh please, why is every method in static? You might as well have made the class static! What if you have different BuzzwaySubs restaurants? Static instances are only created once because they belong to the type, not the instance, so you are stuck with only many restaurants, but only one menu, one checkout system, and one of everything else that should be restaurant specific? Also, if you had not made your methods , that crazy logic in would have been illegal (is that, in fact, what lead to this?). 

Here, we have a method that listens for any s and determines whether they have a single parameter. If so, it adds the to a list exposed through the parser state class. Here is the inspection: 

I can't say for sure without seeing the whole code, but I think this is violating the core principle of DI. You should never access the DI container anywhere except the composition root, which is where you resolve the startup class of your project and start doing the actual work. So, the registration code should be in the composition root where you do all your other registration, and you should just be able to inject an into whatever other constructors need it. AutoFac automatically resolves types as their interfaces, so the last part of this code is redundant: 

Also, you need to be consistent with your spacing; sometimes you have a space between braces, sometimes you don't: 

Right here, I adding a small padding so the font would have a small amount of space between it and the border: 

Please use braces; blocks without braces are just evil. Also, VS 2017 offers to clean these up for you, so it won't be extra work to change your style: 

You can validate your HTML at the W3C validator (it validates once you provide the framework). It does look clumsy the way you write out each figure. If I were you, I would probably load the images and s in a separate file (maybe a JSON file?) and use JS to add them to the page. This way, you just have to enter the new data in this file, and the webpage will load them right in the next it is loaded. 

Please use full names. I had to look for the definition to understand what represented. What's wrong with ? 

And finally, I really hate this last one, but I don't see any other way in SignalR Core to publish a message to a group with exceptions by connection ID. They have this functionality in SignalR non-Core, so hopefully soon... 

The doesn't do anything except assign a variable that immediately goes out of scope, and the doesn't do anything at all. 

The first one simply adds the given number to a value until it has been added times. The second one uses the 1+3+5... sequence. I tried to profile this on Visual Studio, but the report was taking a really long time (over two hours) to be generated after the data collection was done. I am particularly interested in which of these methods will run faster, and which is less resource intensive (would the second one be slightly more resource intensive because there are more variables?). 

This ensures they cannot be accessed except by functions within the class. Also, while is perfectly fine, you don't really need that now because they cannot be accessed except by functions within the class. Also, if you wish, you could provide a function to change the values, and only that function will be allowed to do so. To be able to access these values, you could do something like this: 

I'm sure there are plenty of other things to comment on, but I'm too lazy to write a more in-depth answer at the moment, so I'll leave it for anyone else who wants to answer. 

Continuing with my VB.NET experience, I wrote a quick guess-the-number game. Any improvement suggestions? 

This is Java, not C-before-C99. You can declare your variables in the loop statement, rather than before the loop statement: 

It wouldn't help the code run faster, but it would certainly be easier to read if you used proper indentation: 

is the last line of code in both blocks, and can be moved to immediately after the block. It does not appear that the duplication of can be removed without reformatting the output, so that is OK. Use more functions As already mentioned by TheCoffeeCup, you have huge, poorly formatted methods. You may be able to split these up into smaller methods controlling a smaller section of the program. For example, in the above mentioned code block, you could split that into a method for the win condition and a method for the lose condition, making your methods smaller and responsible for less. That block comes from a function named , but it gives status updates as well as checking. Naming I don't remember ever seeing snake_camelCase used before, as in . You should probably name that with just snake_case, as in , instead. 

This is the skeleton code for for reference. This is not the main focus of this post, but this also has a similar problem, so suggestions to solve this also are welcome - preferably if they kill both with one stone: 

You should break as soon as you know you have an item to prevent the loop from spinning through unnecessary cycles: 

Right after this, you break out of your loop and . This could be written to demonstrate you are immediately returning a fail signal like this: 

You need to format your code neatly; this will improve readability, which will decrease bugs. First, you have this: 

I was getting sicker and sicker of using an ordinary collection to do a tree's work, so I built a tree. A requirement of the tree are that it needs to contain a key to sort the tree by, so I used a to store the items. Here is the : 

My latest refactoring for Rubberduck is called Introduce Field - it promotes a local variable to a private field. The three overridden methods are the members of , and are used to start the refactoring sequence. The other methods are the worker methods. Overall, I am pretty happy with it, but there are a few things that bother me. The first of these is that has a strict requirement for the declaration type, but accepts any declaration, regardless of the type. Is there a way to enforce this other than throwing? Should I even be throwing here? Should I just return instead? and both seem somewhat clunky. Is there a cleaner way to do this? 

You will need to assign that a value before you use it, possibly from the constructor. Another possibility, although I do not think you need this here: 

I am displaying menus and submenus in my WinRT app, and I think I am doing it wrong. I have thought I was doing it wrong for a long time, so here it is for review. This is the section in my ViewModel. Probably needless to say, both and have had large quantities of nearly identical code removed; feel free to comment on everything: 

I originally wrote this well before C# 6.0 came out, but if I were to re-write it today, I would use C# 6.0's string interpolation feature. This would allow me to replace: