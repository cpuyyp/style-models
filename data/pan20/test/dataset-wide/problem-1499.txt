I do not get the reason for having two functions for asc and desc ordering. In principle, if asc is a call to a function , then desc is nothing more than calling the same function with reverse order of parameters . No need for code duplication. As far as I can see, the only difference beside calling your sort function with different parameters is, that you in the asc-Version have lines, which contain and the desc-Version calles . You could refactor this out into a call resp. . Besides that this code has to be broken down into smaller easier to understand sections - I really do not want to get my head around this - you have to avoid code duplication by all means, since it is the N°1 source of errors: if you change a statement in one place, you have to make sure, it is changed in every further place. 

There are more efficient ways to implement this: 1) If you only need a dictionary to keep your data together without semantics, you could split as follows: 

is in fact a model with a key called "content" (e.g. {content:"blah!"}), which is used to render the template, so that <%= content %> is substituted with the actual content. And many more stuff to discover. Referring to your problem - you could abstract your problem with backbone like the following: Every tab you need to display is a view to which belongs a template to determine its html as well as a model, which represents the content of the tab. You could embed each tab in another view, such that you have one embracing view to control the whole tabbing system and nesting views, which represent each individual tab. You could write a custom show() method to show an individual tab and a method which coordinates which of the tabs is shown and which should be hidden. So instead of doing the annoying work yourself, it may be a good idea to use a library to help. Some places to start (besides the official API and documentation): $URL$ $URL$ $URL$ $URL$ 

I wanted to practice functional programming (fp) without using any library but using vanilla JS only. So I took a problem from Advent of Code: $URL$ 

I wanted to practice functional programming (fp) without using any library but using vanilla JS only. So I took a problem from Advent of Code (the 2nd part of Day 5): $URL$ 

The code above has got more operation than in the first part of this riddle. But it's way faster and shorter than the functional approach of the 1st problem (Advent of Code 2017 Day 5 (part 1) in Functional Programming (FP)). My FP solution: 

Is there a better way to write it in FP with pure JavaScript, i.e. no additional FP library? Any improvement suggestions are welcomed. 

I wanted to practice functional programming (fp) without using any library but using vanilla JS only. So I took the a problem from project euler: 

Is it possible to solve this problem yet still be consistent with fp, i.e. no mutations and no loops? And of course: Any other improvement suggestions are welcomed. 

I got 2 while loops that are nearly identical. Is there a way to refactor them? I tried to refactor them into one function. But that function takes and returns 4 parameters: 

For the cross product I used this code snippet: $URL$ Slow as hell but seems to be fp with vanilla JS only: 

Second: Technically, it would have the same effect, to declare an array step by step or in a row. And no: there is no real way to convert your code automatically from the former to the latter. But perhaps, your question goes in another direction. Perhaps you want a solution to easily build combined arrays. For that task I suggest to take a look at underscore's zip function: 

Looping over your array and sorting out, which ones you don't like. You could play with this Fiddle 2) The "functional" approach 

Supposing, splitting by \w+ gives in most cases, what you want. Another solution would be . Depends on your demands. Go play with it! 

First: I have to admit, I do not know a single line Elixir. But on the other hand, I think I get, what the code does. I can not give you advice, how to implement the improvements, but I hope to help you anyway. In the description you have the following definition: single minutes: When it is 1 minute past the hour, YOOO is returned. When it is 2 minutes past the hour, YYOO is returned. When it is 5 minutes past the hour, OOOO is returned. single hours: When it is 1 hour past, ROOO is returned. When it is 2 hours past, RROO is returned. When it is 5 hours past, OOOO is returned. What both have in common is the pattern and the result . That should result in one function, which takes the following parameters: number,Symbol and produces the according output. Your code has: 

For any Maya users, this doesn't include the animation or colours yet, but here's a class to build it in 3D. You only need to iterate through to use and , so if you have a different 3D software package it'd still be easily possible to display. 

It's been a while since I had a bit of fun getting something useless working, so I thought I might as well ask if there's anything to improve about how I do things. The original idea was to convert to a higher base for more efficient storage, before I realised I was hashing the value anyway so that would be pointless, and you can simply do to achieve the same effect. Anyway, I got it working for all bases from 2 to 221, with the option for higher if you can find any other characters to add. The padding was a bit of a headache, but I figured out the maths to get the maximum expected length, though it's only really useful if you were doing a database input with a set column length or something. It also works with seeds, so it could be used for something similar to hashids I guess. 

If you set some bounds and the multiplier to 1, it should draw a proper style maze, it's just a bit boring that way. Since the tree data isn't really stored after the generation, here's an example of what the tree looks like at 3000 nodes in 3D. There's probably a better way of doing it but it worked for me. One thing I've realised is I may be able to merge with , but I've given up on coding for now so I dunno yet. Edit: Added a few extra bits, mainly for Maya. You can now remap coordinates, so for example, you could use a 3 dimensional generation and swap with , so basically you have the 3D generation, but only 2D slices of it that you view by changing the time.I also added the shaders too, so now you can see 4D generations properly. To be totally honest, I thought they'd look cooler (the 4D generations, not shaders), but they're a bit disappointing haha, but I'll try render a video later to show what it looks like. If anyone has an idea for the 5th dimension or any others, I'm all ears. 

»If the book is or the book is blank throw an « Btw. Why did you you use the negative from: instead of just ? 

I've seen, that you made up this code as an example, so I hope, that this is not your production code: 

To me. the design as far as I get it, seems a little bit smelly. I do not know engough of your code or the domain and your concrete implementations, but I would prefer other solutions to the dictionary-lookup or switch-statements. Perhaps you could make use of the decorator-Pattern: 

Of course you could choose another strategy to get a suitable transport. For the sake of the example I chose the strategy to get the first one able to do the job. Since you asked for constructor injection, I implemented it this way, taking a collection of transports. I would prefer setter injection. If there is the need to travel on a (different) ground, the human asks its collection of transports, whether one of it is capable of doing the job - so the human too has not to have any knowledge at all what is good for what job. If you ever come up with a car, you add it to your factory and ask your factory for that. And the car knows best, for what grounds it is made for. 

Besides what Flambino wrote I have a small remark to (3): Why are you storing unnecessary information in the DOM? I would prefer a solution, where you use a simple variable to keep track of whether the button performs an action or not. So you wouldn't have to update the DOM twice for nada. The DOM is a bad place for storing the state of your application. 

Running this code with in normal mode will create a . I had to "cheat" by running this code in : (node 6 supports Tail Cail Optimization (TCO) when the flag is turned on). I also tried to cache the but this didn't help either. I got the feeling that big size Input is the limit for FP. 

As you can see, it is not consistent with the idea of FP. First I wanted to write it using recursion but I hit the stack limit. Therefore I used generators (and loops). That was the only solution I could come up with that resembles FP. Any suggestions how to write in FP without any additional FP-Library (i.e. in pure JS only) is much appreciated. 

I wanted to practice functional programming (fp) without using any library but using vanilla JS only. So I took a problem from Advent of Code (the 2nd part of Day 3): $URL$ I'm doing the 2nd part of Day 3. You can only access the 2nd part once you solved the 1st part. To access the 2nd part type in this number or check out the solution here: Advent of Code 2017 Day 3 (part 1) in Functional Programming (FP) 

I wanted to practice functional programming (fp) without using any library but using vanilla JS only. So I took the 4th problem from project euler: 

I'm doing the 2nd part of Day 5. You can only access the 2nd part once you solved the 1st part. To access the 2nd part type in this number or check out the solution here: Advent of Code 2017 Day 5 (part 1) in Functional Programming (FP) First my procedural solution: 

Now I've grasped the very basics of Pygame, I thought it'd be useful to make a few classes that I could use later on if I try make a simple RPG style game. I've done this to handle the coordinates for the player movement (and possibly for other things too), and tried to do it in a way where you wouldn't get the floating point precision errors that Minecraft and similar games get when you travel out very far. I tested it against the module, and mine appeared to up to 10x faster for small movements, though the speeds evened out when using super large movements like +- 10000000000000. It's only half a days worth of work so it's not perfect, I can't find any more bugs though. It's recommended you input the coordinates as strings though if you're using large ones to start with, especially if you're using floats. 

In response to the comment by holroy, I decided to keep with float (as opposed to store the decimal value as a separate int) because I've still got to think about conversion to and from the game world. With the current way, unless the float value goes above the block size, it's literally just a single addition, whereas the other way would be a lot slower, and the precision to that level isn't really needed. I did the block method in a previous project which was about octrees, where the coordinates were stored relative to each 3D block, which was split into 8 smaller blocks (so a coordinate would be for 4 nested blocks, which results in . The problem with this approach is if a coordinate was at 16, that's too high to store, so you'd need to recalculate everything for 5 blocks instead of 4 (which upon writing this, I've realised it may be as simple as multiplying all of block 4 by -1, though I'm not sure). The boundaries can also be a bit confusing, as the size of the block is to , like -255 to 256. I wanted this to be able to scale as much as needed, without getting overly complicated, and the current way seems to accomplish this fine. 

I wanted to practice functional programming (FP) without using any library but using vanilla JS only. So I took a problem from Advent of Code. $URL$ 

Is there a way to write with less parameters and still be consistent with fp? Any other improvement suggestions are welcomed as well! 

Is there a better way to write it in FP with pure JavaScript, i.e. no additional FP library? I have problem with the lookuptable . Everytime I "add" a new element to the scoreboard, I had to pass the new scoreboard along. There is probably no other way around this in FP since FP functions have to be self-contained, i.e. every new value that needs to be calculated have to passed along. But I still wonder whether there is a nice FP solution to that. Any other improvement suggestions are welcomed. 

I wanted to practice functional programming (FP) without using any library but using vanilla JS only. So I took a problem from Advent of Code (the 1st part of Day 5): 

Is there a better way to write it in FP (without any libraries and with vanilla JS only)? Also any improvement suggestions are welcomed! 

I wanted to practice functional programming (fp) without using any library but using vanilla JS only. So I took a problem from Advent of Code (the 2nd part of Day 2): $URL$ I'm doing the 2nd part of Day 2. You can only access the 2nd part once you solved the 1st part. To access the 2nd part type in this number or check out the solution here: Advent of Code Day 2 (1) in Functional programming (FP) 

: What type the input is : How many bytes to look at for . Because this number will always be quite low, it's stored as a bunch of 0s, ending with a 1. : How long the data is : The input stuff As to why there is both and , for example, if the input has 255 bytes, the current way would result in 9 bits to say the length is 255, whereas having only 1 value would result in 255 bits to say the same thing. When reading the data, instead of splitting the string up, it just uses offsets on which part to read. I'm not so happy with writing it but didn't know a better way, as I just store it as a string and basically use or . The en/decode functions work with the string of binary numbers, and the and functions just get it to and from a human readable form. For the record, I'm planning on having something in , just haven't thought of what yet. Example: 

Then this is the actual code to run the functions, I think it should work outside of Maya. is how long forks are allowed to grow before ending, the rest is fairly self explanatory I think. 

I did a maze thing ages ago that could support any number of dimensions, but it was very slow to generate. To get an idea of how it generally works with the multiplier and stuff, here's a gif of something I made with it: image $URL$ One thing that always bugged me was I couldn't figure out pathfinding, and I thought there'd be some cool looking intricate paths between some stuff. I asked about that (since I'm stuck at home doing nothing due to having a broken wrist), and someone suggested linked lists, so I rewrote it all, and managed to get pathfinding between two points working fairly easily. However, since I'd made the nearest neighbour check run by default, checking for collisions was a huge bottleneck. I tried to optimise it a little, by only doing the pythagoras stuff if the highest coordinate difference was within the combined size of two nodes, which did speed it up like 2x, but it was still quite slow. Someone else suggested that's what you use trees for, and since I have no idea how KD trees work (and also the list is constantly being added to), I spent a good few hours yesterday making an octree that would work in any dimension, so I could find which nodes are near to then narrow down what the collision function has to check through. The result was like 2.5x faster at 1000 nodes, but exponentially going up to like 10x faster at 8000 nodes, which I'm pretty happy with. I've just got it fully working and cleaned up now, so I'm looking for a bit of feedback on either my writing style or anything that could be improved. Also, before the line length is mentioned, I decided to do 100 instead of 80.