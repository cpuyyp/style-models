Get your fixes reviewed by someone from the contracting company. Go to your tech lead and PM and have them find someone on the contracting company's team, as senior as possible, and tell them to make themselves available to review your code. Make sure you get thorough reviews from them, not just waving your fixes through, and that reviews happen in a timely manner - get your TL and PM to chase if not. If anything does go wrong then the reviewer is on the hook as much as you. Longer term: 

and then he can practice hitting his own deadlines. This also gives him opportunities to practice estimation and communication: the really important thing about missing deadlines is that you identify you're going to miss it as early as possible and communicate that upwards, so that between you you can work out steps to either correct what's going on and hit the deadline or mitigate the impact of missing it. So worst case he gets to learn all of this in a pressure-free environment, and best case he gets a reputation for being reliable and easy to manage (which bosses like). The issue is if this isn't enough of an external stick to overcome his self-discipline problems, but it seems safer to try and tackle that himself without deliberately risking his own job in the process. And there are better ways to solve self-motivation problems! 

The first thing you need to do is go read "Peopleware" It is a mistake to try to change this now. I was a manager at a company where we had a pretty flexible work schedule. One of our most productive developers came in at 11am. He reported to me for a while. I was told to get him to change his hours. I fought this request. Hard. I was overruled. The result: A less productive, less interested developer who was a huge team contributor. He became far less productive and useful for the team. All because of some silly notion of "on time". Focus more on productivity. Your job as manager is to remove barriers to productivity - not make everyone look, feel and act the same. Flexible hours are a perk - and an employer who allows flexible hours can attract more quality people. As a "new technical lead" there is no way you can change culture soon. Especially in the direction you seem to want. Have you done anything to improve your team's roles/jobs? Work on building trust with them first. So many first time managers/leads make mistakes like this. Find out what the other groups REALLY need. Not "they have to be here at 9:30". Really find out what the issue is. Then find a solution to that. Instead of telling your team what to do - explain the issue and then ASK THEM FOR SUGGESTIONS/FEEDBACK. You make a vague reference to "causes a lot of angst between my department and other departments" - but it is unclear what that angst is - are they upset that devs are treated preferentially? What is the real underlying issue? 

so you should check he's gone to see someone, and that he's doing something about it for his own good if not your own. I don't think he'd take it too badly if you approached him in person. "That's a nasty cough you've got, have you seen someone about it? Well you should, you've had it for a few weeks now." etc. After all that's concern for him not yourself. But if you want some anonymity and weight behind it then I think the best thing to do is to approach him through his manager. 

Obviously it's his responsibility to pay you on time, and if he needs to do any admin first (true or not) then it's his responsibility to get that done in time so that he can pay you. In the short term - he's said he'll pay you for this month and hasn't - your only choice is to chase him regularly. Go to him in person and ask if he can pay you now. If not, get a firm commitment from him when he will, and be specific - don't take 'the end of the week', make it 'Friday lunchtime'. If that's more than a few days away then go back to him a day or two before the deadline and remind him, and check he's still prepared to pay you on time. The important thing is not to take any vagueness or any excuses. Ask if it'd help to talk to his boss if you can. If you do walk away from a conversation without getting all the answers you need then don't be afraid to turn around and talk to him again. It's perfectly reasonable to nag and chase him over this - he's letting you down. If he does miss an agreed deadline then you're well within your rights to act annoyed and disappointed, and (without raising your voice) demand an explanation, and a new firm commitment that he'll definitely hit. Ditto try and escalate this to his boss too, and don't take any excuses. For future months you can chase him in advance: shortly before the end of the month send him a timesheet with your days worked, illnesses and absences. Follow that up in person and check that if there's anything else he'd need to pay you on time, and get him to agree that he will pay you on time. Nobody likes to be nagged, and it can be uncomfortable doing the nagging, but until you reliably get paid on time you're going to have to. I'm never a fan of saying 'leave your job' but you do definitely need to get to the bottom of why this is happening as it really doesn't sound good. Again you're well within your rights to have that conversation with your boss (and his boss) and not take any excuses. 

There's a reason for that. And you don't seem to be listening. Reaching for more drastic measure and bigger hammers are not really going to improve the situation. Try the "carrot" approach instead of the "stick" approach. Again, read "Peopleware". You are not going to go far with ideas like daily meetings or sending people home or with the notion that they are your minions who need to do as you say, "or else." Who is telling you they need to be at work at 9:30? Other groups? Your bosses? You? Figure out the REAL issue and address that. When they show up should NOT be the issue. 

The first thing you need to do is LISTEN. If you listen to the questions or to other feedback you might be able to discover what you are missing. Stephen Covey suggests - "Seek first to understand, then to be understood." Are you assuming levels of competence or other knowledge in your explanations? Can you identify common themes in the frustrating conversations/missed communications? 

No, it's not - but you do need to be capable of working independently when you have to. Asking good questions will make the whole team more efficient: picking up a large codebase from scratch is difficult, and if someone can give you any pointers at all it makes a huge difference. But there are times when there will be no-one around who can help you, or you're already the expert, so it's not always an option. That said there is a balance to be struck between asking questions and distracting the people you're asking. It's more-or-less like asking a question on StackOverflow: before you go to them do a bit of research yourself to make sure you give the impression you've at least tried to solve the problem yourself, and ask something specific as possible. (Unlike StackOverflow though it's also OK to ask early for a general direction to get started, and brainstorm ideas.) And try to limit the amount you ask: if you're genuinely stuck and unable to make any progress then do ask, but be wary of annoying people by asking too many questions and failing (from their point of view) to take on board what they've already told you. It sounds like your boss is being unreasonable here, but you're unlikely to change his attitude: sometimes you just have to get by without any help. (Or maybe he thinks he's helped you enough already, or maybe he's trying to help you to be more independent.) WordPress is unusual in that there's lots of documentation and examples (of varying quality) for simple stuff, but beyond a point your best option is to read and understand the relevant PHP code. (Again, just finding the relevant code is often difficult in an unfamiliar codebase.) If you just need to develop a bootstrap-based theme then your best bet would be to read up on the page selection code to understand the interface between the core code and the theme, and to look at a few simple example bootstrap-based themes to see how they work, and steal ideas and code from them liberally (it's all GPL after all).