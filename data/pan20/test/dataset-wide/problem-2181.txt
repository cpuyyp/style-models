The reasonableness is related to "team perspectives". In a pure-team world it is reasonable for every team member to expect all other team members to share, up until the point it degrades team performance (e.g., spending too much time and not getting other things done). In a pure-individual world, everything you keep to yourself is an asset to you. Giving it away for nothing doesn't make sense. Where along the pure-team and pure-individual spectrum do you and the work environment sit? I'd error on the side of sharing unless there are hard reason to not share. It seems what you have is valuable to several. Teaching 1-on-1 is good, but not always efficient. I would propose a series of classes. You can start informally, even at lunch time. If things go well, you can propose a more formal situation to management. Build a syllabus and course outline. Demonstrate the value to the company in the proposal (soft and hard $). If you already have students "enrolled" and pulling for you, and you can demonstrate the value to the company, it should be an easy sell. As part of the process, you can inquire about getting a piece of that value into your own pocket. 

In any problem space there at least two areas of knowledge - domain knowledge (industry knowledge) and local/project knowledge (company knowledge). Have you done everything you can to understand the domain you are working in? This is your responsibility, unless you had an agreement upfront that the company would send you to some form of training. There are usually extensive resources online about most domains. You should be spending at least two hours a day (of your own time) learning the domain. Do this until you can understand whether what people are saying in the standups is domain level or local level. You can then ask specific questions, "Is X-local related to Y-Domain?" Showing a proactive approach will make people more likely to help. Seek out a mentor. If you are in these meetings each day, you should be able gage much about the other people. Find an appropriate person and ask them to be your mentor. You can work your way up here. Start with someone more junior. They may have more time, and are more likely to understand where you are struggling. As you gain knowledge you can seek more advanced guidance. Ask your self if you are taking control and being proactive. The first sentence of each of your first paragraphs could be viewed as seeming to say you are dissatisfied because your assumptions were wrong. You should have known the first one during the interview. Also, you say "no one bothered" when talking about terminology. Did you bother to put together a list of the terms you don't understand and send it to a few people? Create the list, research the terms in the broader industry, and then send a quick email that says, "I'm unclear about the following terms. They seem similar to ... Do you have a few minutes where I can stop by for a quick clarification?" Leverage the standup. Have a targeted, short question ready each morning. When it is your turn to speak, add the question at the end. - "What does term X mean?" You may get a quick answer or someone may offer to stay a few minutes after the meeting and help you. 

What you have is three years of experience managing the complex relationships between different aspects of a highly technical and specialized field (RF). Not a bunch of three month stints in unrelated areas. I would look at my long term goals. If you have decided that only one of those areas interests you, make that clear. You were exposed to many aspects, and now you know for sure where you want to focus. Emphasize what the most closely related areas bring that others may not have. For example, if you want to specialize in design, emphasize how your design will be better because your hands-on experience with test will make your designs more testable. Where in the food chain do you want to spend your career? Take the range of experience you have as the base of a pyramid. The top of the pyramid is management and the bottom hands-on. As a manager, you have direct technical knowledge over this range of areas, which is likely broader that other manager may have. If you decide management is your path, emphasize your ability to contribute across the board. If you come onboard in the design area, you are a valuable team member or leader for cross-function teams with the test area. Call yourself "Full Stack'. Kidding. But in software this is a common situation. A developer may have two years of experience, but there may be more than ten technologies they use that are farther apart than yours (and maybe not part of their education) - like database and JavaScript - worlds apart. If you look at actual work time (less meetings, non-direct, etc.), that's about 300 hrs./tech. Not much. The value is less in these individual areas, but in the big picture. The long-term here can be along the lines of architect or product designer. In other words, do you really want to be a specialist and by definition more restricted, or do you want to embrace being a generalist, which offers a wide range of contribution and growth potential for both you and the company? 

First, I would caution moving too quickly based on one conversation. A change like this impacts the company at a high level and needs proper review. Sounds like everyone is an owner there. Does "co-owner" mean anything? If you don't have an Architecture Review Board function, it may be a good time to implement one. They might have asked why it has taken 5-Years. With or without a formal group you will be communicating your vision with multiple people - you need things in writing. Remove the people from the conversation and focus on results. The desired result is the highest quality software. This includes maintainability. Ask yourself a few things - Is my software functionally better? If your software is better, a technology case goes a long way. Put an architecture presentation together on the technical benefits of your version. Compare the two versions and give specifics. Be careful not to bash the other version. - Is my solution as complete? By this I mean less about the code, and more about support and documentation. How much non-code must change to move to your vision? Determine the impact and cost of change. Even building on David's work 2-months is nothing - the bugs are still larva, they'll be coming soon. - Is this a good business decision? Are you close to shipping the old code? How does that change the timeline? Even if it is better in all other ways, will it add two more years to the release date? Can the organization support it? - new technologies, libraries, or skills required? If David is in the software business and can't deliver software, that is a problem. What is the relationship? Is there a formal agreement between the companies? Two guys from another company working part time is risky. I would start by drafting the presentations. Schedule a meeting with the founder and David. Let David know what you have been working on and give him your presentations. This will help gage his response. If things go well, present to the larger set of co-owners and stakeholders. Have a change plan. Remember there are two issues here - keep them separate. One is the product, and one is business relationship with David's company. David is more likely to resist if you put both his code and company in a bad light. 

Your friend is counting on you. You are involved in this because you referred them based on a set of information about them and the position. Both the company and your friend moved on this with some level of reliance on you. That original information is no longer accurate and there is nothing (e.g., legal) that prevents you from sharing what you know about the new situation. I would say ethically, you should want to share the new information with your friend. What you don't want to do is make a decision for them. No, you do not want to "tell my friend not to interview anymore". Why don't you just email them a link to this post? It pretty well states the situation. 

As a student (assuming you are not returning after 30 years) you get some leeway. You were up front about the situation. And since this is an internal university site, I'm guessing you aren't the first in they've seen in this situation - you guys are learning. Also, consider the formality of the situation - he said to drop by during an 11 hour window. It's a two way street - will he even know who you are, or did he tell 30 people to "drop by". @enderland has good advice. I would add that when you do your research, look at all of the postings for the department. The one you saw may be gone, but a similar one might be there. It could remind you what the original one looked like. 

A question is if this is a company benefit or a training budget item. If it is a benefit, I wouldn't worry about how long you have been there, and depending on the how the company benefit is structured, even if the course relates to your work. Do you worry about taking insurance right away? Read the program and see if it indicates "work related" education or not. Cases I have seen that don't specify "work related", and want the manager to "approve", are being courteous to the manager. Even if the manager said no, HR would say yes - it's an employment benefit. If it is a training budget item, I think @diceler has good advice. 

Evaluating this level of developer in your situation can be tricky, but not because of the level of their skills. If you are expected to hire Senior Developers and are asking this question (no offense) your technical environment must not be too large or complex. If it were, it would seem there should be processes in place for this already. If this is the case, as a non-technical manager you are in a rough spot - you will be working from faith and trust in your hire, not your ability to make informed decisions based on what they say and do. You may want to ask yourself if you are ready to hire yet. Do you have a clear definition of these roles? I.e., do you have requirements, architectures, designs, etc. and need developers to realize them or do you have a "need" and expect these two do start from ground zero. A developer and an architect are two different things. Even a programmer and developer can be different things - which do you need? Not knowing your situation, it may make more sense to hire an Architect with strong hands-on skills. Once the design is complete, let them help find the best (depending on budget) programmers to realize that vision. Also, "Testing" a Senior Developer is a waste of time, and it's also insulting. As you become more Senior you also become more specialized or removed from "101" level things, but most canned tests are at the "101" level. If you've been architecting complex systems for the last 15 years you probably haven't been solving many array manipulation puzzles. These days, it is expected that a developer (looking for a job) have a "portfolio". The most basic expectation is a GitHub repository. This substitutes for any "test", which should be reserved for entry-level to <2-year developers. Think about your job. If you've spent 15 years in your position and someone asked to take a test that was like a sophomore midterm, how would you feel?