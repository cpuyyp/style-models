Hope it helps :) On a last note, you should try to write some unit tests ;) it really helps getting better at coding ^^ 

It's pretty neat because this new solve give a better abstraction ; two birds with one stone basically ^^ Doing your conditions like this : is not useful, you should prefer to simply write ;) On a more general note, there is something that bothers me with your architecture : the is much more than a simple solver : it actually stores the maze it's trying to solve and it's also responsible with the printing. It's doing way too much. For the first part, you should consider moving the grid into it's own class, the method can be a that returns a new from a given file. The will now solve a given maze like this : 

Maybe you'll find that's enough of an improvement but there is still 6-7 lines duplicated between the 2 methods. Let's dig a bit more and go functionnal : We can see that the 2 methods look like this : 

Now, instead of implementing our own solution, let's take a look at the standard library for an answer. No method exists in the utility class... but let's dig a bit more : you can rotate a List so let's do that : 

Consider using bigger number aren't that big, if you plan on doing math calculations, you should consider switching to or . Well now, the real review : Review of PrimeNumber I don't really get what this class is about. The name makes it sounds like it's storing a prime number but it's not... it actually looks like a Factory of some sort. I'd consider removing it unless you want to add more features (in which case that may be the object of a future, follow-up, question ^^). Review of PrimeAbstract 

For the add,sub... methods I'd have made them object method myself but that's really up to you in the end ;) is a poor name for the boolean parameter but, aside from that, it's ok. Your method is good (formatting aside) but you should consider making a short javadoc for that not-so-easy-to-understand method. [EDIT] : it's better when hashCode give the same hashCode for two equals objects, as such you should only use reduced number for your hashCode calculation, the implementation given in my code is thus error-prone ;) if you make your object immutable, you'll encounter the following problem 

It's been said multiple times but you should avoid one letter variable most of the time. Class name is also no good. It's recommended that class name follows camel case convention and using abbreviation is often considered bad. Don't code something in your main as it makes it harder to test your code. Putting it in an outside function makes for a clearer code : 

In a few words... Your code as it stands is very very hard to unit test as it relies on global state, on system.in and on writing to a file directly and pretty much all methods have side-effects. The indentation is far from perfect. It also feels very imperative. As you are using a OO language, you should have multiple objects that delegate work to each other. By using dependency injection you could then make your objects read from something that is not (a file or a string for example) and write to something that is not always the same file. This'd make unit testing easier as well. To sum my previous points : your code really feels "scripty". Zooming in a little bit 3 variables are never used and some variable start with an upper letter which don't follow java conventions. 

is really a bad name for your variable, maybe rename it as or something ? I'm no big fan of the printStackTrace, you should consider using the various logging utilities proposed by java : $URL$ or slf4j. I think those 4 modifications will already make the code neater but we can do a bigger refactoring : instead of using a String that we concatenate bit by bit and then remove the final comma, you should consider using a over the fields array and generating the result with the method. In the end, you'd have the following method : 

Of course, you should prefer a well named constant over this ugly 1000000. Other things in the code Now that we are done with the performance aspect : 1. the name aFile is not really good looking IMO. 2. there is two nested try clause within each other but it's useless here. 3. please never user empty catch block :'( After all those tweaks : it takes my computer 1 minute and a half to read a 28.5 mb file. 

Your object is mutable (mainly due to the method). I'm not sure you want it to be immutable (but it's a good idea considering the code) but you should at least make it thread-safe. To turn it into an immutable object, you should make numerator and denominator and rework a bit your reduce method as well as your main constructor. 

I find your code to be very good and readable :) In the code you present here, I only see one mishaps : 

Change your fields' visibility to as others object shouldn't know (nor care) about the inner working of your , this is known as Encapsulation Turn the buttons into a 2D array and make the name clearer ( isn't really informative ^^) Avoid magic numbers (talking about 3, 9, 500 which can be replaced by , ...) : this way, not only it's clearer for a newcomer but if you ever change one value it'll be updated everywhere I don't think there is any point in making a field, it's only used like a local variable Turn the part into a method that'll do all the checks for you and return you a : in general, calling multiple short methods makes for a clearer code as the code is more declarative this way (and it removes useless comments) For same reasons as above, turn the victory message printing into its own method Use a loop to check every lines and every columns without caring for their size, that'll make for a clearer code and it'll also be easier to modify the current behaviour (if you ever want to allow for differents grid size) You may want to not compute diagonals unless someone has checked one of the diagonal value, it'll probably slighty increase cyclomatic complexity though so it's up to you ;) You forgot to disable the buttons if the game ends in a tie... in the same way as points 5 and 6, creating a or method may be neat Maybe you should consider offering the players a new game when one has ended 

5) I'd actually give up on most (if not all) methods that mutate the Matrix unless you have a good reason not too. It makes some of your code thread-unsafe, makes your Matrix basically not insertable in a (as the hashCode will also be affected) and disallow some nice optimizations (like putting the or results in a cache) 6) Put all your fields at the top of your class (for example the cache field ) 7) Some people (me included) never indicate whetever their methods throw runtime exceptions and I think you should remove all from your methods signature, it basically doesn't give much informations and reduce readability 8) Talking about exceptions : I'd consider using and when necessary instead of the plain 9) Turn private methods that don't access any fields in method 10) I see some problems here : 

The indentation of your code isn't good :s I think making immutable would make for a better code When an object is constructed it's usually a good idea to make sure it is correct, in your case you don't make any check over endTime and startTime (endTime must always be > to startTime), also is useless here as you are only extending Object You should hide the field with private modifiers You can check the new java time objects (such as LocalDateTime if you don't want to be bothered by time-zone) instead of using ints In your : note that if a meeting conflicts with more than one other meeting(s), the result will be off Still in your findNumberOfConflicts method : you should avoid modifying parameters as much as possible as it makes for harder to understand code, consider the following : 

Array have an "old-school" feel and I'd avoid them if possible. Consider using List (and especially ArrayList) for those kind of use case, thus transforming previous method in : 

The code is good overall ^^ If you are worried about the key being out of sync with the it references, why not just make sure ISBN can't be changed inside ? It doesn't make much sense to have a setter about this anyway, IMO. Also, once a model object is created, it's usually a good idea to make sure it doesn't contain any illegal value (so in your case, a negative price, a author or an invalid ISBN for example). Since you have setters, you should put the code that check for correctness in the setters and simply calls the setters from your constructor. Checking for ISBN in your constructor may be a pain however, so I'd create a new class that would represent a correct ISBN and which is immutable. Some books have more than one authors, something you should consider. With all above proposals, the class may look like this : 

5) Use a whitespace after commas and add some space in the following expression to make it more readable 6) Put the string and 105 and 9311 "magic" values in properly named constants. 7) It's useless to store something in a variable and then simply return it, you should consider removing such assigment. At this point, you'll have the following code : 

Use / and consider adding a to print a warning message if the input of the user is invalid. Never trust user inputs ;) As said earlier, if the user input multiple space in a rows, this part may fail as you'll use on the empty string. Also, is never written to if counter is 3 which is likely a bug. Lastly, you shouldn't the variable twice. Use once and store the result in a temporary variable like this : 

You can correct the first point by using the class ($URL$ You can correct the following two points by using more injections. The following code snippets show a potential combination that answers all previous points : 

About the second point, the method also have a problem IMO. shouldn't know about the console... nor it should know anything about printing actually... same goes for the new object(s) if you decided to add it. As such, you should replace this method with a method that gives you a and it'll be the caller's responsability to do something with the returned string... either printing it to the console as you are already doing (so with a ) or maybe putting it into a file... or even send it to twitter :P 

Special note Remember that people's names aren't as easy to manipulate as they seem : some people have space in their first name, others have multiple "middle name" (in France for example, we can have as many surname as wanted, though we use only one). Also some family name may not be case sensitive (Victor D'Hondt is sometime written Victor d'Hondt or even Victor D'hondt). Something to consider if you ever want to add name comparison. 

should be replaced with One important point : your code must be hard to unit test as it is coupled with HTTParty, you should consider using a Strategy pattern here. Finally, I'd make some simple class that have only one or two fields (such as , , ...) immutable by duping and freezing the parameter and freezing the whole object : (note that it won't work if you expect a boolean, a number, a Symbol or as raise an exception in such case :() 

sounds like a complete sentence which you should avoid for a class name. Consider renaming your class to , , etc... 

Avoid declaring two variables on the same line, also does not correspond to the java recommended notations. Java uses lowerCamelCase for variable (and method) name so you should write as . Also is not really clear as a variable name IMO. Maybe you should consider . 

I haven't done Ruby in some time so I'm a bit rusty but I hope my review helped you at least a bit :) 

I used lambda here as it's simply less verbose. is needed as must be for the closure to work ;) Also isn't a very good idea.... It's over 10 millions years you know ? ^^ 

With this simple line, we now have the number of occurence of each elements of your list. This is still not enough as we want to consider the maximum number of occurences. We want to have the number of occurence if it's below a threshold. Collectors (again) comes to the rescue : 

General notes about formatting Your indentation isn't very good. Also, it's usually a good idea to have space between comparator/equal sign and their operand ( instead of ). You also want to have a space after commas to make the parameters more readable. Any decent IDE have a code formatter that can solve all this issues ;) A few proposals 

It's pretty nice IMO but can be improved. If your project uses apache commons (this library is often included), you should consider using the class to get the fields : $URL$ Notably, the method would reduce your code complexity by a bit. That's up to you though ;) This part : 

Why is this an ? It's clearly an , also the javadoc is pretty useless. The name is not very good... why ? Aren't / name closer to the intent ? Review of PrimeAbstract's childs The code in the implementation really needs to breathe ! Put some spaces in it ;) it's tiring to read it as of now. As a rule of thumb, put spaces between the (as well as things like += ofc) sign, the '?' sign and theirs operands as well as between comparators and their operands. 

Also, 99.9% of the time you want to have your own implementation when you modify the method so you should consider overriding it. For example :