SQL Injection-wise, this is completely safe. You don't run any risk of SQL Injection. However, some parts of your code is not optimal: 

Overall, I'd say your code looks great. Well done. Good use of interfaces. Good use of different classes and methods. It's been a pleasure reading your code. A great improvement compared to the previous version. 

And now, speaking of , we can transform this for-loop into a traditional for loop, by adding both the initialization and the iteration to it: 

You're really just doing the same thing there, but for different x/y coordinates. ( and might be the standard for row/column in Mathematical matrices, but I always prefer and , especially in code). What you should do is to make use of the pattern. 

The works just like an ordinary , so you can add and remove and from it. From the EnumSet documentation: 

Also, I would strongly recommend to keep your data as a file or in a database and not inside your code. 

Not necessarily. However, if you only create an instance of the other class just to do things in the constructor, then you don't need the new class - and in that case it is considered bad coding. If that's all you do in the constructor, then move the code from the constructor to a method (which you can place more or less anywhere, but I'd recommend having it in the original class unless you feel that the original class gets too big). 

This would change the logic a bit, now the list will be empty if all men_proposed to all woman, but since empty lists are considered falsey in python you could check like this: 

Use indentation of 4 spaces, it looks cleaner Functions should be named with lowerscore letters. Example: You use a lot of which could be rewritten to Same goes for which is just You have some calculations like which can be rewritten to When using comments don't indent them! should be 

@200_succes has some very good advise, but I think I can add some more. Originally this was supposed to be a comment, but it got to long. 

Inspired by this question on CodeReview, and because I'm never able to beat the queue. I'm just too slow I guess.. :( I made a little python utility that reads the queue's information every 30 seconds and opens the link in your browser if we can review something. 

I wonder if I use the correct syntax in bash? Further I think my scanning function is not all that good, I bet there are more pretty ways to check. Lastly maybe checking wifi's near me with instead of iwlist scanning would be a better way of handling this? 

(To make things easier for you, you can also add your as a muppet and override the method to return a custom string if , this would also remove the need for adding one in , and would greatly simplify adding the items to the adapter) Then I would use the as , so that you can get the selected item like this: 

THIS IS BAD! A caller of your method has absolutely no guarantee that nothing went wrong. And is therefore unable to tell any potential user of your application that something did went wrong. Simply printing the stacktrace accomplishes nothing for robustness! Additionally, the only exception that should be able to occur is , there is no need to catch all the other ones. 

In this case though, it doesn't hurt that much IMO to have false-positives, and I must say that your simple filter is quite good. 

This is something I would say is primarily opinion based. For this little app, I think it's fine to put the function method call inside a . When it comes to more complex things, it is usually better to do the calculation separately from the output (or most importantly logging), because you don't want your program behavior to change when you remove a or logging statement. 

Why all these temp variables? They are never used, and since the original list is not altered. It makes no sense to use a temp variable. Just call 

I think using classes is a bit too much for this, but you should create a few functions to diverse functionality 

You could make use of something like opencv to find the individual pieces. Afterwards you can crop and save those pieces. This will be a big improvement as you could give it a different image, and it would create individual pieces from it... no more measurement from the user! 

naming It has been mentioned in the comments by @mast, naming is a very important part of coding. Would you still understand this code after a hiatus of a few months? I have a hard time understanding the code as is. I would have been able to give a better review if your code was more readable. Good code should be readable at first glance, the below variables have no meaning for me... 

I think your program is ok, but could use some improvement, be sure to check out the Paramiko demo's these contain many usefull pointers for working with parmiko 

Even though you have some other answers already, I wanted to provide my re-write of the method (in Java, but should be easy to translate into Python), and also another little comment. I quickly realized that combinatorics played a big role in your question, and I enjoyed the challenge very much. I got stuck thinking in one way, so then I started thinking in another, which helped. The concept is the same as Gareth and vnp has suggested. One option for "pick same twice in a row" and one option for "pick different", this led me to the following recursive method: 

I would personally recommend the first version, as the second version creates a long statement and is a bit more difficult to both read and debug. 

I think either way will work just fine. If it is common to reorder the list, then I would let the application deal with it. Although your needs quite a lot of more code to work directly with a . If you want to use an enum and reorder inside the application, then I would let the enum take a in the constructor and create an anonymous inner class for each enum value. 

Use either or because this feels just wierd, and kind of surprised it worked at all. I'd recommend sticking with Secondly, be sure to check out the itertools module from python, because what you are looking for are basicly permutations of a word. 

There is not much to say about your code then, Regex is slow. A non-regex solution could be to use Python's endswidth, this works the same as 

You are doing things the hard way, there is a python function to cut up strings namely the method Thus to make it easier to use and more general I can rewrite your code like this: 

loops per se are not a bad idea, it is just using a loop for this example is overcomplicating stuff. That makes it a bad idea. is awkward because you keep appending that item to the list and refering last element, you could also have stored the range as a variable and keep overwritting it. 

Running your code through PEP8 will produce alot of errors, you can see it for yourself. Just to name a few PEP8 improvements: 

Does the order of the result matter? Only for your unit tests. Change the tests! Don't be dependent on the implementation of . Use instead, or . In this case, I would return . No order of the integers really matters, because the integers themselves are the order (inside the String). It is important to know that there are no duplicates, so a is perfect. In fact, the inner might be better of as an array instead. So Permutations @rolfl beat me to it on this one, but here's what I would do: 

That is, the opening brace goes on the same line and not on its own. As you're coding Java, I'd recommend using the Java convention. At least your style is consistent though, but as it seems to be code for teaching others, it's important to teach the correct conventions. 

If you switch to using instead of , that would remove the need for your entire method. A takes care of everything that the method does. I would also change a part of your method 

That is, return a copy of the data, then I can manipulate it all I want - I won't break anything! I wouldn't use a at all though and just do a directly. If you want to make sure that all variable names are unique though, even if they are of different classes, then go ahead and keep this variable. 

PEP8 and Readability When coding it is nice to uphold a standard, it makes your code more readable for others and yourself. In python we have PEP8. Your code has a few PEP8 violations and other readability issues. 

If you need to add alot of corner cases, your algorithm is likely off somewhere else. Consider adding Testcases, Docstrings, or both in the form of Doctest. To make it easier to Test your algorithm. 

For timing, see the Time complexity for python You use some expensive operations while this can be done is a single loop 

I think this code is very straightforward and easy to read. Good job! Some nitpicks are, You have a few PEP8 violations none all that concerning. 

Why the string to tuple conversion? I am not sure why you are converting the input into tuples and then convert them back into strings corresponding the input again. Because you could have iterated over the without the conversion Use libraries when possible I know you specifically said not to use lib, but this seems the perfect spot to use it. If there is no specific reason for it (like an assignment) I recommend using it. 

You could use an instead of an to avoid having to use . By using you could call on it to increase the value. 

can be called and either or . There's no need to use such short variable names, unless you are starting to run out of power in your keyboard (which I doubt). In fact, your variable doesn't seem to be used at all. If it would have been marked as your IDE would have told you about that. 

Normally when you need "different return types", you can use generics. However, since you want these s to be in a List of some sort, using generics goes out the window since a List cannot be defined properly to contain both and , so the only solution would be to have a in which case the reason for using generics in the first place is lost. Your class makes sense if a counts more than one of the things. If the counter is only meant to return an int or a list of files, then using a is quite useless since many fields will be null. Regarding Banthar's comment to your question, you could modify your existing interface to 

You should remove the from the second loop, this will save some time. You only have to compile once per word in the wordlist Regex is really slow, you could use the keyword instead however there are some tricks/risks involved with this approach 

@Austin Hastings has the right idea, using to do all the attribute setttings. I recommend to look up , and Python . Code changes 

Instead of comparing to the lowercase alphabet hardcoded, you could do Instead of the you could use a modulus operand in your cipher function. Don't do empty returns but be explicit and Using argeparse for capturing cli arguments is indeed a great improvement as suggested by @Thomas Eldon Allred Your seems off, you could have used for that to make it more obvious. And do 

Review There are a few things that could be improved upon. 1 .Your could use some love I might understand using a dictionary so you can see which value corresponds to which direction, but this may be simplified to just using a tuple of directions. and are variables badly named I believe, maybe or something would be better. and implies that these variables are private/protected, and in your case they are not. Secondly I think with this: 

Although I think that is a much better name, personally. Generally, I understood your code better than the assignment description, so well done there. Array instead of ArrayList Instead of using an , that by the way would be better to declare as (use interface for declaration, implementation for initialization), you could use an instead, as you know the exact size of the list. There's no need to do any dynamical resizing of the list, so a would be just fine. Small spacing nitpick A little nitpick would be to use a bit more spacing, I am a bit allergic to lines like this: 

You have a field in your class that seems to only be used in one method, and should therefore be a local variable. 

Overall, your code looks perfectly fine. A minor minor minor nitpick is that you're writing one space more than necessary here: 

When doing animations, it is helpful if you know the platform you are doing them on. I have to say that Swing is not the most helpful platform to do animations on. There are a couple of tutorials out there for how to do it. What I am mostly noticing in your code is that you don't seem to call or anything like it anywhere, which makes me a bit surprised that this actually works at all. If you are developing with Java 8, I think you would benefit from using JavaFX which has better support for animations. If you are interested in developing games with Java, I would strongly recommend using the framework LibGDX.