HR does not run the company and ultimately are meant to serve the company's needs. While one might hope that going to HR might protect their interests, their actions typically will put the company first and your interests second. This is tolerated by executives as HR exists to act out these priorities and its felt to be in the businesses interest. But ultimately HR reports to executives and the ownership of the business and, if you can demonstrate that they're doing harm to the business, someone at that level can and will take action. However, if their attitude enables their behaviour or, on balance, they feel that making a fuss about it would cost them more than trying to sweep it (and you) away, they're more likely to opt for that course of action. What happens depends on the company. Some HR departments will have an iron grip on their role, the CEO's ear and can poison the well before you ever get access to the CEO. Others will be enabled by a CEO who feels this behaviour is acceptable or at least tolerable as 'not that bad'. Worse still, HR might be good at covering up incidents and the executive level might be truly ignorant. If you want to stay at such a company, you're not in for an easy ride. Once you identify unsavoury elements within HR, you keep going over their heads until you reach someone reasonable and amenable to action (for which there is no guarantee that there will be such a person). At this point, hopefully, you'll have enough evidence to actually take action, but such action could destroy the company whether by warring politics or the upheaval of having to wholesale replace your HR department. It's far more likely that, in the process of trying to achieve this, you might be fired and/or forced out for rocking the boat, or that you find nobody sympathetic. If you're entirely looking out for yourself I'd follow other people's advice to just leave. However, that doesn't mean that can be your only action. A good option for post-employment action might be to contact the media and be an anonymous source/whistleblower on the behaviour and the environment it enables. With the #metoo movement, there will likely be more interest in such leads. Going on the record and leaking while on the job may be more likely to get you fired and incur reputational impact to your career (a lot of companies might not hire you, a few progressives might be more interested). 

There's a simple solution: dock their pay for time not worked. If they're not working their hours, they're not earning their pay. I don't think employees should be fired without being given a chance to improve but I also don't think that all humans can be forced into contract-sized boxes and expected to work like identical machines in identical roles. As a manager, your role is to both provide some flexibility for human problems but also not to be too soft and prevent abuse. Paying them for time worked is fair and will incentivise them to justify the time off as necessary and truly unavoidable or to do better. 

We have similar issues in coding, with regards to style and personal preferences. Occasionally someone will come along who feels very strongly about a certain thing (tabs vs. spaces, when to put the brace on the next line, etc.) and, if they're obnoxious, they'll make some kind of wide-reaching commit that makes everything conform to their way of doing things. Alternately, they might tie up the whole team in endless discussions about something that doesn't matter as much as they think it does (the materials of the bike shed). The answers to these sorts of problems begin with conformity. There's nothing worse than having multiple standards half-applied because different members of the team either ignorantly or knowingly work against each other. If you spend the majority of the time working on your own designs and can respect each other's approach when you do have to work on theirs, it's not a huge impact. However, if someone spends an adverse amount of time converting to their preferences every time something passes over their desk or passive-aggressive yo-yo'ing of changes occurs, you have a problem. Secondly, don't rock the boat. If you have a consistent standard that isn't your favourite, keep it consistent and don't change it purely out of personal preferences. Such efforts usually have very little benefit and the chance of introducing hard to find errors. Starting a new project is the right time to be selecting a standard. Any mixed-standards within a project (from new contributors failing to follow an old standard, or just a decision to switch) can leave things messy and confusing. The third thing you need is leadership. Pople like to talk about this stuff but it's not always the most productive discussion to be having. Do take some time to talk about it, but ultimately someone needs to put their foot down and make sure everyone adheres to the same standards. So my advice to you would be: have a discussion with him about his style, but ultimately come to a final decision on a singular style you can both live with. Learn his style and how to respect it for existing designs, but for all new designs use the agreed common style and hold each other to it. Don't be afraid to iterate on what that style might be and discuss it further, but make sure such changes are agreed and understood by all involved. 

Pragmatically, given that others have already left, management should be aware that they have problems and even if you don't say it, will either guess or attribute your departure to those problems. To answer the question, you are under no obligation or legal duty to provide a reason, so you're left with the questions of professionalism and social niceties. Again, to be pragmatic, if the goal is to minimise discussion on the subject, the best approach is not to bring attention to the fact that you don't want to talk about it. You'd be better off giving a reason that is hard to question and that people accept than making stand-offish statements, or being vague enough to keep them off your back up to the point you have no further obligation to interact with them (i.e. you've left). I'd either omit the last paragraph, or just use filler; there's plenty of advice elsewhere on what to say (and not to say) in a resignation letter, enough to distract from the fact that you haven't given a concrete reason. 

What you want with the company is a contractor relationship, not an employee one. Contractors are paid to do a job and have full leeway to do it how they want, to even sub-contract the task to others, while employees are paid to work, specifically for their time. You need to look at your contract and possibly talk to a solicitor who specialises in employment law about how much trouble you could be in and what can be done to mitigate it. They can also advise on negotiating a more contractor-based role. There is also a third option: you sell them the automation. As you're at a less-IT focused firm they probably do not have clauses that grant them ownership of the software you've created, so you may be able to sell it back to them, but it does leave you looking for new work. Again, talk to a lawyer about this. Ultimately, your job is at risk no matter what you do, but you do hold some cards here: you are competitively performing the role you're engaged in, something that others may not be able to do easily. If there is no competition (whether by the obscurity of the work or any other reasons), it's not unethical to make that kind of money for the work you're doing; supply and demand dictates that the work you're doing really is that valuable as they're willing to pay for it. However, there is always a latent risk that someone else may discover the potential for automation independently and undercut you. Remember that companies will automate workers out of jobs all the time: it's not unethical, it's just business, so the trick is to not get screwed in the process. The thing to remember is that, while you're currently enjoying the benefits of no-one else knowing about the situation, there are plenty of ways for that to change that require no action on your part. Whatever your choice, you do need to take action now, whether it's to guard against what happens if you're discovered, or potential loss of business down the road. As for the ethics, right now it sounds like knowingly or not you've put yourself in an unethical position. Some will argue that now you know, putting it right is enough. Others will dismiss any ignorance and insist that amends should be made for the entirety of the violation. The water could be really muddied if we try to throw in the ethics of mothers being made to work full-time to support their children against whatever wrongs you may have done and colour your actions as a lesser evil. You have to balance your principles with your own self-interest and the interests of your dependents. Your relationship with the company will be far less decided on ethics directly and instead on law: what has been agreed to and can be demonstrated and proven. Ethics affect your reputation and conscience. 

You might let this incident go, but you shouldn't feel in the wrong. You just have to pick your battles. Your mentality is absolutely correct. Whenever we revisit old code, if it is not easy to maintain we must first comprehend. Once that comprehension has been achieved, if we don't document or ease the route to that comprehension, we're wasting the time of further maintainers down the road much like the original programmer has kicked that cost down to you. Therefore its the duty of any programmer worth their salt to either document or improve code as you go (the latter is less risky when you have a robust and exhaustive test suite that ensures refactors and improvements don't break functionality). Leaving comments is not ideal, but it does leave a smell that the code needs some love in the future. Your team is also taking the correct approach to coding conventions. Conventions are not rules, so there must be some leeway to breaking them when it makes sense to do so. But they do represent an ideal that may not have always been achieved and it's more practical to enforce code conventions on new and updated code rather than exhaustively refactoring. In an ideal project, the code should never look like any specific individual wrote it. This enables all developers to check their ego at the door and treat the code as the team's code, worry about code quality rather than who wrote what. This brings us to your colleague. Their behaviour is not unusual as you might think as programmers do have a tendency to feel pride and ownership over their code (or look to blame others, sometimes, only to see themselves in the history) and can develop ego despite efforts to resist doing so. Others do not resist at all. "My code" is a bad attitude to have, all code should belong to the team. There is an inconsistency between his claim that he's coded things to be understandable by the team if it is in contravention of the team's coding guidelines. He makes it clear that it's coded to be understandable by him first, not the team, and he's upset that you've ruined his comprehension by having the audacity to change things (all good code should be written to be easy to maintain and delete, not be immortal). It gets worse when he claims that you can never understand his code and threatens to use his influence to put you out of your job. That alone is massively unprofessional, but in response to a little formatting is hugely blown out of proportion. You do need to pick your battles and I'd let the formatting side of things go. If you're new on the team and someone says that you're not meeting the code convention, all you can really do is defer to their experience and suggest you update the documentation if it has become misleading. If this causes friction, then you need to appeal to your boss as keeping one standard on paper and another in practice (especially at the behest of individual developers) is discordant and undermining. However, I'd be far more likely to focus on the threat levelled at you. If it was done verbally, you don't have good evidence at this point and you have no good option to act at this point, but I'd be very careful around him in future and try to get everything he says in writing, e.g. interact by email as much as possible. If he threatens you again in writing, you can start to talk to your boss about it. From the sounds of things, his ego is fragile enough that you're going to run into problems with him again, sooner or later. Where you might run into problems is that you don't know the lay of the land. If this guy really is as bad as he seems, it's possible that large swathes of code have been written by him and have become unmaintainable by anyone but him. As such, he's effectively made himself unfirable as the company can't afford to lose him, which has enabled his poor behaviour. This can be good in the short-medium term for job security, but long-term it's degenerate, counter-productive, and can ruin your reputation. Don't aspire to this. With that in mind, be careful you're not putting the company in a position to choose as they will put the interests of the business first. Treat your current job as a learning experience in dealing with difficult people. Spend time with your colleagues and work out how they deal with this guy and don't pass up the opportunity to learn other stuff from them too. In the meantime, keep an eye on other opportunities and be ready to land on your feet in case he does have the clout and does kick you out for some other perceived infraction.