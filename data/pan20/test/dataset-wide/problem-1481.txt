Working on VSDiagnostics, I implemented a tool that adds the default access modifiers to C# code. An example use would be starting with this: 

In this call, you should put spaces around your string literals and variables to make it easier to read: 

For what it's worth, if you want/need to use arrays, what you have is good, and likely as optimal as you will get both memory- and performance-wise. 

The full test suite can be found on GitHub here: Tests for SwitchDoesNotHandleAllEnumOptions. All comments are welcome, but I am especially interested in utilizing the Roslyn framework better if I am misusing it or not using any helpful features. 

What are those doing as local constants? Those should probably be fields. They aren't specific to a single method, the whole class uses them. 

When are you ever going to have to access that from outside the method? That should be . Some of your methods should probably be private as well. The access of fields, methods, etc. is very important to control to prevent outsiders from seeing what you are doing. When I create an instance of this class, which should I be able to see your background information and what your methods are all doing? 

Here, you input the values until the input equals , but you loop from through and set the values to . First off, this will crash when you run it because the value does not exist. Additionally, your logic is wrong as you do not want all the values of to be set to , just the input ones: 

I think this is pretty good code, but I'm not sure if the way I communicate with the view model from the view is OK, and if that can be cleaned up at all. This is the XAML: 

Notice how my version is easier to see what code is in what scope and executes when because you don't have to figure out what closing parenthesis and brace goes with which opening parenthesis and brace. 

It is a good idea to use consistent styles throughout your code. Right here, you use braces around a 1-line / block: 

In your method, you have three options, and you check two of them with a statement, and put the default outside the statement. statements have a built-in method for this situation - the case: 

I found I could remove the lines without effecting the display. In , you don't need to set . I do not know why you need to do that to remove the spacing in the class, but I was unable to get it working without it. I do not like that as it is not clear why you need to set the there, and there is probably a cleaner way to do it, but the usual trick of using a negative margin value isn't working, and neither did setting the to . I did not make any other changes; as I said above, your CSS is very clean and neat. 

Have you ever seen the abbreviation SRP? It stands for Single Responsibility Principle, and states that every unit should do only one thing. For example, a method should only do one thing, a class should only do one thing, and so on. Your method should start the program and only start the program. Reading the data, working with the data, outputting the data, and so on should all have their own methods that are responsible for, and only responsible for, that. Your method is good as it is only responsible for multiplying the two matrices. 

This statement can be confusing: . I would recommend not incrementing an item in a statement that also retrieves a value. 

You will probably be able to remove the type hints as well, and F# will still be able to figure out what types the parameters are. 

This way, the method always returns a string. Because this is just FizzBuzz, if you are going to create a second method for handling it at all, I would just print from within the function, then you do not need to worry about return type: 

Fifth, your elements should always have attributes to help people with disabilities and search engines. Sixth, you do not close elements with , you just leave them open. Seventh, you have this: 

To help ensure correctness, it is a good idea to always use braces around your one-line if and loop statements: 

I have an , and I need to know the index of a specific in the collection. However, when I hard-code the values like this: 

If the menu is open, we do not use the loop, but it still would work because the menu is still the first instance of with its specific in the list. 

Proper indentation will clearly show which lines have which scope, and consistent style will make your code easier to read. These also help with debugging. Variables Global variables seem handy, but they are wolves in sheep's clothing. Keep your variables to the tightest scope possible. Also, rather than a global variable, you may want to consider a property: 

Now, let's look at how many times you iterate the strings: The first string is iterated N * N times, and the second string is iterated N * N times, where N is the count of the characters in the string. This makes 2N^2 iterations. It would probably be much faster (depending on the string length) to split these strings into character arrays, sort each of the arrays, and do an iteration like this: 

Now, you can't accidentally break your code by typing instead of , and it is immediately clear that you want each flag to be its own bit. For more information, you can read this blog post by our own @nhgrif. 

I may be missing something here, but it looks like contains way too much information. This the where you populate it: 

Recently, I redesigned the Rubberduck settings pane. Here is the unit test settings view, which is posted in this question: 

This does not appear to be a true FizzBuzz program. A FizzBuzz program, according to the tag wiki, iterates through the numbers 1-100 and prints the values according to the rules you have. One thing you did correctly is this: 

The check in the is unneeded because you check it in the above. If it is false, your logic will never get past the first . 

This is essentially a built-in method that does exactly what my loop with the early-exit does. Next, while your indentation is pretty good, your statement is indented one space farther than it should be. Finally, your naming could be improved. What kind of data does contain? It should be named something like , or something descriptive. 

For your XAML, you do not need to put each property on its own individual line. I typically only break them up when they do not fit on my screen all at once, more like this 

The Import command. This command replaces the Project Explorer's Import command, only it allows you to select multiple files at once, and will import them all. Currently, it aborts if any of the selected files is invalid--should I make it so it imports all valid files and pops a message with a list of any invalid files (if there are any) instead? 

Pass this token to the method you wish to potentially cancel and keep a reference outside the method. Then, from the calling method you can check at periodic intervals and return, or if you wish to throw, you can call . To signal a cancellation, you call , which propagates through to the token and signals a cancellation request. You can also set it up to automatically cancel after a certain amount of time when you create the . 

I don't know PHP, so this won't be a comprehensive review. However, this statement really jumps out at me: 

Board.fs This type represents a board, and the only stateful member of this class is immutable, like . The second optional constructor is for ease of creating a board from a hard-coded list in C#; it may not remain in future versions. 

Twelve, you can use string interpolation, if you are using C# 6 (All credit to Jeroen Vannevel. This is signaled by placing a in front of the string, such as: 

VSDiagnostic's latest refactoring and code fix detects when a does not contain statements for each of the members and adds any missing members. So, for example, with the following and , VSDiagnostics will detect that some members are missing and add them as shown in the second : 

That is not a good comment. A comment should say why the code does something if it is not clear and the code should say what it does (if the code is unclear, you can use a comment, but this is also a signal you should write clearer code), this comment is just plain noise. If you are using the comment to remember what the code does, not just because some teacher/book said to, a comment here is perfectly fine: 

I do not like my XAML very much. The way I place the for the white pane over two rows, only to provide a margin to keep the copyright text out of it seems very hackish. Just as bad is the way I put the elements in a textbox (they are not allowed to be placed directly in a because it is not a ), with the XAML-drawn logo (courtesy of ThunderFrame) inside. Is there a cleaner way to do either of these? 

First, there is the obvious . That will remove any deliberately prefixed/suffixed spaces. The reason for that is I was getting the value wrong. When you get the value like this, it formats as . The correct way of getting the value (and comment) is: 

I recommend you always use braces - this applies to loops too. Fourth, you should use spaces around operators: 

isn't very descriptive. I have to read the test to figure out what it is actually testing. Later on when you make changes that make this test fail, how are you going to know what is actually failing without reading the code? I would give it a name so descriptive that I could tell what failed from the list of failed tests. 

See these files for the necessary files to set up the Command structure: $URL$ Now, the easy part is wiring this up to the UI; the tricky part might be understanding the wiring. So first, we need to let the UI know where to look for the data. We set the : 

Here is my Field Can Be Made Readonly analyzer and quick fix. I would appreciate tips on how to improve my code, and on missed test cases. First, the rules it works with: 

According to JSLint, you should use fourspace indentation, not two-space indentation ($URL$ I don't know the official standard on this, though. 

You have good indentation, but please use braces. Braces are never optional in my book; I've seen enough bugs/confusion (i.e. a new programmer doesn't understand that you can only have one statement without braces) around them. 

Now for an MVVM lesson. You almost never want to have code in your code-behind for the view. What you should do is set up a ViewModel. So you have your view : 

If you replace the hard-coded 's in the selection above with , you should be able to do away with the es entirely. 

You don't need to save that in a variable because you only use it once. sys.exit() If you define a main function as Caridorc suggests, you can just return from the function. Input 

You never return , so returning doesn't give you any meaningful information. I would make this a method and just . 

Dead code Dead code doesn't do anything except clutter up the code and confuse readers. Is this for debugging, or is it buggy code? Something else, maybe? Whatever it is, it should be removed once the code is working as expected. 

Again, the indentation is wild. Your indentation on the CSS is very good. However, as your webpage grows, you may find it easier to have the CSS in a different file than the HTML and link to it like this: 

After Ben Rudger's suggestion to use a , I realized that if the menu is closed, there is only one instance of a in with the matching . Because of this, all I have to do is iterate over until I find that matching value, choose that value, and exit the loop, so becomes this: 

As you suspected, this code is pretty bad. You are returning three different types of data here. Just, don't. 1) 

Now, you will not be allowed to modify the variable. You spread your statements over multiple lines too often; many of these would look better on one line, including these: