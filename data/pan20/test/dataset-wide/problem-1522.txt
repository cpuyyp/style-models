ordering the available routes: by the static parts (fix parameters not pattern elements ({})) and by the constraints (in a route i can set up constraint like the id onyle can be in the range of 0-5) [static length descending, constraints' numbers descending] iterating through the ordered rules collection and trying to find out which one will be the first mach by using regular expression (the Route contains it's pattern translated into regular expression), if a match found i try to fill the pattern with data; if everything is in place i've founded otherwise continuing the search. 

Yes, there is: create a stored procedure and UNION the result sets then sort the records and return them to PHP. 

The second one seams to me a better approach but you say that the ManID is a primary key, so why are you handling it as a non primary key and using the query result as a sequance? 

If this query performance slow then check the indexing on your server (EXPLAIN). The important thing is that with SQL server we have to work with small number of huge result sets instead of a lot of small subqueries. 

You should feel suspicious any time you're repeating the same code over and over. Consider refactoring into another function whenever that happens. Avoid using to exit your programs. It's like killing your program with a chainsaw. Use a or to end the code flow. It's good practice to wrap your main code in a function or guard. 

If you want, you can always refactor functions like so that you type less. Something that I see a lot of people do is: 

I have the following code on my server that takes a string and inserts newlines in such a way that the string is separated into lines, all of which are shorter than in characters. This ensures that the text, when printed, will fit within a certain width. 

Generally, this is a bad idea and goes against the principle of DRY. An alternative is using a Python dictionary/list to store the hangman states. For example: 

Not really, the code is still a little wet. Could use a little more DRY. It seems like code that is very similar to this is repeated a lot, but with slightly different parameterization. 

You can found a lot information about what is dependency injection and with the example above you can use any existing DI framework (or create your own) you only have to do is create an adapter (Adapter pattern) which is implementing the IDependencyResolver interface and working whith the current DI framework implementation. 

The construcotr may not contain any business logic/work process Your logic is not enough clear to me (hard coded WHERE clause first [id=2] then in getNumVisits() is just a simple select all query, etc.) No they should not be used in classes, force to inject them into the worker methods (ISession interface) Clarify your logic please Just read the common OO and SOLID principles, search for Martin Flowler's name 

You can derive from the model class without any problem your attributes will get applied in you view model also (not every but for exmple the validation attributes will). I also recmommend to have copy constructors becouse they can help you a lot. Beside this my opinion is that no need to worry about display/display format attributes in you model classes it doesn't feel an incorrect way and it helps to keep things clear if you have a lot of derived classes. 

Concatenating the address and postcode seems arbitrary to me, if you did the refactoring as mentioned above, you could shorten it to: 

Anything involving styles should probably be in an external CSS stylesheet. You can paste your HTML into the question and make a runnable snippet so that we can try out your application. 

This looks a little more readable. However, someone reading this for a production codebase would have to actually figure out what each expression did. Let's rename some variables and make this easier to digest. 

Prefixing with an underscore is generally a developer convention in Python indicating that the method is private. Given the context of your function, I don't think you intend for your code to be a module whose functions are imported and used elsewhere. Having the underscore prefix seems unnecessary to me. Too much abstraction? 

Consider using a style guideline like PEP8. This is more of a general suggestion and will make your future code much more readable and maintainable. Consider defining all your constants at the top of the file. This makes them easier to find. In other languages, you cannot use a variable before you define it, so this is a good habit to get used to as well. Python is a self-documenting language. Generally, in Python and other languages, comments should not be used to state the obvious. Use comments to explain algorithms or non-trivial aspects of the code. 

This is a really simple approach but it can be used to signal what happaned in the authentication process. Exit? What is the reason of the exists of an exit statement in a business layer class? Why is stopped the whole request process if the passwords not match? What happens if you want to test the password equality check method? If they are not equal the test stops? Direct $_SESSION write (super global) Of course writing into the $_SESSION array is not bad you can have your own session data handler in the background so everything can be done this way. But again: what happens if you want to test the functionality of writing a session data in your Auth class? You will test the session data saver also (your own or the one built into PHP)? I would wrap it into a class and pass an argument to the Auth class as i described above the IUserStore solution. HTTP stuff in an Auth class? Why is a header() call in your Auth class? Is it really neccessary or the redirection can be done depending on the result of the authentication process in your controller if you are following an MVC approach? 

Again, pick a more useful variable name. You want to be able to come back to this in 5 years and still understand what is going on. Don't repeat yourself. 

You may want to take a look at ES6 classes. This is entirely up to you, but some developers will do to cut down on the verbosity of the code. This allows you to type less and increase readability. Use of ES6 template literals and arrow functions may help shorten some of your code and increase readability. Instead of this: 

Be aware that if you are modifying the objects in the list, you should use the copy to make a deep copy of them if they are not primitives. Try to make your code less verbose. 

It seems like is checking to make sure only one field is non-zero. Here's a quick one-liner replacement. Put the statements outside this function. 

The following is a snippet from a script I have that fetches a list of objects representing requests to a server and graphs them using C3.js. I've only included the relevant code that parses the list of request objects for relevant data. 

For example an id is not always mandatory it can be optional or we could define a pattern like "veryimportanturl" but the framwork can handle like: controller => lottery, action => getthisweekwinningnumbers, id => 5 

Then you have to clear your SQL statements becouse you are running to much query against the database while you can fatch all data with only 2 query. SQL First the companions: 

Question #1 No. You do not need to ref the connection object in your methods' parameters - think object oriented way not class oriented. Question #2 The only way is to make this as a non static class. Avoid always statics when the current problem contains some kind of state management like a MySQL connection. Question #3 No you don't but you should implement the IDisposable interface and apply the correct disposable pattern. 

Constructor injection Use constructor injection becouse this is the best way to write well readable and testable code. If you don't need a Doctrine instance in your class then don't use it.