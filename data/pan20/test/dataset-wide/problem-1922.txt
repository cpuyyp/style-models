And this is the major selfish concern I have, how do I progress my career and professional development from this point? 

Why does it feel almost fraudulent that I'm given so much authority to direct literally millions of dollars of funding/day and to set the technical run way for the next decade at least? 

Background: I'm currently working as a technical consultant, I'm employed by a large consulting company but have been with the same client for just under 3 years. Currently I'm working on a project which I honestly find to be incredibly exciting, the company I'm consulting with is one of the biggest companies in Australia and Myself, and my team, have essentially been given unlimited license, and an incredibly hefty budget, to try and restructure technical integration so that it's not awful. So lots of no-regrets green fields opportunity to essentially use the latest/greatest tools but at proper enterprise scale. As far as I can tell this is a pretty good place to be. My situation: I'm by far the youngest person on my team with the least industry experience. I'm in my mid-low 20's, I only graduated from university 3 years ago and was immediately offered a job with my employer, spent 4 hours on site then was snatched away to the client I'm currently working with. My current role is officially a 'technology lead' but my team is entirely made up of 'technology leads' so the only benchmark I can draw is how I'm treated. Currently (and for pretty much the entire duration of this current project) I've been the person who everyone double checks decisions with, who is pulled into the architectural working groups whenever I'm free, I'm leading 3/4 major streams of work that we are doing, that is to say that I'm by far at least being treated as the most competent person in 3/4s of the deliveries we are committing to. Again, seems to be a pretty good situation, to the extent that I've worked 18 hour days and not even noticed because it's genuinely that exciting. (And I'm not the only person on my team who is so motivated), the only potentially worrying sign is that we have a crazy high rate of churn through the team, we've had a 120% churn in 7 months because people have either burned themselves out and scaled back their commitment to 0 or, for non-staff like myself, only two of us have been on the project since the start, the rest have been cycled off because they just weren't keeping up. So what's the problem? There are two issues which I'm completely at a loss for how to resolve them. 

When I was a consultant, I had a company issued phone for 5 years, and people were pretty considerate enough to not call after hours; as a perk, they also allowed us to make calls with a monthly ceiling 100-150 Euros. As for "security" reasons, unless you are a spy, or work for a top-secret government agency, or are a member of parliament, I cannot really get as that will fly as an excuse for issuing employees a mobile phone; it seems more an excuse to circumvent current trends on EC about employees not being obliged to keep up with work email outside work. As other comments also correctly point out, a locked down smart mobile phone with a company issued account can be pretty much abused as a tracking device especially while it is on and connected to the Internet in real time, and it will have your whereabouts in the history, and that also has to be correctly managed. Again, ask the advice of your local union representative; I suspect that you can pretty much say no to carry a company issued mobile phone outside work hours. Having said that, there are probably countries where you will have more legal backing for this; if in Germany, I do strongly stress talking with a union; in southern countries few will bat a lid. 

In my country, we would have a friendly chat with your employee and would ask him if he is ok, if something is troubling him. I would try to understand if this is a phase, or if it boils down to the ingrained culture of the individual. 

Having a job that pays above average is not necessarily bad. Wether it is a trap between you and more experience, is up to you to decide. I also worked a lot in places were I was the most technically experienced person - I still do, again. Having seniors around also does not mean they have the time or inclination to teach you. Likewise, being the most senior around and it also means you face hands on interesting projects and it is you that are going to important conferences. Besides the required self-learning, ask for: 

I've always been taught that he way people treat you is a mixture of social norms and how you behave yourself. I genuinely feel that if anyone else on my team had any idea how young I was they would immediately begin to question everything I asked them to do despite my track record being unblemished re: making ultimately the right decisions at any given time in this space. To provide some perspective, some of the junior developers were taking on to fill gaps are at least 10 years older than me and it just feels weird to be trying to give guidence to people who have been doing this sort of stuff for 4x longer than me. 

Whenever I ask people more senior that me for feedback I can't seem to probe anything useful out of them, usually I get a response of "all good, just keep doing what you're doing" even when I've formally booked in time for feedback, and at best I'll get small (at least in my opinion) bits of feedback like "I've noticed you've been arriving late to lots of meetings? Perhaps work on that. Actually, no I remember now, I sent you as my delegate to X working group and your doing Y workshops with so maybe you just need to make your calendar more public?" Given that my calendar is public I don't actually see any benefit to this sort of advice. I almost get the feeling that even if senior leaders had anything to provide re: feedback they might be hesitant because it would probably be related to high level management activities which they are intimate with and that's presumably not where I would currently be most valuable to them. The only way I'm keeping myself technically sharp and staying ahead of hard skills is by doing very similar stuff in my own time as a hobby, but I feel that the difference between learning technical skills and developing an ability to create meaningful business results with those technical capabilities are two very very different things and it not exactly easy to try and help myself with the business results thing. Any advice on how to overcome every now and then feeling vastly overwhelmed by the scale of my responsibilities compared to where people my age usually are, or on how to tackle the "get real feedback that actually helps me develop" problem would be much appreciated. clarifications I wasn't particularly clear about what my job actually is, technically I'm billed out as a 'senior management consultant' to a company that charges me internally as a 'technical team lead', to a project where I'm officiallly a business analyst for some reason. In reality the role I'm on isn't a programming/developer role so much as it's an integration architecture role. The purpose of this project is to try and simplify integration with legacy systems and I'm stunned at how simple it needs to be for java/node devs to not complain about doing it, and conversely I'm regularly surprised by how incredibly unaware our backed teams are that the world has changed so, yes they will need to expose IMS endpoints to an entire subnet because we could have an interface sitting on any of hundreds of servers so they will need not implement security controls a little higher up the stack than firewall burns. I'd say that my teams goal is more than just building a platform and writing some code. I had a 95% working prototype knocked up in 2 dad when we started this thing. Really what we are trying to do is convince a whole lot of 'new-wave latest tech' developers that there are technical constraints in the real world and sometimes you need to actually get on a whiteboard and do some design before you just start pulling node packages that you think will pretty much build this stuff fr you, and at the same time were trying to bring a lot of our legacy providers (internal and external) up to the point where we can have conversations with them where the are not going to dig their heals in because we need to bump tps by 5req/s because we know what they are running despite their attempts to obfuscate it and we know that they can handle the load. This conveniently brings me to my second clarification about the "18 hour day" thing. Those weren't 18 hours grinding out code, they were 18 hours of workshops and meetings with the occasional break to go and build components to get us closer to building a universal integration platform to replace the current legacy ESBs (yes, that's a plural) 

The employer has a mechanism that prevents competitors from poaching employees, it is called paying a good salary. Your cannot and should not be coerced into sign something that will prevent you from working on your field of choice, much less as a low level employee. As a low level employee, I would strike down and not accept a non-compete clause from any contract presented to me. Furthermore, the law already has by default provision on places that will punish me from accepting work from direct competitors while I work for them. 

To say it again. Establish your boundaries. You are selling your time and attention when working, but the company do no own neither you nor your soul. Grow some thick skin if you have to. As others said, only an handful people here have my mobile number. My direct manager and a coworker in the same level as me who I trust; and I give them my personal phone on the condition they wont pass it to anyone else. About company phones, I personally would not ask for one assigned for myself. While it allows you to screen calls, you never know who is calling and in some cultures it gives an entitlement to some to call you. What I would propose to management is a department cellular and a fixed sum paid on rotation for a few IT guys being on-call. Whoever has the phone has to take the calls; obviously someone in holidays wont take the calls. It would not hurt you also growing some attitude; when people come searching for me or others at lunchtime and it is clearly not an urgency, I remember them it is lunchtime. I assume by your posts you should be young; do not be afraid of asserting yourself. People will respect more you for that. 

I actually do this several times a day. We have QA folks, management, junior programmers, and none of them realize the value of a distraction-free work environment for deep thinking tasks such as refactoring or systems architecture. But they respect that my tasks are different from their tasks, and a simple statement that I cannot concentrate with the conversation nearby usually works. 

When you are eating your lunch, are you actually not working? I'm a software developer, not a designer, so our situations may be different. When I'm eating, I am still working: solving (thinking about) problems, anticipating unexpected workflows and attacks, maybe even actively reading an article related to my position on a (e-ink) Nook. I'm not suggesting that you should include the time that you are in the shower at home as part of your 8 hours, even if you are 'working' in the sense that I describe above (as I do too). However, if you are physically in the building, and available for consultation by your coworkers, and occupied mentally by your work, then you are working even if your fingers are on the fork and not on the keyboard. Our profession is not a binary [working |not-working] profession, like folding shirts or sweeping floors. Our work does not stop when we leave our chair. The last time one of our devs rear-ended another vehicle he was not abash about admitting that his mind was on his work, not on the road. 

I'm a little late to this answer, but there is a side that I don't see addressed: maintenance. Even if you can reused the same ideas / algorithms (which take more time to conjure than it takes to bang out the code), I suggest billing the full time for creating them to both clients as that code will diverge and any thought process that went into creating it the first time will be re-evaluated the next time you compile that class. This is not "ripping off" the customer, it is accepted practice in every field. Your building contractor pays less for the wood than you do because he's buying wood for you and 20 other clients every year. Likewise, your raw material (your brain) is being used in bulk for multiple clients as well and that is your advantage to them, not from them. That is why they come to you!