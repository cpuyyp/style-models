The code looks mostly fine to me. If you feel that the code isn't as clean as it should be, or just want it to pass the metric, what you could do is split it into functions: 

about the bmi strings, should be changed so that your calculator is not actually responsible for printing the outputs. If you make 1 variable setting that defines the strings, 1 function that takes height and weight and returns BMI, 1 function that takes a BMI and returns the string to display and 1 function that reads and writes html elements, you've got your code divided into nice organized chunks. Something like , , , would work. It would make your main function look like this: 

It handles getting the first picked card and the second picked card, then passes them along to checking for a match. Let's go look at the function. 

This sort of thing could REALLY use some documentation. You wanted harsh and constructive, and that's what you're gonna get: (some of the critisms may not apply because you're in school) 

That'd be easy to understand. But code can't NOT do something (confusing sentence). Maybe the comment should get reversed. 

Each box is on a triangular grid... but actually, what is described by the coordinate system is a grid like this: 

Looks like you're taking a zero-padded day of month here... and then stripping off the leading zero. You should use , it will give you day of month without a leading zero. Aside from that... you shouldn't use multiple instances of . What if the time changes between the two lines of code? You might get things like 31 February. 

They go at the top of the function where possible. Before any variable declarations. No need to reserve memory for something that you're not going to use. Also, it allows you to first perform checks, then have ALL the code below assume sane values. 

You have to break it up into multiple lines because you don't want to pull the vector out of the list. This makes for a lengthy line... 

These local stores don't add any relevant information and should just be written directly to 's variables. 

A minor bug: You get an for an empty list in . You don't have a comment stating you need to input a list containing at least something. Consider returning and adding a comment. 

Wow, look how short it is! But it's 3 numbers today, it's 10 tomorrow. As an alternative, how about an array? 

Once again, spot duplication between A and B - they're doing the exact same at the end of the case. I am assuming that A and B cannot go into the negatives. Since has an early return, A and B are (individually) either 2, 1, or 0. Thus we can see that if A is 2, we add A. If A is 1, we add A. If A is 0, we don't add anything. Same goes for B. So we can just do in all three cases. 

First thing I spot here is the duplication. Cases 1 through 10 are all "print a message, ". You could have built a of Strings as well using format strings. will take a format string, and then any values to put into this string. So will give "Hello, Bob". Like that, you could have simplified the creation and printing of the Strings by storing them in a list beforehand. The whole use of the switch would fall away in that case. 

You'd be better off first explicitly handling the case where the element was not found, as it reduces indentation required. 

And thus I'd suggest that instead of requesting , you do . Take a look at the URL in your webbrowser - this is . 

This is not what I had in mind. I had in mind an object. Something like an "Associative array", perhaps (array with string keys). What you have right now is condensed arguments to , . That's even less readable than , even if it condenses the argument list. 

Said this in chat already, but succeeds even although it is not a valid email address. You should require at least 1 character in the local part and 1 character in the domain. 

That's a redundant set, you don't need to set to null if you're going to overwrite it with a new ArrayList just afterwards. So remove the useless if-statement. In the for loop, you retrieve the name with , but if the condition in the for loop is true, you to . Just add to the , as you've already retrieved it. The documentation for says this: 

Why did you include when it doesn't seem to be doing anything special? To me, it seems you've just used as a replacement for checks. Which is what it is intended for, but it doesn't give you any real benefits. I'd just do away with the . As for naming, and and is how you'd do it. This to prevent word soup like . 

You did it correctly in the , but you should use in as well. Even although it is a private class. Even although it is final. Even although there are no other setters for lock. It is missing and it should be added. 

Because all it serves as is a local store to help "explain" the code, but is not a very helpful descriptor. 

Think about how Dominoes and other pizza ordering places work. You can pick a size, a bunch of toppings, and this "recipe" is sent to the Pizzeria. You personally don't have to know all the details to get delicious pizza. I'd even say that in the pseudo code example, the bake time and temperature should be based on dough type and size (pizza business logic!) and not something the customer provides. How is a customer supposed to know how long they want their pizza baked? They just want a "regular dough medium sized meat lovers pizza". Anyway, I think I've rambled on enough about how I think you could model the Builder pattern better with pizza. Let's take a look at the code. 

What's gonna be? The author says it's not going to be . In that case, the options we've got left are these: 

I made a mistake when I told you to use an abstract factory (ehehehe~). What I really meant was a factory. The difference is that a normal factory doesn't have an abstract superclass and that it just creates objects based on the provided parameters. Basically, and disappear. stays. Additionally... When looking at new critter types, I realize I'm hopelessly uneducated about marine life. You'll have to add the new class and the corresponding mapping to , though. I wish there was a way to fix this... (There are, but they're evil, IMHO. I envision stuff like making a map of ...) 

That's a spinloop. If there's no mail left, check if there's more mail. And you have 100 threads spinlooping. Poor server. 

Same thing here, no unit. Actually, if you combine the two, they should probably be "current" and "max" fuel. Keep your terms related. And I'd sort them around so that the "current fuel" definition comes before the "max fuel" function definition. That way it reads easier. 

You should set to so you can't remove it twice (if that matters), plus it allows the GC to clean up the polyline. 

I dunno what you're doing here, but from what I can see, you're calling or . Naturally, this produces or . Then you're comparing it to . Well, if is below 1 but not below 0, then you can just remove the check, as well as the for loop, since doesn't change in the for loop! If is below 0, then the check is not needed. Thus, (please check if my syntax is correct) 

If we just had to add a set for this key, make a new cached empty set... and add the key to the priority queue. Pretty clear. 

is longer than the other variable names, so you should add more padding to make the rest match. This is also exactly why I hate this padding style. Try and see if you can configure either your editor or some beautifier to handle the padding automatically, because padding by hand eats valuable time. 

It's just a check for whether all the cards are matched. (There's a sneaky shortcut here; with I check whether the game has been initialized yet.) Okay, what about then? That one is a bit bigger. 

Length returned is 2. You have a bug regarding the handling of escape characters; that is, you do not stop escaping if the next character is an invalid character. I don't feel comfortable trying to refactor buggy code, so I'll have to leave my answer at this. 

As this is accessed by multiple threads, it should be . That said, though, your multithreading is really flawed, all of the threads just deadlock and 1 is allowed to do all the work. First, multiple worker threads only work if you've got work for several threads to do. In your case, you'd be better off if you could somehow offset each thread by a value (if we treat passwords as numbers in base-(your character set size) then you could say thread 1 starts at 0000, thread 2 starts at 0001, thread 3 starts at 0002...) and then advance by threadcount steps. So the threads interleave, rather than doing the same work: Thread 1 does cases 1, 5, 9, 13... Thread 2 does cases 2, 6, 10, 14... Thread 3 does cases 3, 7, 11, 15... Thread 4 does cases 4, 8, 12, 16... Like that, you can run threads in parallel without them doing the same work over and over and over. 

No, you return the items stored within. Not the nodes. You don't fulfill the assignment as stated. Additionally, you return multiple nodes, so name the method . Lastly, no need for a space in an empty set of parentheses. 

Nice. It just got wondrously clean. Sadly, computers are grumpy things that want everything specified, so we'll have to explain our human-readable English to them. 

And you miss the important stuff because you miss the last bit of the comment due to unfortunate sentence endings. Don't indent your comments, and if you have a long comment put it on a separate line. I recommend putting it before the code, that's where javadoc comment blocks go anyway. 

It's your choice whether you put or in the if statement for the checks - pick one that makes the most semantic sense. 

I'm fairly sure C++ also have IDE's with auto-formatting support. Use them to streamline your indentation. 

contains the items. So, it's not , it's . By going through your variables and giving them more detailed names, it'll be easier to understand what your code does - both for yourself and for anyone else who has to read it. 

Second, you only use in a constant expression . Consider replacing this with the raw constant instead. Third, you always loop at least once. So replace your while loop with a do-while loop. 

Should rename to . ... And even better would be to rename it to something that explains what it is. Right now I have no idea what a is. 

You have a lot of those in your function. How about storing it in a temporary variable to increase readability? 

This is expensive. Specifically, string construction that is done over and over via creating longer and longer strings. You're basically building the same string over and over and over. And strings are basically arrays of char, so that's a lot of copying. And there's nothing you can do about it because of this rule: 

does not throw , so you can move this statement out of the try-catch. If it DID throw exceptions and you caught them, 

The "old" method doesn't support a length 0 or 1. It'll always return at least 2 elements, so maybe you should add a special case for that? You ought to write out your method names in full - is pretty unclear in meaning, unless you're generating lies. I also notice that... 

What's up with all the ? I have a feeling is very expensive. So let's do that only once. No matter what you do, you always need and . You only need once you reach the for loop, so I've moved the declaration near the for loop.