From my current knowledge and experience, it is not possible to insert NULL into a DATE type, so what would be the point in declaring NOT NULL at table creation? I see this quite often throughout many SQL queries online, including my own, and wondered if there is another reason to do it? 

I decided to change to LK_ + original table + column as it allows easier navigation when browsing all tables. 

This is the desired result above, However if I was to insert rows into actor_nicknames, we would actually get actors_id = 1,2,3,4, which is useless to us in the intersection table as we need these rows grouped by the same ID. Thanks in advance. 

I managed to find a workaround for this but I am not very happy about it. I installed my previuos setup which was EasyPHP and copied my old MySQL *data* dir into the EasyPHP *MySQL* data directory. This time around the database was able to read the .ibd / .frm files correctly.(even though these files did not change at all) I then used phpMyAdmin to export the database(this time around all tables/data was stored in the sql file) I then disabled EasyPHP enviroment and started up my new enviroment and used phpMyAdmin->import with the new sql file which loaded the data correctly. Overall I think its pretty poor that MySQL cant simply output some type of notice stating that the .ini enviroment variables are not set corresponding to the .ibd / .frm files rather than just output incorrect information and leave the user in the dark with all sorts of angles to think about. After googling around it seems many people seem to believe that their data is corrupt when that's really not the case. 

You may run packages created with "any" earlier version of SSMS using dtexec, they seem to maintain backward compatibility. $URL$ Check out the "Other versions" widget ! 

Definitely, in a Relational Data Management System, you SHOULD use relationships between your entities. A simple example query where you will be stuck by using the first option : 

you could add an empty field at the end of each line, and remove the last column of your table. Otherwise check for all the line terminations (\r\n vs. \n), or the presence of \n in your contents... It should work at the end, good luck ! 

Edit : And if you want to include the UNION and filter on userId, instead include them in an inline table user defined function with a @UserId parameter. Second, consider (cautiously) using something like SET TRANSACTION ISOLATION LEVEL SNAPSHOT on your session in order to avoid discrepancies between the COUNT and the SELECT statements. However you could use the highest PhotoId at a given moment to prevent selecting more recent photos. Third, you could use a lazy loading mechanism on your front end, loading posts progressively as the users scroll down the page, and avoid the (somehow outdated) paging system. 

What I'm doing here is directly selecting from partition tables, which are partitioned based on the ID of a related table (so, the first part selects from , and that is all the rows that have a relationship to another table's row with ID 1, and so on). This works very well, and is fast (and avoids having to get the query planner to figure out which partition it should be looking at). The problem is, to process it (using python pandas library), I need it in this form: 

is it really ok to have thousands of partition tables, given very simple equality constraints (I intend to get rid of the timestamp check, so would only be based on fk id)? how would I best go about moving data from the master table to the relevant child tables? is this a sensible optimisation to make in the first place? 

Besides this caveat being a bit vague "perhaps a hundred" and "not many thousands" - it seems like maybe my partitioning method is not ideal anyway since we may have thousands of rows in the foreign-keyed table, and hence many thousands of partitions (but then, how long does it really take to scan thousands of equality conditions?). So it's starting to feel a little bit crazy, and I just wanted to sanity check. The questions, then: 

Here I have highlighted three problems which can occur, how can we enforce integrity here. PS Is there a name for what I have described? I assume in maths there are some terms for this, I did some research around ordinal numbers but it doesn't fit exactly into this. Describing this as just a set wouldn't allow for the issues I raised to be assumed problematic. Thanks 

If a Team must have a minimum of 11 FootballPlayers, how can we enforce this within the database design? Could I use Triggers? Perhaps One To Many is wrong? ... 

I must enforce uniqueness within my table, But I cannot seem to find anywhere online(mysql manual,forums,stack overflow) talk about two unique constraints within one table. Why you might ask I need two? example 

I am trying to upload a backup sql file through phpMyAdmin. I create the empty db with the same db name as in my import file in phpMyAdmin then use the import function selected from within this empty db. I get the following error message. 

Is there a naming convention for lookup tables? I cannot see any declaration by oracle or anything consistent on google. However I assume some of you professional DBAs follow a convention? Perhaps there is a convention which occurs the most when you are called to edit a project you didn't author? example table metals 

It would be a great design approach to put the clustered index on your FK if you will be fetching all the lines (I mean all the data of the line) for a given FK, or making joins based on that key : as they're stored physically in this order, they will come up much more quickly. Otherwise you could use a non-clustered index (slower fetching of the actual rows' data). You may encounter a slower insert performance though. Values can be multiple in a CI, they are also very efficient to quickly fetch a single, uniquely identified, row's data (Is it the reason why MS puts the clustered index on the PK by default ?). I would recommend to make some tests using both approaches with a subset of your data, and check the estimated execution plans using CTRL+L, then include the EP via CTRL+M before you execute the test statement. This way you will see wich indexes are being used and how the engine modifies its strategy depending on what you are querying. I generally avoid includig dates for unicity beacause on multiple insert statements the date for all inserted records is the same... I prefer using the default value of the uniqueidentifier type : myCol uniqueidentifier NOT NULL DEFAULT(NEWID()) which ensures uniqueness among all. If you need all the columns' data of several rows with the same foreign key I would use the clustered index on non unique values. You may however check the execution plans. 

Inside the import file each CREATE TABLE statement is suffixed by IF NOT EXISTS, so why is this being reported as an error? I have tried to take out the table reported from the sql file, but then the next table just throws up the error, and the next etc until we have a sql import with no tables left. I am using Windows XP with MySQL 5.5.37-win32, these versions could be different from the versions used when creating the backup, would this matter? Thanks in advance. Edit : Added SQL code. This is just a sample, the code is created by phpMyAdmin's export function 

pid and car must be unique and appear only once. pid and serial must be unique and appear only once. At first I thought to add a constraint UNIQUE (pid,car,color), but with this constraint we could still enter false data as in the example, 

We have a table which has a column defined for set(to group rows) and a column defined for hierarchy(order position), how do we enforce hierarchy ordering position integrity within each set? An example of what I mean. 

I have a table images, which I use to store a file name, file hash and date created. I also need the width, height and watermark overlay of each image, but only on very small occasions do I need to access/update this data, should I create another table and setup a foreign key relation to hold just these values, and when I do need this data, use a join? Should I just store the width, height and watermark overlay values inside the images table? Thanks