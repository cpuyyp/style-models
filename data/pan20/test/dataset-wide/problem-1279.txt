I have started learning Clojure so please share whether there is some easier way to read lines or anything else that can be improved. 

Similarly move and inside . Remember encapsulation. Ball's location remains inside Ball. You have this in the method of 

I am going on with refactoring my code base while migrating from Python 2 to Python 3. I am using generators to make reusable components this time as I am more comfortable with them this time then last time. But there are times when I am stuck at their use. Like below example. These two are essentially same with one infinitely generating and other with a limit. Is there a way to make these as one function? Normally an extra optional parameter as limit will do the trick but with generators I am not sure how to use them. Is there some way to do that? 

The second one is more efficient. Simply because in the first one you are calculating the times but in the second you are calculating it times. Also it can be made more readable and efficient just by using this. It eliminates which you aren't using anywhere. Readability doesn't need explaining. 

When you create the methods inside the constructor then those methods are duplicated in memory for every object created. When you use the prototype those methods only need to be defined once. If you want to write code that feels like a class then use an actual class. (JS has those now). Aside from that, don't store you data in the function that creates the list. Pass the data into the constructor or create method. 

These one-liner functions are a great opportunity to use the more concise arrow functions. so this.. 

Here's a function I wrote to include jQuery and stuff in userscripts, feel free to take it or parts of it. 

Edit: In this case, if your IDs are integers, you don't need to escape them or use prepared statements. Just check if they are integers first with . If you know they're integers then you know they're safe. Generally though, prepared statements are the way to go. 

Now, if you really wanna do complicated math stuff functionally, I suggest making your own library, that way you get the benefit of learning how to do it with "vanilla" JS and you get to use the functional approach at the same time. That's what I'm doing. 

Please, let me know if I can improve the question in any way. I thought about posting this on other StackExchange sites (SO, gis), but I decided to post it here because it involves a larger code review; I'll also appreciate if someone explains that I should do otherwise. 

After getting the data from the toggled check box, I can't reach the layer in order to call the method that would filter it. How to hide/remove layer0 and layer1 (labels and check boxes) from the layers list? More generally, how to format this list? After selection and filtering, how to give different colors to each filtered polyline? 

Check boxes These check boxes are built with all possible values, of a given attribute (), within one of the layers (MidScale/Water Mains - Block View -- it is the last one inside layer1), so they should filter that layer. Here is how those values are fetched. 

This function is called when an event is fired up, which connection was defined on a callback function. How to reach the target layer from here is kind of obscure to me... Example If a user checks the box with the number , the result should look like this (taken from ArcGIS webmap viewer). 

Now you can prevent the user from manually setting by marking it as private, thus, forcing the input to be validated by your setter. 

I personally would have saved it as a simple timestamp rather than a date, whether or not that's actually a better idea is debatable, but a timestamp requires half as much space as a datetime and is, imo, much easier to use. On the client side you can get the user's UTC offset with a simple which will return the difference between the user's time and UTC in minutes (multiply by 60 to get seconds). Then you can use PHP's function to get the current timestamp and subtract the user's offset. When you need to display it as a human readable date, PHP's can take a timestamp as a second parameter to display a specific time. Timestamps are just a lower level, more efficient way to handle time differences. 

There's really no purpose in having 3 banner images if you're going to add and remove the image source from each one. You might as well just have a single image and change the source of it on each iteration. When you do that trick with setTimeout, where your timeout is the index of the array multiplied by an offset, you are effectively creating a new thread for every iteration, which can be memory intensive when you have a lot of images. A better approach would be to use recursion. Consider this function. 

Background I am working on a WebGIS application using JavaScript and ArcGIS JS API. I am new with js, so please bear with me. While learning and developing with js, I am trying to follow some rules, such as Asynchronous Module Definition (which ArcGIS JS API encourages), Revealing Module Pattern, and the Standard Style. Certainly, I still fail at following them correctly. This code is built on top of this responsive template: github.com/Esri/bootstrap-map-js. Objective This app consumes some ArcGIS REST services (MapServer). Assume that I don't have any control over them (I have access to server, but that is another thing that I know nothing about). One of the functionalities is to filter a certain layer (Feature Layer with Polyline geometry), according to a selection that the user does using check boxes. When a check box is checked, only some parts of the layer should be visible. If multiple checks are done, the visible parts of the layer must have different colors. Code I set up an example of this application using one of the example ArcGIS services. It is available in this repo: $URL$ (sorry, I failed at making a jsfiddle out of it) Below I make a brief description of the relevant parts of the code (file app/js/map.js) Add the layer When the map is added, all layers on the service are automatically loaded and placed in a tree with checkboxes.