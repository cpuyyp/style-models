The class that represents a node should be called and not , this class could live in the package with no public access the method could be replace by for more flexibility 

One more thing, is it possible to have duplicated vertices on the same graph? I dont think so, and hence should return a of vertices rather than a 

Use StringBuilder instead of String when you need to append frequently. Every time you do on a , it creates a new String because strings are immutable in Java, consider using instead. 

. note that your connection is never closed, and thats a memory leak, you could make your class and close the connection there. 

And it would be great if you just expose the interface and keep concrete implementation with package access, a good API is a compact one. And for that you can have a to get the right implementation 

And overriding equals requires .And your equals have to satisfy the following properties, your equals has to be: 

You mentioned OOP, and thats great, and OOP is all about code reusability and extensibility,and this code is a good example of a Candy Machine Interface. And that is, users of this class might do mistakes while using it. users could call the static the method before calling instance method and this would lead to wrong routes because weights weren't computed properly. You should try your best to force right behavior. 

And so on for different shapes, so there is no need for if-statements. Btw: how come you representing a in a class called ?? Single responsibility principle is being violated as well, where your class represents a Box Object and persists it to a database, these are two different responsibilities. You should rather have Data Access Layer to deal with a very like a database. In regards to SQL generation you can those as well using interfaces, and that is, given a shape get its sql code. 

Quick question, have you tried testing your code? Trying doing so, and you will find the leaks in your code. 

has a high dependency on , why not to inject it and make the code flexible (easier to test and change). 

I don't like the idea of using exceptions to handle program's state, it assumes that the user of the class is always aware of them. I would simply use a monadic type like 

should never be , I know a lot of db clients do it, but it is really bad, I need to know if things were saved successfully, wishful programming is bad, you could return the objects after saving them 

There is no much code to review here, but I spotted that is not . You can use an AtomicInteger instead. 

To insure backward compatibility, decided to allow you to use Threads in your code. However, I blame your IDE for not displaying any massive warnings when you wrote this code because as you said, you aren't an experienced C# programmer. The reason why I saying that is because use in your code. is hard for people like me and you that aren't experts in .If you wanna do me a favour, go to your editor and do and delete all its occurrences, it's only acceptable to see the term in your code if you doing , otherwise it's wrong. So what we do, we use Tasks. In your code you can easily replace by a 

Avoid magic numbers like 4,15,52 in your code and extract them into constants and give them some useful names. implement and methods and avoid reference equality. 

you can store these information in a configuration file where you can read these values from. Use a framework instead of and . The application shouldn't terminate if you if the registration fails. 

However, this relies on the function, and you need to make sure you get the right.So you have to override the otherwise you will be calling 

Generics would be quite useful here, because your only works with , so your classes could be reworked to take type parameters 

No, this method cannot be improved because it is completely wrong I am afraid. Fact: Sessions are not thread safe, don't try make them thread safe, because you don't know how to do it and there are reasons why they are not thread safe.You can simply return the Session from the factory like this 

It should be clear that the doesn't have the name of the project, so instead of the class you can call this class instead. It's all about separation of concerns, you should have seperate class that does the Chess logic and one that does the and use composition to use its features 

Making it abstract will reflect the actual abstraction of this entity. One more thing, try to avoid as much as you can, it is just awful. You can use time instead, or the new java date api if you using Java 8. 

Please note, that CircularLL is not the best name for this class, I would call it instead. One more thing, initialising instance variables to is useless because it's done by default. 

You using for everything and hence no type checking. You shouldn't be able to compare oranges with apples, and the solution is simply to use generics. One more thing your code doesn't is convenience, what if I want to check if this value is equal to a value that a I can get from a method or from a different object without doing eager execution, and the solution is using lambdas. 

Never write code in your files, it is a horrible idea. Use instead. It's much easier to validate your model in the code and not within scriptlets. Use for client side validation 

What you trying to do here? Forcing the code to get a connection?You can't do that. If you fail to open a connection first time, I doubt you will get it in 2 nanoseconds time. If you don't want to create too many instances, then you should let your container manage it for you. You don't have an IoC container? Then get a Session object every time you need it and don't forget to close it when you are done 

and by doing so your types will be responsible for converting to in their own ways. The code smell in your code is adding to the factory. are factories but in a way, so instead of returning converted object immediately, I will return you a function that knows how to convert to objects. 

You will get , but how would you know if its -999.00 indeed or it wasn't a valid conversion. Instead you make your functions return value type instead 

A user of this class shouldn't be able to set the count of elements in the queue to the value they want (-1 for instance), can you imagine a queue that is in debt? and therefore should be . 

Your code will be easily broken if someone adds a node to the , and your code should be as flexible as possible. Never do such an assumption (It's gonna be the first node) Your method is blocking, consider making it . 

The problem with your code is it hard to get right and validate. Is it allowed to send an email with a ? It shouldn't, and hence you need to length of the array. 

I wouldn't instantiate connections that way, use Datasources instead. Database isn't a good name for such a utility class, would be better perhaps. 

any language you use, you have to follow its naming conventions. Use Pascal casing for classes in Java 

Note that here I am using instead of string concatenation, YOU SHOULD always use command parameters to avoid . Moreover, the proper way for closing a connection is not calling explicitly nor calling it in a , the proper way is using statement. And as mentioned in previous answers your queries can be reworked to stored procedures that accepts parameters from your application, and there is a lot of benefits from doing that. 

But the most important thing is, forget about using a for that. Open a new connection and close it afterwards, and will take care of connection pooling,you might need to add to your . 

Especially in loops where the boundaries are hard to understand, don't assume the code maintainer is a professional chess player. 

The best way to deal with compulsory and optional parameters is using the .The problem with overloaded functions is that they are confusing and user of the class or even you can make mistakes while calling this method. Instead of that you can have builder that allows to construct fluently. 

Use English for your variable names, request routes, and Exception messages. Imagine a remote developer joins your company (very common these days), they wouldn't be able to understand the stack traces. validate your parameters before creating unnecessary objects 

Catching Exception in general is usually a bad idea, you should be more specific so you don't end up handling exception that you didn't want to handle. 

If you want to Sleep never use , this is quite expensive and unnecessary, use instead. You really need to rewrite your code and use the TPL library instead of . Give it a go, and post your code again to be reviewed but with this time 

Because of the short circuit here the function will not be called if value is , which is not the case if you pass the object directly. 

Such default values don't really make sense if the value is not valid. Imagine if you call the function like this 

You don't need to load the driver every time you instantiate the class, you could load it once using a static block