5) Try to organise code in general: - Defined functions are in random order. Use alphabetic. It will be easier to find and edit each. - Constants are everywhere. Constants block are in non-clear order. And they are somewhat mixed with code. Define them at the place they are needed if possible. If used in many situations, place somewhere at the beginning or use separate module just for the constants and functions. Edit: If you don’t want to introduce classes you should probably stick with elif statements. You can try to modify global variables, but very carefully since they can mess code logic easily and usually this a bad practice to use many global variables: 

The extra newlines and multiple spaces shouldn't matter in HTML since they're all trimmed to one space by the renderer (except defined otherwise, e.g. in or ). 

This all works as expected but when many lines are printed at once the parser lags behind. I think this is because I run sed once for every single line. Is there a better solution? 

I don't like the bi-directional dependency. A Pizza shouldn't depend on the builder. A Builder is usually rather used to create complex objects. By creating a bi-directional dependency you are not splitting that complexity but increasing it. You rather want the Builder depend on the pizza, but not the other way around. You have double state both in Pizza and the Builder. Decide where you want to have that state and put it there only. Passing values by accessing fields directly is considered a bad habit, even if it's about an inner class. Use JavaDoc, it's helpful. I cannot tell what the classes in your code are supposed to do or how they work unless I actually read the whole code. This means a hard time for everybody who wants to use or modify it. What method or constructor am I supposed to create a pizza? Builder has a public static method and a two constructors. EDIT: sorry, one constructor. If the sizes of your pizzas are constrained, use an enum and expect values from that enum instead of a number. Order your methods following a pattern. I'd suggest Google's coding style. I was confused seeing the constructors randomly placed between the other methods. All the printing is probably unique to this use case. In any serious program you wouldn't use printing to screen. In those serious cases you'd rather want to generate strings or lists of strings instead of printing anything - or at least have two methods for that. 

Naming things Why you have all caps function name? Why you have variable with capital letter in ? At first I thought it is template parameter i miss. Use auto more often: 

Also move this into the .h file. It is so short. destructor Your destructor is empty - remove it completely. default constructor in ListNode default constructor in ListNode is empty. You can not remove it, because you have one more constructor. However if you have C++11, you can do: 

3) and looks a bit painful. You should try to use dictionaries more often for creating special options and then just iterate over them. Also I'd create list of strings and just use it to create dictionary 

You can also use dictionary to prepare questions and then simply ask them in some order (random in this case): 

2) Slightly different version of was moved from main module to FieldFunctions.py Conclusion: I'm still opened to suggestions though it seems that code is quite optimized now. So probably next post will be about snake game clone, which I wrote 2 times faster because used this game as a template))) 

What is the doing? Is this because of incomplete . comment - remove , use or . helps the optimizer a lot to speed up the code, when class is known. - I think you need to check somehow for it. Probably in . Fraction.cpp prefer initialize list: 

I do not see much thing to review, except . Code style... ...is OK. I will suggest to be no more than 10-15 lines, unless you doing something that can not be separated, such preparing parameters for SQL database or things like this. issue You should avoid at all costs. Remember in there are operators such , here is an example: 

4) Multiple if statements are bad, since they all will be processed one after another every time code is executed. Use or better: dictionaries. Again: 

On the other hand with classes you can edit class parameters anywhere in the code as well as obtain parameter values: 

Just a minor improvements. 1) If you count something manually or repeat exact lines one after other probably you do something wrong. Use iteration if possible 

Unfortunately there's no way to switch the texts using CSS. So you'd need to use JS. In jQuery the switching would look something like this: 

Note: first two and the last line are removed. Since sed takes the STDIN, this basically starts one sed instance for whole stream in contrast to one per line. 

Your solution already is very elegant. An alternative would be saving the abbreviated texts as data attributes: 

It wasn't your question, but please also consider this syntax for defining an object and adding a field to it. I think it's better readable due to less indentation, it's more explicit and doesn't make anyone thing you'd add on top of an existing object: 

So computer players now make turn in strict order. List of major edits in FieldClasses module: 1) Bounding rectangles of subclasses now fit images and are change where needed by method instead of 

4) , which creates text was edited a bit and moved to FieldFunctions.py 5) and readability was improved: 

List of major edits in PainterField module: 1) Removed useless import from beginning (main module doesn’t directly use custom classes). 2) Iteration over dictionary elements: Had a lot of (see ): 

You have duplication near , you probably need there Here is probably not initialized. Also you probably might use something from (but I will do it in same way as you). 

Why you pass by reference? size_t is as big as the pointer, but there will be additional hidden dereference that will slow down the execution. keep the const, remove 

return 0 from main() In latest C++, from is optional. Since is there, do not remove it. const method 

2) Try not to use \ to split logical line. You don’t need it anyway if splitting inside (). Also I'm not familiar with PyGame, so I can guess what the parameters are but not always: 

You can use this as template and modify code a bit to add bonus check or just enclose part of loop in another function which will be called in main loop. Plus with minor edit you can import questions and answers from text file.