I am also seeing the same behavior on Fedora 27 workstations, a desktop with a Core i7-3770 CPU and a laptop with a Core i7-7500U. 

We'll generate a local policy module containing the necessary permissions. (You need to use the option with here so that the output can be processed by other scripts.) If you saw clearly irrelevant entries, redirect the output to a file, and then edit it to remove them. Then use the file here instead. 

In essence you need two types of tools: testing tools and deployment tools. At minimum, all you really need is two servers: the production server, and a testing (staging) server. You'll first test your changes on your local workstation. If everything seems all right, you push your code to the staging server, and test it again. If everything still seems OK, you push it to production and wait for the fire alarm to go off. One of the most powerful methodologies for testing your software is continuous integration. With this method, whenever you check in code to a shared repository, a server checks out the code and runs your entire test suite. (You did write unit and functional tests for everything, right?) It can also do integration testing. If all the tests pass, you can configure such tools to promote the code to production and deploy it automatically. Github does this, for instance. Two common CI tools today are Jenkins and Travis. Finally there's deployment. This seems obvious: you copy your new code to the (staging or production) server and then tell the web server to start new workers on the new code. Tools such as Capistrano, Commando or Deployer help automate this. They can also typically roll back to a previous deployment if something goes wrong. (And your language or framework should have ways to deal with rolling back database schema changes, such as migrations in Rails. For Flask, you might use something like SQLAlchemy and Alembic.) 

This is a known bug in Google Compute Engine. Instances can run nested VMs on first boot, but on subsequent boots cannot run nested VMs. You may follow the issue to be notified of updates. 

You don't need to download and install RSAT for this. Hyper-V Manager, while technically an "RSAT technology", is shipped with Windows 8/8.1, rather than with the RSAT package. According to Microsoft: 

You don't appear to have enough PHP worker processes for the traffic you're receiving. The obvious solutions are: 

The first two look OK for a Shopify site; the last two are definitely wrong as they return an A record direct instead of the CNAME shops.shopify.com. In my tests I also saw several other IP addresses returned. A survey of those addresses on TCP port 443 indicated that not all of them had a web server running on port 443. You need to figure out which DNS provider you want to use, and have only that provider's DNS servers listed in your whois record. You make this change at your domain registrar: 

In us-east I use an IPv6 tunnel broker to provide an IPv6 tunnel which allows the instance to be addressed directly using an IPv6 address. Since the tunnel broker's point of presence is cross-connected to Amazon locally, this adds only about 1ms of latency. The down side is that, to get IPv6 to other instances in the subnet, you have to route it yourself (e.g. with radvd). 

Windows 8 and Windows Server 2012 computers joined to the domain can access the Windows Store, and users can install apps from the Store, unless you have set Group Policy to disallow access to the Store. Like any other GPO the restrictions can be applied to users or to computers. The article to which you linked describes a process by which you can deploy Metro apps when you want to be sure they are preinstalled on users' computers, and/or when you are disabling access to the Store. In these cases you would obtain the app directly from the vendor, rather than from the Store, or develop it in-house, since you cannot sideload apps from the Store. For more, see Managing Client Access to the Windows Store on Technet. 

The remote user should then be able to run the Bitcoin miner. If you aren't running a Bitcoin miner, you really should think about switching to an NVIDIA GPU. 

Log in with a second admin account and change the password policy. For instance, to set a minimum life of 7 days and a maximum life of 90 days: From the command line: 

Remove the # sign in front of in this section to enable it. Then make the edit to that it specifies. 

Glue records are used to set up vanity DNS servers within your own domain, e.g. for . If this is not what you are doing, do not attempt to create a glue record. For all records you might want to put into the DNS, you'll use normal resource records. Why Google calls these "custom" I have no idea. 

The permissions of deny access to anyone but its owner. That is what means. To resolve the issue, allow other users to descend into the directory. 

You defined the default server in as and it is pointed to the Apache test page. Because it comes first, it overrides the second virtual host you had defined in . To fix the problem, edit and remove from it. 

Your entries don't contain any redirects, so the redirect must be originating elsewhere. Check the web application and configure it appropriately. Also check any other parts of your setup, such as a load balancer or reverse proxy which you forgot to mention. (The fact that PHP is unable to load a module isn't relevant to the redirection problem.) 

The behavior you describe as happening is correct, if you want to receive mail from people outside your domain on the rest of the Internet. Only outgoing mail from your own users, destined for other places on the network, needs to be authenticated. 

Don't use these old deprecated alias interfaces. Instead, add all the IP addresses to . Edit and add the addresses: 

Those instructions aren't for Amazon Linux. You should not expect them to work. And in any case, most yum-using distributions already have php-oauth packaged, so you don't need to do any of that. On Amazon Linux, the package name is . 

OpenStack will run fine on a single machine, and this is indeed a useful setup in scenarios like evaluation or developing OpenStack itself. A tool called PackStack, which is available on RHEL variants, makes it pretty easy to deploy. But OpenStack is probably overkill for your scenario, unless you plan to expand to multiple physical servers in the future. If this is the case, you should take the time to get OpenStack up now, which will make expanding easier in the future. If you don't plan to expand, then just using straight up KVM (with libvirt?) is fine. You can run virt-manager on your desktop and manage the remote machine with it. It automatically sets up an ssh tunnel to the remote machine to do this. Note that you have to place your ssh public key in the for root on the remote server in order to do this, and set instead of on the server's ssh daemon. And if circumstances change later, it's pretty easy to import KVM virtual machines into OpenStack. 

A PCI scan failure due to a 500 error? That's a bit strange. Anyway... Set up a default (you should already have one) that serves nothing; any requests made to it should then result in a 404. 

You don't need a window manager in this case at all! Just and start your app. The X server and its own window management runs locally on the user's desktop, not on the remote server. The Windows and Mac guys will have to start their X servers manually, but on Linux desktops it's already running of course. 

It appears PHP has run out of memory processing the uploaded file. You will need to increase the parameter. Further information on upload tuning can be found at the PHP web site. 

(Emphasis added.) Everything on a RAM disk is guaranteed to be in RAM, by design (though tmpfs can be swapped out). But fadvise is merely advisory; the kernel is not required to preload the data into RAM, nor to always keep it in RAM.