You turn it down You accept, and fail to improve things like you predecessor You accept, and succeed 

I find the PERT estimation useful for software development tasks. Summarising: a = time if you fly through it, no delays, no problems b = time you think it will realistically take given known delays and known problems c = worst possible scenario, everything gets delayed, your other bosses give you extra work, and you find a flaw in your implementation at 80% through your plan Estimated time = (a + 4b + c) / 6 Variability = (c - a) / 6 Say you think a task would take a day in ideal conditions, and normally you'd get there in the next 2 days because of meetings, but there are a few stages that could cause problems and then it would be 9 days. Then your estimate is (1 + 4x2 + 9) / 6 = 3 days, variability is 1.3 days, so you would say "I expect to get it done in 3 days, but it could easily take 4.5 days." This way, they have an idea of when to expect it (for delivery to customers, you want to estimate the time to delivery in calendar days, including the effects of meetings, holidays and so on), and an idea of what a conservative estimate might look like. If there is a big variable, like 'it might break component X, so then I'd have to modify and rebuild that component, which would be an extra week', then flag that up in the response - 'I expect it to be done in 3 days, but it tests the limits of component X, so there could be an additional week there'. This is one of the hardest bits of working in small businesses with multiple competing demands on your time. So grasp it with both hands and don't shy away from giving estimates. The sooner you get a handle on it, the better things will be. If quizzed in person, don't be afraid to say "I can't give you an estimate that would be any use off-hand, let me send you something by the end of the day". Good luck. 

This way you keep a documented paper (err, electron) trail of all impromptu requests, while freeing Big Boss to keep the call going. He may review your questions at his leisure. And, since the request now exists in a trackable, shareable format, you can forward it to your Lead Programmer, Project Manager or whoever needs to be aware of it. 

Is is generally frowned upon. The candidate should have your full attention. That is, after all, the objective of the interview. If your company allows, a viable option is to record the the whole interview in video for future reference (or, alternatively, an audio recorder) if the candidate gives their agreement. 

The other possibility is to force it, and on that aspect @starlight's answer is spot-on. She's risking alienating and spoiling the relationship with her workforce. 

Since it was the restaurant's choice to hire people that have English as secondary language, I'll agree with @jon-custer's comment: this seems like an excellent opportunity for your sister to expand her horizons and learn a new language. 

The new starters are behaving in a way that deviates from the team established behavior. That creates stress. By accepting it and setting it as desirable you may be empowering the new hires and further degrading the working environment. 

Time constraints may apply to Skype calls that prevents you to dig further into details - after all he's the Big Boss. He's also trying to be proactive and solve a problem. Your job as specialist is to help him make the call and to implement the agreed request. So take notes, analyze the requests after the call and provide feedback on it. Use the opportunity in a pro-active way: 

I concur with Ajaxkevi here, but I would add this: In childhood, much of life is about obligations and duties and doing what you should do. In adulthood, however, you will see that plans and circumstances change, and that expectations of behaviour are more about approach (i.e. being clear and curteous to your boss) and less about about actions. You have not signed a binding contract, nor would one likely be even legal in most countries. You can do your best to keep the relationship with the company positive, and it will probably stay that way. It is worth keeping in mind that if you have been a great employee they won't want to sour the relationship either as you might go back and work there one day. They have no legal or even social right to demand you see out your term, since the circumstances that are causing the change are largely out of your control. As a side note, congratulations on creating a business at any age let alone so young. Success in business often requires you to make hard decisions about honouring vague agreements or not, or about honouring one arrangement over another. As long as you treat people fairly and openly, you will have a clear conscience when you need to give people unfortunate news. 

They may have little interest in the specific kind of social events the company is promoting. Did the company tried asking them what would they like to do? They may reply with proposals to attend a developer-centric conference together or to organize online multiplayer gaming sessions, for example. Listen to them. 

And so do others IT teams around the world work - I'd even daresay the majority of them, if my personal experience may be taken into consideration; tools like Slack, Google Hangouts and similar are natural to them. But, more important, face-to-face communications are actually frowned upon in some situations because there may be no proof of resolution or commitment. Text-based solutions, be it chat or email, can provide both backlog and proof of commitment. 

So said coworker values the idea of being a 'leader', or at the very least the idea of being part of the program. 

This would be a very nice thing to hear as a recruiter: the client needed help, you provided and left in very nice terms, demonstrating professionalism. (You may back it up with a recommendation letter.) And, in any case, showing that you have some professional experience is much better than nothing at all. 

So it is based on someone's opinion/evaluation, which may or may not reflect your coworker's merit. The logical conclusion would be that, if your coworker wants to get an invitation to the leadership program, then they need to match the evaluator's expectations. As it stands, this may have nothing to do with their professional competency at all. Let's assume, for a second, a technical specialist like a software developer: the only practical 'path to leadership' would be a position as Lead Developer. The Leadership Program may be focused on administrative leadership, with a Venn diagram showing a surprisingly small shared area between the two administration aspects. The best approach in my opinion would be to make it clear to your coworker that you participating in the program doesn't interfere with your relationship with them at all, and that you're sympathetic to their situation. As it is, your presence on the program may even reward them with an insight on expected traits, thus helping them in the long run. 

Yes, they are different An online coding test is intended to let the recruiters screen out bad applicants or to rank applicants so they can consider the 'best' ones. It is essentially pass/fail, because you're not able to explain what you're doing to the recruiter. An in-person test is much more interactive; you can explain why you are doing something, or ask for a detail you need but don't have, or ask for clarification of the task or question. In person they are hoping to see your approach, your thought process, rather than just whether you can do a puzzle or not. Don't overcomplicate things If you get a question 'replace all the %20 with space', then just use the built-in function. If they want you to code it by hand, they will say so. Anything that you can do in a simple and straightforward fashion that has not been forbidden is fine. You'd be surprised how many people who apply for coding jobs cannot write code at all. Sometimes they're just asking you a very simple question. In person, investigate the problem Online tests have to be specific about the problem they want you to solve, but in person the interviewer can just make vague requests, like 'can you write code that replaces %20 with spaces' without specifying what inputs to expect. It is worth just checking the parameters of the task; will the code need to cope with arbitrarily long strings, alternate encoding choices, empty strings, etc etc. This is a double-edged sword; you might look good for trying to establish such things before you dive in, but they might just say 'yes' to whether you need to cope with X, so don't skewer yourself with it. 

My suggestion would be to pick someone to serve as the communication bridge between the technical team and the rest of the company, able to translate the needs of both sides into deliverables. I have seen some Project Managers covering this aspect, but sometimes they have someone dedicated filling this role. 

I would say not a bad thing at all. If all the points you're concerned with are covered - namely your advancement as a professional (by way of new challenges) and monetary compensation for your work - and you're satisfied with it, then there is no reason for betting on a new environment. Unless, of course, an excellent (in comparison) proposal comes your way. It's hard to predict the future, but I would say that future interviewers will take stability as an asset instead of a liability; it proves that you had no issues joining a professional environment. Just try to stay on your toes and keep your skills relevant. 

I wouldn't necessarily see it that way. A recruiter may see a contract position as a project with a well-defined beginning, execution time and end. Imagine the following exchange: 

That means they have a common baseline behavior as a team. I'm assuming as a natural result that there are no intra-team communication issues: these only appear once this team needs to collaborate with other teams with different dynamics. The intra-team collaboration, if existing and natural, is an asset. Work with it. 

Your founders do not value you very highly. It is an entirely classic setup for bosses to think they are doing you a huge favour by employing you, undervalue you and underspend on things that would make you happy. Often, that is why people start their own companies. I don't think the problem is that being cheap is affecting morale, or that you are not communicating clearly enough. They just don't think you're worth it. What they want is a set of compliant workers who are just so happy to work at such an exciting company that it doesn't matter if there's no money being spent on them. Just look at the contrast in your question; the founders boast of their extravagant lifestyle, yet expected you all to pay for a team event that they had picked. That is at best myopic, and at worst you are being screwed. Unfortunately, some people work on this level; it's dog-eat-dog, they really only care for what they can take and they will do the bare minimum to stop you all leaving. If they have investment money, they probably barely care if you aren't working so hard; if they can justify the extra expense to the investors, they can get more money. They only care if you leave because it would look bad to the investors. In this environment, where the management does not show any real care for the workers, the answer is to unionize. Unionize for some R&R? What am I thinking? I'm thinking that this is more than the culture, or the occasional trips out being funded: It is about the management taking the workforce seriously. If you do not stand up to them properly (or quit), they will continue to pay you all poorly, fail to look after you, and generally drive you as hard as they dare. What's to stop them, if they don't have compassion for you? You are incentivising them to do just that; they can keep more of the money by just pushing you all harder for less reward. Some bosses do care for their workers, and those are the companies you want to work for. The rest you have to force into behaving better by threatening to strike, leave, etc. Most are just weak and only need you to show some mettle before they will back down and treat you better. They just don't see the world your way, and can't justify spending more money on you unless you might leave, because nothing is as important as their immediate bottom line.