General impression You are not actually injecting any of the dependencies into , you are injecting a service provider that has to locate the dependencies. It may feel like dependency injection but it really isn't. What you are doing here is, basically, creating spaghetti code. Suggested improvements My question would be: What is the responsible for? Your UserProfile class depends on a View, ORM and FormBuilder class. It is in control of retrieving the user from the DB, outputting a header and outputting the user in the view body. The FormBuilder does not even seem to be used. There are several ways this could be cleaned up, for now I'll use "classic" MVC. Assuming (based on the function name) that this class is primarily a View, it should only need the user Data and your ViewCreator to function. Your router would call the Controller that would retrieve the Model and pass it on to your View. The suggestion below completely removes the service locator from the picture. Please note that the code is written for clarity in conveying the message, it is not meant to be 100% working or correct (especially the static call syntax in the controller). 

Don't use an A element for the up/down buttons, use a button or styled span element. The logic seems way more convoluted than necessary, consider something much simpler. The function below gets the original value, calculates the new value, then works out what to do with it. If it's within the range +/-1, it uses that value, otherwise it resets to the original value. Use classes instead of IDs so that the function can be generic. I don't use jQuery, you can convert the logic if you want. This is dependent on the client having getElementsByClassName, it's pretty easy to add if it's missing. There are a few support functions at the start, they're simple and you should have your own small library of such functions already. 

Answers to your questions 1. I find it hard to judge either "Sane" or "Decent". I think "Clean" is more important: single responsibility, clear separation of concerns, no side-effects, etc. Reading Clean Code by Robert C. Martin can be invaluable there. 2. If the set method actually set anything this would be less clean as it causes side-effects. Since it is really only another getter, there's no real problem. 3. Yes. This can become problematic. The best thing for it is simply to learn how to write unit tests (it honestly isn't all that difficult) and having tests with your code will teach you how to create code that is easy to test. 4. Yes, the array in setConfigData() is set again every time data is requested by . This is because it is being used from local scope and not from the class scope since it does not have a in front of the variable name. You don't need to make the array an object to resolve this, just load it from class scope using . 5. OK or not is mostly a point of view. Most folks will probably think it is fine. In my personal taste the conditions could be cleaner/less muddled. 6. Yes, MAJOR issues. Configuration should live outside of the class. It can be injected into an object at the point where it is being instantiated. You really don't want for me to edit the framework code when I want an application I build on top of it to alter its behaviour! 7. Personally I would not put all of that functionality into one method. I'd create separate methods for separate scenarios to keep the class signature (or interface) simple and easy to understand. In closing If you feel inclined to look at this from other angles, you should probably also take a look at other data structures that can/could be used for configuration other than an array. For instance, the ARC config component uses a tree structure. If any of my comments seem unclear or need more elaboration, don't hesitate to ask. I will update my answer as needed. Furthermore, as you stated that building a framework was mostly about the educational values, I think you will agree that something as essential as configuration has a lot of lessons in it. You seem to be learning them quite well. Keep it up! 

Before evaluating something, you must first establish what the evaluation criteria are. So you must first define what "correctly identify an object" means. The ECMAScript typeof operator returns values as specified in ECMA-262, unfortunately they are different values to the actual Type as defined in the spec. Nor does the value have much relationship to the internal class property. Futher, host objects can return anything they like for typeof and internal class, they can even throw errors if you attempt to access them. It is rarely necessary to know in a general sense what "type" something is, it's more common to want to know if a value meets specific criteria for the intended purpose. For example, passing a DOM element's style object to your function in Firefox returns "cssstyledeclaration", in IE it returns "object". Does that meet your criteria for "correctly identify" (whatever they might be)? What is the caller to make of the different values? Why would it want to know? I don't know the answers (or even the full set of questions that might be asked), so I can't work out if your function does the right thing or not. Some comments on the code: 

You are putting way too much logic into your controller methods. Most of the logic should be placed in a service that should be injected into the controller. The logic in the controller methods really shouldn't do much more than grab a value from here, set a value there and maybe call a function on a service. The most extreme way of achieving this would be to make the entire controller a service, creating a new controller and see how much you need to move back from the service into the controller. In regards to the "how", you may want to take a look at Chris Fidao's talk about hexagonal-architecture, 

What is the point of the IIFE? There is no code run in it, all it does is add a closure to an empty (more or less) variable object of the outer function. 

will do the job. Since you aren't in strict mode, you can use the following within a normal function expression: 

There are many ways to do this, the above is just an example that you can apply as you wish. You can add and remove classes to change the appearance of nodes based on what happens in side the block. I would think that clicking on "up" or "down" a second time should just be ignored, if a user wants to remove their up vote, they just click down and vice versa. Anyway, this works as you've asked. The code can be more concise, but I prefer clarity over brevity. The original is awful from a code maintenace perspective. 

To start off, I can't see a single semicolon being used here. You should always close your statements with a semicolon. Also I can't quite understand what you've done here: 

This might need a bit of editing but you get the idea. However I'm not sure if any of these are actually better ways of doing what you want, but it's other ways of doing it. It might make everything more manageable if the code gets even bigger. Hope this helped. 

Is this a property in an object? If so why have you named it ? Give it a proper name such as or something along those lines to make it more obvious what it does. Now it's just confusing. And for the other function you could name it . If you included some additional markup it would help your question a bit. 

Things could be cleaned up even further by not initiating classes from the router but injecting them into the router from your delivery mechanism/root/index.php/etc. Further Suggestions You say you're not well versed in any framework but what you seem to be doing here is very similar to the way Silex works, which uses Pimple (which was mentioned in the comments to your question). The learning curve is quite flat so it could be worth the effort of seeing how Silex does things. If studying an entire framework takes too much of an effort I would strongly suggest you take a look at PHP-DI to observe the way a Dependency Injector should work. 

Personally I would create loops for this, it's very unreadable at the moment and you are repeating yourself a lot. Remember the DRY rule (don't repeat yourself). Also if you do it via loops it's easier to maintain and change in the future. 

In a bigger project of mine I'm using angular to create a dropdown menu dynamically and then toggling a dropdown menu for some of the menu items. This is why I got a function that toggles the dropdown menus for only the items that should actually have one. However, I feel like I should try to DRY this out a bit since I'll be repeating the same function even more than what I've done so far. How can I improve this code? Should I create a self invoking function or something similar? Here's the functions (they're part of a controller object that I left out): 

I think the following is doing the same thing, you'll need to check it. It should be pretty fast, it just references objects that don't exist on the target. I changed names from and to and because they make more sense to me. I also included as simple function. Note that I don't like using the constructor property as it's public and you might get an own property rather than the inherited one, so I changed the test for object. If you test of an object, then for an array, what falls through should be a primitve. There are a lot of assumptions here, I'd implement a bit more checking to make sure I was getting what I expected.