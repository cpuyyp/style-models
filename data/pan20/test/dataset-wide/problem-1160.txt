There is nothing native in SQL Server that is going to track that level of information. Based on what version of SQL Server you are using there is SQL Server Audit (SQL Server 2008 or higher) that can track database level access, but it does require Enterprise Edition. You could also roll out your own method of logging using Profiler or Extended Events that just capture object access for a given database. As long as you are not trying to capture the query and all it should be pretty low overhead, but it would be based on how active your system is. 

For each data cell of your table (or matrix) you will have to set an expression on the font color (general tab under text box properties): 

If you happen to be remote you can try to use this command but it will not work if proper access is not granted: To connect to the instances you find with SSMS if you see the services listed as this is a default instance and if you are on the physical server you can use the server name, simply put a period (.), or . If you find a named instance it will be noted as , as on my machine I have a named instance of so I would put since I am on my machine. If I had this on a server and was connecting remotely it would be the actual server name instead of . 

I tend to use strictly because on active instances trying to set a database to and be the single user that connects is not always consistent. If you set it offline that is it, it is offline. I will also add that a better practice to do the restore is to have the application stopped or block access from the server. This will save from your error log filling up and prevent connections from occurring once the restore is complete. 

This will put the database in a read only state and you could use SSIS to export the data. You can also use for the tables you want to another database. It is odd that SSMS is not going to let you use the Export Data wizard even though the data is accessible in a readable state (just tested trying to use that). Once you have gotten the data you want out you can put it back in by issuing this statement: 

Any account enclosed in "##" are certificate based accounts and you will not be able to simply create them as you would other logins/users. If you have a backup of the master database prior to the accounts disappearing you could might try restoring the database to get them back. Other than that I suspect you will need to reinstall or try rebuilding the master database. Read through these two articles (here, here) for rebuilding the system databases. I would suggest taking a backup of the current state of the system databases. Script out all the logins you have in master as you will loose these. 

Environment: Windows 8.1, SQL Server 2008 R2 Express database, SQL Server 2008 R2 BIDS Database: Performance counter data collected on client servers. The particular values involved in this question are % Processor Time and Batch Request/sec. I did not start this report from scratch. I am actually just modifying one Allen White provided from his TechEd 2010 session that you can find here. I am using the same table structure with a few modifications to column names and such for my liking, pretty much the same other than that. I also added some filter/parameters into the report because I have multiple servers in this database. I take the RDL file and import it into my SSRS project. Modify the procedures and column names to match my setup. I noted the format of the graph to be a simple line graph: 

Additional: If you add this as a step to your job just make sure the previous step is set to only "execute next step" on successful action. On failure for your previous step should be set to stop job with as failure, based on your requirements. 

You can use stored procedure to start a job from any server using the parameter. Passing nothing to this parameter means the job is on the local server but you should be able to pass your remote instance name and have it call the job on that server. The only thing I think is you might have to use a run as condition on the job step, under the advanced properties. Otherwise the service account on your local instance would need the appropriate access on that remote instance. Your command would look something like: 

The function below is for the purpose of pulling information about one or multiple databases of a SQL Server instance. So far I know this works on SQL 2005 and up. I have used but that ends up cutting off columns. I have used which can work but defaults to a list view which could be a pain to get into Excel. It also cuts off column data that exceeds a certain length. EDIT: Purpose of this function is to run it against 100+ servers for gathering inventory of each instance. PowerShell Function: 

You can use the Import/Export wizard with SQL Server. I came across a very good write-up (nice pretty pictures) here on it. 

I expect the sample query you gave is basic, so my offer is basic but I think should work for you even with complex script files that require multiple variables to be passed/replaced. The key here is you need to have a place holder in your script files that you can easily search for in PowerShell, then just it with that value. An example query: 

You can find a more information on Kerberos from the CSS team here. As well Microsoft released a tool that can help you identify Kerberos issues, download that here. To troubleshoot, check your error log that shows the startup of your instance you changed the service account to that new domain. In a perfect world you will see a message like this: