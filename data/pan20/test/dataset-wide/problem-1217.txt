There is some form of JS voodoo going on here that I can't programatically work out, can anyone help me shed light on how JS is interpreting this and why when I call: 

I would say that there isn't a correct or incorrect way of achieving this. Everyones requirements differ. You probably want to expand this out, there's a lot going on in the one static method you have in that class. Whilst I don't have anything against mediator patterns, I would probably combine a number of patterns to build a powerful caching class, as well as utilising magic methods (I know some people are averse to this). I need to note the below is a lot more complicated and would benefit from some refactoring to be stored against the actual method rather than a key. 

I agree with Gerard a little, you have made (in my eyes) a common error with interfaces where you've tried to make them specific to a certain type rather than what they actually do, I see this a lot in the wild (excuse the pun). This isn't to say that interfaces based on type are bad, they have their place but in general an abstract would be better suited for types as types will have unique properties that you could not declare in an interface (nor would you want to). As an example I'll elaborate on the "Dog is also capable of chasing" example. Declaring a as makes no sense when trying to describe what a Dog is, instead, make it capable of doing something. 

As far as performance is concerned, there are no problems in this code. It's using C++ streams in the idiomatic way, which is good. If you're experiencing performance issues, you could try detaching from C streams at the start of your program: 

The same holds for all other uses of C I/O (, ), of course. and would be better declared with type , as they represent the number of some objects. If you have access to C++11, all the above could be simplified even further using range-based loops, lambdas in standard algorithms, or at the very least iterator-based loops. I didn't bother with iterators here (even though they could be used), because their type has to be spelled out explicitly. In such case, it would also make more sense not to allocate the threads dynamically, but create them directly in the vector. No need for manual deallocation, no dynamic allocation overhead. 

The names and don't say anything about the variables' use. I had to read through most of your code to figure out what means. Always use descriptive names for your variables, at least for those whose value is supposed to persist for extended periods of time. I would be willing to accept the , as it is basically one-shot, but should be renamed at least to or or something more descriptive. Your looping and termination logic seems odd. You are using the correct construct , looping while there's valid input left. But then you have this block: 

It's fairly obvious what .call() is doing in context. I recently came across some articles that went into depth on abstracting the .call() function. The premise is along these lines (this code is verging on pseudo code as I have stripped it down for ease of reading) : 

You're jQuery can be written in one simple function as a catch all for the entire navigation. As you stated you think it could be condensed, you'd be right. As a rule of thumb if you see yourself writing the same thing over and over you should be able to cut it all down into one function. Starting with one of your methods I'll step through it to show how you can condense this and make it more efficient. 

So you now have interfaces that describe what they do. It now makes sense that both a Dog and a Lion can implement . Not only this, any animal class you create are capable of using it without semantic issues. Your interface suffers from the same problem (to a lesser degree). Having a canine interface is probably not a bad thing, declaring that canines only bark or howl is true. Is it true to say that no other animal species can bark or howl? what happens when this cat turns up on your doorstep? (stupid example but I found it amusing) Cat videos aside, we now have a strange edge case where a cat is displaying canine behaviour, but it is not a canine. Enter the interface (that I find both funny and embarrassing). 

This will cause the loop to terminate when a 0 is entered in the input. This behaviour does no match the assignment, and hence it represents a bug. Based on the assignment, you should only terminate when input ends, which will be correctly caught by the loop. The line should therefore be removed. Related, your after-loop test for is incorrect. If the loop is (correctly) terminated by being unable to read more numbers because the file has ended, both and will be set on . The condition will therefore fail. You might want to augment the condition to check for EOF: 

When printing this message, you should consider returning 1 (or ) from , instead of allowing fallback to the default success. The outer could be removed. If the file is not open, will fail, and you would at least print an error message instead of failing silently. is a very non-portable and extremely cumbersome solution looking for a problem. You're calling an external program just to wait for a key press. You should get rid of it altogether: your program is not interactive at all, it could run just fine as part of a script. Requesting input like this ruins that. Just drop that line altogether. 

Make your code scalable By this I mean using techniques that allow you to do some relatively advanced things without the need for re-writes / re-factors in the future. One of these is to bind events to a lower level element with rather than or . If in the future you modify the menu for some reason with jQuery/JS and DOM elements are removed / re-added, event bindings will be lost. Using avoids this problem. Refactoring your code I've deliberately not included any CSS changes in this code as you can and should include these in your CSS rather than dynamically with jQuery / JS. I have however added and removed a class, this should contain all the style changes required for the mouseenter and mouseleave events. 

The main advantage to this is that the class can be extended easily using other design patterns such as a Facade that further simplifies the class API. It can also be added to easily with further methods within the class body itself rather than by a pure static call. The class can also be instantiated with the keyword providing the ability to create separate cache instances that utilise the same static properties and methods. I need to add this class is very much a prototype that I thought of when I saw your class above. I love cacheing stuff in general and providing standardised interfaces for it is always a great thing to do across all applications you write. 

You don't need to convert an object pointer to , a is sufficient for that. Don't use stronger casts than necessary. You can simplify the assignment to and make it more obvious by assigning the result of the placement-new into it: 

Also note that I added a call to into the waiting loop. Your previous code was leaking the threads. You're writing C++. Don't use (type unsafe!) C I/O. Do this instead: 

Here's the first functional version of my Python 2 script for processing comments in C++ source files. It's a personal project, I expect to expand it later with more advanced options (mainly about replacing comments with whitespace or marking their original positions in the comment-only output). It's also intended as a learning excercise. I am self-learned in Python, my primary language is C++. So the core of my question is whether the code is "Pythonic" and if not, how to improve on that. I don't want to "write C++ with a different syntax," I want to (learn to) write proper Python. I will of course also welcome any other comments (general style, efficiency, safety). 

You're overdoing it with comments. A lot. And trivial ones at that. Every programmer knows that creates a vector of pointers to , or that you have to use with pointers. Such comments are really just clutter and actually make the code harder to read. Save them for the non-obvious bits. It's unclear what protects. Does it protect ? Or ? Or both? This is one of the places where you should comment, but you didn't ( is absolutely pointless). If possible, rename the mutex to match its purpose. It would also be a good idea to wrap the mutex and the data it protects in a class, to ensure that unsafe access is impossible. requires the reader to parse it (and what's with the double parentheses?) The meaning of , on the other hand, is immediately obvious. And how does it create 4 threads? You could just as well rewrite the entire loop to make it more concise (and perhaps more efficient too): 

The difference is that your routes are mapped to the controller methods. Your GET route would map to the method in the controller. While the POST route would map to in the controller. Also, the GET route would be handled by in the controller. Changing the routes is a case of changing the controller methods. This means one place to change your routes rather than two. 

Example of the chaser and chasable interfaces in action: First lets make our interfaces a little more rounded 

I've written this relatively simple class to help with managing arrays of anonymous objects in my scripts. 

There is nothing wrong with this approach at all. Rather than say you should or shouldn't do it any other way I'm going to give you an alternative approach that allows you to write less code in your file. I've noticed that your deals with a lot of different types of requests. This can get very hard to manage when your application grows. It's a good idea to separate out your controllers into manageable classes that deal with one area or feature of your application. The example below would ideally be in a class for example. Taking this chunk: 

The class is missing a copy constructor and a move constructor. These can never be created by instantiating a template. Right now, the compiler will generate a defaulted copy constructor for you (and no move constructor, because you have a user-defined destructor). Since you obviously don't want that, you have to define the copy (and probably move as well) constructor yourself. You're also missing a move assignment operator which you should probably add. Otherwise, your class wouldn't be fully usable with move-only types. Your code is missing comments (there aren't any). You even had to explain an invariant in the question: 

looks like a rather arbitrary number for the default template argument for (it's actually a magic number). There is even no guarantee that 16 is a valid alignment value. I would probably choose something less arbitrary such as . There is no reason to use for the type of . You don't actually care about alignment of at all (which is emphasised by you passing to its parameter). All you need is a buffer of suitable size, and for this (or a ) would work just as well. As a side note, be aware that was only introduced in C++14. Visual Studio 2013 supports some C++14 bits, but using it makes your code non-C++11-compliant. You might want to swap the order of the data members, it might prevent need for padding between an oddly-sized and aligned . You might consider overloading the pointer operators and for your class as syntactic sugar for , it simplifies usage. Other generic classes which store a single object sometimes do so as well; an example is . 

First things first, you're creating no less than 5 jQuery objects for each time someone hovers and moves out of a menu item. Two things on this : 

I'm unhappy with the one jQuery call with $.extend() but this proved the easiest way to accomplish an object merge and I use jQuery quite predominantly in the majority of my projects. Despite that can anyone suggest a different way to do this? While this works fine I know it's far from perfect as it's limited to one search term. My thought was to add in another loop within but I'd prefer to avoid doing that, my second thought was to map the object and perform the lookup once I'd found an object with the first property match. Again any suggestions on how I might accomplish this whilst keeping the script clean and fast I'd really appreciate it. Any other suggestions welcome, thank you for taking a look. :) 

The logic is really confusing me, I understand how call() and apply() work in the simple example above but I have no idea how or why the prototypes of the object are extended when I call . Could anyone help me shed some light on this? 

One thing I am aware of is that the code does not handle trigraphs; they are somewhere near the end of the to-do list. 

Indentation in the post-loop conditional is inconsistent with the rest of the program, and should be fixed. The same holds for the block (unless that was just screw-up of the code formatter here on Stack Exchange). The return value of is interpreted by the operating system as the return code of the program. On all OSes I know, 0 indicates success, non-zero indicates failure. You should therefore return 0 on successful program termination. Or just omit the altogether, is implied in the function in C++. Or, if you want to be really beyond reproach, and comaptible even with OSes where 0 does not necessarily mean success, you can change it to ; this requires . Error output (such as your message) should be sent to (standard error stream, usually file descriptor 2), not to (standard output stream, usually file descriptor 1). A more helpful error message would be in order as well. Something like 

When you do this, you must then not mix C++ I/O (IO streams) with C I/O ( and friends) in your program, but mixing these is bad practice anyway. Here are some other comments to your code: