Since everyone in your study group works for the same company, you might find it good to use your time together to discuss how to apply what you read in the book to a shared development project. I might also (though I don't know how to tie this into a study group) recommend you look at a well-written real-world example of whatever the book is describing. 

To what extent these rules are applied/enforced and how common are they in employment contracts? Well done for reading the contract. Such rules are very common (in my experience in Canada at least). Before signing one I've (successfully) asked for a specific exclusion: 

Then maybe they'll volunteer or you can ask for their personal email address; and/or make friends with their LinkedIn profile. 

Ideally you might get a letter back (from someone who's senior enough to "bind the company") saying, 

"No, I find that, like everyone else, my ability to concentrate on the job is finite. If I try to work for too long without any break, I may begin to lose (or struggle to keep) that ability. I can work long hours for short periods, when necessary ... in an emergency, or at what you might call "crunch time", or to keep unusual hours e.g. to help support a customer 24/7: for example I have often worked all week-end, but then had Monday off to recover; or worked all night, then didn't work the next day. I once worked 80-hour weeks for three weeks (that was at a customer site: I stayed in a hotel next to their office and did almost nothing else except eat and sleep). So in an emergency, yes; and especially if you give me previous warning if that's possible. But it's impossible to do it permanently (all the time) and do it well." 

I suppose, when you're block-quoting, there it would be acceptable to silently correct any mere spelling mistakes, without using square brackets (the correction is a silent courtesy ... and better than retaining the spelling mistake and adding [sic] to it!). But, do use editorial square brackets anywhere you change the wording. Because I'm excessively pedantic I might also add an ellipsis to mark anywhere where I have deleted text within a block quote: but I don't recommend doing that, because doing that might uselessly make the quoted text harder to read. 

Here's an addendum, in addition to the other answers: there was a saying that, "What's good for General Motors is good for America". In this context, what's good for your employer is good for you. If decreasing the bus factor is good for your employer (helps your employer's business) then it's good for you too (if your employer goes out of business because of staffing problems then you lose your job). Furthermore, job security consists of your personally having a good professional reputation with the people you work with. If you behave well, behave ethically, then you'll have a good reputation. If you have a good reputation then even if your current employer goes out of business, former colleagues will invite you to work with them in their next ventures. Future job security isn't so much whether you can keep this job: rather it's whether you can get your next job. 

it seems to me that everyone should be shaking hands in a company My experience is plut√¥t of singing in a choir rather than working in a company. It seems to me that everyone should be singing, but I've grown used to the fact that there's a few minutes to begin with of everyone coming in and saying hello and kissing each other and chatting. Kissing on the cheek feels like sexualizing or considering women as child I don't think so. If someone (man, woman, or child) kisses me on the cheek I don't assume it's sexualizing nor treating me as a child. Women kiss each other on the cheek, and so on (though the French men often shake hands). It's more-or-less the equivalent of saying tu rather than vous. How can I try to go against such a tradition without being rude? Is there a professional way to do so? That said, the same people who kiss each other are also willing to shake hands with strangers and/or foreigners. Just stand back and proffer your hand for a hand-shake. To be honest I usually do neither (just say "hello"), and let the other person decide whether to initiate a kiss or hand-shake. 

Given that you're able to do the job, you're presumably able (if asked) to explain any specific aspect of it in any amount of detail. Expect this (training) to take some time. Hopefully, management expect that and are OK with that. When I helped (trained) new hires in this way, I approximated that it would take me as long to explain a task in detail as it would have to actually complete it myself; it took even longer than for the new hire. For example, a job (e.g. a new feature) that might take me three days to do by myself would take me three days to explain in detail, and take the trainee a couple weeks. The payoff (profit, or time saved), therefore, isn't immediate: the payoff is months later, when the new hire is up to speed and is able to work more-or-less independently. Oh yes, apart from getting them to ask ad hoc questions, you should do code reviews/inspections of everything they finish. When they say they're ready for a code review, your first question might be "Have you tested this?" In your code review you look for obvious bugs. The ideal clarity to aim for is that code is complete not when "it has no obvious bugs" but when "it obviously has no bugs". Your code review criticisms should be either: 

I wouldn't touch someone else's purse without permission: I'd feel red-handed. I think it would be politer to ask the owner to move it; or if you have to be silent, point to the chair or something in order to ask for permission to sit yourself down, prompting them to move their purse (if they assent) or shake their head (if they refuse). Don't put it on the floor because e.g. someone behind you make take it. I presume the owner wants to keep their eye on it. 

Speaking as a mathematician-turned-software developer I sympathize with Grumpy: i.e. I now prefer software development (and I think I'm now better at software development than at mathematics). On the other hand if I were in Grumpy's place and wanted to say that to you, I would -- and I would without confusing the issue by mentioning salary. The fact that Grumpy mentioned salary might mean that Grumpy is grumpy about salary, and this project is merely a trigger or excuse for asking for a raise. So my advice would be to try to separate the issues, even if Grumpy didn't separate them. Ask, "Is Grumpy happy with his current salary? Is he asking for raise regardless of this new project?" Given that he's the one of two oldest and most experienced developers should you offer him an unconditional raise first, and then ask whether he's willing to do this new thing? And/or can you reassure him about the nature of the new responsibilities? If I were him I might worry about failing. The increased salary might be 'danger money' to compensate me for increased risk or stress or unpaid overtime. For example, will the company be providing enough help (e.g. a domain expert, i.e. a maths mentor) to guarantee his success? You say this is "academic-level research" but also "basically software R&D" which might be mutually exclusive/contradictory. Apparently you are keener on academic research than he his? 

Apart from being a harassment-in-the-workplace issue you might phrase this as an employee safety issue. Once when I was a customer at my local grocery store, someone came in who made even me uncomfortable. I don't know what it was about him, it wasn't that he was homeless, but he seemed like he might be a threat somehow and as if I should keep my eye on him. I suppose one the cashiers or someone saw him too, and pressed a button, because a rather large boy who I had never seen before came out from the private warehouse section of the store (wearing warehouse overalls or an apron) onto the floor: and sort of visibly walked, and looked from a distance, and the guy disappeared and there was no trouble. So I gathered there was some store procedure in place to respond to potential or emergent threats (apart from or as well as calling for the police). If he makes you very uncomfortable and refuses to address you by name then perhaps you see him as a potential threat; and a staff safety meeting in which you talk about how to respond (individually and collectively) to any threats to staff might be a good time to bring that up. Even if nothing else I think you might want to know that the rest of the staff have your back; and sometime when the whole staff is there with the management could be a good time to clarify the store policy. 

In my opinion, one time it might be reasonable is if you're a contractor (not an employee), or an intra-company transfer. For example I used to do contract work for IBM, a series of contracts, and I presume that each manager gave a good report of me to the next one. It may be reasonable to let the candidate choose who to give as a reference: for example I might have better relationship with my peers than with my managers, or with my team leader rather than my manager or vice versa. Also some (or many) companies won't give references at all (they'll confirm you worked for them and no more than that). In such a company your manager might not be allowed to give an official reference; but one of your peers might be willing to give a personal/unofficial reference. In summary I don't think it's a standard question, and you may lose a good candidate if you insist on it. (A lot of my work experience was in Toronto, by the way). 

How to approach management about this? Say that the best practice is not to permit this, for many reasons. Professional programmers ought to know that this is no way to run a business; and if managers know nothing else they should at least know that (programmers should tell managers and/or managers should tell programmers). The reasons are hopefully so well-known that I don't need to tell you. They include "backup" i.e. you're in trouble if you lose the programmer (or if they're reassigned to something else), or if the programmer loses their machine. At least you have "company version control" so you don't need to fight that battle; just make it a job/process requirement that it actually be used. You probably shouldn't run production software on the developer's machine. A first step might be to insist that: 

Get them to do your job for a while. For example, if your job as application developer is to develop an application, then assign to them your next application development task[s]. Tell them that: 

Well, if they don't do personal email either, ask for their mailing address at home: say that it's "so that I can send you a Christmas card!" 

From an HR perspective, I don't know: I'm biased against HR, in that I think that their job is to protect the company from harassment lawsuits (rather than protecting employees): i.e. I think they're on the company's side (and the manager's side), not on my side. If you did want to take it up with HR (which, as I said, I wouldn't myself) I wonder if it would help to phrase it to them as, "the behaviour didn't bother me but in case it might bother someone else perhaps somebody ought to talk with him", to paint yourself (to HR) as being not a threat to the company yourself. I've next to no experience with HR though so beware that my advice is uninformed. 

This sounds like an important problem. As an interviewer one of the main questions I'm trying to resolve/answer in an interview is, "Do we understand each other?" By "understand each other" I include: 

I've been offered a contract like that. It was written by my employer's client's lawyer, and designed of course by the lawyer to be favourable to the client. I reviewed the offered contract, decided for myself which clauses I wanted to delete or edit, and said that I'd accept (agree to) the contract with those (reasonable) changes. For what it's worth, for example, there's a difference between "negligence" and "gross negligence": you might be willing to accept liability for the latter but not the former. I won't try to advise you on what you should have in a contract; but I have had the experience of being offered an unfavourable one. 

I'd phrase it as an ability (i.e. a technical ability or experience, not a social preference), for example, "experience with the whole lifecycle -- able to start and complete a project, from initial planning through to delivery, with minimal supervision." IMO this implies you may be aspiring to be (or at least expecting to be) a bit of loner: 

Adding a hardware problem doesn't help, interferes. It's not just an interview problem too, i.e. if you can't understand me during the interview then you won't be able to understand me if we're working together. If you can't understand what's said then I suppose you should say so, and maybe try to fix it (maybe somebody needs a better microphone or better internet connection, or switch off video in order to improve the audio), even reschedule the interview. If you answer a question that I didn't ask, that'll give me the impression that you don't understand me or vice versa and that we can't or shouldn't try to work together. 

Those are two extremes (perhaps you should look for a middle way between the two extremes), and a false dichotomy. 

At one company/employer, when I was a candidate, before the interview, their HR contacted me to ask whether I had any disability for which I wanted "accommodation" during the interview. If there's anything the company could do to make the interview easier/better for you, I may recommend (though this recommendation might vary depending on your national laws etc.) that you tell them in advance (before the interview) what they can do to help, especially if "it's unlikely a panic attack won't happen". 

Yes it's common and it also protects you. I don't think it's to do with "non-compete": I think it's to do with copyright/ownership, work for hire, as well as protection of trade secrets. I think it's common to say that you assign intellectual property rights to your employer for "all software developed in the course of your employment". That's a bit ambiguous, if you develop something then theoretically the employer might say, "you wrote that while you were employed by us, therefore it's ours". So to be clear, if you have a personal project, you write to your employer saying, "I am developing such-and-such software for such-and-such purpose, and I want you to disclaim any interest in it", and ideally they write back to you saying something like, "We disclaim interest in such-and-such software, if it's written in your own time and not using our equipment." If they want that clause in the contract, and it's important to you, ask whether they would actually give permission (and/or test their policy before you sign the contract or as a condition of your signing the contract, by actually asking permission, for whatever you're currently working on). 

Depending on the number of programmers there are various possibilities. One is to assign a team (of several) to each component. Expect anyone/everyone in the team to be responsible (if necessary) for (anything within) the whole component. A team might or might not have a single chief developer or team leader, who might or might not also be the team's official point of contact between the outside world (management and QA). A minimum I recommend is code reviews. Each person is responsible for their own development, and takes days to code some new feature, and then one or more other people spend hours to review what's been finished and tested and checked in. The code reviewer[s] can suggest changes and can reasonably be expected (by management) to have understood what they reviewed. For example a review comment (before they accept or 'sign off' on the change) might be, "I don't understand this, you'd better rework it a bit and/or explain it better", or "what does this do, what's the function (e.g. visible in the functional spec.) that it's implementing, where's the automated functional regression test which will test this"). After (if) they do sign off on a change, it's reasonable for a manager to come along and say, "Look Bob's on holiday and/or has quit the company; we think there's a problem with this module you reviewed and/or we want to add a new feature to it. Could you have a look at that? You're familiar with (not to mention responsible for) it already, since you did code reviews when it was implemented." Code reviews have many purposes, including: