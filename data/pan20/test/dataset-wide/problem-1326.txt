The first thing I would change is the way the blocks inside of are handled. They are almost doing the exact same thing. 

To help make your code more DRY I would combine the and to one method. Which would make your code look like this. 

Reference Here are the three main features of jQuery that I used. Each link uses <api.jquery.com> which is a great place to learn about various jQuery functions. 

Regarding security your code looks fine, just make sure you use something like bcrypt when hashing your passwords. The most important thing you could do is write tests using PHPUnit or something similar. You have a lot of routes that can be taken when someone enters a wrong username or incorrect login information. 

In your setUp() method, you call several other tests to prepare future tests. With unit testing, you want to keep the tests separate. In your code, if testNewObject2() fails, testGetSuffix1() will also fail, even though it is unrelated. To reduce code duplication, use private methods for specific needs. Maybe something like this: 

All in all, it looks like you're off to a great start. I'm going to skip around a bit in what I recommend however there are definitely a few things that could be cleaned up. 

Depending on the size of the application, it may make sense to take this one step further and take advantage of object-oriented programming. 

I think you'd be better off using the official API wrapper from Facebook. If they ever change their APIs you could download the latest version of their wrapper and continue on. The best thing you can do for speed is cache the results. PHP can read files on the server a lot faster than downloading the information with CURL. 

I wouldn't recommend binding two separate click events that do relatively the same thing. It will become a pain to work with in the long run. 

You could add a data attribute to your radio that specifies the target label. Then the jQuery would be dynamic based on your HTML. HTML 

Also, I would add that some very notable programmers have emphasized the rule of a single assertion per unit test. As such, give some thought to this as well. Lastly, I would recommend being a bit more descriptive than object0, filename1, etc. Try to give more meaning to the variables. It'll help immensely in 6 months when you look back at your code and sit there wondering what the purpose of this or that was. 

Assuming you're protecting yourself from SQL Injection and the like, there are just a couple things that stand out to me: 

Part of the goal for using the Repository pattern is to separate the storage from the domain. By passing the IDataReader in to a Foo object, I feel like the domain gains too much knowledge of the underlying storage mechanism. So, between the options listed, I prefer setting the object's properties in the Repository. That being said, if the object doesn't make sense without a certain property, it should still demand it during its creation. However, even in this case, the Repository would still be responsible for setting all the properties requested. 

Note: I'm sorry if this is completely irrelevant but I'm not entirely sure what you are trying to accomplish. If I'm way off base please let me know. When I create a template loader I generally use output buffering with php . This allows you to run the page as a php file without displaying its content before you are ready. The advantage to "parsing" your php files this way is that you can still run loops and functions. This is how your method would look. 

Well the first thing I notice is that your function requires a to be added as a parameter. Which makes the first if statement a little redundant. The other thing is that is setting the variable from , but doen't return anything. I think you should ommit the function and change to handle the XML feed request and return the information you want rather than using two separate functions. It would look like this. 

Regarding documentation, I have found Eclipse and other tools to utilize the following style of doc-blocks. The @return is especially useful for code-completion of methods available on the returning object in my IDE. Documentation tools tend to have built-in support for other tags like @author as well. 

For example, could this variable be renamed to make it self-descriptive? Perhaps . Perhaps something else that would eliminate the need for the comment. One File Per Class Generally speaking, you want one file per class. I also believe it is common practice for C/C++ programs to have one file for the header and one for the code for that header. Maybe something like and , as well as your . Scope Why are your Tpacket_list variables protected? Is there a reason they aren't private? Also, list_head is declared in main, then freely accessed as a global variable within the Tpacket_list class. Rather than do this, it is considered better practice to use Dependency Injection. Pass this variable in to the class that requires access to it. It will make your code far easier to maintain later. It will also open up the possibility of unit testing your class. Random Thoughts 

It could be slow from all of the location redirects. But I've never done anything like that so I can't be sure. Is it possible to lazily set the cookies. For instance, set a session and cookie on the first page load. And then, on the second page load check if the cookie is present. This is how you could check if the page has loaded. 

Note: You may need to extend the way I choose each label's ID. I just noticed that you also need to update as well. 

As I said before, I'm not sure what kind of templates you are trying to load, but hopefully this will help.