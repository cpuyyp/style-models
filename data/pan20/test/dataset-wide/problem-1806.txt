You would want to optimize your tcp stack that comes on your os. Increase the number of open file descriptors. You might want to place your www directory on a ramdisk. You would want to increase worker connections and processes in nginx and the number of workers if you decide to use nginx. You would probably want to set up caching to compensate for badly written code. You are currently using APC which is an object cache, you might want to set up page caching using APC too, which will again offer improvements by an order of magnitude. You might want to memcache your database queries which should provide space to database bottlenecks. Use larger buffers in your web and database server. 

I am setting up a vpn service for 3000 users in AWS. The solution is built up on Linux and AWS. The design of the solution is: 

My questions is: Am I missing something critical in the design I have presented in the above diagram? 

I am trying to serve static HTML with server side PHP processing with Nginx. I have no experience with Apache. I would like to migrate the following re-writes from Apache's .htaccess to Nginx. What would be the corresponding rewrites for a server or location block in Nginx's default.conf? 

All DNS IP address should be static instead of Dynamic also There should be one local IP address which is used in your internal network instead of using external IP address. Can you share screenshot or something which makes us more understand how you have configured NIC? This would help to provide more accurate solution. 

Can you check Ping from local PC? Have you checked with Other PCs in your network? There can be issue with DNS. 

I would suggest to check GeoTrust True Business ID with Multi Domain which would work perfect for you. Though, it does not provide you to add wild card in SAN Certificate you can add up to 25 domains and they all are protected by single SSL Certificate. You can check it at following URL: $URL$ Gaurav Maniar MCP | MCSE | MCST | MCITP | ITILv3 Certified 

I would recommend Web Platform Installer it is easy to install wordpress on IIS 7. Just few clicks and your wordpress blog is ready. Manually would take time in configuration and everything. 

Please create Database on Server. Backup local database and upload .bak file on server. Restore backup using SQL management studio. if you don't have SQL Express Installed on your VPS. You can download and install it from Microsoft Website. Please check following URL : $URL$ 

You should generally validate your results with Yslow or Page speed to track your progress. And use load testing if optimization is what you are trying to achieve. Best of luck! 

I have spent the day reading the documentation at Nginx - $URL$ and the documentation at Apache - $URL$ but it has only culminated into horror and despair. I seek your help :) 

This configuration should work. But why should you be satisfied with humming, when you can scream with nginx! You should consider adding the following directives for 'improved performance' Here is a comprehensive Nginx.conf, you can pick and chose directives, and see which work for you. Most should work, as this configuration is for serving static html files. You might want to put the server block and its directives in you default.conf and the nginx directives in nginx.conf separately as this is both into one nginx.conf unlike your present configuration above: 

Broadly there are two views to handling more requests, and serving faster. One view is to write extremely efficient code. The other view is to be have extremely efficient serving (server). You can try for best of both, but it is tough to achieve. Most of the sites are located somewhere between these two extremes. For both these approaches I can recommend switching over to nginx completely, if not for only serving your static files, as nginx outperforms apache in both these respects by an order of magnitude. nginx is non blocking server and doesn't have the overhead of php for serving non php files unlike apache. New programmers and hobbyists tend to end up developing with pre-made frameworks, and platforms. These codes are not optimum as they are intended to serve a large audience. This group of people takes the view of optimizing their serving (servers) as they can not leave their framework and hence can not fully optimize their code. In this approach, in context of nginx on linux you can tune your server to squeeze the maximum performance you can from it: 

You can try with modifying boot sequence and add secondary plex. You can check following URL if that would help $URL$ 

Can this be issue with name resolution. Can you check with your DNS Server? If that is not allowing to resolve the name and after rebooting your app server it would allow to access. I had same issue when some workstation user complain that they were not able to access application stored in another server, we had done the same by trying to access with server-ip that would worked but not with name so we have checked DNS. We have made change in Application to access another server to using IP address as we have static IP network. Let me know if my suggestion works for you. 

You can convert Sysiternal tool to convert physical hdd to vhd. You can download it using following URL: $URL$ 

Use IIS Advance Logging option that would be helpful. There are also Options are available to write logs with options available as following: $URL$ $URL$ Gaurav Maniar MCP | MCSE | MCST | MCITP | ITILv3 Certified 

I would suggest to use A Record instead of Alias. It is my personal experience that A record which is good and reduce the performance issue. You can check following URL for more information. $URL$ Gaurav Maniar MCP | MCSE | MCST | MCITP | ITILv3 Certified 

The other group, generally experienced programmers who write their own code from ground up, or can manage to do so at a later point in time, try to write super efficient code, and be minimalistic in their 'design' efforts to server lean http responses which performs optimally on any stack. I have no tips to offer here but merely to suggest to follow best practices from authorities in the respective domain. Though, I can tell you Facebook's story in this regard. Facebook's is an iconic tale of progress from server optimization to code optimization. Originally built on PHP with apache, they soon ran into performance issues, at which point in time they started optimizing their servers heavily. The OS, PHP stack everything was optimized. Soon they had to start using memcache, which was quite recent from my memory. But no sooner they started experiencing service disruptions again. At which point, since they could'nt optimize PHP itself any further, they actually compiled it into machine code! Which is the end of line as far as improvements are concerned. Now they can only add more servers. Unless they switch their language. Which will also stop yielding benefits at a point. So these are the two options ahead of you. Choose wisely! Finally I can add that you should follow the handy set of rules and guidelines at Yahoo Yslow and Google Pagespeed for improving performance. Minify your JS, HTML, PHP, CSS, and place at top and bottom accordingly. Use a CDN. Design lighter pages etc. Best of luck!