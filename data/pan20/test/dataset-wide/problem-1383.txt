* this would somewhat increase security as it makes it more difficult for an attacker to use leaked sessions. Of course, if the attacker has eg XSS, they can simply read out the user agent (or use CSRF to perform any action the victim can perform); still, it's a good idea as defense in depth. 

SQL Injection To expand a bit about what @Ã…na said: Yes, you are open to SQL injection. doesn't actually support multi-queries, so the described attack doesn't work, and I would also suggest a different defense than escaping. Even though multi-queries do not work, an attacker can still read out any values from the database. There are two possibilities for this: 

Not for the password, but for the email, it can be avoided. As the problem statements says, use HTML5 email validation (it works automatically for type email, no need for a pattern; and your pattern is way too strict, disallowing a lot of valid email addresses). 

Structure It seems that there are a limited number of actions. I would suggest using an enum instead of a string. How you build your food isn't very clear when seeing a constructor call: 

I would probably also rewrite the handle method (it might not necessarily be faster, but I think it's a lot easier to read): 

Avoid duplication Right now, you have the mapping between colors and text twice, each in a very long switch statement. This duplication makes it hard to find bugs (eg mapped to , but mapped to ), and it also makes it hard to add additional colors/text, as your code needs to be edited in two places. Instead, you could use an array to look up these values. It might look something like this: 

which also has the benefit of explicitely returning false. Validation Functions Functions like and do not make sense. For someone using them it is completely unclear what they sanitize and when they should be used. In this case, should be used on output in most situations. A name like would be more fitting, but it doesn't really belong in a validator but instead in an encoding class. Structure A basic validator class should only contain basic validator methods. If you add specific validator methods, the class will grow very quickly and be difficult to manage. Those specific validation methods should be in the own validator. For example a may contain checks for age and sex. A generic validator should have funcions that can be used by multiple specific validators, such as length check, alphanum check, empty check, and so on. Comments I would suggest PHPDoc style comments instead of your inline comments. Database interaction First, a database handler isn't a , the variable name should be changed. Also, you should think about injecting the handler to make your code more flexible. Personally, I would hand it over to the specific methods, there is no need for a field. But I'm not too happy with a validator performing database interactions in general. Database queries should be located in the specific models or data access objects, so that all the database queries are in the same place (instead of all over the application). You could then pass that object which performs the actual check on to the validator and delegate the check to it, so your validation methods would still all be in the same place. To give you a general idea, here is some (pseudo)code. Depending on the rest of your application, you may want to change it, but it does help to put all your query code in one place. 

I don't think so. This doesn't seem like performance sensitive code. Even if you added a couple of branch instructions, it shouldn't lag (not now, and not with future extensions to the code either), so there is no reason to avoid them (except to see if you can do it). The lack of branch instructions isn't the only reason that your code is extremely hard to read though. Your variable names and your formatting are also making your code hard to read, and thus hard to maintain. There are tools which can minify your JavaScript and CSS for you (and they will do a better job than you will), so there is no reason for doing it that way, you can follow proper formatting rules (this goes for the JavaScript, CSS, and HTML): 

One approach would be to create a common superclass and extract the common elements of the function. As everything except the is the same, just pass that to the newly created common function: 

You have this twice: and . I would do this for two reasons: it's easier to read than , and because the shorter code is at the top it also becomes easier to see what statements finish what statements when you have nested statements. Usability I would add a functionality that hides the two open tiles immediately if the user clicks anywhere, instead of ignoring the click and letting the timer finish. It might just be that I am impatient, but it is quite annoying for me to wait out the timer. setWidget 

you can save all the null-checks. But as you pointed out in the comments, this approach somewhat limits the usability. An alternative to at least remove the duplicate checks is to extract the check to their own method: 

Storing data in session $_SESSION isn't really the right place to store temporary data like this, as it is global and only meant to store data across requests. I think that you are doing this because it makes it easier to see which values are safe, and which are not. If you don't want to switch to prepared statements (which you should), you should use some other means of doing this, such as storing the values in your own array or appending "safe" to the variable names. 

This comment doesn't tell me all that much. And what it tells me is at least partially wrong (there is no argument). Comments should always be up-to-date and they should tell me what the method does (which yours does partly; it doesn't tell me that it writes the SQL to a file), what side-effects it has (like your method, which deletes directories), what parameters it expects and what values they can have (does the file name has to end in ? can or should I prepend a path to the filename? where is the file stored?; are the table names case sensitive?; etc) and what is returned. 

Performance I cannot offer any mayor improvements, just some small things: You should save results of a calculation or action instead of doing them over and over. For example: 

If you don't do this, an attacker can inject a javascript key logger, perform phishing attacks, bypass CSRF protection and thus do anything the user can do, steal cookies, etc. It only requires the victim to click on a link or visit a website where the attacker can post javascript code. All this will happen in the background, so the victim will not be aware of any of it happening.