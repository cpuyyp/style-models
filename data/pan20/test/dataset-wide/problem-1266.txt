where n is how many false you have. generates a number between 1 and n, and checks if it is one. It has a 1 in chance of returning true, just like what you have. This increases the efficiency and is much less of a pain to type. 

After all, who wants to do that? I don't see any point in making a separate class for finding the deepest node int the tree. Why not just put it under one class? There is a better way to do it with recursion: 

Formatting I can't even read your code. Format it better; in an IDE, you can find a formatting option. In eclipse, it's . If you don't use an IDE, I suggest you install one. Eclipse is available here. Choose the installer, or the "Eclipse IDE for Java Developers" option. Naming 

How many warnings do you have? ANY of them means bad code. In this case, some of your variables are unused. Remove them. 

Explanation: The method is the basic method. It provide default values for all the possible editable values. The editable values are as follows: 

Similar to , but and result in , and every other combination . What is happening is that the ASCII values are 'd and 'd. Is this really what you want? In this case, you have to do it the tedious way: test each of them to : 

Just use . You don't use , ... that often, I would just use to save space. Although there are many reasons not to make code as terse as possible, adding lots of these variable declarations makes your code hard to read. 

There actually may be is a better way to represent this with JSON. I'm not a JSON expert. The point I'm trying to make is this will help clean up a lot monster creation code, and room creation that looks like this: 

This could be vastly simplified using JSON and the Python library. tl;dr JSON is a convenient way of storing data (in file) that roughly resembles a Python dictionary. (There are also alternatives to JSON like XML, but I prefer JSON). You can also refactor using JSON. Place stats into a dictionary. I would put the player stats into a dictionary so you can make access stats like: 

Looking at the source code for your code more or less does what it does. Here is their code for reference: 

I don't really believe you use to serve stuff faster. I believe is a better idea. (I don't like long names, maybe challenge yourself to a shorter name? Maybe ? Think about it.) (More) Comments Even then, isn't the most descriptive name, so you should include some comments as to what your code does. Don't over do it though. Remember saying something like: 

Of course I didn't include the numbers in the description... I am sure there is a better way to do this. I just did a simple solution, where I add all the numbers and take the first 10 digits. 

Your code at the current state looks very slow. Partition sort (or quicksort as it is generally known) is supposed to be faster than Bubble Sort. With my quicksort and bubble sort code, here is what I get for a 1000-element array: 

Never import the full package. It is considered bad practice to do so. Instead, import what you need and only what you need. Instead of just reading a file then printing it, why don't you create a method that reads all line of a file and returns a list of all the lines? This way, you can do more with the result: 

So you have to put somewhere in your constructor. Also, when it shows, is so small you could see nothing. You should also set the size you want it to be and if you want it to be resizable or not in the constructor, like this: 

Though, as mentioned in the Bugs section, it doesn't really work. In Hmm... Here you don't do ... Also, here: 

Why the "A" in the middle? I would remove it completely, as it both reduces readability and is doesn't add anything to the meaning. Same with all the other ones. In 

I wrote a game solver similar (but with reduced features) to an application called GamesmanClassic but in C++. The general idea is that (roughly speaking) board games can be represented with the four following functions: 

Should probably wrapped into a "main function". Furthermore, to keep stuff in the "main scope" I highly recomend you actually make a function. So instead of just: 

Using these methods a game tree can be generated that traverses every possible state. Then one can go back up the tree to determine if player 1 wins a game. (Well, it can do more than that, but that's all I have my program do.) I implement the four functions for a game called four to one. The game four to one works by starting off with four balls. The first player may choose to take away 2 or 1 balls, then the second player may do the same. This is repeated until there are no balls left. Whoever can't make a move looses. Here is the C++ code I wrote: 

I wouldn't go as far to say that functional programming and Python don't mix, but you should really consider what you're going for while writing it whatever language you are writing in. I would not make your goal: 

Or something along those lines. Furthermore, once you have done this, is only called once in your entire code. I would just get rid of all together and just call . 

Close the . Don't use . When you use an , and you know the size it is going to be, first of all, it's a generic type! Set it so that it only accepts Integers. Also, set the size: 

So if I have 2 arguments, I get the message . Umm... I provided 2 arguments! Suggested fix: Change the above code to: 

It is usually better practice to import specific classes. Also, I don't even see the use of any of these packages. Don't import what you don't need: it will affect performance. Formatting Your second class seems to have two-space indents. Java standard conventions suggests four-space indents. Your spacing is also inconsistent. Consider: 

Select a pivot Create two pointers, one at the front and one at the back Move first pointer up until there is a value greater or equal to the pivot Move second pointer down until there is a value less than or equal to the pivot Swap and advance both pointers If the pointers have not passed each other, go to step 1. Otherwise, continue Repeat recursively for each subarray 

Challenge 2: I would do a complete rewrite of that. You don't need an array, and you don't need that complex of code. Here is how I would do it: 

If the code that is calling the method performs minimal s to the list, it is preferred to use instead, as is faster at adding but slower at getting. Same thing here: 

The comment seems redundant. Your line of code reads clear enough for me to understand that you want to keep doing something until the list is sorted. 

Since you rap everything in a game object, maybe you should give it a string representation overloading the function, and just print out the string representation of itself. Move to . 

There may be some others. Please read the link so you can find the issues, or run pylint on your code to correct all of these issues. Structure You really should avoid using global variables unless you absolutely have to. In this case, you don't need them. Classes Given that you have some global state at the moment, it might be a good idea to write a class describing your game. 

A couple of the things they mention are only a concern for Python 3+ like . Also, it seems is a grammar rule introduced in Python 3+. (However, you may want to account for this in the future.) You seem to be also removing docstrings from , I am not one hundred percent sure, but you may also want to add as well. There is also a . However, I find it rather weird stylistically compared to your current method of looping. So... I'm not confident in making any comments about whether you should be using it or not. Nevertheless, I'm putting it out there so you are aware in case you weren't. 

To prevent inheritance: Easily fixed with the keyword. To prevent other parts of code to instantiate your class: It doesn't really matter, does it? You have no code that is not in the class, so instantiation does not matter. 

Since I don't have a C# compiler (sorry), so I converted both programs into Java in order to test. First Code: Average speed: 80000- 90000 nanoseconds Review: 

In java, it is usually bad practice to use so often, as java is a OOP (Object Oriented Programming) language. I have no idea what your class is doing, so I can't redesign your code to be more OOP. EDIT: After providing me with some information, I came up with this: EDIT: With some more information, I would do: 

has duplicate code. Though @Michele did an excellent job talking about separating into methods, keep in mind that duplicate code can always be reduced. In this case: 

Probably a big problem is that your code does not handle ties. I will leave that to you, as it is pretty easy. 

Some notes: Your bracing does not follow standard Java conventions. This is more of a matter of preference, but this is how I would format your code: 

Also, you don't have to call the constructor that takes no parameters in the Human class. If you do, the first constructor will assign "Andrew The Magic" to , then assign the parameter passed as to .