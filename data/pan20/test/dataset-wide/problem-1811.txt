I have two sets of ESXi hosts, one set for management and one for tenants. Each ESXi host has 8 nics and four vSwitches. All vSwitches are trunked via aggregated interfaces to a pair of EX in VC mode. I only have one ISP connection with a network allocation (/28) which is bridged (the ISP provides the gateway that we use) The EX uplink to the Sonic is ge-0/0/20, a trunked port for 5 VLANs: (10, 20, 30, 60, and ‘default/untagged’ vlan). The rest of the VLAN's are internal traffic, unrouted, no gateway. I need to have direct internet connection on VLAN 60 (not NAT). I have setup a RVI on the switch, vlan.60 as per $URL$ The Sonicwall supports “L2 Bridge Mode” so I can bridge my ISP connection (now connected @ X1 port) to the X0 port. They say on their KB that this way, you can effectively span your WAN subnet and insert the Sonicwall “transparently”: $URL$ If I bridge X0 to X1, I will only have a public interface for the sonicwall, I won't be able to use it's current LAN IP 10.0.14.254 Can I then assign my entire WAN subnet on my l3-interface of vlan.60 ? And, do I need to set the native-vlan-id of my ge-0/0/20 uplink to VLAN 60 ? The Sonicwall is connected to EX ge-0/0/20 (gigabit port) through X0 and to the me0.0 ('vme') port through X3. ![Topology][1] Topology: i.stack.imgur.com/Ijzw2.png 

The thing is that for its assests I'd like to use the local server (). I have tried adding Alias with no success: 

I set Outlook to move every new email from the Exchange server to my computer (i.e., in a local PST file). When I upgraded from Outlook 2007 to 2010 my rules were not listed in my E-Mail Rules tab anymore, but I know they were hidden somewhere, as my emails were still being classified and filtered as before. I ran the as suggested by Bart and the old rules were gone, but when I added new ones they weren't shown either... darn. To solve that I had to create a brand new PST... then the rules issue was fixed. 

I noticed this new workaround in the redhat KB: Red Hat Enterprise Linux 6.2 Manually Setting a Preferred Operating System Release Beginning in Red Hat Enterprise Linux 6.3, Red Hat Subscription Manager could set a preferred operating system version to use to limit automatic updates for a system. This is covered in Section 5.7.4, “Setting Preferences for Systems”. However, it is not possible to set a preferred operating system through Red Hat Subscription Manager on older versions of Red Hat Enterprise Linux. The system can be restricted to a certain operating system version on Red Hat Enterprise Linux 6.2 by editing the yum configuration. For example, to limit yum updates to 6.2-version packages: 

Then after capturing a fair ammount of data, go to > , sort by the column and voilà, you catch the bad guy. 

You can easily find nowadays Layer 3 switches, i.e., switches with routing capabilities. It works by creating virtual interfaces (vlan interfaces) with IP addresses. Just doing that you create entries on the switch routing table (yes, as I've said, it behaves as a router!) and the vlans will communicate with each other. You can add static routes (as a default route pointing to your firewall, for example) or even enable a dynamic routing protocol (ospf, bgp...), depending on the hardware and firmware available resources. And your hosts and servers can use this switch as their default route. Here is an example on a Cisco switch: 

I'm setting up a virtual environment consisting of 10 VM's with 2 primary SQL databases required. The infrastructure allocates two pairs of SQL 2008 R2 Enterprise edition (VM's). The pairs are recommended in order to achieve redundancy, however there are no specific methods recommended in order to achieve it. The 10 VM's will be running on a single ESXi host, which is connected via SAS 6Gb HBA to a SAN. I am looking for a recommendation in order to achieve redundancy between the two pairs of SQL databases - would Failover Clustering be the way to go? Are there any recommendations for configuring this failover cluster with vmdk files? 

This is the config that (finally) worked here. I can access a linux server from Windows without asking for a user/password: 

TIP: To avoid getting a huge ammount of data, limit each captured packet to 96 bytes (you should adjust it to the smallest number that would show the entire protocol header you are analyzing though) as you don't need to know the contents of your payload (at least on the first analysis): 

You can try TCL/Expect. It's very handy on this situations. Here follows a sample script (you'll probable have to tweak it a little): 

I'd like to know how to use Apache as a reverse proxy for a specific path and as local server for its sub-paths. For a specific location, I am using Apache as a reverse proxy (): 

This seems like it'd be a common thing to do, however I must be searching for the wrong things because I can't find a sensible answer. 

I'm creating an EC2 instance using CloudFormation. The first thing I want to do is checkout a git repository containing puppet manifests. To do this I need an SSH key. What is the best way to get the key on to the server? This is what I've considered: 

I'm trying to set up a build pipeline for a web service in AWS. The plan is to have the service run in an Auto Scale Group, and use Jenkins to build a one off EC2 instance, run tests and, on success, image the instance and pass it on to the existing Auto Scale Group. To create all the necessary resources for this, I've created two CloudFormation templates, one to build the Autoscale Group and surrounding resources, and one to build a one off testable instance. I've noticed a problem with this though: There are different base images for each region and each EC2 Instance Type. This means, Jenkins needs to know the region and Instance Type to build for. The ideal solution would be a way of selecting the target CloudFormation stack, and pulling the information (region, instance type, etc) from there. This means if we make any changes to the Auto Scale Group, they would automatically be reflected in the Jenkins build. If we created a second Group, we can copy the Jenkins job and change one parameter to point it at the new Stack. But this doesn't seem to be an option... These are the potential solutions I can think of but I don't particularly like any of them: 

In this example, the device connected on interface will be able to communicate with the other one connected on the , even though they are on different vlans (and that default route is not required). 

This is the rule I use here (and working fine on several routers), using an empirically based method: 

I bet this problem was solved a long time ago, but just in case someone needs something similiar, I'd suggest you to use a laptop running Wireshark. Just let it run for a while to check who's consuming your bandwidth. The only problem is to find where you connect it. If you have a hub then you can connect it between you router and your LAN switch. Otherwise it might be a little tricky. In a Cisco switch you'd have to configure a SPAN port: