Now the problem is apparent. Your network interface has the wrong prefix set. It is set to /8 (or in the old netmask notation, 255.0.0.0), which tells your operating system that every address in the 104.0.0.0 through 104.255.255.255 inclusive is on the same LAN as your VPS. This obviously is not the case. Most of this range is subdivided into very small networks scattered all over the Americas. Because of this, your computer does not know it is meant to route the packets, and tries to contact any address beginning with 104. on the same LAN, where it cannot be found. To fix the problem, you need to reconfigure your network for the correct netmask or CIDR range. You can obtain this information from your VPS provider. 

Aside from upgrading PHP to the latest version, which should have the fix for the bug you're experiencing, you can also have PHP generate its own error logs. For instance, I have a system where PHP logs to syslog. You can control this with the directive in php.ini. 

I'm going to recommend strongly against using 502 for this. Its semantics indicate that something is wrong on the server side and that the request would succeed if tried later. 

You can load any kernel module you want on HVM instances. By default, most newly created instances are HVM, and on the free tier, only HVM instances can be used. But you may have trouble on PV instances, as these require a special Xen-aware kernel which is sometimes booted from an AKI outside the instance. This is especially true of very old instances created prior to Amazon introducing pvgrub support for PV instances. If your PV instance is newer and boots a pvgrub AKI, then a Xen-aware kernel inside the instance is used, and you can use any module compiled for that kernel. 

This causes nginx to try to redirect to a document named "404", which is exactly what is happening. This should have been written as: 

You can only have one SPF record. Since you created four of them, which one actually gets used is essentially random. You should combine them together into a single record. 

The simple answer is "set the date manually", which you need to do, but to prevent this occurring again, there is more that you should do. 

Use a third party tool to reset the administrator password. There are a variety of these, which you can find with a trivial Internet search. I won't recommend any particular tool, and neither does Microsoft: 

Set up an ad hoc VPN between the old server and the new server (e.g. with OpenVPN). Copy the entire application from the old server to the new server. Set up database replication between the old server and the new server, with the old server as master and the new server as slave, via the VPN. Wait for all databases to be replicated. This may take a while. Once replication is complete, connect directly to the new server (use the /etc/hosts trick) and verify that the application seems to work, that the web server is configured correctly, etc. Break the master/slave relationship and configure the application on the old server to talk to the database on the new server via the VPN. Change the DNS records. While waiting for the TTL to expire, some users will hit the old server and some will hit the new server, but both will use the database on the new server. When the TTL expires and the old server is no longer receiving traffic, decommission it. Take down the temporary VPN. 

Because you can't just "convert the address back" to a MAC address, you must send a Neighbor Solicitation to determine the MAC address. There are other reasons why Neighbor Solicitations are necessary, as well. Some of these are: 

Virtually everything in IP and its related protocols is most significant byte first. In older documents, such as the RFCs you should be reading, you will see this referred to as "network byte order". 

The root cause of this issue is that Red Hat broke binary compatibility of their OpenSSL packages between 6.4 and 6.5, something that they promised that they would not do. Resolving this problem is straightforward, but depending on the applications you may have deployed, may take some yelling at your application vendors. Be sure to reserve most of your ire for your Red Hat rep (if you have RHEL). 

The option given by dmourati in his answer will help you, but you should also use , especially if you are not replacing all 469 packages at once. 

Each of the two entries you mention is individual and distinct. So if you want both to work, you need to add both. 

The only way you can do this, therefore, is to continue to set the ownership after the filesystem is mounted, e.g. in . 

KVM provides paravirtualization drivers for several bits of hardware; this particular one is the memory balloon driver. In particular, you should see when using the virtio network drivers, and when using the block device (disk) driver. And in the latter case, your disk would be instead of . In your case, the virtio disk and network drivers are compiled into the kernel, rather than as modules, so you would not see them with . 

This has been a very brief summary of a portion of Chapter 26 of The Practice of System and Network Administration, Second Edition, which anyone who is or aspires to be a system administrator should own, read, and memorize. I've glossed over a lot of things that don't necessarily apply to your particular situation or that don't make sense in a small environment such as the one you've described. Nevertheless it should be a reasonable description of the features that your "complete" backup system should have, as well as why they're necessary. 

The command line utility will allow you to browse and work with remote Windows shares. The simplest usage would be: 

EL5 didn't really support GPT partitions. Support for GPT was added in EL6, which was released after you wrote this question.. On EL6, if your system uses a legacy BIOS, then you can only use GPT on drives other than the boot drive; the boot drive must still use MBR. If you want to use GPT on your boot drive, your server/workstation must have UEFI. 

You should be configuring phpmailer to connect to , not to the hostname of the machine (which will then use its external IP address to connect). Localhost is allowed to relay mail through postfix by , but when you connect with the hostname it's via the public IP address, which is not allowed to relay. 

Build your RPMs using . This builds within a chroot containing only the necessary packages for building the RPM and helps to prevent situations like this. 

To estimate your usage correctly, put the 700 GB figure in "Data Transfer Out" in the pricing calculator, not in "Data Transfer In". 

Response caching is controlled by the HTTP response header. If it is set to or , then your reverse proxy will not cache the document. Typically is used for pages sent to logged-in users; it means that proxies must not cache the document, but it's OK for the web browser to do so. You can see complete details on in RFC 2616 section 14.9 et seq. 

They also note that if you want more control over the CPU model, that libvirt is the way to go. And, second, outside of very rare circumstances I would never attempt to run qemu directly myself. Rather, it's best to use libvirt (as recommended) and one of its front ends such as virsh or virt-manager, as these give you complete control over the virtual machine with a much easier to use interface (in the case of virt-manager). 

There are situations here where you can deploy IPv6 usefully. As you're certainly aware, any public-facing service such as your web server or mail server needs to have a public IPv4 address (and IPv6, of course). But other servers you may run don't necessarily need a public IPv4 address. I've been doing deployments of numbers of virtual machines in "the cloud" where only the public facing machine (i.e. the load balancer) gets a public IPv4 address, but all of the machines get IPv6 addresses. This actually simplifies things a bit since you no longer need a VPN or SSH tunnel to access any particular VM instance. (You will run into problems, though, such as nrpe and cacti not having full IPv6 support...) So give your IPv4 addresses to only those servers that really need it, and sprinkle your IPv6 addresses around liberally. You'll be glad you did. And remember your firewalls! 

Not really. What I would do is use VMware vCenter Converter to P2V the virtual machine to an external drive or network share, (by selecting VMware Workstation or other VMware virtual machine as the destination) detach the disk, then install ESXi on the server and import the VM that was created with vCenter Converter.