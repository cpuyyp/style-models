Never build packages from source and install them over the top of the packages that are there. This breaks your systems package integrity which can lead to strange ABI problems like receiving or messages. It is pretty critical the system maintains a reliable and accurate index as to what software has been deployed on a given system to ensure that it all works with each other properly, this is the reason we use RPMs in the first place. The viable (and Redhat blessed) way to go about resolving this is to use software collections. www.softwarecollections.org It installs is software and its 'new' dependencies in its own root. This can make it slightly harder to apply the package in your environment but does protect your system from weird errors or problems. It also installs the packages in their own namespace, letting you install multiple versions of a package in parallel. The website gives instructions how to install and activate these packages, it contains most of what people miss on older versions of CentOS and Redhat (EL6 in particular). Some things I've used from this website successfully. 

Each CREATE TABLE statement will have one of these after it to set the table owner. IMPORTING If you have SQL errors (which I've seen quite often, depending on the data. Strings with odd characters can be a pain) it might be easier to split up the file and just copy out the structure first and run that as a standard SQL query. Then start with the data and import it one table at a time. It makes it much easier to find the error when you cut it into parts. Especially when dealing with the very unhelpful error messages. Yes, it's a lot of copy and paste work but it gets the job done and will probably take less time then porting it into MySQL and then having to change the PHP to connect and get data from MySQL instead of Postgres. PhpPgAdmin and pgadminIII both have the ability to run SQL statements. pgAdminIII -> select database -> select 'Run arbitrary SQL Queries' button. PhpPgAdmin -> select database -> select the 'SQL' link. Honestly this is the least irritating way of moving databases that I've found. It takes longer, but only if you don't run into errors. 

Information Builders released mainframe database application FOCUS in 1975. You can read the whole story on Wikipedia: $URL$ What does the acronym FOCUS stand for? 

Select the icon to the left of menu item "File", then select menu option "Customize View..." Via this alternative method, you may configure screen "Customize View" to display menus Action and View. 

What FTP Service versions of Microsoft Internet Information Services, if any, support the proposed (and now expired?) FTP server command extension MFMT? NOTES The proposed MFMT ("Modify Fact: Modification Time") FTP command extension modifies a file or folder's last modified date and time information. This complements existing FTP command MDTM ("Modification Time"), which "which was only intended to read the modification time and not to set it as some implementations do." 

Hmm, from the founder of the company: "But they gave me something much more valuable, which was the computer time, and they also gave me the computer terminals. So that’s what put me in business. I got a little 1,000 square foot office in New York, and we divvyed up the $9,500 a month, $1,000 went for the rent. I went to a small space specialist. He specialized in under 5,000 feet. He got me this place, and they whitewashed it totally white. I mean lemon’s not going to do a whole lot for you. Today I can still look back on my starting point, that’s true. I was President so I took so much a month, and Peter took, and Marty took, and we had a sector, and we had two programmers part-time who ran the program for American Information Services. We labeled this program FOCUS. I guess it stood for online computer users, but we needed was an acronym that was easy to remember. So we gave it a computer type name, and FOCUS was our term for this non-procedural language. We got started about March 1, 1975. American Can gave us our first check and we set up shop." Link: $URL$ 

This will enable process accounting (if not already added). If it was not running before this will need time to run. Having been ran, for say 24 hours - you can then run such a command (which will produce output like this) 

The -d flag causes new files to inherit the ACLs you set in the directory. There are some caveats to bear in mind. 

You are only ever using one node of memory. You need to set this to use all nodes of memory. I also think the below applies too, and you'll see the problem still unless you know about the below. So leaving in for posterity. This issue basically boils down to the hardware being used. The kernel has a heuristic to determine the value of this switch. This alters how the kernel determines memory pressure on a NUMA system. 

Note the "freeze" cgroup will not evict pages to a media persistent location, but it will swap the pages out when enough time has passed and the pages are needed for something else. Even if this does work (its pretty hacky if it did) you need to consider whether or not this is really doing anything to solve your problem. 

After researching this issue, it appears no versions support FTP server command extension MFMT, as of the date of this answer. 

Number 4, above, is critical: we have set KeepAlive in some other clients (e.g., CoreFTP LE) but we seem to have some routing equipment in the server environment which drops our connection when transferring a 7GB+ file. We have also set passive mode and "resume transfer" functionality seems currently broken with this secure file transport server...so we need to download the file in one go. What FTPS clients might meet our needs? 

We wish to solve the business problem of how to schedule automated password updates, on a remote FTP server (note: z/OS) over which we have no administrative control, before the password expires. For example, once each month, update user JDoe's password, both locally and on remote FTP server ftp.abc.com. Our business process necessitates transferring files, using protocol FTPS, to/from a remote FTP server (note: z/OS). A separate organization administers this remote FTP server, providing our team with a user account but no server-level administrative control. FTP server policy automatically expires user account passwords, after a period of time. When this happens, FTP server staff require the person tied to the named account to call their FTP server help desk, to verify their identity. Upon successful verification, FTP server help desk staff reset the password, requiring the user to choose a new password upon the next login. The FTP server allows users to reset their password via the command-line, by setting password to string "oldpw/newpw/newpw"; subsequently, users login with only "newpw". FTP server administrators will not set an FTP user password to never expire. Years ago, a now-retired team member created an in-house app to perform this task, using FTPS functionality provided by ComponentPro "FTP/SSL Client Component for .NET". Per resource constraints, we'd prefer a solution we don't have to maintain in-house. Note: if possible; if in-house represents the way to go, so be it. How can we do this better? 

SElinux does not really care so much about file paths. I am unable to duplicate your problem. I am using a role and type on Fedora 20, but this seems to effectively replicate your issue. My program: 

Whats not so obvious is what happens during register. Another module called also built into the kernel receives notifications of new algorithms being inserted. Once it sees a new registered algorithm it schedules a test of it. This is what produces the output you see on your screen. When the test is finished, the algorithm goes into a TESTED state. If the test fails, I imagine (I couldnt find the bit that produces this behaviour) it isn't selectable for searching if you pass the right flags. Whether or not the test passes is definitely internally stored. In addition to this, calling the psudeo random number generator causes a list of algorithms to be iterated of prngs in order of strength as dictated by this note in 

I've had similar things happen when the ARD service went fubar and needed a restart. It's fairly simple over SSH. If you are using a different VNC server then this still applies. Try killing the process and restarting it. To restart the ARDAgent - $URL$ Basically. ssh into the box and run 

phpPgAdmin export uses pg_dump. You can read up on that if you want to know what it's doing. You may also want to export it as SQL instead of COPY. COPY is for Postgres and you'll need SQL if you want to try to use a different database. It's also easier to understand if your used to different databases. What you'll get with 'Structure and Data' is an sql file that will start with the database table structure, then all the data, then constraints and keys. As sascha has pointed out, you may be having issues with the permissions. I've always found it easier to just delete the permission lines or comment them out since this is just for a development database. Remove/comment/change the lines with 'OWNER' in them. Like 

BACKGROUND Each FTP server implementation decides if/how to invoke access controls, per File Transfer Protocol (FTP) technical specification RFC 959: 

Attempting to run Altera Quartus II (2) 9.0 on a remote RHEL5 Linux (2.6.18-308.1.1.el5 kernel 64-bit) box over a SSH connection via PuTTY 0.62 and a local Xming 6.9.0.31 X server running on Windows XP/Win7. I have set PuTTY up to forward X11 and successfully remotely run other X programs on this server. If I use Cygwin/X X server, Quartus II 9.0 displays correctly. Xming X server does not report any visible errors on the command line; it just seems to hang after displaying an initial blank, white box. Is this a known issue with Altera Quartus II 9.0 and Xming? Is it possible to know the root cause of the incompatibility? 

IBM Z/OS FTP SERVER PASSWORD RESET MECHANISM IBM z/OS FTP server extends File Transfer Protocol (FTP) command "PASS", to grant FTP users the ability to initiate the password change, via the FTP client. Specifically, enter "oldpass/newpass/newpass", in FTP client field "password" (substitute the actual old and new passwords, for "oldpass" and "newpass", respectively, preserving the forward-slash delimiters). Upon successful login, this triggers the FTP server to subsequently change the FTP user password, on the remote server. Subsequent logins require the FTP user to provide only the new password. Additional constraints exist; please refer to the IBM FTP command "PASS" documentation for full details. AUTOMATING IBM Z/OS PASSWORD RESETS Automation depends on both the FTP server password reset mechanism and an FTP client which lends itself to automation. We currently use Ipswitch WS_FTP Professional Client v12: 

If you want to make the labelling get honoured if you do a system relabel, you'd better update the local policy too! 

Personally, I find the current setup somewhat lacking. LXC seems more at the forefront -- certainly more maintained. 

Process accounting needs to be running prior to the process being started. It will not account already running processes when process accounting was enabled. You'll need to restart the processes for it to account them. 

Now, the untrusted user of course has complete ownership of that IP, but you can use IPtables in the parent namespace to do DNATing to the specific port they are allowed to bind to and restrict communication out to only that port. Its impossible for the user to effectively deny service on another port for another user as he has a specific IP that works only from within that users namespace. Note things are more complicated if you use or for name resolution service as the unix socket that is used for inter process communication is invalid in the child namespace. The only way I was able to fix this was to patch these programs to provide a TCP transport and do name resolution services in the parent namespace over TCP. I also wrote a program in C that uses netlink calls to set all the above up. The program is closed source so unfortunately I cannot share it with you. For the record, doing this in Fedora is a bit easier because you can create named network namespaces in it. But EL6 does not provide the functionality to do this. 

Since password policy represents a form of access control, and RFC 959 specifies no password reset mechanism, it seems reasonable to conclude each FTP server implementation decides if/how to support FTP client-initiated password resets. In practice, this represents what we see: 

Our IT environment provides 10 shared, Microsoft Windows 7 laptops for an office staff of several hundred people. After checking-out and logging into a laptop with an Active Directory domain account, office staff frequently run Microsoft Outlook 2010. However, the first time office staff do this, Microsoft Outlook 2010 prompts the user to create and configure their local account. This takes just several clicks, as Microsoft Outlook 2010 auto-detects the office staff member's Microsoft Exchange Server 2007 (SP3) account. The problem is: all office staff have to do this on each new laptop they use. Until they do so, some functionality does not work (for example, Microsoft Word 2010 Save & Send fails with error "There was a problem creating the message"). How might our IT department "pre-configure" the shared laptops so office staff can simply log-in and use Microsoft Outlook 2010 functionality without the need to configure a local account?