Yes. Your comment crossed the line from correcting (which typically relies on specific and concrete comments) to insulting ("this is terrible and if we keep it up we're doomed"). It doesn't matter how much experience you have. It doesn't matter if the code is complete garbage. Honesty isn't an excuse for being rude. That is one of the quickest ways to halt a team's progress and momentum. No matter how experienced or productive you are individually, you are going to be hurting your company overall if the attitude you project at the work place hinders your coworkers. The reason this is particularly troublesome (and why your management likely responded so sternly) is because it actually hurts your team in the long run. You should know that if your goal is to improve the real quality of code produced by your team, then this will actively hurt your goals. The reason why is because when you get a reputation for being critical, and not helpful, people will not come to you for help (nor will they generally listen to you when you try to offer help). As a result any amount of experience you have will be wasted over time, because people will stop listening to you. Be polite. Offer help and corrections, and not criticism. I personally think that in situations like this an apology (both to the person in question and to the team) is very reasonable. Edit to add it is certainly good that there was a helpful review in there too, but keep in mind that perception is as important as reality. In many cases it can take just one poorly chosen word to undo any real good that the code review itself does. A very informative code review that ends with (and I understand this isn't exactly what happened) "overall, this is garbage" is still going to leave the coder with a very bad impression overall, and it is quite likely that they will stop listening to everything else you say. It's important to keep the whole thing professional, every step of the way. 

These things can tell you a lot about a company without needing anything else. You can also word them so they don't sound like an interrogation and gets the interviewer engaged: "In the past I've worked on teams that use bitbucket to manage code reviews. What tools do you guys use for to help manage them?" or "In the 'tabs vs spaces' debate our team chose X. It's crazy how much controversy that created! Where do you guys land in that debate, and as a team how do you decide what standards to follow?". Questions like this accomplish a few things: 

How does your code review process work? What is your code style guide? Do you follow a particular standard for your technology? (PEP8, PSR2, etc...) What tools do you use to manage your continuous integration and deployment? What tools do you use for managing writing/running unit and integration tests? 

If you ask them about "tabs vs spaces" and their answer is something like "I dunno, whatever people want I guess" then you are obviously interviewing with a company that is not taking things seriously. If you start a friendly conversation about continuous integration and they don't know what you are talking about, then obviously you are in the wrong place. In essence, companies that write good code do so because the developers care about good coding practices. As a result, you should be able to have a coherent conversation with whoever is interviewing you during a technical interview about best coding practices. Granted, when you get in you may find some areas where their standards are not practiced as well as they claimed during the interview - no one is perfect after all. However, if the employees care about standards, then in all likelihood you don't have much to worry about in this area. 

I'm a fan of providing concrete feedback to candidates after an interview, if for no other reason than because it was something I would want if interviewing myself. However, I have someone that I'm not sure how to proceed with. I recently had a technical phone interview with this person, and it went poorly. There were some general questions that the candidate answered very well, but a lot of simple topics that the candidate had difficulty answering coherently. In addition, they showed all the signs of using google: a pause before answering questions, followed by a long and detailed answer given very rapidly, and then no ability to answer followup questions. When it came time to look at and write actual code, the candidate did especially poorly, flopping every question I gave them. The position itself is for a senior level developer, and I've run enough candidates through my questions now that I know that they are reasonable questions to expect someone with a few years of experience to be able to answer. I'm obviously not going to continue the interview process with the candidate, but here is the part I am stuck at: is there any feedback I can give this person that will be professional, courteous, and potentially constructive? I'm pretty sure it isn't reasonable to mention my suspicions about their use of google to answer my questions. I would like the feedback to be constructive if possible, but I'm having a hard time coming up with something other than a polite variant on "You did really badly", especially since nervousness is often a factor in these things. Reading some other related questions I understand that the first answer for many will probably be "don't give feedback". In this case that might be what I have to do. However, I still have a strong preference for providing some concrete and constructive feedback. I understand that, despite my best efforts, said feedback might not be well received. Given all of this, does anyone have any suggestions on how to provide concrete and constructive feedback to someone who bombed an interview fairly badly? 

I'm going to jump in with a long answer. I don't want you to misunderstand me, so let me be clear first: your boss' idea is a bad idea. It's a bad idea for a lot of reasons, most of which have been addressed in other answers. Here's the biggest problem though: You're playing by the wrong rules It sounds like you are in a leadership position in your company and work closely with the CEO. Having been in such a position myself for many years, I want to be clear about one very important skill you need to have to be very successful in such a role: you need to learn to speak the language of business. "This is immoral and I won't do it" is an absolutely useless response when the CEO asks you to do something. If you are going to say that then you need to be okay with the possibility of being fired and you should be frank with your next potential employer about what happened here. It's one thing to say "My boss asked me to do something illegal, and when I refused he fired me" (stuff like that can definitely happen in the USA), and many employers (especially the good ones) will look favorably on such a thing. However, "I disagreed with my boss about something he asked me to do, refused to do it, and got fired" looks a lot less favorable to you. You are insisting that this is immoral, but the reality is a whole lot more fuzzy. As someone who takes morality very seriously I don't consider this to be immoral: just a bad business decision. If your resume came across my desk and you explained this situation to me, I would just see someone who is stubborn and doesn't know how to work with business people. In short, if you are going to take a strong stand against things that are otherwise legal, but you object to for reasons of morality, then you need to find someone to work for that has the same morals as you. The right rules to play by As a person who works closely with the CEO you need to learn to speak the language of business: money. That's all you need. The response you gave to your CEO is completely useless, and there is absolutely no way any argument along those lines is going to change your boss' mind. That can sound very mercantile, but it is simply the reality of business. A counter-example is the owner of the company I work for: he is a very reasonable person and not at all tight-fisted about money, but when I tell him we need to buy some tool or software package for our developers, his answer to me is always the same: "Give me a cost/benefit analysis" (not his exact words). From my perspective, that is the only right response. Even Google has a limited amount of money, and must pick and choose how to "spend" it. The problem comes when a business owner is unable to see the long-term costs/benefits of short-term needs. The other answers here have already given you plenty of good examples of long-term costs that come with trying to do what your boss tries to do. Right now he only sees the short term "benefit" (it's not really a benefit): "I can make people write code for me for free!". He doesn't see the long-term cost. If that person isn't hired, how long will it take you (or someone else on your team) to figure out how it works? How much time will be spent fixing bugs since the person who wrote it isn't around? How do you deal with the fact that it doesn't properly work with the rest of your system since the person who wrote it knows nothing about your system? What about the very real loss that you will incur because your hiring process will absolutely drive away the best guys in your industry? Your boss is only seeing the short-term benefit. For a person in your position, your job is to move past your own gut reactions and give an analysis of the situation that your boss can actually use to make decisions. If in the end your boss is incapable of seeing the bigger picture (or executing it) then that is a good sign that it is time to move on to a new job. If, however, you are incapable of properly communicating the big picture to your boss, that one is on you. What you have tried so far is definitely not going to get the job done. And in the end, if you strongly object to the kinds of decisions your boss makes, that's also a sign that it is time to move onto a new job. Be upfront about the reasons you left your current job though, because it will be best for you to find a business that thinks the same as you.