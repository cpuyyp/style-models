It's simple, if it is unsafe or left too long, it's going to get thrown out immediately. Leave a note indicating they can find their meat in the trash. I don't see it as being any different as finding a fire, put it out now and don't wait to ask your boss. I know this sounds too brutal, but someone could get killed by this stuff or get very sick. If they want to complain about their food being tossed, it will be a great opportunity to give them a health lesson. 

Willingness to learn new things. Even if you are working on something specific for a long time, mention instances where you were still learning new things. There are people who have learned the latest and greatest technologies, but have an aversion to working on anything else. Being rigid can be a disadvantage for anyone. Make sure you show you have been able and are willing to take on new things. Generalize specific skills or industry specifics. I've worked in various financial companies. Some did stocks others loans. You have to be able to show you can identify and apply what they have in common. Demonstrate general skills. Not the same as #2. Verbal and written communication skills can go a long way in any job. Leadership, mentorship and getting along with others is important. Show how you've demonstrated good employee qualities: being one time when necessary, respectful to clients even when they're not, getting things done on time, managing your time, etc. People with no work history struggle to show they have these qualities, so they have to focus on their specific degree/certifications and skills. 

As a UX designer, you should be building a portfolio. Present it to prospective companies and if they want you to do something specific, you don't have much choice. I don't think having a portfolio would be looked at as you're being lazy. The difference is, include links or make some reference to the portfolio in your CV and cover letter before they ask you to do some other task. 

Learn how to take criticism. I realize you're an engineer-type person, so you deal with right and wrong. You want to defend your questions. Start with indicating you're going to accept their feedback and try to ask fewer questions. If you get a positive response from that (pay attention to how they react!!), you could ask for some clarification on what is a good and bad question. Think of the situation like working with a technology that has a bug. You can argue all day long that your code should work and there is no need for a work-around, but that's not reality. Do what works (and that applies to when you think there is a bug with the technology but the way you implement it is what is really wrong.). Your situation may be an example of people not confronting problems and going behind someone's back instead of offering feedback. Now it may be too late. Are you sure no one has been telling you to stop bothering them all along? There can be problems when someone asks a question: 

They think your project is so poorly done, they will severely criticize you to the point where you'll think you need to change professions. They're completely ignore it because they probably post the proper way to apply for a position on their website. Those who can't comply are seen as being less competent than creative. They'll provide critical feedback and see how you handle it. Do you get defensive? Do you just give in and agree with them? Can you apply the feedback to making it better? Not being able to handle criticism is one sign of being brash. 

This situation needs to be clarified by your supervisor. Get specific expectations about your helping this person with web development. Are you a resource for help (i.e. a glorified Google) or are you responsible for how web apps are developed in your company? Once you've clarified this with your supervisor make sure your coworker understands the relationship. If you are a resource, your coworker takes full responsibility for any code he/she writes. Your name is not to be mentioned. If you are responsible for web developement, you'll need to be involved in the review process. You'll need to be more demanding in your views being implemented. Some things can be handled by using exceptable practices (Passwords are considered sensitive data about 100% of the time.), but the others should be driven by requirments and specifications. 

Come up with some project that would require similar technology. Or learn a completely different language or framework. Some companies give 20% time for personal projects. You just get to take your 20% up front. Because once a project starts, you'll have no time for this. 

Since it is one person and you don't want to sound like a "know-it-all", ask for clarification in either a private email or conversation. They may not realize it is an error or that it can sound confusing. Maybe they'll decide it just doesn't matter. Hopefully, if this person continues to misuse the term, at least you'll know what he means and no further damage could occur. Otherwise, all of this is a matter of how you relate to this person or what everyone else perceives you. If you find yourself constantly having to correct others on technical terms, you may want to pick your battles and hold off on this one. You're a programmer, so you know it depends. 

If you feel a need to help him, tell this person that you think his coffee smells like whiskey. Don't allow him to confirm or deny it. Tell him it is none of your business and you don't want to know one way or the other. It's an FYI. Just say you don't want to get him in trouble. Otherwise, ignore it. Like others have mentioned, if you find problems with his work, you need to say something about that. His poor performance will only hurt everyone in the long run. 

You have to be prepared to let them know what you want. When you go into your review meeting or however you're going to be offered any salary/bonus, have a number in mind and be prepared to defend it. They're not going to show you numbers as to why they can't pay you more; they'll just say they don't have the money. They'll try and tell you that you make more than other people, etc. It's up to you if you want to indicate you're better than those people. They may argue that you're getting what the market has to offer. Since you don't want to say, "I have a better offer." You'll just have to make your case on other merits and accept their objections. You don't have much choice if you want to remain with the company on good terms. 

Unless you think one of the 4 you posted is not appropriate for a particular position (or you run out of room on your CV), you can leave them all. The subject of coding may not come up in the job placement process until the 2nd or 3rd interview which tend to get more technical. If your online code doesn't get mentioned, you should bring is up as a follow-up question. Just ask what they would like to see and point them in that direction. This will save them time. Otherwise, I think everyone wants to see something that: is good quality, matches the job description, and possibly has some level of complexity. 

HR and other non-technical people will first look for the necessary alphabet soup in your resume. Listing job experience makes their task easier (in their mind), but they may want additional explanation on other projects. I don't care if you worked for a major tech company. If you can't sit down in front of a computer and show me something, you're not good enough. All the multiple-guess quizes, certifications, and bizare puzzles are not what you'll be doing on the job. Also, get your references in order. You may have a degree and good grades, but letters of recommendation from professors who are strong in their field are priceless. It's not what you know; it's who knows what you know. 

Encourage others to reach to her. They may think she doesn't want to talk to them because she doesn't initiate, but again, that doesn't seem to be the case. 

I think everyone should take responsibility for their own skill development in their career. Ideally, everyone would put more emphasis on working at companies that provide training and employers would get the message. You did the right thing. Make sure there aren't any unintended consequences of your actions. 

The problem may not be with your solutions, but the fact you're stating them out loud in a meeting. Some people feel threatened by this or as a senior, feel the need to make a better suggestion because it is expected of them. Instead of confronting them in public, ask for a one-on-one session to review your suggestions and get some feedback. This is a learning opportunity for you and it may be more political then technical. I'm not sure how to phrase it, but at some point you could ask if your boss prefers you to keep quiet during meetings instead of offering suggestions. It's fair to say that being rejected 100% of the time is discouraging. Or you can just stop making suggestions in meetings. Maybe follow-up with an email of suggestions just so they know you have a brain and like to use it.