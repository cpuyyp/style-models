This is great if you really want to hammer the point home that "I did ..." but again, it's your CV so it is implied. 

Finishing a task that was requested at the end of the day. Performing maintenance or repairs when others don't need their equipment. Handling a customer request. 

Many postings are horribly written by people who know nothing about the job. If you "must have" 3-5 years of experience in an area, are they going to reject someone with six? If they need an excuse to reject a candidate, they'll stick to the letter of the law. Once they identify a strong candidate, they'll probably look past a requirement or two (They'll describe that as an error, so it should have been under the "nice to have" section. If it's just one job, what is there to lose? Just be careful you don't get in the habit of wasting your time (and others) applying for jobs where you don't qualify. You never know, you may apply for another position that you do qualify for at the same company and you've already made a first poor impression. They may not remember you, but they may have a database that does. 

Unless it is such an absolute given like listing your job experience, most companies would indicate in the job posting that you must provide current salary. In some areas, this would turn away candidates. Many may feel we should get to know one another a little more before discussing such personal things. I don't know if the Asian job market has adopted any recruiting practices or have any in common, but they would need to be cognizant of other regions if they want to attract their talent and avoid offending them. 

If you want to start with a broad definition and then utilize it to help you go about getting the information necessary for an informed decision, that's up to you. It wouldn't be a bad place to start. 

Even the most esteemed CS programs have turned out a few developers who don't know what they're doing, so other factors need to be considered to weed them out. That's not an argument for not getting a degree. There are no guarantees in the workplace. 

The Lynchpin - This is that person involved with just about all the basic workings of the company. It could be the receptionist, someone's assistant, the office manager or even a janitor (It you're a teacher, you'll know what I mean.). Be nice to this person. Don't even think about looking down on them. If they really wanted to, they could make your life Hell. Your Supervisor - Did deep and get to know what your boss really expects out of you. If he wants things done fast at the expense of a little sloppiness, work a little faster than you would like. Know which projects take priority. When you're valuable to your boss, he will fight to keep you and bring you along as he gets promoted. Don't even think of trying to make this person look like a failure. You'll regret it. Your Team - Get along and make every effort to contribute. Do a little extra. Volunteer occasionally for one of those tasks everyone hates. It's not that you have to get on the good side of any one of these people, but you want some type of consensus that you're good for the team. 

Someone at the top is controling this whether they know it or not. Your group should be getting the "tasks within the profile" before any meetings take place. This way, you can review and bring thought out solutions to the team meeting. Your group needs to request the problems that need to be solved so you can come up with solutions instead of having them dictated to you. Of course they may not like how you do things, but they're not your boss. Or are they? 

If so, this is a serious problem. My guess is this person feels he/she should never show weakness by admitting failures and is doing a little venting as well. He's in charge so there's nothing any of you can do about it (as far as he knows, but you can all slack off behind his back). If everyone starts acting like scared little children who have been scolded, he's being reinforced into thinking you'll all go back to your desks and work harder. 

You're interrupting people who are having work conversations. It's rude. One way of dealing with rude people, is to ignore them. In one case, you're trying to give advice. As a subordinate who is interrupting to give advice is a very bad move. Excuse yourself for the interruption and ask if you can help. If they ignore you, move on. Nothing you can do about it. The emphasis on your loud voice. Many scientists are introverts and they don't care for loud anything especially voices. It's adversive to them. Stop. Talk normally. I know I don't care for people standing next to me and talking like I'm on the other side of the room. Spend more time observing how others interact. Wait for people to speak to you first. Respond calmly, pleasantly with an indoor voice. 

You went to QA by choice because you don't like programming. Let them know you did what was best for the team/project because you're willing to cooperate and pitch-in where needed even if it means not having your preferred position. Maybe you had no choice. You were moved from a programming position because you were the worse programmer and/or not capable. Explain your situation. Maybe the choice to move you was purely based on amount of time with the company and you were the latest hire. Let them know you were a programmer in good standing. Since you haven't been programming, your skills declined. Make sure you emphasis that you were still writing code. Maybe you code on your own time and contribute to an open source project. 

If certifications are as important as you say in your area, then I think that is an exception to the rule. There's nothing wrong with knowing the company's position on employee certification and pay. A company that wants to give incentives for certifications, should be more upfront about the benefits and shouldn't discourage people from getting them sooner rather than later. You may find you have a better relationship with your immediate supervisor and can ask about it in casual conversation. Some companies have set time frames on evaluations and other promotions. All companies and managers are different and only you can tell how they will react along with your tolerance for risk. Keep an eye on the current job market. You may find this next certification is worth more than you think. 

I think you need to get some things straight with this person before you can make a decision unless there is more to it than you are telling us. Your "friend" should have kept his mouth shut and completed his personal business away from the office. He intentionally has put you in a bind. Ask him to explain the following: 

Inform all parties involved that this is not an appropriate topic of discussion at the work place. Don't get into who started it or said what. Everyone is at fault since no one did the right thing and stopped the conversation before it went too far. No topic should ever cause this much hostility even if it is work-related. You have to demand that professional adults show restraint. Establish consequences if this continues (I have no idea what would be considered legal or appropriate in your area.). As others suggested, you should have your HR department formalize this. 

and expect people to perform? There's no need to yell, but there have to be consequences for not getting projects completed. If you offer what you claim to be very good salaries, the bonus is not going to be as important. If you honestly believe you have created an environment for developers to succeed, but they fail on projects, they have to go. Of course we would like to hire the best people who do great things all on their own, but that's not always easy. Start setting standards. Code quality, testing, customer approval, learning new technologies are required to not only get a bonus, but to keep your job. You're offering a great opportunity for a programmer, but they're taking advantage of you. 

Provide steps to solve basic problems. Give them a list of information to provide when making a request. Push the request back when they don't. Don't be arbitrary and expect everything including the kitchen sink. Have your app create a log file of important information when they use the app successfully (so you know what works) and maybe another file of reported failures. 

Since no one else is using it, why should you? Having just a basic understanding is no reason to put it into production code. See if the team prefers your solution and go with it. Patterns can be a dangerous thing if they're not used properly and the only way to use them properly is to understand them. With so many questions being asked by all the devs and only one (you) being able to apply the pattern, it seems obvious the understanding is limited. Your boss should be aware of this. You should be concerned that other developers won't be able to maintain this code. If you don't know why this pattern is being used (And why didn't you ask that when you were shown how to use it?), it may be difficult to maintain and expand. 

If there is a project manager who is suppose to be prompting people from another department for feedback, but the programming staff is having to do it to keep projects moving, the programmer's boss needs to know about it. Not talking about a once in a while thing. Your boss may be happy that your team picks up the torch and runs with it, but he needs to know you can't keep it up forever without sacrificing something else. Management may think that programmers are only interested in "flipping bits" so they don't bother sharing the marketing goals and trends. You can't prevent people from being defensive, but try to ask what's going on in as non-confrontational way as possible. Don't pick certain projects, but just ask your manager to find out which projects are the most important and why. You'd like to know. You're curious and care about the company. It's the break rocks or building cathedral attitude. Corporate cultures are a hard thing to figure-out. Your team is made up of smart people who should know how to solve problems. Push the issue during your lunches and don't let them get away with saying, "There's nothing we can do." If so, STFU and let me eat my sandwich.