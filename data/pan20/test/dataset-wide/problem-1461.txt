The best way to answer this question is to measure the performance and see if it satisfies you. If not - then start thinking about caching results and refreshing them instead of calculating from scratch. 

What you need to complete is to define a which consists of 2 180-degree arcs and 2 lines, and pass it to method 

Note that you're using a separate thread (on a threadpool) each time you write something to log, so there will be contention between multiple threads if you write to log quickly enough. I would recommend using existing logging frameworks like NLog or log4net to avoid inventing a wheel. 

Your code is correct, but can be simplified. method usually gets an expression rather than a in-place function that is immediately evaluated. Here is how I would write this test: 

I suggest to make non-nullable by replacing usages of with a completed task. It will simplify the code as you can always await on this field, and assume it is the "current" task running. You would need to introduce locking in order to synchronize access to the continuation task, and ensure that the is only called when it was a winning bid. Also, you would need a double-checked locking to ensure that your task is the winner: 

There are a number of articles describing why a is quite a bad idea when defined on top of ORM framework. Main reasons are leaked abstractions and abstraction on top of abstraction. And your example shows why - any optimization requires the knowledge of underlying implementation (Entity Framework). Running this process in multiple threads may help, but will put additional load on the database server and thus is not scalable. Note that Entity Framework's is not thread-safe, so you cannot share the in multiple threads unless you spin up a new per request there (which I wouldn't recommend doing). Assuming that you're using Entity Framework 6.0, method returns , you can try asynchronous implementation of the data retrieval: 

Other thoughts Ternary vs Short-circuiting logical operators As I mentioned in an answer to your previous post, the ternary could be simplified from: 

Yes, in addition to the code sample above, you could also utilize one of many libraries that abstract the XMLHttpRequest functionality into wrappers (A.K.A. AJAX wrappers). Many of those wrappers utilize promises. The XMLHttpRequest code could be abstracted into a wrapper using Promises (see this example). For a comparison of many popular libraries, look at this page. One example is the fetch API. Be aware though browser compatibility could be an issue (e.g. if support for older browsers like IE is needed). 

Checking arrays for values Perhaps you like the functional approach to check the arrays for a value (i.e. ) but that could be simplified using Array.includes() 

Originally, before I added the javascript tag, this question only had the ecmascript-6 tag. I don't see many features of es-6 in your code, like let and const, arrow functions, default parameters, etc. So judging from an ecmascript-6 point-of-view, I would say No. See the rewrite below which utilizes those features. 

Well, in mdfst13's answer, there is mention of the user viewing the Javascript. A non-admin could still see that is a link to Cuenta_us.html and access that page even if the link doesn't appear on the page - thus it would be wise to have server-side validation on such pages. Other feedback The following code is a bit repetitive: 

Your solution is absolutely correct and practical. In fact also returns empty array under the hood, just slightly in a different way (they have a separate instance holder class that is lazily initialized). 

Nice task for brains :). First of all you should prepare your available list of words for faster search: extract all letters, sort them and order by descending length (so that you don't need to sort results later. Make sure to cache it somewhere as that would be the most time-consuming operation. I've written almost all, leaving you the method to compare 2 sorted character arrays :). 

Operator overloads cannot be reused, you would have to reimplement them anyway. Both structures have references to each other which is not great. appears to add a very little value on top of . 

Your example does show IoC tecnhique by passing interface to rather than actual implementation, but doesn't show the power of DI containers like auto-wiring and object lifetime management. In your example IoC container looks like just a replacement of a local variable that holds the instance . Example of DI autowiring using Autofac (use in NuGet console to install it). I borrowed 's definition of Oracle, it is more appropriate and demonstrates the IoC better than original code. I register before registering classes it depends on to show that the order is not significant here. Note that is initialized through constructor while is injected via property (just for demonstration, it would be better to use common approach): 

And then it can be referenced with-in the constructor to add the image and counter elements. If the value was assigned at the time of declaration, then const could be used instead of var. 

Additionally, given the last example of Equivalent constructs, the while loop could be rewritten as a for loop as well: 

That way, if a value like is entered, it isn't interpreted as the octal value (I.e. Decimal number ). 

With this approach, the JavaScript code is not duplicated once for each tab option. Perhaps it may not be a big issue because that code could easily be updated with the PHP code, it would yield a larger HTML/JS page size. See a demonstration of this in this playground example but note that the AJAX requests won't yield the pages as expected so the code to update the containers has been commented out. However I made a phpfiddle that has the response from the AJAX request utilized. 

I can't claim to be familiar with Electron, but after looking at the documentation and an example on github, it appears that an electron convention is to use / 

I don't remember where I saw it (maybe one of your other posts) but I recently saw a technique for ensuring uniqueness of array elements - iterate over the elements and just return the equality of the current index to the value returned by calling Array.indexOf(). Using that technique here, Array.every() can be used to ensure each word is unique. With that technique, there is no need to count the number of occurrences of each word and hence the reduction can be removed. Thus can be eliminated and can be simplified like below: 

Even if your solution is (almost) correct, the actual problem is in a wrong formulation of the problem. The main issue in your question is the assumption of a certain order of records within a table. In reality SQL Server cannot guarantee original order of records when you do a statement without clause, even if you have a clustered index defined. In order to properly map 2 tables you must have a criteria for matching records. You provided a solution that won't generate consistent results. Imagine that you need to add another student/subject () and a mark for that. If you add one record to table and one record to table your data will be screwed up since record will be matched against 3rd record (). In order to fix the issue you must add a field or fields that allow unique reference of records, that is you must add both StudentId and SubjectId to table. Alternatively you can create a surrogate key in the table and use it as a reference in table. UPDATE. The main difference between original question and example in Edit section is that records can be ordered by unique key (primary key) in latter case, while in original question didn't guarantee specific order and produced inconsistent results. Your updated example is using mapping properly, according to (updated) requirements, and will produce consistent results as long as and are unique in corresponding tables 

Foreword Bearing in mind that this post was created more than 4 years ago, you likely have changed the code and learned more about PHP features - perhaps you don't even use/maintain this code anymore. I honestly have never played Minecraft, nor had any reason to monitor server statuses. But I wanted to give some feedback to this question. Feedback The code looks pretty sophisticated. I honestly haven't used before. That is neat that the class can function as a stand-alone CLI tool. Suggestions Utilize member variable instead of passing The methods and make calls to private methods like , and , which all appear to be private methods. Instead of passing the hostname and portnumber to those methods, the methods can utilize the member variables using . That way, the member variables don't need to be passed around. Mapping Character to colors The statement in could be replaced by a lookup in an array. 

I hadn't learned until testing out this code but an Error can be thrown and caught - I thought that was only possible with instances of Exception but both implement Throwable...ergo... Method length The method is quite long - especially considering it is a constructor. It would be advisable to break up the pieces into separate methods - e.g. one to create the request, one to take the return value from the request and send the response, etc. That way the constructor can be shorter as it calls those methods, plus those methods would hopefully lend themselves to unit testing each component of the process. I considered suggesting that the to set attributes be replaced with a call to but that might require flipping the array keys and values, making a Callable out of the method, etc. all to save 1-2 lines... 

You should introduce Dependency Injection so that receives the object of type rather than instantiates it itself. Once you've done that you can write tests by injecting stub of into . In your current code there is no need in creating mock for since it's the object under test, and you can instantiate it directly (you can use mock for object under test e.g. if you're testing abstract class). Also you may not need stub for object (it looks like a data object) if you can instantiate it with required configuration yourselves. Fixed code for your current implementation: 

Update: I did miss the point of having just a single thread that does the heavy work... You're right about using , this is the best structure to be used here: 

Cache the instance of and objects so that you don't need to create them each time you measure the length of string. I've created a small test to see which part takes most of the time: 

You're passing corresponding to UI thread so naturally the code will be safe to work with UI. I would recommend using to update/inform UI about changes in long-running task though, since you may want to separate computation logic from UI-related code. 

Having said that, assuming that you are using one of the high-level languages :) and you're developing a long-living solution I would actually recommend you to use one of the ORMs available for your language to interact with the database. It'll take a bit longer at the beginning, but you'll get a more flexible solution in a long term. 

I agree with everything in Guy Incognito's answer. I also see another possible improvement: DocumentFragment One possible optimization is adding the child elements to a DocumentFragment to avoid reflows after each element is added. 

Could be simplified using Object.values(), Array.prototype.forEach() and Array.prototype.push(), thus reducing the need for the iterator value . Actually, I removed the variable inside the callback function and referenced the one outside the callback function, thus reducing the need for that extra variable, as well as . 

jQuery Since you have 5 js libraries, I would question whether jQuery is really necessary (and suggest you look at youmightnotneedjQuery.com if you haven't yet). The Fetch API or one of the three suggested on YMNNJQ could perhaps replace the jQuery AJAX code (i.e. ). I see places in the jQuery code like . Alternatives to using that jQuery pseudo selector would be to add an id attribute to that first element and using that with , or select it with document.querySelector() and then use appendChild() to add the HTML. and I would definitely recommend replacing with and where appropriate in the .gs files and unless browser compatibility is an issue, use it in the regular javascript files as well. Notice in the example above, I used - this is because that value is a constant and should not be re-assigned.