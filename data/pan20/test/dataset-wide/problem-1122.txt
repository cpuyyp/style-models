MongoDB does not require you to predeclare schema, but there is still some onus for an administrator to remove unneeded indexes or data constraints. The Mongoose Node.js framework you are using includes a declarative client-side schema, but the MongoDB server is unaware of any changes to field or index usage. By default Mongoose creates new indexes on startup (depending on the option of your schema), but does not have any tracking to remove or alter index definitions once created. Since you had previously created a unique index on , the index will need to be manually dropped if you no longer require that constraint. The duplicate key error message indicates the index name and offending key value: 

The first example is the most typical approach. NOTE: If you want to specify host and database as per the second example, you have to provide the database connection string without using the parameter. 

The large number of key comparisons is explainable by the skip value: the query is skipping 903,462 documents () in order to return 21 (). The value in your output is the sum of and . The number of (identical to ) is because the skip stage in MongoDB 2.6.x query processing happens after the document fetch and projection stages. There are a few suggested optimizations for skip performance you can watch and upvote in the MongoDB issue tracker: 

To avoid this behaviour when building new indexes on collections with significant existing data, you should build the index in the background instead: 

As at MongoDB 3.4, the source IPs that are able to establish a connection are determined by your firewall settings. There is also a setting for MongoDB which determines which network interface(s) listens to. Once a connection is established, access control and authentication is managed by your MongoDB configuration. In your example, you are able to connect via the shell because the source IP is not blocked by firewall configuration. Assuming access control is enabled and authentication has been properly configured, establishing a connection to MongoDB does not provide any access to data. There is a relevant feature suggestion in the MongoDB issue tracker you can watch/upvote: SERVER-22084: Add IP-based login restrictions for users/roles. For more information on best practices, see the MongoDB Security Checklist. 

Something to help out with accomplishing it...Idera put out a free tool for reviewing SQL Server Jobs that I have used a few times. It is very good for getting a good overview, although it does have a few limitations since it is free. Worth checking: $URL$ Something I would add for the security side of the house...A trace file specifically for capturing logon activity for user accounts. This will allow you to find inactive accounts easily. Then also script that monitors when someone is added to fixed server/database roles. Especially sysadmin, if you are not the only one managing the server/instance. 

I turned to my copy of SQL Server 2008 Internals and the DMV sys.database_recovery_status was pointed out to find the first LSN of the next log backup. Which going by BOL the column provides you with: 

So I would necessarily say it the transactions to the database on the secondary but it them to the secondary. Then depending on which mode you are in would be when the transaction is committed to the database on the primary (synchronous or asynchronous). So I would probably state it as: 

Ok, there are a few things to explain first. (1) The prompt within the properties is only asking for authentication. You cannot specify a database name within the field of that window in order to connect to it. For the server name you specify either or . You would connect to a specific database by setting this via the tab: 

There is but it would be a bit painful to implement and might be granting more access than you think. It will depend on what level of access you want (read only, or ability to manage services). This is mostly a guess for SSCM but in Window Server 2003 you used to use "SUBINACL" command line to grant access. I believe this is still availble in higher OS but you would need to check. Outside of that just specific to SSCM, this uses WMI calls in the background so at most you are going to need permissions to execute WMI calls. Understand that this is not just specific to SSCM so granting access to this may give more permissions that is needed. I am also aware that the old "sc" command was used to grant permissions to services so that might also be used as well. This was required when WMI calls did not work properly and services did not show up in SSCM like they should. 

Your question is very broad as there are multiple storage engines in MongoDB 3.0+ (and a storage engine API). Physical layout for data and indexes will depend on the storage engine implementation, but it sounds like your general question is how documents with varying schemas are stored and indexed. Conceptually each document is stored in a contiguous binary record allocation which may include padding depending on the storage engine. The server-side document representation is in BSON ($URL$ which is a binary JSON-like format with a richer type system than JSON. BSON records can vary in size; indexes (typically B-tree) point to the current location of an indexed record. MongoDB (as at 3.2) does not maintain any schema information outside of the actual BSON data. Each BSON document includes all of the field names as well as the values. This dynamic schema (or "schema on read") approach allows documents to be interpreted as they are read from storage without consulting or updating a central schema catalog. For more information, see: 

MongoDB server code always uses one of the listed assertion functions rather than a generic so the intent of the assertion is clear (i.e. operation or process fatal, error or invariant failure) and the assertion leads to a consistent termination of the applicable context (operation or process). Assertions that are operation-fatal (, ) will abort the current operation and return an error code and message to the client application. One common example is "E1100" (duplicate key error), which indicates that a document cannot be added to a unique index because there already is a different document indexed with the same key. The assertion numbers do not have any specific meaning aside from helping identify the code point(s) that throw a specific exception. You can find a list of error codes in the MongoDB source code: src/mongo/base/error_codes.err. Operational-fatal assertions also increment counters in . These assertions should be uncommon and typically indicate application or user error. If these counters increase significantly it would be worth reviewing your MongoDB log files for more details. Note: the counters are reset to 0 when the MongoDB process restarts and can potentially rollover for long-running processes with a lot of assertions (as indicated by the value). Assertions that are process-fatal (, ) will shut down the MongoDB server process. Common examples are file permission errors on startup (unable to read or write files in the ) or serious data integrity errors where continuing might lead to corruption or loss of data. These assertions require administrative intervention to investigate and resolve the error. 

I did the upgrade on my laptop with SQL Server 2008 R2 and SQL Server 2012 already installed. The issue I had was that SSCM actually disappeared from the Start Menu, if after repair it would not put them back. I ended up finding them under the Windows root directory, but have since done a complete reinstall of Windows 10 on my laptop, and reinstalled SQL Server. I would expect you are looking at a similar situation that is going to require a reload of Windows 10. You might try just doing the , where it does not completely remove everything...but I doubt that is going to work. I did a factory reset where I went back to Windows 8.1, then forced an upgrade to Windows 10. Which I might add, doing that seemed to have improved Windows 10 at least on my laptop (Lenovo Y 40-80) compared to running it after the upgrade. One last chance you might attempt is to install the SSMS preview (standalone of SSMS) from here. 

The key is , this DMV is only going to return those XE sessions that are running. So you basically just look at the and that is when the session was started. You can verify this by looking at the session as the time returned should match up to when the instance was last started. An example is my SQL Server 2012 instance on my local machine is kept stopped most of the time until I need it. I just started it so you can see the times are pretty close: 

Yes. You would need to write your own custom web app to interact with each SSRS instance. You would do all of this using the .NET library around SSRS, it includes methods and such for interacting with reports in SSRS. A small/basic example: $URL$