I use an external server for running an additional instance of Nagios, which is a last resort notification in case of complete failure. I wish I had an answer for your modem audio playback question. I want to say it should be simple but my knowledge of that stuff is getting rusty. There used to be Voice Modems sold specifically for playback of audio. If I were you, I would be trying to redirect audio playback using console software. I'd think this could be very simple. I might research more later when I have a moment. 

The primary difference would be a preference between naming conventions and how your hosting service configured it. I have typically used for user directories and often for system-wide but that's more a personal convention. In all likelihood, there is no difference but we can't speak for an arbitrary configuration. 

Typically console output is specified in . Fedora 8 and newer uses rsyslog, which would be . Looks like netfilter (iptables is the userland client) activity to me. 

alters the destination IP address to send to the machine itself. In other words, locally generated packets are mapped to the 127.0.0.1 address. It's for redirecting local packets. If you only want to redirect the traffic between services on the local machine, it will be a good choice. is actual Network Address Translation. If you want packets destinated outside of the local system to have the destination altered, it's the better choice of the two, as will not work. 

While the recommendations provided by others are rock solid, diagnosing while ongoing is better done using different methods than the slow query log. This is a tool best used to monitor for slow queries for tuning as part of normal application maintenance. It sounds like you have a query running that is inefficient or simply dealing with a large data-set. When the queries become slow, run and sort by length of time running. This should allow you to determine the query that is causing others to take longer to execute. If you do not have a tool like mytop installed, you can use this command to sort based on the length of time running: 

You might be able to use a host based IDS such as AIDE and write a wrapper script using its output. You would likely have to write more complex logic considering the checksums. Otherwise, a network based filesystem might make sense, as the changes would be reflected at all locations. Nevertheless, I suspect you are transferring over the Internet, which will limit options here. 

I have had incredible success with Barracuda's "spam firewall" product, which you could offer to your customers as you describe. It's a Linux appliance using a primarily Open Source stack. I have built similar stacks myself on several occasions but I have yet to run across an Open Source Web frontend for the end users to manage the spam portion of it. 

The directories leading to the file would have to be executable and the file would need to be readable, as the user that is attempting to use it. If you want more specific details, please provide the permissions on all leading directories as well as the file and the user Apache is running as. 

Intrusion Detection Systems (IDS) and Intrusion Protection Systems (IPS) are a rather broad topic. As such, my answer here is far from comprehensive. The types of IDS include network and host based. Network based IDS, such as SNORT, analyze and log network traffic based on a set of rules. These rules would match potential vulnerabilities, thus potentially providing advance warning of attempted intrusion and forensic data after the fact. Host based IDS include software such as AIDE, which compare hashes of the files on the filesystem on a recurring basis. This would allow someone to monitor changes on the system and identify unauthorized changes. Central logging could arguably be part of your host based IDS solutions. Central logging enables control and auditing of your logs in a central place. Additionally, keeping logs in a central place minimizes exposure and allows an additional audit trail, in case a system is compromised and the logs are no longer trusted. Packet filtering (firewalling) is a security mechanism for controlling traffic to and from your network. Firewalls are not IDS. A well run IT infrastructure includes many of these technologies and many professionals would not consider them optional. 

I often design a spreadsheet based on the expectations of accounting and the demands of my department. Typically, I find the most value from this by enabling alignment between IT and accounting as well as tracking historical and recurring spending. I typically break out recurring costs to a separate spreadsheet. For example, recurring support, licensing, and service contracts would be tracked separately. The key details would include the length of the contract, the monthly cost, the annualized cost, the billing terms, description, and service provider. For the historical spending over an annual term, it would be a fairly simple spreadsheet. Date purchased, vendor, any notes, cost, payment method, purchaser, and any applicable reference numbers. (Purchase order number, accounting categories, et cetera.) For reminders, I would recommend using a shared calendar solution. We have recurring tasks and standardized procedures within my department, which is often where renewals are caught. My preferred solution is a reminder on both the shared IT calendar and the personal calendar for the staff member responsible. Some things can be monitored, such as a SSL certificate expiring. With a support contract, often vendors are happy to remind as well. 

No. specifies the databases to be replicated. However, I'd say the performance you're describing is better aligned with "clustering." You might take a look at MySQL cluster (the NDB engine), as it may meet part of your expectations. 

While your configuration settings have room for improvement, such as what Embreau mentioned, they may not be the direct cause. It's potentially your application or something along the stack causing the issue. For example, if your application was waiting for a response from a database it could eventually cause all threads to be waiting thus causing issues even on low load. This performance would often be exampled by active database connections churning. The same performance could be exhibited by an application bug and would be more difficult to isolate. While this is true, unless there's hints as to this being the cause, I would focus on the two things below first. Is there a particular reason why you have or configured at all? With , unless there is an unusual need or you have given the proper thought to its use, the default should be fine. If it is not tuned properly, it could exhaust physical memory and begin swapping, which would reduce performance. set to is unwise. If your application has memory leaks, the Apache children will never recycle. You want them to recycle. I'm guessing you are a developer. Your system administrators should be working closely with you to resolve this issue, as it is definitely a cross-functional issue.