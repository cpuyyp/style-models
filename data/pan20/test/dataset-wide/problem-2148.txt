You need to normalize the requests as they come in before you even concern yourself with priority* or the specific action items involved. If you're getting requests from 3+ different avenues (phone, email, IM, etc..) then translate them all into a single format that helps you evaluate them and clearly identifies what has been covered and what hasn't been. This format could be something as simple as a text file or something more fully featured like Trello. Once you have these items in a normalized format, then you can start evaluating holes and priorities. Identify those items where more information is necessary from those that are fully defined, knowing that work can only begin on those items that are effectively fully defined. Presumably you have some semblance of priority from the original requester that will help you sort those items that are ready to be addressed. These should be assigned to your team for attention promptly. Now you're left with a bucket of items that need more details. This is where you lean on the expertise of your team. You've been there a week... You can't reasonably be expected to know everything, so you pull in one or two of your more experienced folks to help you understand where details are lacking in the rest of your items. Now you can go back to the original requester and get more information so that this request can be moved to the 'ready' bucket and be assigned out. *-Except in the case of a production issue/outage which requires immediate attention. 

Are you sure it's brightness? I know a number of people that have issues with "flicker" causing headaches after an hour or so. The headaches are usually in the cluster or migraine family which can significantly amplify light-sensitivity. There are multiple people in my office that swear by these glasses to prevent eyestrain and reduce headaches. Another former colleague of mine would have the fluorescent overhead lights use a green-tint lightbulb rather than the normal ones to reduce the impact of the flicker. Finally, it might be the refresh rate on your monitor. Most likely your monitor is refreshing at a rate of 60 hertz. For some very sensitive people, this is too slow. You might see if you can somehow borrow or test out a monitor with a higher refresh rate. Do you encounter the same issue if you watch TV for an extended period of time? What is the refresh rate on your television? 

When I am interviewing technical candidates, there are a few specific things that I'm looking for: Personality -- How will they fit in with the team? Is their personality compatible? I first do my best to get the candidate to relax. I talk about my background, I talk about the company, I make jokes, I get them laughing, etc. I want to know how the person will be once they're settled in after 6 months and assume that, initially, they've got nerves or are on their best behavior. Once they relax a bit, I ask them to walk me through their ideal work day and probe that concept with follow-on questions for a bit. Above all, I make it as conversational as possible versus just a Q&A session. Communication Skills --How are their communication skills? Can they convey a technical concept to a technical person, a technical concept to a non-technical person, etc? I'm generally interviewing for positions on smaller teams. These teams generally need to wear multiple hats and have interactions with non-technical teams. Evaluation of this skill happens throughout the interview, especially when I'm asking them to explain projects that they've worked on. I will probe on the business and technical end of the project to get a feel for how much they understand both sides and how well they can communicate both sides. General Attitude --How likely are they to be a poisonous or negative influence? How do they handle criticism? In my region, the IT market is pretty small. I will usually ask a 'bait' question (though I don't like it, it seems to work) here and say something along the lines of "Oh, I see you worked here, I've heard some pretty bad things about that place..." and see what their response is. I'm looking for people to handle it gracefully rather than taking the bait. In addition, as we're discussing the details of a particular project they've worked on, I will challenge them on the choices that were made to see if they can defend it and if they can take criticism of their ideas if warranted. Questions like "Why did you use Technique X instead of Technique Y?" And then probing on that front. Problem solving skills --Can you take a business problem and develop a technical solution to it? This one is usually something I have to infer as I haven't been able to come up with a good set of questions. However, having a conversation about a project that they've worked on usually helps. Passion --Can you be passionate about something you're working on? I usually ask people to describe to me their most favorite project that they've ever worked on. I want to see them get animated and excited about something that they've done. And then I'll probe about what made the project so awesome. Answers to those questions are insightful, e.g. "I learned new technology X", "Business Problem Y was a new vertical for me", "it was difficult and accomplishing it made me proud", etc... I will also ask about hobbies and other related things here. Conceptual Knowledge --Do you actually know stuff and can you admit it when you don't? Depending on the position, here I will ask about high-level and low-level technical concepts. I want to see how much listed on the resume is actually accurate and, contrary to the first section, I want to make you a little bit uncomfortable to see how you handle it. Also, I'm looking for you to honestly, without embarrassment, say "I don't know." After I get through all of these things (not necessarily in this order (except Personality, which is always first)), I feel like I can make an informed decision about the quality of the candidate. 

A candidate mentioning a promotion that they didn't take in a cover letter, resume or an interview just doesn't sit right with me as an interviewer. You would be effectively saying "Hey, you should hire me for this job because someone else wanted to, but I told them no." As an interviewer, I can then either explore that topic and expect you to dodge the numerous interview land-mines about things like speaking negatively about passed employers which is boring and unnecessarily tricky, or I can ignore it and then it provides no real value. I would focus on your actual experience and actual ability to do the position. If you've held a similar position in the past and clearly can do the job based on that experience, then you should focus on that desire, experience and ability. 

Honestly, I think that this is a really bad idea. The first time someone disagrees with the peer evaluation they've been given, what happens? Each of your developers are going to have different skills and perspectives to bring to the table and a simple problem for one may be more difficult for another. I like to try and foster teamwork over competition. A team of developers, in my experience, would rather work together to create something awesome versus working alone to game an arbitrary review system. If you would like to encourage peer based feedback, I recommend 2 things - 1) Peer Code Reviews and 2) As the manager, come review time, ask the other team members to provide feedback to you, in confidence, about the employee being reviewed. 

Emailing or calling to find out the status of an opportunity isn't a bad practice as long as you do it at appropriate intervals with appropriate content. Michael has it right. Many companies have policies to not contact candidates that don't get offers, for potential liability reasons. In this particular case though, there could be a legit reason for the delay given the Tumblr acquisition. That probably has a company like that scrambling to make sure that line of business is still going to be viable for them long term. I would personally wait until next Friday and send a final email thanking them for consideration and wishing them well. Two other items that could be relevant and haven't been mentioned elsewhere: 1- You mention it's for a 'lead developer' position but you don't indicate if that includes managerial responsibility. It could be that, while the developers were impressed with your development skills, that they don't feel comfortable with your age/experience leading a team. 2- Many companies that do group interviews like this (like mine) have a policy of unanimous approval. So, while everything seemed to go well with all of the people you interviewed with, one person could have a reason for not seeing you as their ideal candidate and that would be enough to not make you an offer. 

If I were in your shoes, I would likely schedule a meeting with the hiring manager and say something like - "I'm not going to lie, I thought that I was in a good position to fill the full-time position offered. Considering that someone else has been given the opportunity to fill the position, is there any advice you can give me so that I can improve on the items where I fell short for this opportunity?" Approaching this as a complaint about the hiring process as though you were entitled to the position is going to get you nowhere and will potentially burn bridges that could be useful in the future. You need to approach this as being disappointed that you weren't offered the opportunity and that you are mature enough to seek improvement. There's obviously no guarantee that anything will happen because of this, but, if you learn something about yourself or how you are perceived, then at least you get a little value out of the experience. 

I am of the opinion that you should never lie. However, I believe that there are ways to respond to these sorts of inquiries that can satisfy all of the parties involved. Ultimately, the detail and the answer you provide needs to be relevant and appropriate to the goals of the participants involved and the level of caring they may have about your answer. Furthermore, your answer needs to address the real question being asked. In this scenario, your boss cares about getting more business from the customer and ensuring that relationship remains positive and is more likely to say 'yes' to everything. Your customer cares more about the possibility of using your firm for additional work to resolve pain points that they may currently encounter. Furthermore, your customer has made an assumption here, in my opinion, by asking you about a specific technology rather than about solving a specific problem. Neither of those people care that the technology being asked about is a derivative of some other technology that you know. In your position, you're basically walking a tightrope between 'saying yes to everything' and 'keeping your integrity.' This tightrope sucks, but here are some techniques for staying on it. 

Hopefully, when they bring you an opportunity, they have enough information about the company to help you decide if it's a good potential fit or not. Most recruiting firms split responsibilities between Recruiters and Account Managers. Recruiters source the bodies, Account Managers source the slots. For each opportunity, you should be able to at least have a phone call with the Account Manager so that they can tell you what they know about the culture. Be wary here, though, as they can be "Sales-y" and are obviously motivated to fill the position. If you're being contacted out of the blue by a recruiter for a specific position, beyond the position details, I usually ask the following: 

If a customer asks you directly if you can do something, you never say 'No' outright. However, based on the complexity of the question, you defer and hand off to someone else to orchestrate while reinforcing confidence in your organization. For example: If a customer asks "What would it take to rebuild our ASP.NET website in WordPress?" you can answer "Well, that's a big question. I'd like to have a bit of discussion with you and do some research on my end before I'd be comfortable giving you a yes/no answer. I'll defer to my boss here to coordinate schedules and set something up. But this is certainly work similar to what we've successfully accomplished in the past." Always make sure you understand the real question being asked, but don't be a nag. For example: If a customer asks "What would it take to rebuild our ASP.NET website in WordPress?" you can answer "What is it about WordPress that is appealing to you?" or "What problem are you trying to solve by moving to WordPress?" They could answer anything from perceived cost to available resources to pre-canned themes or 100 other things. You can then try and offer solutions to their real problems. However, don't get into a protracted Q&A session that the customer might not be prepared for and don't hound them with thousands of questions at this point. You can then fall back on strategy #1 at this point. If you know that you have to do work to be able to answer the question with a definitive yes, don't say yes or no, but convey confidence and tell the right truth. For example, A customer asks "Do you know VB.NET?" Even if you've never used it, you can legitimately answer "I have an academic familiarity with it but haven't had an opportunity to use it in the workplace yet. However, given my extensive experience, I'm confident it would be a seamless transition for me." Then, immediately jump to #1 and defer to your boss to coordinate a later meeting.