Here is a long list of possibilities. Some disagree, some are near subsets of each other, and some could be both true at the same time. For extra fun, take two that seem to disagree and make the both true. 

In a sufficiently advanced computer science world, you'd expect there to be uploading of people, and possibly tightly controlled "meat-space". You wouldn't experience the world unmediated; the unmediated world would be a lot like death valley crossed with a nuclear power station. The real world is dangerous to people there, uncomfortable while there, dangerous to allow idiots to run around in to everyone else. Instead, people would be uploaded and simulated. If they must visit the real world, you could download them into a meat-body for the retro-experience, or just access it "remotely" via robitic tools. In such a world, studying the low level underlying hardware and software would have a few purposes. First, it would be akin to studying fundamental physics; if you are wondering how your (virtual) world works. Second, possibly repairing and upgrading said hardware and software is a good idea. The field of study might be called "diety science"; studying how to create, maintain, and modify worlds. These people are, in sense, their own gods, making entire universes out of hardware and software. Now, unlike ourselves, these people have theoretical access to the underlying system, so they can study how the virtual universe works as a white box instead of a black one. But emergent phenomina of the underlying system might be too complex to understand via white box understanding. At modestly higher levels, computer science becomes akin the the study of physics, chemistry, the study of the world in which you are embedded within. This world would probably be designed to be pleasant, but for the most part you wouldn't want to give every user "god level" access to it for robustness sake. "Consoles" or whatever you imagine to interact with the computer would be similarly silly; if they want entertainment devices, they are just entertainment devices in this virtual world. This virtual world might allow something akin to scripting. Do X, and get result Y. Maybe said scripts even permit loops and other human-understandable logical constructs. Then computer scientists working on that level would resemble magicians; building spells (scripts) that do things in the virtual world. To keep things stable, the effects of scripts would be bounded based on some resource share, so script-kiddies cannot rewrite reality with ponies. Sufficiently advanced computer science is indistinguisable from a fantasy novel. In this realm, knowing how to script would be of value. Lower level theoretical computer science might be useful in finding new ways to write scripts. At some point, people in these worlds wouldn't have permission to interact with the low-level details of their world, but knowledge of them could be passed down, look up, and maybe used to find other interesting ways your user-level scripts can interact with the world. Forging new worlds might be possible (if expensive), and doing so might require knowledge of relatively low level (but higher level than any CS today) computer science to learn how to arrange rules for a stable universe to be created. The lowest level of computer science and hardware would be outside the permission scope of any mere mortal, and mainly known as a theoretical discipline. Now, you could imagine that the guardians of reality (meatspace) might die, neglect us, or whatever, and people in the virtual reality might use such low level knowledge to create scripts that violate the "safety" assumptions that where built into higher level ones (find a ring-10e7 exploit, and the effect might be similar to nuclear technology; destructive and powerful). When the caretakers notice, they can modify the underlying reality to patch the exploit, or do a rollback of universe state prior to it being used. And if you can notice that, you can exploit forcing rollbacks on universe state; make a decision contingent on the universe being rolled back. If it fails, activate a low-level exploit, cause a rollback, and make the other choice. 

We could go with feedback loops in each direction. Imagine the line has a reserve of magical luck. But this gets diluted when there are more of them, and the one with more luck actually imposes bad luck on the other members of the line in order to give more luck to its source. The sole descendent thus has lots of luck, and survives. When there are more, the stronger bearer of the luck gene kills off the weaker members, unless they are focused on the survival of the stronger bearer. Luck remains concentrated, a single descendent is a given. The "luck" could be something more sinister. Imagine if there is a demon who is watching over the line, and an order of assassins trying to thin it out. When the demon is distracted they succeed; when the demon is protecting one mortal, they don't stand a chance. 

One is the lonliest number. You'd expect the number of descendants to either diverge to a large fraction of the entire population, of disappear completely. This will be true of almost any way to describe "descendant", unless there is a serious feedback loop. The hard part is avoiding extinction; I can give you a dozen feedback loops that keep the number from diverging. For example, the good old highlander trick, where people with the gene can detect each other and are compelled to kill each other for whatever reason. The problem is that once the values are small, random flux means that there is a increasingly decent chance at extinction. 1 is a very small number. 

Find the message first. Before going back, search and find a message from your trip. Ensure that the "outside" layer has the fact that the message came from you (and only you) encoded on it somehow (using cryptography, for example). It should also include directions on where to put it, and how to make it. The actual location you are sent to would be inside an inner layer, which you should not open prior to going back. Then go back, following the instructions on how to send the message back to yourself. In the present, once they have sent you back, they open the inner message and retrieve you after you in turn sent the message to them.