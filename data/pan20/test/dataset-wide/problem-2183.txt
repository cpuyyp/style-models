You may need to find out what he considers important. "Good style" is just that, style. It needs to bend to meet business needs and he needs to know that. However, there may be an underlying fear that he is dealing with which needs to be addressed. As a case study, I worked on a team which consistently produced software at a slower pace than the customers needed. Management was continuously angry with us. We had a good reason for the slowness. Management had set up a hostile development environment where no piece of code could be changed without an explicit command to do so from our customer. Unfortunately, we had the explicit requirement to maintain this software for decades, while few if any of our customers ever thought more than a month ahead, making it impossible to do convince them of any long term ROIs. We were given great responsibility for the software, but little to no authority to do anything about it. Our mantra was "The first working prototype shown to the customer will be your final implementation." We never did resolve this roadblock. Management never did work with us to support the program in a way commensurate with our responsibilities (we were actually ordered not to try to resolve it, because merely bringing the issue up would risk continued funding). The program ended up dying instead because nobody would address the underlying business failure. We spent a lot of time after this, as developers, trying to figure out what exactly went wrong, and what we could possibly do next time to avoid it. One of our takeaways from this exercise was the value of having multiple ways to approach a problem. He likes a ORM style, while you save eons of computing with an SQL command or two? Make it so that both can exist side by side. Quite often the value of an approach is not obvious to the other side until long after it has been finished. Allow both styles to coexist in the wild, and find out which one survives the rigors of business. Develop a sense of harmony between approaches rather than trying to dictate the one approach to rule them all. Perhaps he does all of his primary development using his extreme style, but the final product requires the addition of hacks. He may be in a position to isolate those hacks enough so that they cannot endanger the rest of the software. If he doesn't accept this, then he is actually in the wrong. He is not the voice of the company, he is merely an employee. His voice is part of the whole and not the center of the whole (unless you hired him to be the center). An employee who cannot flex because they hold to principles in violation of the company's needs does need to be let go. But contrariwise, developers have a viewpoint of the software which cannot be found anywhere else. The business does need to flex when the developer points to a problem that is hard for anyone else to see. The goal is to figure out how to have the two points of view coexist long enough to explore them properly. However, that can eventually fail if one side is particularly stuck in the mud. At that point, you will need to hold a polite discussion explaining that his coding style is not the center of the world, and if it gets in the way of business, he will be given tasking which provides him less and less freedom in the approaches he is allowed to take. Alternatively, he is free to agree to give ground on things like "size of paycheck" in exchange for freedom to do his job. I didn't want to create yet another answer suggesting iterative development, but I did want to tack it onto the end of my answer. Iterative development gives him the opportunity to explore "good style" in one iteration, and then have you apply the business thumbscrews to turn it into a useful product. You may not know a priori that a task can be done in 30 seconds. However, after the first iteration, you should have a sense of time. This sense of time should allow you to provide timing requirements in the second iteration. If you give a business requirement for a query to take under 5 minutes, and he says it can't be done, then politely take the task away from him and do it yourself. Let him twiddle his thumbs until he starts realizing his paycheck is in jeprody. 

You can't stop recruiters being unethical, at most you can frustrate their efforts. Ditching Word documents for PDFs was a good first start, but even if you use PDF's there's nothing to stop them ripping the text out of it and creating their own Word document of it's contents. Also, if they have the right software, they can even edit your PDF before sending it on. One approach might be to digitally sign your PDF CV and use the option to prevent text being copied from it, this may make life more difficult for prospective employers too though - if they want to copy particularly relevant details for quick reference. The best option might be to tailor your CV for every application, which is common job hunting advice anyway. That way, no one recruiter has all of your CV and double presentation might be less of a problem because there is an obvious difference between the generic CV and the tailored CV. Combining these, you could provide signed, tailored CV's which can still be copied from. If a prospective employer asks why two CV's have been presented to them, ask them to check the signature so that they can see which one is the genuine application and which is the fraudulently presented one. This might even make the company think twice about using the unethical recruiter again in the future. 

Some talents are easy to capture in an interview. If you're interviewing to be a drafter, questions about your proficiency in AutoCAD (or a similar product) are quite reasonable and help quantify your ability to do the job. However, some talents (typically so called "soft skills") are much harder to test. Sometimes the interviewer wants to see what's underneath the veneer you put on when you entered the interview. Frankly, no matter what job you are interviewing for, you're going to be put into positions that put pressure on you. They can't test for those specific scenarios because they simply don't know what they will be. Each person's career pits them against different challenges. Instead they have to test for generic skills. One of the effective approaches for testing these skills is to ask questions that are outside of the "comfort zone," forcing you to dig deep. One famous question is from Google, asking about the resistance between two points on an infinite grid of 1 ohm resistors. This particular problem was very popular on the internet a while back as people looked for solutions to it. However, the purpose of the question was not to see who could get the right answer. It was to give an opportunity for the interviewer to see how you approached such problems. How did you structure your work? Did you get frustrated? All of these are very hard to quantify, and even harder to bake into one single numerical metric, but a skilled interviewer can glean a remarkable amount of information just by watching you operate in such a stressful environment. As for the task seeming to be "unrelated" to what you are interviewing for, it might indeed be unrelated. However, you may be surprised at how interrelated soft skills can be. As you work the job (assuming you get hired), you may learn to appreciate why that particular test was related. In an interview with an ex-Blue Man Group actor, I came across a similar interview test for clowns. The test was simple. The clown walked on stage in front of a group of people, said nothing, did nothing. They stood there. When they felt they had made meaningful contact with at least one person, they walked off stage. Given that clowns are almost never just standing still like that, the test might seem unrelated. However, if you dig deeper into the job and understand what a clown actually has to do to accomplish their job, that particular test was surprisingly relevant. Also, if you asked anyone to quantify the results of that test, they would chuckle at you and say "that's not how it works, pal." You can approach such a question may ways. You can jump into it with both feet, and belt out your best Sinatra, or maybe some Go Go's. Or decide not to let the question touch you at all and instead choose a nice rousing round of "Row Row Row your boat," while gathering yourself to answer the next question perfectly. Or perhaps you ask for clarification as to why you are being asked to sing. The ability to politely ask for clarification at the right moments is a highly prized skill in business. It's a skill that can save millions if applied at the correct moment. Any way you choose to treat it, the purpose of these curveball questions is to get to see a side of you that would not show past the thin veneer we put on when we go to an interview. It's a side that will get out if you get the opportunity to work 9-5 for several years with these people, so they might as well get to know what they're in for! Let them see what you will bring to the table after all those years. 

No, it is not acceptable to use pirated software to do your job, in fact it could lose you your job. In the UK, the use of pirated software would usually be considered gross misconduct and be grounds for summary dismissal, so as risks go, that's a pretty big one. As others have mentioned, the reason companies treat this so seriously is because the consequences for the company can be grave. In the UK, The Federation Against Software Theft (FAST) publicises the legal penalties and security risks for piracy and prosecutes both organisations and individuals on behalf of its members. They also promote the use of Software Asset Management to help companies avoid copyright infringement. Even using software provided by your company, if you know it to be pirated, could result in pretty dire consequences - it's not impossible that you could be considered to be a conspirator and personally liable. Under such circumstances, ethically you should report the infringement to FAST (in the UK) and any repercussions for this should be covered by whistleblower legislation. The situation in the US, or in any of the countries around the world whose legal system is based on the UK/UK models, would be pretty much the same. The specific laws, crimes and enforcement agencies would be different, but the essential principal and the ethics of the situation would be identical. 

It sounds to me like you've got quite the predicament, and you are trying to hold to some unreasonable ideals. 

Well that's just too bad for them. Talk to them anyway. Self empowerment may give you the ability to make your own decisions, but it doesn't free you from the responsibility to live up to those decisions. If I had a team like that, talking to them would be the kindest level of response I'd consider. One might say "Oh, but the SCRUM master is supposed to resolve impediments like this. Everything should go through him." Well tough. He screwed that up when he went to you to tell you you were fired and failed to do so in a sufficiently courteous way that you accepted it. A SCRUM master is expected to have better people skills than that. So what do you say? First, you want to find out if they actually decided to "fire" you. You have one person's word on that, and I do believe this is the kind of situation where the team should be able to directly say their piece. Second, consider what "firing" means. You claim to be a hands off manager, but they want you gone. Understand why. They aren't writing the paychecks, so the decision to fire you isn't a "oh they're not pulling their weight" kind of decision. That's a "this person is actively getting in the way" kind of decision. Something really isn't adding up here. You need it to add up for you before you make any meaningful decisions. Being an anonymous person on the internet, I can't say if its you or them or the SCRUM master, but something is really really really wrong in this scenario, and you better know what it is by the time you're done talking with them. Work with them. Be a manager. Find a way to solve the problem. Find a way for you to be able to do your job, while they do theirs. Make it happen. Now, if their answers provide you with sufficient closure to honor their self empowerment, now you have to show the team what happens when you "fire" leadership like that. Say "Fine. I'll stop acting as your manager. You can't actually fire me, because that's not your position, but if you want to play this game, we can play. I was your manager, helping insulate you from corporate politics and the stress of reporting to upper management. Now, I am your upper management, and you no longer have that insulation. Now since I can't actually remove myself from this position, I will instead simply begin relaying tasking from on high." Explain that just because the team voted, that doesn't mean you don't have obligations to upper management that you have to fulfill, and will continue to do so. Then, get help. A mutiny is not a small thing. Your entire team just voted you off the island. Don't underestimate it. Get ahold of someone above you to help. Maybe you call your boss on leave. Maybe you talk to your CIO. Someone needs to know that there is a major people problem in your company, and that you are solving it. The second half is clearly important. Never go to leadership with problems, go to them with solutions. The solution I would recommend is to craft your image as the "manager bearing requirements" by choosing things to require which leadership (i.e. CIO) would want, which is crafted to build some self-realization to go with this self-empowerment. They may think they're free to do what they want, but you are still obliged to make them a successful team. If you have to do it from afar, do it from afar. Find out what about your hands-off approach was so intimidating, and make sure you don't ever do that. The end goal is to get them to realize you are on their side. If they are truly self empowered, then they need to come to the realization that you are a beneficial part of the team. They will only come to that realization if they are successful. If they get deluged with impossible deadlines and hopeless red tape, they'll never see it. Just make sure that it all adds up. 2+2=4. A "hands off" manager is "fired" by the new SCRUM master for being too intimidating while two layers of management are on leave? Something doesn't add up from here. You're closer to the situation. Figure out what doesn't add up, and fix it. 

A very powerful, but often overlooked way of discouraging excessive overtime is to offer people flexible working hours. If you have a system in place for flexi-time, then people are both careful to accurately record their working hours, so that they don't lose out on accumulating flexi hours, and mindful of the hours they are working. An example flexi-time system might have core hours of 10:00 to 16:00, allow an employee to accumulate up to 3 days (24 hours) of flexi-time, or go into one days flexi-time debt, but require that they take no more than 2 days (or 4 half days) of flexi-leave (time off within core hours) per month without taking annual leave. It may seem counter-intuitive, but psychologically, if you are getting close to the upper limit on the hours you can accumulate, you start thinking "if I work too many more hours, I'll lose them at the end of the month", so you start to cut down. 

One thing no-one else has mentioned: keep your glasses scrupulously clean. I find that if my glasses are even slightly dirty, for instance a single light fingerprint, I start getting eye-strain much more quickly. I usually clean my glasses by washing them in soapy water, and then drying them with either a previously unused tissue or a lint free cloth. The important thing is to remove any trace of dust or grease that could cause vision to be blurred or tempt the eye to refocus on the glasses lens itself. The reason I wash with soapy water is that it's the only practical way to actually remove the grease rather than just spread it around. Typical glasses cleaning cloths usually just soak up grease for the first few days but after that they start to deposit it back on the glasses, so I have never found them useful. My levels of eye strain also reduced significantly when I started taking the advice of the UK Health and Safety Executive advice and positioned my monitor such that the top of my monitor was at eye level (Working with VDUs 740k pdf). This left my monitors at a much steeper angle (rather than angled up, with me looking down on it), resulting in fewer reflections from behind me and this also completely eliminated reflections of ceiling lights. Few monitors have enough height adjustment to allow this without a monitor stand, but getting this right is well worth the investment. You may also find that if your current LCD display has a gloss coating, then a matt coating might suit you better. Matt screens are often criticised for not being as bright or as vibrant, but they can eliminate or at least substantially reduce reflections which will be even more of a problem if you generally use a dark background. Also, a high quality screen with a wider brightness range, a high contrast ratio, and better black levels at low brightness could allow you to create a more comfortable workstation. Plus, if you argue that it will increase your productivity, then business case of a more expensive monitor should be fairly straightforward. Finally, make sure your glasses prescription is up to date. Nothing will give you eye-strain more quickly than an out of date prescription. I would rather have replacement lenses every year than a new designer frame every other year and in the UK all VDU workers are entitled to claim the cost of one eye test per year from their employer. 

I agree with the other answer: No. However, I have a bit different of logic, because I tend to like answers that have more tangible roots than most social questions like this allow. Swear words, linguistically are rather interesting. They get used when you have no other words to describe what you need to express, but you feel obliged to express something anyway. So, if I was interviewing and heard a swear word, I would have to assume at least one of two things: 

What you described here is a reasonable approach. It's always good to respect people, and having a default way to respect anyone is good. However, Mr. X has now asked you to call him by his first name. To decline to do so sends a funny message. It says "I respect everyone, and I do so by using honorifics. However, I will not respect you as an individual. Your individual preferences are not as important as my generic way of greeting all humans who have a pulse." It's not quite the message you want to send, is it? Try to call him by his first name. If it's hard for you to do because you've gotten in the habit of using honorifics, it's find to slip up and call him Mr. X by mistake. We're all human; he'll understand. But try, because that effort to treat him as an individual is true respect. A demonstration of effort goes a long way. 

The best way to transfer knowledge is for the people who need the knowledge to work with those who have the knowledge. Whilst the knowledgeable people may not have the time to work on documenting their knowledge themselves, they may already be spending some of their time explaining to others what to do and how to do it. Even if the knowledgeable people had the time to write up their knowledge, it is not necessarily the case that the documentation they produced would be of use to the less knowledgeable people. It is surprisingly easy to miss out important 'obvious' information when trying to impart knowledge. By making the knowledge transfer more explicit and co-operative, and having the users of that documentation write it so that they can understand it, you could both ease the burden on the knowledgeable people and get more information transferred. If the knowledgeable people are really pressed for time, you could ask the people who need that knowledge to write up what they understand now, and then have the knowledgeable people proof-read and correct any misunderstandings. This could substantially speed things up, and could also help identify areas where the knowledge is lacking. 

Yes, in my experience this is common practice, but I don't think it is as deceitful as it first appears. You don't burn your bridges, either as a an employer or potential employee and sometimes, recruitment takes a while. You can genuinely want someone, but then find someone else is a better fit for business or operational reasons. Reading between the lines of what you heard from the VP and the recruiter though, I would say that all this means is that you are currently second choice on their list. They are probably waiting to hear back from someone (possibly via a different recruiter) with slightly more experience than you. You are probably their best culture fit, while someone else is their best experience fit. They want to keep you sweet because they are confident that you can do the job, even if it takes a little longer to give you the extra skills they think you need. They want to maximise the chance that you will still be available and interested if their first choice doesn't accept their offer. With respect to the recruiter, they are probably playing down your chances to stop the recruiter calling them every five minutes nagging them for an offer. They probably don't care about keeping the recruiter sweet, so depending on how aggressive the recruiter is, they might say anything to get them to stop calling. From personal experience, I have missed out on a number of jobs where people have very apologetically phoned me to say "I'm really sorry, I think you would have been great here, but we really didn't expect to find anyone who had experience with X, Y and Z.". People can be genuinely complementary and want you, but circumstances beyond their control might push them towards another candidate. Essentially, someone who can hit the ground running will usually be preferred over someone who will take a while to get started, even if they may end up being a better team player in the long run. So, don't give up hope, keep looking, and try to assume the best of people rather than the worst. 

The next step in that story is very context dependent based on your relationship with the customer. You have to be able to explain to the customer why A can't be done as fast as it was done before. That might involve introducing them to exactly how hard some of these tasks are to do. Or it might involve them accepting that you are a go-getter that opportunistically did A when it was easy, and now needs to schedule it. Or they can be the kind of customer that's furious that your production schedule no longer matches their expectations, and you can lose their business. Or there could be a complicated system (like billable hours) which you didn't know about and are accidentally causing problems with. Your boss is the one responsible for this. Work with them. Make sure they understand that the consequence of your pro-active approach is that it won't always be there. Make sure they understand that when they fully task you with all sorts of stuff, you won't be able to just interject those quick turnarounds. In some environments, the boss will say "great. Keep doing the fast paced work. I'll cover for you when you hit 100% load." In other environments, the boss will say "Let's focus on managing expectations, and ensure the customer not only is happy, but stays happy for the long haul." Answering those questions is your bosses job, and you job is merely to provide them the resources they need to answer that question. If your boss is happy with your approach, then that's what matters. All customers like to be satisfied in the short term. All customers like their producers to be able to offer fast turnarounds. Some customers understand the long term implications of these fast turnarounds, while other customers would prefer you and your team to manage them. And in this case, the big difference between your boss and your customer is that your customer may choose to be interested in the long term interests of your company, or they may choose to do their own thing. Your boss should always be thinking of the long term interests of your company, and can provide you such guidance.