You should add some support for when a number is too big. Perhaps you could throw an exception that the number is out of bounds that your function will work in. 

Refactor The string duplication logic should be moved into an external function as to spread out the logic and make sure that every function is only doing what it needs to do and nothing else. 

Unnecessary matrix generation In JavaScript, Arrays don't have a fixed size. For example, you could do this: 

But, when I match all the squares, I don't get an alert showing my tries (and it's not just because I have popups blocked). 

I recommend changing it to a loop so all the components of the loop are easily seen together in the signature of the loop: 

Setting the tape A slightly cleaner, more JavaScript-y way to initialize an Array with N copies of a value would be to do this: 

This is a debatable topic; many will say that you should always have s no matter how short the code inside the block will be. I believe they say this because it greatly improves the readability of the organization of your code because all the code that is associated with, for example, that if statement is clearly seen in between the s. 

This will make sure to only include the file if the operating system is a Windows one. Then, in the section where you would normally open and read from the file, you would encase that in: 

In JavaScript, it's sorta bad practice to set a variable to undefined, because that is also the value you get for something that has not yet been defined or has no definition. This can make your code confusing. Instead, I recommend that you use . This shows that the value had been defined at some point in time, just there is not supposed to be any value in it. 

Where is the ? Without this, you are making this function "global" and that is bad practice. If you want to intentionally make this global, do: 

Unnecessary recursion Your function is using recursion when it really does not need to be; the function would be a lot simpler and a lot faster if you used a neat JavaScript trick for repeating characters: 

How do I know if all of those numbers are part of the content? The only fix I can think of, unfortunately, would be to follow the above tip and write instead of an ASCII number. 

I personally would choose the first solution. These snippets assume that reverses a string, as stated by the comments near the function call. 

This is somewhat confusing. You should move the declaration right above the loop, and move the incrementing into the signature. 

General Argument names You may have seen this in other libraries, but it's not good practice: your argument names should be long enough so that their purpose is understandable ( and to not explain the variable's purpose). Type checking You are really relying on the user here to pass the correct types. Don't. Remember: 

However, you don't use this resource later. Instead, you use jQuery to load the element asynchronously. Now, I'm not exactly sure how this function works, but you can much more easily get this resource just with : 

Note how this code looks almost identical to the first code snippet in this answer. The only difference here is that you are preparing the system resources ahead of time; just like regexes. This will provide a speed boost in your code if used correctly. 

And, if you feel that the user will always start with 0 points, just remove the points part from the argument list. 

This is highly debatable. You should use the pre-increment operator, rather than the post-increment operator. For example, this 

This type of access, when overused as it is here, slows down your code. Store these sorts of things in variables: 

Now let's look at the class. The first thing I notice is that giant for-loop. Again, every single case of the for-loop looks almost identical, except for the button being acted upon. Therefore, I would normally recommend that you create a for-loop for this. However, because a user can only click those buttons on your calculator, I'd say that any sort of for-loop is completely irrational; you already have the button that was clicked in . Therefore, why don't you use that? Now the code becomes really simple: 

However, if you read the docs, it says that it doesn't work for . I don't know how you are receiving images in your HTML, so I can't help you with that. 

This is kinda ugly right now because you seem to be using a method to fake a for-loop. Luckily, with CoffeeScript's comprehensions, we can turn this into a simple 1-line expression. First, we need to be iterating through all of the . That can be written simply like this: 

Also, from the code that I've seen that iterates through the characters of a string, this way (as I have shown) is more common. 

Other than that, it's a matter of life or death or in a variable name. A simple fix would be to create a universal function between these two that takes another parameter that decides whether to check rows or columns: 

Remain constant throughout the code, and even some other classes need them (, for example). I recommend moving these to their own enum. That way, the values stay constant and other classes can access them. This is what the enum would look like: 

Well, what if this function returns ? Your code is going to try to call all these functions that a normal XHR would have, but it would fail because that value is not an XHR. You should add a conditional checking the return of this function. If the return is , it should just exit the function immediately; this will stop everything else. 

Theoretically, yes. Should you? Probably not. This technically prevents a 404 page from happening (I think); if a client visits a non-existent page, they are simply re-routed to an existent one as if that's where they wanted to go all along. Now, this isn't very good practice; you want to tell the client that that page does not exist by sending them the 404 page. I'm not quite sure how to do this, but if you look around in the docs a little bit, you might find something. 

Public versus private fields In Java, it is a custom to make all your fields private, unless they must be explicitly accessed by other sources. I believe this custom also applies to JavaScript. Instead of having the be a public () field, why don't you make it a private () field? There doesn't really seem to be another place you use it. And, if there is another place that on using it in, why don't you create a ter? This would be a function that returns the field, and it might be named something like . This is up to you. Defining the functions with You did exactly this, and that is perfect. Keep that up, it is a great practice. versus This is a matter of efficiency versus readability - whatever you chose to have. It would be more efficient to use in place of in the field, as the function doesn't have to do checks on the argument provided(whether or not the argument is a class, an id, a tag name, or a mixture); it knows it's looking for a one class and one class only. It is slightly more readable having , as the syntax for it's arguments is the same syntax for CSS; it's a "universal" syntax. Indentation With only 2 spaces for an indent, your code looks fairly cramped. I recommend using tabs or 4 spaces as an indent. 

Bug You're code has a bug-ish. When using this, if instead of hitting enter when asked to enter a character you enter some other letter and then you press enter, then next newline will be skipped and you will have two lines merged into one: 

Not only is this simpler (and probably faster), it is also more idiomatic and easier to understand what is being done here. Now that the native sort method is being used, there is no need for recursive placement. Just use a loop: 

I also made a small extra change; I moved the function call so now, when the game is ed, the game will start after that extra set-up. KeyboardController class This class doesn't seem to serve it's full purpose. All it does it set up two event listeners that store some information from the event. The main problem is that the class is doing this class's job. As in, the class is doing a lot of checking of the key presses. To me, that seems like the 's job. Getting and setting From my knowledge of Java, it is common practice to have ters and ters, rather than leaving the fields open for anything to touch and change. You do do this in some places, but not in others. Although, do not create too many getters and setters. For example, if you have a two dimensional array, you don't want to have a getter and setter for each individual array member. Disclaimer: I'm not sure if the same practice applies to JavaScript. Indentation Judging by your post, you come from a C++ background. Also, I can tell by your indentation. In JavaScript, it is common to put the on the same line as the signature, if/else statement, etc. Comments You don't have any, and that can become a problem, especially with games where you do a bunch of crazy arithmetic on different numbers, coordinates, and other doo-hickeys. You shouldn't over comment, but at least explain lines that aren't blatantly obvious. 

I don't know why you have the two trailing 0's on the interval - JavaScript reads a trailing 0 as an octal number. in octal is equal to decimal. Global variable In your function , in the first for loop, you declare the variable , but you make it global - as in, you didn't append to the beginning. This is not good practice, and can cause errors if other functions or scripts on a page are using the same variable name. What you wrote: 

There's some really strange and bad practices going on here, especially with the field. Here, you are relying on the fact that the string passed in will correspond with some variable on the global scope that is hopefully of the type . That's not the right way to do things. Instead, objects should be instantiated with the actual pokemon object itself: 

Your code is nice and easy to understand. I'm going to break my review down into two sections: in the first section, I will suggest a different implementation, and in the second section, I will answer your questions. 

Consistent return values You've done a good job doing type checking so your functions don't receive invalid inputs. But, sometimes your return values don't make sense (I only found one case). Here: your returns if isn't a valid number, but an entirely different type - an array - if it is valid. It's best to be consistent with your return types. Here, it might be best to throw an error. I'm not 100% sure about this. 

You are a little incosistent in how you turn your string numbers into number numbers. In the beginning, you use : 

The line I wrote should be used because it is common JavaScript practice. What you wrote there looks like you're just trying to fake a for-in loop, and looks quite ugly. Also, I recommend using more descriptive names than and (and this applies to your argument names, too). 

This may not be true; it was a little hard to tell with the snippet. When someone first opens up your webpage, all the pictures are going to be seen for a second, and then they will disappear. To rid of this, set the class to be hidden by default on start-up, and then, instead of looping through and hiding them all, just make the first one visible. 

Excuse the poor variable name. Notice anything familiar about this object? The keys are keys of the first map we created, and the values are the extra part of the string that is not in the pattern I mentioned. Now all we have to do is create a loop for setting these class names: 

This is a comprehension that will go through all of the and substitute the in the call with the current file it's looping over. Now that we have this, you can remove that 

You are setting up all these buttons and controls in your JavaScript code... wouldn't it be easier (and more efficient) to just put the buttons and controls in your HTML and then to bind functions from your JavaScript to them? 

The other answers have already provided great information and great alternatives. However, I'm not too keen on some of their recommendations. For example, Flambino's solution is splitting a string and then doing string comparison; this can't be too fast, right? When I thought of this code, I immediately thought of JavaScript's ; this gets the last index of a string in another string. Using that method, you can now find if a string ends with another string with this: 

I assume that when you say that you want your code to be "dried" up, you want your code to be more DRY, right? Well right now, you are doing quite a bit of repeating: you've created individual conditional statements for each property of an object. Your code would be much more DRY if you iterated through the object and checked the properties as you iterated. Since we are handling an object, let's use a loop: 

Other than that, your "translation" from procedural to object seems fine; all you basically did was stick the methods and variables in an object and add to the beginning of a few things. I think that the code is good in an object because, as you said, it aids organization. However, since I don't know the full/rest of the code, I can't be sure if this is the best approach for your situation. 

In , you do a lot of looping. In each loop, you are destroying and re-making variables as they exit and leave the scope (the loop). This is very optimal. To help this, move the declarations of , , and to the very top of the function (before the loops). You can set them to 0 when they are needed. Here is what I am saying: 

You can stop now. As a quick and smart fix, you can drop support for reading from STDIN (I mean, who would use a pager to read something they are typing into STDIN?). Or, if you want you can read on for the good news. 

Comments You seem slightly confused about how this "architecture" works, judging by your comments. In particular, these ones: 

Yes; it can. The constructor function is just that; a function. In fact, it doesn't even need to be: if you move the logic from into the constructor (which seems like a valid decision), then there is no point in this being it's own class. To move the logic into the constructor, just move it up a scope: 

Usually, the name given to an error in a /(or ) statement is something along the lines of "err", not "msg". 

Why is this setting separate of the function creation? Just move the function up one level to the line above it and you won't have to name it. It also makes your code cleaner: 

I'm a little confused by what your function is trying to accomplish. To make it simpler, just run on the position. It will return (which acts like in a conditional) if the user entered a string, rather than a number. 

You should store, using , an index to an array that contains the player symbols. That would look like this: