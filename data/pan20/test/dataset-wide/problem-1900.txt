The code bases of almost all software developed in corporations are a mess. This is because human thinking process is not crisp and clear as it is usually considered to be, but it is quite muddled most of the time. The clarity of the thought process is easily degraded by emotions and moods distinct from the thinking process itself. For example, the code developed by someone after an argument with the boss will invariably be worse than the code s/he develops when in a good mood. The attitude of management and therefore the environment in most corporations is such that it puts the people who have the actual skills to develop any product in a bad mood a lot of the time. Thus most code is developed when in a not so good mood and so it is messy. In fact, as a software developer you can expect yourself to be stuck neck deep in messy code most of your time. Being a software engineer is not very different from being a sanitation engineer. Do not start your day with the expectation of dealing with clean, sensible code. Repeat in your mind several times the following before you start your work day: 

I'd say in case you are accepted, just respect legal period of notice and politely say goodbye to your old team. It's never easy to quit a job in this situation, but it's part of a company life to handle turnover. I was in the exact same situation few weeks ago : working in a small team, quitting, lots of planned work etc. but they found a promising replacement even though they had high expectations (finding quickly a cheap autonomous dev ready to work overtime). It's advisable to finish in good terms, by extending the notice period as much as your next employer would accept and/or suggesting a competent replacement if you know any, but thinking about yourself is higher priority. The company will recover. Good luck for the interview ! 

As you change your approach in the way described for the previous point and your stress levels become lower, it will become easier to learn new technologies. Look for online resources about ReactJS or purchase some good books. Spend some time every day just on learning ReactJS rather than working on the project. You can also try working through some free tutorials. However, do not overwork or stay too late in the office for this. Again, do not expect to become an expert in a short time. Learning is a gradual process. 

Learn the code base in small chunks, that is, do not expect to be able to understand the entire code base in a short time. Try to understand small parts of it, such as all the code for a few relatively simple features of the application. This can be made easier by working on bug investigation and fixing for the first few weeks in a large project rather than jumping into developing new code right away. You may want to talk to your team lead or manager about this. 

I don't think it is a very important fact for them to know, so I wouldn't mention it. Either they already know that fact because they remember you as a potential recruit, either they don't and recalling them you applied several times may make them think they had reasons not to hire you before. Instead, use your knowledge of the company for a good, targetted cover letter. Insist on your motivation and explain why you applied several times before. 

"Selling oneself cheap" is only negative to some employers, not all, especially considering they are the ones to pay. On the positive side of things, showing it hints that the applicant is someone that like to help and get jobs done, has a business sense, don't overvalue his time, and appreciate his field of work. I think it will be viewed as a positive thing applying for a subordinate position, but might look odd applying for a more executive position where it can be regarded as a lack of self-esteem. 

Team leads in software development in corporations are invariably like that. Team leads tend to be relatively young and therefore have not had the time to mature in their roles. They tend to be caught between the manager(s) and the other team members, and combined with their own ambition, their stress levels are high. They are effectively new to their roles and are in a condition very similar to your own. Depend less on the team lead and approach the other developers in your team as much as possible for help. 

Welcome to the world of software development in corporations. I have been working in that world for more than 25 years and I can assure you that the chances of improving any of the conditions you describe are almost zero. However, you can gradually change your attitude and expectations so that you experience less and less misery in it. I shall address your points in a different order from how you listed them to make the solutions easier to understand. 

As others answer provided, there is no such thing as being unprofessional for checking the documentation especially considering you are junior, especially considering programming is vast and there is always a detail you can forget and you have a mission for your code to be correct. There is however cases I would consider being documentation abuses. I have a collegue who is sometimes unable to come up with his own solution about a given problem. Therefore, he sometimes proceed on checking the web about how to solve his problem. Last time, for example, he checked how a web framework was architecturing validators and error counters because he had a seemingly similar feature to design. This is a case where what you are looking for is far too abstract for the Internet to help you. Worse, you could find solutions that seemingly fit, but in fact don't, because they are applied to a different use case. By trying to grab some premade code/architecture/pattern he would have more or less injected code in our base that may have worked, but would be hard to maintain because written by someone else for a different purpose. I don't look the documentation often because I write code that uses mostly core language features (no framework) and I am gifted with a reliable memory when it comes to code, but I do use the doc everytime I'm stuck on something trivial. However, if I'm stuck on something higher level, the good thing to do is to seek help from a more experienced collegue, you will get a much better answer. 

Set your own pace. Do not worry about not meeting the expectations of your manager or colleagues. Work at a pace where you do not feel stressed out but at the same time you do not slack and waste time. This is something that comes with practice. Do not be afraid that sometime in the future you may get a feedback that your pace of work does not live up to their expectations, which they have not bothered to communicate to you. If and when that happens, tell your manager that no expectation was communicated to you before that time, you need more help with locating code and any other help you need. Always follow the middle way between slacking off and stressing out when determining your pace of work. Following this middle way is much more important in the long run than any rewards you expect from working, such as praise, status, promotion, power or higher salary. Doing otherwise is like putting the cart in front of the horse; such a contraption will just become a problem for others on the road with their horses and carts in the right order. 

I had the same issue when building my CV, and solved it using a "speciality" line. Typically, your job title would look like 

I am currently leaving my job. I have a short period of notice and I've put my employer in a uncomfortable spot. When I did this, he quickly asked me if I had a reference for him. Refering someone for an interview, especially if it's a good fit, is something generally apreciated by employers and ease the tensions. It is possible your employer is so angry that he may react irrationally (you have to figure this out) but most likely he will end up respecting your decision and accept that you help him to find a replacement. 

This is a bad habit that is spread by management. Keep in mind that most managers do not have any skills needed to actually contribute to product development. However, they have the desire to maintain as much power and control over as many things as possible and also show to their own managers how crucial their contribution is. The brilliant solution that managers and executives have come up with is meetings. It is not really a solution, but in their minds it is and in corporations what a manager assumes, feels or thinks always overrides reality. After a few years, the meeting habit also spreads to developers. You can expect to waste a lot of time in meetings, especially when working in large corporations. You must regard meetings the same way as you would regard commute problems in the city you live in. It is just something you have to live with. Keep in mind that you get paid to waste time in meetings unlike in commute. 

Same thing goes for more operational roles. You understimate the satisfaction you can get out of tech roles probably because you had bad experience with them, but they are full of interesting challenges. Now, that doesn't mean you should be a tech, it really depends of your own ability at it and what would be your ideal career plan. In my opinion, you should avoid dead ends, not because of the pay, but simply because it's better to have options to change your job if get bored (and this is very likely to happen IMHO) than seeking the perfect job right on start. 

I would avoid to put "senior" in the title as this is covered by experience, and doesn't explain what is the profession of the candidate.