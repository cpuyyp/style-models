As mentioned in some of the comments - you should look into local support(both in a professional capacity and in a friends/family capacity). Support is important to anyone but especially, perhaps, to those who could use some outside perspective. You are very honest and up front in your post about the challenges you are facing but I fear you may be a bit too quick to lay the issue to your autism. A lot of what you described(rewriting code, poor architecture, poor testing, broken code) are not at all something I would lay on the doorstep of a junior developer. The whole point of jr devs is that they don't know how to architect code, they make silly mistakes sometimes, they may not write the best, most robust code because they are still in the learning stage of their career. A jr dev should almost never have free reign on a project without the support of a more experienced person simply for the reasons you are running into. No one is born knowing how to architect code and plenty of people go their entire lives without being able to write 'perfect' code without the support of testing structures and strategies. What I'm saying is that while your autism may bring a bit more struggle to the table, the mess here sounds like it's largely an issue of poor management, lack of professional mentorship and minimal onboarding. None of this is meant to say you shouldn't get issues that you find problematic under control. Getting easily distracted and having difficulty focusing is something everyone struggles with. It may be that you struggle with it a bit more than most but ultimately you should strive to find a healthy and appropriate way of managing this. The best way, for most people, is to work with a therapist in order to create healthy mechanisms for dealing with distractions. I would imagine that this may go double for someone with autism which may bring with it additional challenges. Finding professional, local support is probably the only way for you to salvage your job at this point. If you can find someone, come up with strategies and start enacting those - the change may be enough to encourage your supervisors to give you a bit more time. And if things still happen and you lose your job, then your support network should be able to help you better prep to get your next job - including better ways to interview, bring up any challenges you face and companies that might be better suited for your personality. That sort of handles #1 and #2 but #3... "Should I quit and become a writer?" That is a doozy of a question. I think it's important to point out that the issues you find causing problems at your coding job won't go away just because you're not coding. In fact, in some ways, they may get worse if you don't have a strict schedule(something you should work on with a support person) or supervisors breathing down your neck about deadlines. When it's you in your home and you sit down to write and you look up a word in an online dictionary... you'll still face distractions. While software architecture is a challenging issue if you find yourself stymied by building and maintaining structures then you'll be rewriting chapter 1 as soon as you get to chapter 2 and discover that you wrote yourself in a corner. All sorts of writers do this, I'm bringing it up because you have identified these behaviors as an issue which means they will, most likely, continue to be an issue for you. In addition, make sure that you're planning on becoming a writer because you want to be a writer and not because you are frustrated with your current situation. Some careers work as 'back up' plans. Writing isn't one of those, not really, because it takes a large amount of drive and determination to make a go of it. Don't go into writing because someone said you were clever or imaginative. Don't go into writing because you're having trouble finding a job in technology. Go into writing because you have a story to tell and you want to tell it. Go into writing because you can't imagine doing anything else. Go into writing with a plan and a good support network. 

GPAs are funny business. Folks seem to think that they are super important in applications when, really, depending on the region/culture they're not all that important. Sure you have to make a minimum requirement for many jobs(typically a low B in my field but every field is different) but GPA especially at a graduate level is way over emphasized by many students. In the US, far more important than a numeric value is any achievements, activities, actual work you did. Why do I bring this up if you're not asking about it? A resume should POP. It should be fast to read, get the stuff that's most important to you/your field out and open and, most importantly, hit any important key words so that HR folks pass it on to the 'interview' pile. Well ok, duh Nahkki. Right? My point in this is that GPA should be fast, easily digestible and should NEVER EVER take away from the more valuable portions of your resume. "I got an A and this was the best!" Doesn't read well. It's laden with subcontext even though it may seem straight forward. You say you 'averaged' an A. Which says that at some level there's a numeric system underlying your GPA. GPA, Grade Point Average, that's pretty much how that works. So you should have a 3.8/4.0 (ow whatever) If you're using a 4.0 scale. This should be reported in the same way you report your 8.5/10.0 . If, for some reason, your school does not calculate GPA in this way then you can easily calculate your own GPA using the marks you received during your MSc. Honestly, and this is the US in the field of Computer Science, if I saw that someone said they got an 'A' for their MSc I would be a bit weirded out. That's almost certainly different in different countries and different fields. If that's the case I would recommend editing your question to be a bit more specific to the region/field. 

The thing about avoiding conversations in the elevator(or other social niceties as your other recent questions have mentioned) is that it is easy to cross the line from 'quiet, shy, reserved person' to 'asshole who won't even say hi in the elevator'. And crossing that line has less to do with what you do and more to do with how your actions are perceived. I think a valuable thing for you to consider is: why is it valuable to avoid elevator conversations? Is it more valuable than appearing to be connected on, at least a superficial, social level with your peers? If I were a betting man, I would wager that some of this is the result of a culture clash. Let me explain... I'm a Finn. There's a concept in Finland that a stranger who smiles at you in public is either: a) drunk, b) foreign or c) drunk and foreign. Smalltalk isn't a thing. Hugging people who I know at a social level? Not a thing. Being within 6 feet of a stranger... not really a thing unless it's unavoidable. Working at a company, then, with a culture of smalltalk, overt friendliness and smiling at/chatting with random strangers/coworkers was a challenge for me. Seriously everyone wants to chat and be friendly at my company and, now that I'm used to it, that's pretty nifty. But, oh boy, was it awkward when I started. One of the ways I found to get through it was to just go with the awkward. No one else is paying nearly as close attention to you as you think they are. Some of the people who start the elevator conversations with you are also feeling awkward about the whole thing. People who see you for the fifth time in the hallway might also be going 'oh crap... what do I say? we just said hi like 4 times already'. Sometimes it's useful to point this out in a polite and humorous way: "Oh man, didn't I just see you?" or "Elevator conversations are always so awkward to me, what's up with that?" Sometimes it takes getting to know people before it becomes less awkward. And sometimes it is always going to be awkward. But that's ok. Awkward conversations are not necessarily a bad thing. 

I am going to completely disagree with any of the answers here who claim that "QA is where incompetent programmers go". Testing in the industry is a rapidly evolving beast. There was, perhaps, a time when Quality was solely the realm of folks who clicked on things or manually tested(though I think the attitude that QA is 'failed' devs is still inaccurate.) Today the industry is moving towards test automation but job titles and expectations haven't really caught up. Automated testing, in it's variety of forms, is in some ways more challenging than software development. Depending on the type of testing being done, QA(or QE as is often being called now) typically must have a really good understanding not only of the product(s) they test, but the products that those targeted products integrate with AND the infrastructure and use cases for all of those products. When I dev I have a product and a feature to implement(in a very simplistic way.) When a QE is working they have a feature to be tested - but this means they need to consider all of the ways that feature might be used, edge cases, integration points and potential future directions that feature might be used. Additionally they need to keep, in some way, an understanding of their current regression suite(s) and know where this new feature and it's changes should go and what changes need to be made in the regression suite(s) in order to facilitate that. Additionally they need to know the code and environment(infrastructure/platform/etc) well enough to provide useful, meaningful feedback. TL;DR - QE(and much of QA) is no longer pushing a button and saying "Herf Derf this didn't work". Rather QE is writing the frameworks, expectations and doing the ground work to make testing that lets the Devs and Product Owners test stuff themselves. So QA vs QE. QA is Quality Assurance which is where any of the remnants of manual testers would be. But it's blending with Quality Engineering - where the focus is on developers who can automate complex system interactions in order to provide a health check for any changes in code, any environmental changes or for systems in general. I think there is definitely a stereotype against QA, as evidenced in answers about QA on 'The Workplace' and that may be something you don't want to fight against. In which case, especially if you are implementing automated testing, I would recommend talking to your supervisors about the role 'Quality Engineer' as it tends to convey the technical aspects of the job a bit more. That being said. Yeah, there are some folks, again as demonstrated any time QA comes up in the various Stackexchange communities, that will think less of you for having anything to do with QA. These often, but not always, are the same folks that think having a separate Quality team test or inspect their code is useless("Because devs can write unit tests!") To be honest, good companies and good people to work for should be interested in what you did rather than a title. If you were training others, doing testing plans and strategies and creating a Quality org from the ground up in your company(or played a part in doing that) and you were working to automate test coverage, triaging, reporting and tools to support that then you've got some serious chops to add to your resume. Consider, for a moment, the Big 4. They all have pretty serious quality organizations within their company. At least two push to have 2:1 or 1:1 ratio of Dev to QE for all of their products. The other two, from what I know, go with the rough 'rule of thumb' of 4:1(dev:QE). This shows in what they do. They aren't going to look down on you for having 'QA' on your resume especially when it's paired with the work you are doing(which isn't easy by any stretch of the imagination.) To leave aside my obvious gripes with how folks like to talk about QA. QA is just another role that brings with it challenges that companies are very interested in solving. Having experiences doing that makes you more valuable. Having a background in development(as many QA have and all QE have) means that you are better poised to bring automated solutions to these challenges. QA expands your pool of opportunities, it will only limit it with companies that are uninterested in Quality as a metric for their products and who, thus, place QA experience at a lower 'rank' than developer positions.