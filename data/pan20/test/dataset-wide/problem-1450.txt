I do like how Muhammad laid out the object in to map id selectors to HTML strings. However, the function calls could be removed from the mapping, and move that call to to a single call later in , like the snippet below: 

jQuery Element creation One could utilize jQuery's helper function to create elements (see example below), or utilize a template engine. 

It is wise to cache those lookups in a variable - or actually, use to declare a constant unless there is a need to re-assign that value... 

Store DOM references in a variable (or constant) The function does a DOM lookup to get the value of the radio buttons on every call. Those DOM references should be stored in a variable (or a constant if the browsers that support are sufficient). I know you mentioned you are considering switching to using select lists so I suggest simply storing references to those by id attribute value in a function when the DOM is ready (e.g. jQuery's .ready()). 

While it isn't wrong to use again for the subsequent assignment of , it could lead to confusion - the previous value won't be lost, though the variable has a new value assigned. Also, that variable isn't used more than once, so it could be eliminated: 

But if that last block is all that jQuery is being used for, you might consider replacing it with vanilla Javascript. For more information about evaluating jQuery's value, see You might not need jQuery. This jQuery code: 

The feedback below won't likely prevent time out errors, but hopefully will clean up the code. Description-code mismatch The narrative in your post states: 

I would create a mapping, using a 2-dimensional array (or list might work as well). I admit it has been many years since I did much Java so I am a bit rusty but I was able to come up with the code below. First, I made a method to return the mapping: 

So I would suggest not using the ArrayObject class, always have that controller method return an array and simply pass that array to . Something like the (untested) code below in getnewscat.php: 

Since those are the only input elements on the page, it could be simplified to simply , but that might not be a good habit to get into, especially if you go on to larger applications. Naming Some of the names are misleading. For example: is actually a function that returns the number of pieces, so something like or would be more appropriate. Templating Like I mentioned in my answer to your question about the retirement calculator, using templates might allow the code that sets the text to be simplified... Altered Code With the suggestions above, the code could be modified to be more like this: 

My guess is that you are thinking of the super-global ? That is not the same as (unless somehow that instance variable gets set to something else)... 

But I know that if the transitions for one set of selectors needs to be changed then those changes would need to be reversed. The same is true for the image styles for and (except the style). Similarly, I was initially thinking of suggesting that the styles for (i.e. ) be combined into one block for the nearly identical block for but I see you have those in separate sections. 

Feedback Wow that is a really elegant application! Well done! I haven't used the styles yet but hope to in the future. I did notice that after rolling the dice, when selecting a piece from a stack, it doesn't matter which player is the current player - I can click on either stack (though only a piece from the current player's stack will get moved). I did notice an error once about but I didn't observe the path to reproduce it. If I see it again I will let you know. Suggestions JS & I see the code utilizes in a few places but otherwise just . It would be wise to start using anywhere a value is stored but never re-assigned - then use if re-assignment is necessary. Using outside of a function declares a global variable1...I only spot one of those in your post (i.e. ) but if there were other places where you wanted a variable in another file called then this could lead to unintentional value over-writing. Array copying In , I see these lines: 

Using as the id attribute The id attribute should be unique across the entire page, because it "defines a unique identifier (ID) which must be unique in the whole document"1. Consider the scenario where you have another component that displays a list of items on the same page with the Nav tabs. If that component also used the id property of each item in a list, which happened to also be an integer like it is for the tab items, then there could be multiple elements with the same value for that attribute. Also, the HTML 4.01 specification stated that an id value "must begin with a letter ([A-Za-z]) and may be followed by any number of letters, digits ([0-9]), hyphens ("-"), underscores ("_"), colons (":"), and periods (".")"2. While most restriction has been removed with the HTML 5 specification, it is still wise to adhere to that for compatibility. The HTML element data attributes could be used here for specifying the value, and have the id attribute start with a string. For example: 

Sanitizing data I must admit actually haven't dealt with sanitizing data much via JavaScript but I have found various techniques: 

If the aim is to ensure that is both and in fact a Boolean, then the strict equality comparison operator (I.e. ) can be used. 

It would be difficult to prevent the re-assignment of (see example below). could be assigned to something other than a function, like an integer, string or object, or a function that does something other than push the supplied argument on the array. 

With the current code, it seems like separating the functions into separate files would be a lot of extra network loading. I can't think of much of a benefit for that but if you have one then perhaps it would be worth it. Other feedback Arrow functions 

That way, if a value like is entered, it isn't interpreted as the octal value (I.e. Decimal number ). 

See that all together in this playground example (not connected with Javascript/AJAX requests). JS The line to look up the element to remove by id attribute: 

Using vs For values that aren't re-assigned after use, could be used instead of . For example, in the method of , the value for doesn't get re-assigned - it is merely used in the return statement immediately after being assigned. Some developers default to using unless re-assignment is mandatory 

I have gone over the code briefly and looked at a couple optimizations, but haven't come up with any drastic changes. I will try to go over it again when I find time. What is good I like how the various functions are generally short. And the CSS/HTML is very simple too! It is a nice use of the canvas. Suggestions Iterations Anytime you iterate over an array using a loop, consider using a functional approach like .forEach(), .map(). That way, you won't have to handle the bookkeeping of iterating the variable (e.g. ) and indexing into the array. For more information, I recommend going through these exercises. Though be aware that functional approaches are not always optimal/faster. Creating board: Inspired by the comment from Longfei Wu on this question, the function to create the board could take on a functional approach using Array.fill() and Array.map() 

I agree with Your common Sense's responses, and a few other points: Selecting multiple rows for single account It appears that selects all rows from the user table where the value in the email column matches the bound parameter. Presumably the values in that column are unique but even if the database has a constraint on that column, the PHP code should probably only allow one record to be returned from that query and update the session data. So the query could select one row, and instead of calling in a loop, just call and ensure that the return value is an array and has one and only one element. Then for the code currently in the statement, that could be consolidating by looping over the fields, which could be defined in a constant: 

And for the sake of D.R.Y. code, you could abstract setting in those exception handling blocks to a separate method that returns that array. Something like: 

Why not just return or , or better yet, just return and get rid of those state values? Duplicated code The code contained in the , and callback functions to looks very identical (except for the comparison operators). It would be wise to abstract out common code into function(s) where possible. Unused variables? These variable don't appear to be used after being assigned. Am I missing something? Perhaps those were for testing... 

To really make that function an onload handler, one could make a partially applied function using Function.bind() : 

Since Gerardo has already given a great review and focused on d3 code, I would like to focus on the Javascript code. Abstracting opacity setting code - D.R.Y. Per the D.R.Y. principle, the code to set the opacity on the tooltip could be abstracted to a function which accepts the duration and opacity. Building on Gerardo's advice, the tooltip element could also have a more appropriate name, like (unless you're into that whole brevity thing... then maybe just , though that could be confusing with the CSS class). 

But there is no radix passed. If you are going to use parseInt(), it is wise to specify the radix using the second parameter - unless you are using a unique number system like hexidecimal, octal, etc. then specify 10 for decimal numbers.