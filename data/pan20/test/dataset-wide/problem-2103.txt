I guess it really depends on the culture. Where I am from, alcohol is generally socially acceptable, and so I would keep in touch with former managers and co-workers by contacting them from time to time and asking if they would like to go for a 'pint'. I find this really effective and a great way to keep in touch while not being too formal. I would recommend finding a hobby that both you and your manager enjoy but which isn't overly formal (ie. coffee, game of squash, golf, cinema, or in my case going out for a beer) and arrange to do this a couple of times a year. 

Don't do this either. If you are really that curious, just bring it up in your second interview. You clearly gave enough correct answers that they want to interview you again. If you were giving those answers of the top of your head, it isn't that surprising that you wouldn't remember what the questions actually were. If somebody asked you where a particular street was on your way to work this morning, and you instantly knew the answer, you would be hard pressed a day or so later to remember that street. I think the same principle applies here. If, in the course of an interview, you are asked about something which you know really well, it's not unreasonable to think that you will go into autopilot and not really think about your answer, but still give the correct answer, and it wouldn't be a memorable event later on. 

Any employee can use this excuse, and any employee is expected to inform the company in advance if the appointment is scheduled or to inform the company right away, if it's an unplanned visit. 

Salary prospects Usually there is some pool of extra salary companies hand out year-by-year in the form of small-ish percentage increases. New titles are always opportunities to negotiate pay raises beyond what these annual increases would give you, so to situate yourself better for future raises, you should drive a hard bargain to come with a new title (as there is new responsibility involved, too). On the other hand you don't want to be passed over when promotions are coming up. So there's a trade-off when chosing this route. Outside value If your short to medium term plan is to leave/switch companies anyway, grabbing titles and certifications will put you in a better position when negotiating with potential new employers. This may differ from country to country but I don't know of any laws that force you to disclose your exact current/last salary during an interview, so accepting a lower-than-average one for a promotion that will increase standing may be a good idea. Conclusion You have to know which direction your 'future growth' is taking, then the answer will be clear. 

I would consider the possibility that somebody who hits the same button 25 times maybe isn't having a great experience, either with their computer or your software. Maybe they think that your software has frozen, maybe their computer is running slowly or playing up, maybe their kayboard/mouse is having issues, maybe they are just having a really bad day and take their frustration out on your software. Either way, if that is the case, and a picture of you shows up along with some silly meme, it's not going to end well for you! 

You could potentially be the person to take this shambles and apply some structure, and that would look great to future employers. Don't worry about people doubting your skillset, and whether or not you really did do X, Y and Z. Just focus on being actually good at those skills, and you will always be employable. 

Every developer thinks that every project they inherit is a buggy mess, it's a natural reaction, and I understand the instinct to want to refactor everything to be the way you think it should be. However, if the code already there is working and serving its purpose, and the business needs new features added, then you should focus on adding the new features. It doesn't mean you can't refactor as you go. As you add the new features, you are probably going to work with the already existing code, and when you do, tidy it up and add tests, and make sure that the new code is covered by tests also. Brownfield development (ie. working with and improving existing crappy codebases) is a skill in and of itself, and you can't just rewrite every codebase in this category you encounter. You are much more valuable as a developer if, instead of just finding a new job, you actually make the effort to work with and improve the codebase you have. 

Features: Motivation Working on your own projects, bits that you really want fixed/refactored from your daily work or similar things at your own pace and direction is very rewarding to a lot of programmers. Getting out of the box It sparks creativity, thinking through a whole stack, planning and coordinating with other team members and possibly presentation skills. Extending/Spreading knowledge Often people worked together on projects to learn from or with each other new skills, technologies or libraries. Improvements to company products or assets Almost everything I've ever seen done in this kind of environment eventually proved useful to the company. 

Why should you see it as your fault? You shouldn't. You should see it as wrong. As a mistake. Then take responsibility for it by saying, for example, "I'm sorry this mistake got out. I did not double check the result of the proof reading, but I will do so in the future". This way you don't apologize for the mistake that other person made but take on responsibility for not having double checked it (which probably isn't even your job, at the moment) and make it your duty to do so in the future (thus accepting the responsibility in advance, making it obvious you care about the fact that this shouldn't happen). This is just one suggestion, maybe you find better ways of improving the situation. Another example: I'm a senior developer with not management or team leading role at all. I'm working on a new feature, togehter with two junior developers and while I'm out to lunch they deploy a version which I haven't seen before and which introduces a bug to production. I get back and see the mess that clearly didn't originate from me and I can either let it play out and see who's being hurt (usually the company in general) or I can take responsibility for it, hurrying to roll back the deploy, make sure everything works and put measures in place that - if approved by the mananger - make sure this won't likely happen again, like a rule that all deployments have been done by teams of two where at least one has to be a senior dev or above. You should. In a way. "Your fault" doesn't have to mean "the fault that originated in you", but can mean "the fault that you found and took upon you to eradicate". That's how you should see it. There's a fire. The firemen see it as their fire, not because they started it but because it's in the area they're protecting, so it's theirs to extinguish. 

I worked with an individual like this in a previous job, let's call him Simon M. While Simon initially wanted the same salary as the programmers etc, despite not having the same skillset, our employer at the time was able to appease him by appealing to his ego and giving him two big monitors. I imagine the same thing may work in your situation as well, ie offer alternative perks instead of a higher salary. 

My first proper job as a developer was very similar. I was the developer and had to wear a lot of different hats. Nobody is going to view you negatively for that, it will be seen by a lot of employers as a positive. However, you say: 

Do you use any enterprise chat applications such as Hipchat or Slack? On a project I am working on, we have a standup channel on Slack (used Hipchat in the past) in which, after each days standup, we summarize what we are going to be working on that day (basically typing out what we said in the standup). You could implement something like this, and have every member of your team including your boss do this as part of their routine. This way you know your boss is reading everybodys messages every day, and if you summarize incorrectly he can tell you at the time. Then a week later, if your boss claims you were working on something not asked for you can point to your entry from a week ago, and ask why this wasn't raised with you at the time. I prefer this to email as it's more casual, easier to work into a routine and generally feels more natural. 

Applying for job is sort of like sales with yourself as the product, so you can apply this here. What does this mean? I'll take your example: 

I've had the best results so far with personal recommendations, both for being referred and looking for people with a completely different skill focus than mine (thing backend programming and field sales). If you know great systems/networking engineers, ask them for a recommendation or five. Most good people always know one or two other good guys who are open to a new job. And if you tell your friend what issues you are facing they might also give you a hint as to what skills or certifications to look for. I even offered to screen and interview candidates for a friend, so that is a thing. 

This is equal to "I found out that I'm not able to do this" or "I'm not able to do this" if it's something discussed before. Again, it has nothing to do with being disabled in particular. Everybody can find out that they're not able to do something - even after they've been assigned the task. The professional way of dealing with these issues towards a disabled person is to be aware that these issues are relevant regardless of disabilities and deal with them as one would towards a not-disabled person. What ever that means for the particular company and it's culture. Addendum: So how to address topics like this with team members? The most imporant thing is to praise in public and criticize in private. 

I've been there myself, having missed work as a result of mental health issues. The important thing to realize is that it is very difficult for people who have no experience with psychiatric disorders (either not having experienced them themselves or through a family member) to empathize with those who do. To them it just looks like laziness/slovenliness etc and how can you expect them to tell the difference? Now that you're feeling better, the best thing for you to do is to work hard and kick ass at whatever it is that you do. Being able to overlook remarks such as this is a sign of good mental health. 

That's a red flag right there. It implies that while the office is busy, things are either too distracting for you to be able to focus or you have more work than you can handle, so you need to stay late to get things done. This suggests that management aren't doing a good enough job at either managing your workload or providing a productive working environment. Regardless of whether or not this is actually true, this is how it would look to me, and I would draw conclusions about the competency of your managers as a result. Besides, surely there are better ways to be spending your free time? Go to the gym? Meetups? The pub? 

Can a company call on ethics to forbid you from participating in this case? I think not. They can forbid you from drawing on outside resources of course. Or shun everything community-backed altogether. But only picking out active contribution is, in my opinion, hypocritical at best, unethical in itself on closer examination. In my opinion, so as long as your company gains something from drawing on stackexchange, in some form or another, it's your company's duty, ethically speaking, to allow, even encourage you to participate, too. Disclaimer: because this keeps coming up I do not suggest disobeying a company's rules and guidelines. I'm only voicing my opinion on them. 

You want to have lunch with you colleague? Invite them. You want to be happy in the workplace? Make others in the workplace happy. You want to be included by others? Include them yourself. I would say "Do to others as you would have them do to you", if it wouldn't sound like preaching. How does this work? or: I want them to change, not myself! / This isn't about me but the other person. / But this is too simple, how can this work? Doing this exploits a neat little mechanism in the human mind. People call it the principle of reciprocity. Basically, somebody gives you something first, then asks something from you, you have a much harder time, saying no. Sales people love this. Here however you use it for something more benign. You give them something, say, attention or happiness, by inviting them to have lunch or what you may think of. Next time they think about who to invite (read: their brain asks them to invite you), they will include you, too.