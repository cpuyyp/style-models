Your overall code is good, I do agree with Wenqin that a more class-oriented approach to the shapes could prove beneficial to the structure of the program. Anyways, onto the review. You are right about the use of your statements in the beginning. This can be handled in a much easier way if you just make a to store this and call it from a single statement. That way if you make changes later, it's easier to maintain and it's definitely easier to reuse. 

So what would happen if a user input a negative number? This would definitely give you output, but is it valid or even usable? Overall, your code is alright. But try to avoid uneccessary spaces or excessive blank lines, it results in code that is tedious to scroll through as the program becomes longer. Try to implement the DRY Principle as often as you can, it will result in elegant code that maximizes re-usability. Putting my suggestions together and leaving some work for yourself, is the code below: 

This is a simple boolean comparison, so you can literally just return the result of the comparison and not have to make a bulky if-statement. I think that Janos did a good job touching on making your class a simple static method. I agree with him about your use of tests also. You put in a lot of code (more than your actual list and program) to do some really basic tests. I would honestly just keep it to one method. 

I built a small app that gets data from a remote json file and displays it in a list of users. In each list item, an image of the user, their name, and their points tallies are shown. The list is displayed in two possible ways - 'all time' and 'recent' - depending on the user's choice. I would specifically like feedback for my SCSS and usage of React components but anything else is also welcome. PS: I tried working without semicolons - is this a good or bad idea? Here is a Codepen Javascript: 

I have written a small app that fetches news items from an endpoint and displays them in a grid. I used React to create components and use them throughout the app. This is the first thing I have built using ES6 - mainly for syntactic sugar. I tried to match the BBC News page style, so it should look very similar. It's responsive and should look good on any size screen. Overall, I'd mainly like feedback for my React and ES6, comments on best practices or what I could do better. Here is my React code: 

User Story: All new recipes I add are saved in my browser's local storage. If I refresh the page, these recipes will still be there. Code: 

The code returned in the view is messy. How can I tidy my code so that the styles applied do not take up space inside the main of the view, perhaps instead within a variable beforehand? How else can I optimise this code? 

You never do anything to modify , yet at the end of the method you return ? Some comments would go a good way in explaining that a bit. 

First thing that catches my eye.. Where are the comments?! I mean if you write good code, you don't have to write a lot of comments. But you literally have almost no useful comments in your code. What are you doing here? 

Room_Carpet Class Once again, the class is designed pretty well, but the copy constructor is not implemented. 

Otherwise, I would remove the copy constructor; it really has no purpose if your class is mutable. On the topic of mutability, you have one private member and one public member? It's a bit odd that you would expose the next node, but keep the values private. I would change the to be private: and then I would create getters and setters for it. Only do this if you are required for some reason to have mutable Linked List. 

I have been working on a script that automatically checks on the state of 2 services that I require to be running 24/7 on a server that I manage. The script works as I need, but I would really like to optimize it if possible. Specifically, I find that I want a way to reduce the need to type the command: 

You have accessors (the and methods). These methods allow us to retrieve data from our private members of the class instances safely, without revealing how they are implemented. This is known as encapsulation, a very important topic on programming to understand. This is where having a properly implemented copy constructor can show its' worth, due to the fact that you can now create copies easily without exposing references/implementations of the member variables. Typically, accessors are paired with mutators, which conversely, allow us to alter the members of a class instance in a predictable and controlled way. As pointed out by cbjobar in the comments, the use of mutators changes a class instance from immutable to mutable; the data values can now be modified after instantiation. 

I made a simple React + Redux app which allows you to add and remove recipes to a list. Here are the user stories the app fulfills: 

I would like to structure the app better by splitting this file into separate files but for the sake of this question I have kept it in one file. Demo (adapted for codepen without localStorage features): $URL$ Making this small app brought about some questions I have about Redux: 

This is the first in a recursion exercise which I have needed to change the base case to accommodate how the rest of the code works. I originally made it so that whenever an is reached, it returns a substring from (because the following is irrelevant), but of course, this is useless when there are two 's adjacent to one another. I am still getting used to the idea of recursion, so I would like to know if this is a 'good' solution or not. Can it be made more efficient? 

I have an and function because there are only these two fields that get added by the form. Would it be better instead to use an and run this when either field changes? I see this as a benefit for when other fields get added, but less efficient because I will be running an onChange function for several fields that aren't changing. The naming of my action creators, reducers, and functions inside are usually the same. For example , action creator and function. Is there a better approach to this? In the function inside , I am validating the and values. Should this go inside this function, or somewhere else? In the function inside , I am dispatching many actions. Is this correct practise? 

You can remove two if-statements altogether if you think about it! Also, you don't even need your first edge-case if you do this: 

As a side note, look at how much easier it is to read! Think about what it would be like to read your code from someone else's perspective; would you think it's cluttered? Confusing? In your , this can be broken up into methods based on shape (unless you decide to create a class for each shape). This helps in maintainability also and builds on what I stated above. 

An easy way to detect a cycle is through the implementation of a disjoint set structure, sometimes called a Union-Find structure. You start with a source node and attempt to add a node to that set. If your Find() call for the source node and the other node returns the same root node, then a cycle world result if the nodes are unioned. UPDATE: You could implement a topological sort, arranging the nodes with edges going from left to right. A topological sort can only be completed successfully if and only if the graph is a Directed Acyclic Graph. So, if the algorithm detects any cycles, it will stop. The runtime is O(|V| + |E|), which is better than DFS, in the case that repetition occurs during traversal. Topological Sorting 

I have an AngularJS function that is used to determine which associative array variable is to have data pushed into it. I would love to be able to remove the switch case entirely if possible but haven't been able to envision a way to do that! My overall goal is to both improve performance, but more importantly reduce the overall number of lines if possible I also considered perhaps some type of variable interpolation, but that seemed like an investment with little return on my effort. The directive is called in my HTML like this: 

I have made my first app in Elm, a lookup of Github users. You type the name of the user into the search bar and the user's username and profile image - which has an anchor linked to their profile - appears below. Here is my code: 

Also, a rule was to use React and SASS (The FCC founder said that SCSS is acceptable). This was my first attempt at using Redux. As a result, some things in the app are experimental. For example, the reducer works well and returns a new state each time - but I'm sure the code here could be better written. Also, in the component, I found myself confused at how I should use the component's state, or draw data from the Redux store. Some thoughts on this are most welcome. As was recommended to me on a different code review, I used the BEM pattern for my SCSS. I used Vex for the modals. This resulted in some pretty ugly code. For example, html tags within a string (which I think looks really confusing in the vicinity of JSX). But the functionality is fine, I believe. Would React-Bootstrap be a better option in this case? Here is a link to a Codepen of the app Javascript: 

Here is a demo of it in action: $URL$ I used to format the code, and based the architecture from the documentation.