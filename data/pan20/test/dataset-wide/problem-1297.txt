Congrats of making your own sorting algorithm! Speed/Efficiency There are plenty of sorts on Wikipedia that are more efficient, if you want to take a look at them. I added rough speed (given random data) and difficulty estimates: 

Naming You did a good job with most your variable names, but not so much with your class name. Typically, you would not want ANY class name to start with a lowercase letter. The class name is also not too descriptive (what is balanced, again?). I recommend changing to or if you don't heed the second part (don't forget to change the file name as well). Secondly, what is up with haTab? Everything else was so well named, this just seems out of place. Changing it to would be more descriptive. Permissions What I learned is that if you don't have a modifier on your functions, and no other class is using them, add . That's just standard Java. On the same line, if another class does need to access something, make it . You seem to be missing a lot of those. Constructors There is only one constructor for . That is not very helpful if you want to set the left and right children or parent at construction time, or you don't want to set a value. New code 

then reallocate caller supplied buffer - this is very bad idea. for reallocate you need exactly know how caller allocate buffer. you must add to interface contract - how caller must allocate initial buffer and free final. which concrete routine use. say for example caller must allocate initial buffer with and free with . but nobody do this. usual used 2 ways: 

here - in/out parameter, but in only - if you reallocate user buffer - you must return new buffer size to user. may be next signature: 

I've also found that relying on hover to turn-elements-off is error prone. You will find that quick mouse movements don't fire the mouseout event as expected. There are some good plugins that will help this. Hope it helps. 

Changed some variable names for readability Created some variable constants for readability Created single responsibility functions for clean code Only transformed elements to jQuery once and stored in a variable starting with '$' Extracted out the style from js and put it in css Prevented the link's default action from going Added functionality to add/remove the 'expanded' class 

isn't a very good name. Try making it Speaking of , it doesn't look like you need it. You only use question once. Just put it inside the call to input on the next line. Change to . That sounds more natural. The main method should be in something like this: (more pythonic) 

Based on your (vague) description of the exercise, it seems like the user should keep the number in their head until the very end, and each time the computer guesses a number the user tells the computer if the number is higher or lower. That's the exact reverse of the usual programming exercise. In that case, what you could do is: 

if buffer not big enough - error is returned - (in case no valid data in buffer at all) or - in case exist some valid data in buffer, but need large buffer anyway. anyway you need here additional out parameter allocate buffer yourself 

SetCommTimeouts again - senseless code. this api simply send control code to device on which file open. usually only serial controller driver handle this ioctl. the npfs.sys, which implement pipes - not understand and not support this ioctl. driver return to you ( mapped to win32 error) but you not check for errors here. 

I don't think that I can give reasons why this is better (i.e. faster). Only I feel that it is more readable and scalable. I like to use the data attributes for information like ids. For a long time, classes were the way to go but we had to deal with cluttered classes :(. Data attributes keep things cleaner in my opinionâ€“plus it makes it easier to have multiple counters on the page. 

By looking at documentation, I found another method that is faster at drawing many circles. I replaced last 2 lines in with: 

First of all, I personally would avoid hard-coding all the directions and if-statements to check for them. Instead, what is more efficient is to use just 2 variables, x-velocity and y-velocity. This makes collisions much easier: 

Output Typically it is bad practice to put a print statement inside a function, because you don't want your console flooded with text if you are calling that function a bunch of times. Instead, you can do inside your function and outside. Naming Now, I'm sure you will also get answers pertaining to variable names, but I'm not a stickler for that, plus your variables and functions seem good already. Happy coding! 

The code is completely untested. So there is probably some syntax issues, but let me know what you think. CSS 

Grekz has made some really good suggestions with regard to html structure. I strongly concur that you should not couple the code with numbered classes! But I also wanted to give the code a shot as is. So I used the to determine which slide to grab. 

I need your opinion. Which way do you think is right? The definition of in this code bothers me because it is a single method that has two separate behaviors. Depending on how many arguments are passed the method will do different things--that stinks. On the other hand, calling in the block just feels right. It is subtle. But the difference of assigning the message with or without the seems more significant than it should. I feel guilty for really wanting to code this way. Here's a code example: 

Repeated calls to main can eventually overflow the stack trace (heh, stackoverflow). Try making a Boolean that keeps track of the user has inputed a correct value, and put the entire input sequence in a while loop. Why do you have an empty input? Why does the main method return ? If anything (which it shouldn't, having a name like ), it should return the translated list. gets translated to (not actual piglatin) You don't have to enter an if statement to set a Boolean variable; just set it to the thing in the if. 

again bad and wrong. for what you create 2 pipe pairs ?? when 1 pipe pair only need. one pipe handle in you process and one connected pipe end in cmd. pipe must be duplex. what you write to this pipe end in self process - will be read in cmd. what cmd write to self handle - you read via handle in self process. so not need additional pipe pair. next - always need use asynchronous pipes and io here. synchronous is not efficient and can deadlock. 

There are many changes to the css through jquery that could just be handled by adding a class to devInfo. I... 

I would use function recursion in place of a jQuery queue. The central piece is the function. As the name implies, it grabs the next hidden message and displays it. After the message is displayed, it calls this function again... looping until all messages are visible. To me, this seems much more readable and easier to maintain. Also, it would be trivial to have a another message parent and reuse this same code (i.e. error messages and information messages).