I'm developing a site where I need to display popups. For now they're a popup with basket contents and a popup to display item's photos. But I might need more down the road. I've come with a class hierarchy, but I wonder if there're any better ways to split the code into classes. It might make sense to mention, that one of the design goals was to keep things from moving unnecessarily. For instance, when popup is shown, page behind it must not change. You close the popup, you get to where you were. That might be obvious, but it took more effort than it might seem to be needed at first sight. And let me make it clear, the code was only tested in Chrome. I've prepared a test page, where you can get a basic idea of what I'm talking about, experiment with the popups. You can use textareas to change popup's extents. The extents are retained across page reloads. Also, you can leave comments in the PR I created. And apparently, you can inspect the code here. Now then, let me introduce you to the thing a bit. There are two modes the popups can operate in (basically, two implementations): 

Stop declaring your variables and then setting their values. You can just set the values in the same line that you declare them. Always use the appropriate type parameter for generics (i.e., , not just or . Don't create variables where you don't need to (i.e., , , ). Wherever possible, separate out different functions into different methods. For example, in your refactored code below, I split the anagram generation into a separate method from the actual file IO. This not only improves code readability but also prevents your program from holding a lock on the file for the duration of the run. (Think about it; there's no need for the file to be locked up while we're actually checking the list for the anagrams.) People generally use the interface rather than the underlying object whenever possible. ( vs. ) Not really sure why, to be honest, but this is the accepted convention. The function probably doesn't even need to exist, but if you're going to leave it, it can be a one-liner. Use variable and method names that are actually meaningful. Don't convolute code where it's not necessary. For example, see the refactored method below. 

manager Manager handles 2 keys: 1. Escape. Closes the popup. 2. Enter. Closes the popup, unless popup decides to handle the key. has method. It's used to prevent manager from handling Enter key press. For instance, consider popup with a list of items with corresponding delete buttons. User tabs to delete button and presses Enter. Item is supposed to be deleted in this case, but manager should not close the popup. popup Popup is shown by creating instance of subclass (or class itself in simple cases). In constructor class notifies about the former being created. In response to which hides scrollbars if in mode (2), stores a reference to , and passes some info to it: 

. Semitransparent layer that fits the viewport, and on top of which popup is displayed. . In mode (2) it's the block that fits the viewport, and it's the wrapper's scrollbars that appear if popup doesn't fit the viewport. In mode (1) it has no presence on the page, just appends popup to the body. . Title plus close button at the top of the popup. . Block with buttons at the bottom of the popup. 

I hate the fact that I've made an anonymous extension like this and it makes me cringe. Are there any better techniques I can use to accomplish this? Changing the file to a instead of an isn't an option. As I said, I'm just retouching a large, pre-existing code base. 

... or you could write it all in-line, if it looks better to you, since each block only really does one thing: 

When dealing with s, you should almost always have the functionality defined in some class that rather than extending itself. So you can have an anonymous class or an explicit one. The standard way to do it in-line like you tried to is like this: 

The algorithm itself looks solid, and your code looks good! I just wanted to provide some general style tips for Java. First, why are you performing the core of your logic in the constructor? That's highly irregular for Java. A constructor in general should only perform processing to initialize values unique to each instance of the class. It would be much more object-oriented to either move all that code directly into your method or into a different method. Having a instance doesn't even make sense here. Second (and much less importantly), you are breaking with several Java style conventions. I'm assuming you come from a Python background, because your code "feels" very Pythonic. That's not a bad thing, but they're two very different languages. Python attempts to always be short and to the point, while Java emphasizes verbosity and long, descriptive names for things. As such, here are a few tips to make your code more Java-esque (if you care): 

wrapper In mode (2) page wrapper is shrunk to fit viewport minus scrollbar width/height. Should it fit viewport unconditionally, page might change visually when showing popup. For instance, consider page having vertical scrollbar, popup gets shown, viewport scrollbars get hidden, and now page has more room to take horizontally. Right-aligned elements would move scrollbar width to the right. As a result, popup's wrapper should have the same scrollbars the viewport had. Or else, there might be empty space where viewport scrollbars were. To avoid that, passes 's method to via options, and when is about to be shown, it creates , and passes to the latter scrollbar state it gets from . In mode (2) when you click outside of popup (on the wrapper), popup closes. The naive implementation would be to close popup each time wrapper receives event. But then every time you click on popup itself, popup closes. To counter that, listens to event, and notifies about itself having been clicked. Then when event propagates to , it can decide whether to close popup or not. On a side note, it doesn't close popup directly. It calls method passed via option from , which is 's method. window/content change One other function popups have, they reposition themselves in response to window resize or popup's content change. The latter may happen in at least two cases: 

It's okay if you don't know what all this does. Basically it's just checking to make sure that the returned by is actually an before trying to downcast it. If it's not, if will throw an . I might've rewritten this method like the following, but in my production environment I really dislike using and this kind of downcasting. (In general, it creates "code smell".) 

... Then, all you have to do is change these variables if you want to modify the game in the future: 

In general, I'd prefer to have these kinds of objects (, , ) be accessed via getters and setters rather than being exposed as . This is especially important for the one named , which I assume is supposed to be a singleton. A singleton's initialization should always be thread-safe, which means it needs its own synchronized accessor method, like so: 

. Acts as a public interface for parts of the page that doesn't open any popups, but need to know how popup affects the page. Like footer, which is to be stuck to the bottom of the page. Responsible for: 

. It coordinates things regarding window event. On receiving the event, it notifies (if in mode (2)), then (calls 's and 's method). . Updates page wrapper's extents. . It "listens" for other two "events". It calls its method when showing popup, after images has been loaded. And after textarea resize. method notifies if in mode (2), or updates popup position (, , properties) if in mode (1). . In mode (2) popup updates vertical position on receiving the event. Horizontal position is handled automatically, since wrapper is basically a table. 

This is a curious method. All method names should be verb phrases, firstly, and if this is taken as a verb phrase then it means you are executing the code to play again. But the really curious thing about it is this: you return if the user does not want to play again, and if they do want to play again. That's bizarre and completely counterintuitive. 

I'm being forced to use the common anti-pattern of a which many classes in this project implement. Long story short, I need to have a constant which is pre-populated with values. Normally I would do this like so: 

Sometimes, the correct answer really is "Nope; it's all good." It makes for a boring answer, but there it is. It doesn't look like you can make this much faster, based on what you've provided. One thing you might consider is checking the variables to see if the image manipulations are actually needed before calling the respective methods. So, for example, something like... 

footer Footer is to be stuck to the bottom of the page. That is done by setting for everything but footer: . If there's little to no content on the page, 's "moves" the footer to the bottom of the page. In mode (2), when popup is shown, footer can't just take viewport's client height (), since it might have changed when showing popup (scrollbar might got hidden). So, it asks , which in its turn asks about client height viewport had before popup was shown. Another issue you might encounter with footer in mode (2) reveals itself when you scroll down to the bottom of the page, open popup, then enlarge window vertically. Footer is supposed to follow page's bottom edge. And in this case, the abovementioned formula doesn't work. You've got to add for it to work as just described. Also, after having closed the popup, you have to set according to the first formula (without ). In mode (1), you don't add to when popup is shown. In this case the formula takes the following form: . Additionally, consider a page having . When popup is shown, it might cross right boundary, if not taken care of. In this case, you generally want to increase page's : . Manager class 

So this method is a little more complicated because I've added input validation to it. We want to make sure the user actually inputs an integer, otherwise our program will crash, right? This method may be a little more advanced than where you're at, so you can just skip over all of this if you want to ignore it. But it's a good reference point for when you start to learn it later. Step-by-step through this method... 

This method will print your input prompt and then wait for the user to hit enter/return on STDIN, then return whatever was typed. I've added a call on the result for convenience and cleaner input. (To see why that's relevant, consider what happens if your user types in "s " for your variable.) I also changed the to be , just because I think it's a more beautiful command-line interface when the prompt is on the same line as where the user types. Of course, that's very subjective and completely up to you. 

. Responsible for hiding page's scrollbars. Is not created in mode (1). . Basically an abstract class, that is to be inherited to make use of. Popups are shown by instantiating subclass. It has the following components: 

Popup is simply put on top of the page. If it fits the viewport, it has (fixed position relative to the viewport), if not, (fixed position relative to the pge). With the latter being its drawback. Ability to scroll the page while popup is shown (with popup, that is) doesn't look good. Improved implementation. Page is enclosed in a wrapper. When popup is shown, wrapper shrinks to fit the viewport and its content (the page) is positioned (relative to the wrapper) in a way that it seems like nothing happened (page retains its visual appearance). But as a result, viewport scrollbars disappear. On top of that popup is put. In a wrapper, that fits the viewport. If popup doesn't fit the viewport, wrapper's scrollbars appear.