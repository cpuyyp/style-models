Using is an anti-pattern and sign of bad architecture. What if you code changes together with your parent chain - it will instantly break your code. Also, have you thought about how you are going to test it? 

Now I can easily see all the ingredients used by the directive. Even if I don't know anything about your code, I see that this directive has an API accepting a string, and 'Event' in the name hints that this string represents an event. What more, now it is re-usable - you can put it anywhere to listen to any event. Also note that putting it as attribute instead of class is better for readability - now you can easily tell it is directive and not a class used for styling. (It is unfortunately still used by Angular UI but they realised this way is bad and promised to remove it.) BTW, you provided a long CSS file in this question about Angular/jQuery, I could not see any reason for that. If JavaScript is the focus of your question, you would help your reader by completely removing all styling classes. 

That way the original list is not in the Controller but the Service, and Controller simply asks for it. Here the jsbin to enjoy! 

You are re-defining , which is a bad practice. It will break the chain, forget all your previous properties and can lead to unintended effects if using (which isn't good idea too unless you know what you are doing). It is better to specify individual properties of it. 

which is however not a good practice, as it is the business of controller is to pass things, not to perform things. There is yet a shorter Angular-magical shortcut :) putting right inside HTML: 

To have a clean readable code, you want someone looking at it immediately see the meaning. What is the meaning of this object? - 

Also this way of using promise is not recommended - notice that your second (error) function will not catch any errors inside the first (success) function. A better way is: 

The name should tell roughly what function does, so I can skip this function's definition and still understand the rest of the code. This is a standard "getter"-function and should be name like that: 

A proof of concept app to run the same query on both Google and Bing. For instance, if one of the engines takes too long on a slow connection or the results are not satisfactory, the same query can be run on the other engine with single button click. The whole app is small single file with < 200 loc. Can be saved and loaded locally with the protocol in the browser. is used to display all labels, forms and buttons with equal gutters inbetween. Perhaps can be improved. Can be tested here: $URL$ I am interested in any advice on improving the code and/or layout or any other suggestions. 

which is, however, blocking, may result in delays, and makes the page unsuitable for offline testing. On another note, library such as async loader, does not seem to work with this particular script. 

I know good naming is hard but maybe a name revealing more about what the Router is doing would make it easy to read your code. Also you don't seem to provide the files defining the routes and both links to Github seems to be dead (which is why you need to provide the files, not the links!). 

It doesn't look to me like proper Unit test. You are injecting the real dependency but are not mocking. Unit test is about testing your single Unit of functionality in isolation, with all it dependencies mocked. Here is example from of my own test code. This is a proper mock - I am producing a fake Constant: 

That way the scope is properly encapsulated and will not clash with other controllers via inheritance (unless that is what I am after). Also I am renaming to (Main Controller), which protects against change of (e.g. inside event listeners), and make every property look exactly the same inside HTML and the Controller, which makes things very readable. 

"A service per controller" sounds like a bad architecture. A good service should 'know' nothing about controllers and presentation details. Controllers should be thin, and any repeating code there should be abstracted into general purpose services not specific to controllers. "UserViewService" should never be a name of Controller! And comments are not there to fix the confusion created by bad naming! In Angular, there are , , and - these are your Angular templates. You can have and , then your template can be called . Having inside your Controller looks like a "code smell" to me. Controllers are only executed once upon initialization, and their purpose is to glue your data to your view (via Angular's (which is in the layer). The data should be either ready or you should get it from a service. Any other work like object creation is bloating your controller with too many responsibilities. Further, it is Angular's job to create Services for you, so no need for whatsoever. This function naming is misleading: 

looks hardcoded and non-reusable to me, but then again, I don't know its purpose and the level of abstraction. 

In that case, is a function argument, so using it won't throw any error (in contrast to a variable) and hence there is no need for . Also note that evaluates to , so the two expressions are different, strictly speaking. 

Are the files you provide correspond to ones used by others? The best practice is to write the actual file name at the top of the file in the comments, otherwise there is no way I can find out. 

If it is performance you are after, the scroll till you drop directive by Angular UI may help. A common mistake is to throw too many array members inside your DOM via , but you are already limiting your input... You may consider using custom filter instead and making sure it is fast. 

You are using the verbose raw JS way to handle XHR, whereas libraries like would do a lot of heavy lifting for you. If for any reason, you prefer not to use third party libraries here, you can still imitate 's encapsulation architecture, so later you (or whoever will use your code) will be able to quickly change to .