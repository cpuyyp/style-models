Yes, there is a way to guess a number asking 14 questions in worst case. To do it you need a linear code with length 14, dimension 10 and distance at least 3. One such code can be built based on Hamming code (see $URL$ Here is the strategy. Let us denote bits of first player's number as $a_i$, $i \in [1..10]$. We start with asking values of all those bits. That is we ask the following questions: "is it true that i-th bit of your number is zero?" Let us denote answers on those questions as $b_i$, $i \in [1..10]$. Now we ask 4 additional questions: Is it true that $a_{1} \otimes a_{2} \otimes a_{4} \otimes a_{5} \otimes a_{7} \otimes a_{9}$ is equal to zero? ($\otimes$ is sumation modulo $2$). Is it true that $a_{1} \otimes a_{3} \otimes a_{4} \otimes a_{6} \otimes a_{7} \otimes a_{10}$ is equal to zero? Is it true that $a_{2} \otimes a_{3} \otimes a_{4} \otimes a_{8} \otimes a_{9} \otimes a_{10}$ is equal to zero? Is it true that $a_{5} \otimes a_{6} \otimes a_{7} \otimes a_{8} \otimes a_{9} \otimes a_{10}$ is equal to zero? Let $q_1$, $q_2$, $q_3$ and $q_4$ be answers on those additional questions. Now second player calculates $t_{i}$ ($i \in [1..4]$) --- answers on those questions based on bits $b_j$ which he previously got from first player. Now there are 16 ways how bits $q_i$ can differ from $t_i$. Let $d_i = q_i \otimes t_i$ (hence $d_i = 1$ iff $q_i \ne t_i$). Let us make table of all possible errors and corresponding values of $d_i$: position of error -> $(d_1, d_2, d_3, d_4)$ no error -> (0, 0, 0, 0) error in $b_1$ -> (1, 1, 0, 0) error in $b_2$ -> (1, 0, 1, 0) error in $b_3$ -> (0, 1, 1, 0) error in $b_4$ -> (1, 1, 1, 0) error in $b_5$ -> (1, 0, 0, 1) error in $b_6$ -> (0, 1, 0, 1) error in $b_7$ -> (1, 1, 0, 1) error in $b_8$ -> (0, 0, 1, 1) error in $b_9$ -> (1, 0, 1, 1) error in $b_{10}$ -> (0, 1, 1, 1) error in $q_1$ -> (1, 0, 0, 0) error in $q_2$ -> (0, 1, 0, 0) error in $q_3$ -> (0, 0, 1, 0) error in $q_4$ -> (0, 0, 0, 1) All the values of $(d_1, d_2, d_3, d_4)$ are different. Hence we can find where were an error and hence find all $a_i$. 

I am trying to understand "de Cataldo, Migliorini. The perverse filtration and the Lefschetz hyperplane theorem. Annals of Mathematics, 171(2010), 2089-2113." My question is about one detail in the paper. Here is my reproduction of the situation. Let $\Sigma$ be a stratification of $\mathbb{P}^N$ adapted to a bounded complex $K$ with $\Sigma$-constructible cohomology. Let $\Sigma$ be also adapted to the embedding $Y \subseteq \mathbb{P}^N$ of an affine variety $Y$. Let $\Lambda \subset \mathbb{P}^N$ be a hyperplane, $H = \Lambda \cap Y$ and $\bar{H} = \Lambda \cap \bar{Y}$. Set $\bar{U} = \bar{Y} \setminus \bar{H}$ and $U = Y \setminus H$. Consider the cartesian diagram $$\begin{array}[c]{ccccc} H&{\xrightarrow{i}}&Y&{\xleftarrow{j}}&U\\ \downarrow\scriptstyle{J}&&\downarrow\scriptstyle{J} && \downarrow\scriptstyle{J}\\ \bar{H}&{\xrightarrow{i}}&\bar{Y}&{\xleftarrow{j}}&\bar{U} \end{array}$$ Now the two authors stated (page 2101, following the same diagram) "By the octahedron axiom, the map $J_!j_*j^*K \to j_*J_!j^*K$ is an isomorphism if and only if the natural base change map $i^*J_*K \to J_*i^*K$ is an isomorphism." My question is: what is exactly used about the octahedron axiom for the statement? Thanks! 

Let $G$ be a finite subgroup of $\mathrm{SL}(2, \mathbb{C})$ and let $X$ be the quotient surface $X = \mathrm{Spec}(\mathbb{C}[x, y]^{G})$. Denote by $\mathrm{Hilb}^r([X])$ the equivariant Hilbert scheme on $\mathbb{C}^2$: the connected component of the $G$-fixed loci of $\mathrm{Hilb}^{rg}(\mathbb{C}^2)$ dominating $\mathrm{Sym}^r(X)$, where $g$ is the order of $G$. Write this map $f: \mathrm{Hilb}^r([X]) \to \mathrm{Sym}^r(X)$. (The case where $r = 1$ is the $G$-Hilbert scheme of Ito-Nakamura, and the map $f: G-\mathrm{Hilb}(\mathbb{C}^2) = \mathrm{Hilb}^1([X]) \to \mathrm{Sym}^1(X) = X$ is the crepant resolution.) It would be great if someone can point out some literature in understanding this may $f$ in general. My specific question, might be known to the community is: Is the map $f$ semismall? Instead of taking $\mathrm{Hilb}^r([X])$ if one takes the usual Hilbert scheme of $r$ points on the smooth surface $G-\mathrm{Hilb}(\mathbb{C}^2)$ that would give a symplectic resolution of $\mathrm{Sym}^r(X)$. In particular, that is semismall. Maybe one can see that the map $f$ is also a symplectic resolution? Thanks! This is a second part of the question, which I try to convince myself: Q: Is the zero-fiber, the pre-image of the 0-cycle of multiplicity $d$ supported at the singularity of $X$ a Lagrangian subvariety? (I don't think it is irreducible in general though.) Thanks! 

Is it true that every positive rational number $r = \frac{n}{m}$ could be represented as sum of $\frac{1}{k}$ for different $k$'s: $$ r = \sum_{i=1}^{s} \frac{1}{c_i} $$ where all $c_i$ are different? If true, are there any bounds on number of summands $s$ based on $n$ and $m$? 

There is the following formula: $$ x_{n+2} = \frac{x_{n+1}^3}{2 x_{n}^2} + \frac{5}{2} x_n^2 x_{n+1} $$ I'm not sure if this is a pure recurrence formulae. If you need, I may provide a proof. 

If you consider only simple cycles (every vertex visited at most once) then this problem is NP-complete, so no polynomial (in $|G|$ and $k$) algorithm is known. If non-polynomial algorithms are ok, you can use dynamic programming algorithm with complexity $O(\sum_{i=0}^{i\le k}\binom{n}{i}n^2)$. This algorithm calculates for every subset $S$ of at most $k$ vertices and every vertex $v \in S$ from this subset the number of paths that goes through all vertices from $S$ and has $v$ as the last vertex. 

Consider a finite group where all elements have the same order $n$. What could be said about such groups? For $n=2$ it could be proved that such group is isomorphic to $(\mathbb{Z}/2\mathbb{Z})^k$. Could it be somehow generalized on case $n>2$? EDIT: Surely the identity has order 1, so we have to exclude it. 

You can use dynamic programming as you suggest in the title. Let $w_{ij}$ be the max gain you can get putting $j$ balls into first $i$ buckets. Then $w_{ij}$ has the following recursive relation: $$ w_{i,j} = \max_{0 \le t \le \min(N-1, j)}(w_{i-1,j-t} + \Delta l_{i, t}) $$ There $t$ is the number of balls you put into $i$-th bucket. Hence you can calculate $w_{K, \lambda}$ (your answer) in time $O(K \lambda N)$. 

If $n_1$ and $n_2$ are not too big you can use Eratosthenes sieve (see wikipedia for this). If they are big enought you can use sieve to cross out numbers which have small prime divisors and after that check every number that wasn't crossed out and check if it is prime using any primality test (see $URL$