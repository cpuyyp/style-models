Similar to another answer here. State the facts. That is, your suspicion is just that, a suspicion and it doesn't appear to the reason why you'd choose not to hire this candidate. I think that the way you've summed it up already in this question provides valuable feedback to the candidate. Provide the factual feedback that you're not comfortable with the candidate's level of understanding of topics that they should know. Back this up with your observations during the interview. For example... Facts When I asked questions X, Y and Z whilst you were able to provide an indepth explanation but where unable to explain follow up questions that are designed to show a candidate's fundamental understanding of the question. Consequence Because of this I'm not comfortable that you have a sound understanding of topic A, B and C. Meaning that you have not been selected for the position at this time etc etc Resolution If you're looking to apply to a similar job in future. I would recommend you look into X, Y, Z so that you can answer questions more efficiently when probed for a deeper understanding. Note: Don't confuse your suspicion of this candidate googling answers to things as the reason why you've chosen not to proceed with them. Whilst it might be a byproduct of the candidate not understanding the topic you're asking about. Fundamentally it's the lack of knowledge that is the problem, not what they may or may not have been doing on the other end of the phone. 

I'll answer your actual question directly first... I would tell him that you don't want to give out that information in much the same way you've explained it here. Anything else would just be beating around the bush and isn't a surefire way to achieve your end goal of not disclosing the information. Example - "Sorry, I don't like to give out my Steam details as I like to keep my work life and outside life separate from each other" Then I'd perhaps explain that maybe you'd share your details with him once you get to know him a little better (if that's what you'd actually do). Now to avoid the situation in future If you really have no intention of giving out information to people regardless of how well you know them at work. Simply state that you don't have Steam or whatever else it might be that they're asking. If someone's asking if you have something like a social media profile then I can assure you that their next question is likely going to be a request as to where they can find your profile. An alternative to this would be to answer yes, but immediately state that you don't like to give details out to work colleagues. Regardless if you want to keep 2 separate 'lives', you're not helping your chances of making friends in the workplace which may hinder your chances of progression and unfortunately it's not what you know, rather it's who you know. 

Argue from first principles. No client or customer really cares about "best practices". But they certainly care about quality. Most of all, they want their problem solved, and the faster, easier, and cheaper, the better. (They also want to save time, money and effort in the long run, which is a big part of "quality".) Yes, some clients/customers use "best practices" as a proxy for quality, efficiency, and so on. But only because their primary interests are quality, efficiency, etc. So anyone offering a service (even a programmer offering services to a business) should evaluate their work with questions like "is it high quality?", "is it delivered quickly?", "does it do what the client wants?", "does it save time/money/resources in the long term?" These are difficult questions to answer. It is much easier to answer questions like "do I follow the coding conventions?", "do I implement the spec correctly?", and "do I have a Javadoc description for each method?" Such questions are an easy way to avoid the tough questions. But a good programmer does ask the tough questions of his/her code. Best practices are important. They assist with creating quality products that save time/money/resources in the long run. They are particularly useful when you are trying to make a decision and have little hard evidence about which alternative is better. But when you do have clear information about an alternative (e.g. it would take 10 minutes instead of 4 hours, with very little chance of creating problems later on) then common sense trumps best practice! If your programmer thinks a piece of code is "terrible and should never be used", ask him to justify this from first principles (rather than best practices). Does it have a bug? Is there a risk it contains a security vulnerability? Is it likely to add a lot of time to maintenance or new features down the track? Will it confuse other programmers? And are the problems with it actually worth the time spent implementing a "better" alternative? Make sure you listen to what he says. If he makes a strong argument, don't let your ego overrule. A note on integrity and habit Good habits are valuable. If your developers are constantly practising and refining their ability to write clear, clean, well-documented code, they will get efficient at it and will be less tempted to be lazy and cut corners. This is great for the quality of your codebase! Your programmer clearly has integrity. Don't try to kill itâ€”use it! Give him tasks where quality is important. E.g. ask him to clean up messy code written by someone else that is becoming hard to maintain. Ask him to implement functionality where it's important for the code to be maintainable. 

Give everyone who would be reporting an issue a form to fill out or a template to complete before they email through. The issue here from the sounds of it is that you're not being specific enough. Provide information on exactly what you're after. Telling someone to describe the problem will not give you the information you're after. The reason for this is that I can describe a problem in a single sentence and I've fulfilled your requirements of describing the problem. Then when I get a response back from you saying I haven't described it, I'll think you aren't reading my emails because I've already described my issue to you, what more do you want? For this reason you need to ask the user "What steps did you take before the problem occurred?" or "What were you doing immediately before the problem occurred?". This restricts the user in what they can answer and lets them know what information is meaningful to you. They're likely under the impression that you can gain everything you need from the program log and any information they give you isn't that helpful. Never assume that the person you're receiving your log from knows exactly what you mean. As was mentioned in another answer, you don't offer mind reading as a service. However, I'm sure that the people sending you the logs don't offer mind reading either, it works both ways! Narrow questions will provide you more meaningful information. 

In short, don't. From your description it doesn't seem that your 'forced removal' from the group is relevant in this case. You've mentioned that the call was made to 'stand down' and then you ended up leaving after that; so the circumstances that came after that seem rather irrelevant unless there's further information that you believe changes the story here. The end of the project seems like a pretty reasonable reason to leave and a 4 month tenure seems to be fine if it's just a hacked together group in response to an emergency. Your first paragraph I believe explains your situation fine. 

To answer your question directly... Yes you should support him if that's part of your job. You should do this regardless of what you believe will be a good fit for this person given their current skills. The Why This person appears has the drive to get into development. Employees tend to work rather well if they enjoy what they're doing. Happy employees are productive employees and productive employees means FTE well spent. Now to address your concerns If you believe that this employee doesn't have the skills needed for development; then let them know. There's nothing wrong with this; give the employee tasks to do at home if it's something that's simple enough that they can google. Get them to learn the basics before you teach them how to code. If it turns out that it's something that they just aren't able to learn then you can raise it with your manager and let the manager know that you don't think that they'll be a good fit for the role. In short; start with the basics. If you're there to mentor this person, then tell them what they need to know prior to being shown how to code/develop. If they can't grasp the basics then so be it; but until you provide someone with the rope, they aren't going to trip themselves up and fall flat. (Who knows, they may even be a great fit)