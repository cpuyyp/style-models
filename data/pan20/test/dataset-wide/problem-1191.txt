EDIT: I apologize as I first gave you a pseudo-SQL Server solution, but with some additional research learned that SSIS behaves a little differently. I'm linking my source that gives multiple solutions, and for an answer will include the first. It seems that you could add a derived column component that would allow you to add a new column (e.g. from your table using the Type Cast operator DT_STR which will convert the unicode to string. You should then be able to use this derived column in place of the original column in you CSV destination. source Hope that helps! 

The way you are describing the expected result; I am concerned that what you are looking for won't get you what you want. Taking the example from the referenced post, you may actually want: 

I didn't have a way to test this, but I went with a pivot of the display name and a dynamic column creation for other products and moved the cleaned up Inv_AddRemoveProgram table into a temp table: 

What you are asking is to be able to create a report name dynamically, which is not something that can be programmed, on download, say, from Report Manager. You can (although I've never tested this) possibly do this through a subscription using @ParameterName @ReportName. citation from msdn It's about the best you can do for now, and there's a link on the citation that allows for this feature to be voted up. 

I don't have enough points to make this a comment, but it looks like based on this page the answer is . 

It seems to me that you need to set the Timestamp column to . This would set the column to return the time to the three digit precision you are looking for. 

I'll hazard the guess of the extra comma at the end of PROFESORES may be causing the error to be thrown. It's the only thing that looks out of place. 

Let's say I don't happen to have the ability to create a Stored Procedure, but I have to run the same query on a regular basis. Would I be able to put my query in a .txt document and be able to run it from Powershell by calling it? What syntax would I use for myquery.txt to run? Put another way, what's a way to end-run not being able to use a stored procedure on a query that should be made into one? 

Running sp_who2 and following the BlkBy trail up to the root cause of blocking returns a SPID which has CPUTime and DiskIO values of 0; yet it's blocking 4 other SPIDs. I'm confused by how this is possible; the CPUTime in particular seems odd as in order to obtain a lock you'd have had to have spent some time requesting resources / requesting the lock itself. CPUTime is in milliseconds, so whilst it's possible that the requesting and locking of resources occurs fast enough to have a rounded down value here, that is a little surprising. Also, these SPIDS are sometimes a few minutes old; yet appear to have done nothing beyond cause blocking. Question How is it possible for a SPID to cause blocking whilst having zero CPU Time? I'm asking as I suspect something's lacking in my understanding of the CPU Time stat. If anyone can advise on sensible steps to aid in investigating such issues though that would also be useful. 

Somewhat of a strange one. Recently my user id's been showing up in a number of Audit Success records in the Security event log of one of our production database servers with the below content (or similar): 

This record appears about 40 times one second, then there's a few seconds without anything being logged before the next batch of ~40. The events start appearing after I connect to a database hosted on the affected server from SSMS. I don't open a query window or do anything more than connect under my user account. Disconnecting in SSMS does not stop the events. Exiting SSMS does. Has anyone seen behavior like this before / any idea what may cause it? Thanks in advance. Version Info: 

NB: this question is purely academic / to help improve my understanding of SQL Server performance. Given a master table which relates to one or more other tables, how would you determine the best approach to querying that master table for records, which include an indicator to the presence of records in the related tables? For example, say we have a Person table and wanted to get a list of all people along with an indicator of whether they have children (in this example Person can be reused as the related table): 

Each of these go onto a single invoice, in addition to this there are transactions at an invoice level too, so I now need a further fact table: 

I am building a warehouse for a billing system that bills a number of services/utilities on the same invoice, as such I am having real trouble conforming to a recognised design method for the warehouse. I think I still very much have an OLTP hat on. As an example a single invoice could be produced containing charges for electricity, gas and mobile phones. All three components of the bill, themselves have two components, fixed charges, and usage based charges. Even simplified to just a mobile phone it still means to store the level of detail required for the business I need 2 fact tables: 

For further information, my warehouse schema currently looks likes this (where I have conceded to Invoice being a fact like dimension): 

This does not solve the problem though since you still have the possibility of being and turning the LEFT OUTER JOIN into an INNER JOIN. You can get around this by moving the predicates to the JOIN conditiion: 

You can see all that has happened is that the partitions have just switched between the corresponding tables/views. If you do not have the indexed view on the second table you would only get the following partitions: 

ADDENDUM As pointed out in a comment, you don't need the three subselects, you can just use the columns in the table aliased : 

Am I correct in thinking that an Invoice in this scenario should be considered a fact? If so is it acceptable to have further facts referencing this fact, or is there a better way to approach this? I can't believe I am the only person who has encountered a situation where the examples don't really seem to fit. Is there a recognised way of dealing with this? 

will not be true for these rows (because evaluates to ). This effectively makes your an I have never been a big fan of especially when appears in the same query. I would rearrange the query to make all the outer joins left outer joins for continuity purposes: