and are too similar. Use and , maybe. The here is not needed. If you really need this then something is wrong. Tkinter accepts Unicode strings. See the Unicode HOWTO to understand better how Unicode works. It's a very important skill for a programmer. 

You forgot the attribute, which contains any text after a given attribute. Whitespace is significant, so you won't be able to go back to the same XMl document. And everything else I don't know about. 

This applies to the rest of the HTML and could be the most important remark: the image you're trying to integrate has been designed with a grid in mind. See how the A, B, C, D subsections are laid out? How "Testimonials" aligns with D? And so on. Using a grid such as Bootstrap or 960 grid will help you a lot here. 

Nope, I think using the name is a good idea. It's a common way to provide replacements in Python, and this is way the standard library does things. However, you need to do things correctly. Again, see the "Boilerplate" section above. Oh, and PEP 8 recommends against underscores in module names unless it improves readability, but I think is readable enough. However, simply adding in front of a module is not such a good idea, because you just lost an opportunity to explain what makes your lxml different. Since it seems specific to the file specification you use, why not use that in the name? 

or something like that. That's very different from what you're outputting, so your progrem does not really represent your data using JSON, but represents the XML representing your data using JSON. But converting to "real JSON" is much more difficult except for some very specific XML, and would not be useful as a general purpose converter. 

I didn't know you could end loops and functions with . Deleting the would prevent confusion with the syntax for classes. 

I am not a "pro member" but can still leave a few comments. They are not too important anyway. You should move to more complicated games and will see for yourself whether you agree with me or not. 

Let's look at all the places where the algorithms spends more than 0.001 seconds (I've asked for 15 bits since 20 bits is too slow on my computer) : 

First, you should really use prepared statements instead of stuff like : this will avoid security issues. Let's look at your actual question now. I'd advise you to go through the CodeIgniter officiel tutorial which will help you to understand how Models, Views and Controllers relate to each other. You should remember that they only exist to help you to organise your code in order to avoid a huge mess full of inline SQL queries and HTML code which can get out of control easily. This means you can start by putting your code in a controller function, and refactor iteratively to get a nice, easy to understand code after a few steps. A few rules of thumbs to know where to put your code: 

You're going to block everything while the requests are done. I think using threads could help, but that's probably overkill here. 

First of all, notice that declaring in is confusing. It doesn't make the function "local", since you can call it outside of too. It's hard to tell where the bottleneck is! You only have one visible loop, but who knows what , , or do? Do they have loops? Do they query the database? Did you benchmark the time taken by your function? Do you know where you spent most of your time? Usually, the best option you have is to make sure there is no request to the database in inner loops. Do all your requests beforehand and only work on PHP data. You should also make sure to avoid mixing displaying and computations, since it will make the optimization easier to reason about. 

Pythonic Basically, a code is pythonic when it uses common Python idioms. In Python, there is usually one (and only one) way to do things, so you should try to know what this thing is, and use it. You won't fight against the language, the code will be easier to read and modify by other programmers. A good way to start writing pythonic code is to follow PEP 8. It is a standard for Python indentation. If you follow PEP 8, your code will look more pythonic, and will be easier to read by fellow Python programmers. Of course, it's only the tip of the icerberg! Timers 

Unfortunately there's not much you can do here. Unless you try the difficult but efficient approach at the end of my answer, your for loops won't go away and you will need to understand what takes you time inside those loops to get small wins. Micro-optimizations You need to profile the code to understand what takes time: 

This one is useful! is clearer than . This answers your first question: it depends! Use new variable names when they do make thing clearer, but never use dummy names like , , and so on. By the way, I may be mistaken, but are you certain is necessary? Java should do autoboxing. I would simply write . 

The code looks OK, and what is probably going to take you time is the call to the Facebook API, which means there's no need to optimize that snippet. I also have two unimportant remarks: 

I think looking at this is a good way to review your code. First, what you did is not different, congratulations! The differences are mostly about optimizations, because speed is really important in neural networks. Let's look at the differences: 

You might want to use minimax if you want your AI not to make any mistakes. However, it can be more frustrating to play. 

It's easy to miss something, and it's also this kind of constructions that leads to difficult to read code and (in other contexts) SQL injections. I would argue that using is a better idea here: 

You'll see that optimizing this code won't yield any improvement, since this PHP code probably takes a few milliseconds to execute while the page load can take up to a second for small pages. 

(And keep in mind the "Flattening Arrow Code" comment from palacsint on your earlier question. :) same comment than 4. You have other occurrences of this issue, I won't list them all. : strive for meaningful comments. :) What is ? Is this useful or confusing? Try adopting a convention for your names, to allow users to easily guess them. Changing names arbitrarily is not nice. If you want to code_like_this, at least use . 

How exceptional is this error? What do you want to do when this happens? If it's rare and you don't want to do anything, then: 

Data structures I you didn't use numpy, you could have written , and then used to transpose the resulting matrix. More generally, as pointed out by Josay, you should use Python data structures, and only switch to numpy if you find out that this is where the inefficiency lies. Formatting The last thing that the other reviewers didn't mention is that concatenating strings is poor style, and should be preferred since it's more readable and more efficient: 

Regarding separation of concern, it is good practice to separate logic (here choosing a random image) and presentation (displaying the image). Web frameworks use variations of a design pattern named MVC which you might want to learn about, at least to separate your views from the rest of your code. This might not be needed if your code is very short, but it's still an useful tool. 

Connecting to the database at the top makes sense, since you want to be connected to it at all times. This is the best option in bottle, especially if you are not afraid of loosing the connection. In more complete frameworks, the database connections are handled for you, and various options exist, such as persistent connections or connection pools. Small typo in your screenshot and your code, you meant 'Performance', not 'Preformance'. You should use docstrings instead of comments to document your functions. You can also look at PEP 8 to see how Python code is generally formatted. 

Your function does not need to take an Integer. Idiomatic code would only use an . Autoboxing means you can still add an int to . Why don't you use in ? is surprising, and I need to read the code to know what it does. I'd suggest naming it ? What about instead of the trick? Use a for each statement in :