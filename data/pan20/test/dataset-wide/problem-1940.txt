This is part of or at least implied in your role/job description There is a rule or guildeline that supports your decision 

It should help you work together more effectively by clearly stating responsibilities and expectations. Whenever he brings up an implementation detail on the backend, point out that it's not in the scope of your discussion. You can use it as a basis for discussing shared concerns like gameplay. If you end up going separate ways (and he takes his code with him) or a few years down the line you notice your tech stack really doesn't scale well enough, you're left with separate, functional codebases and can replace parts as needed. Which you can worry about when it actually becomes a concern instead of wasting time arguing over it now. 

Regarding the frequency of the meetings, with a remote worker you need a way to: - agree on a goal. - agree on a deadline for the goal. Given that, you need to talk with the remote worker each time the current goal is accomplished, so you can evaluate it, and agree on a new goal and a new deadline. You also need a way (e.g. mail) for the remote worker to let you know if the current deadline is not going to be met because of a particular problem. Then you decide if you need to have an extra talk to set a new deadline or to look for ways of increasing speed/productivity (e.g. proper training). Depending on the profile of the remote worker: - For inexperienced people, start with daily goals (this helps to keep each goal simple and easy to agree on). You are already doing this. - When someone has demonstrated performance over time, decrease the frequency of the communication (e.g. daily report of advance and weekly chats). Regarding the need to feel part of the team, there are other ways to do it: - Each time you make team t-shirts, company coffee mugs, company cards, company pens..., send some of them to the remote worker. - Send her feedback on the team's performance and communicate her the changes on the company (e.g. new hirings). 

It is acceptable if you have permission, either from the person writing the email or due to your role and company policy. Some people might still consider it rude if you correct minor mistakes. If you do not have permission, it is a breach of trust. I would recommend to consider forwarding an email equivalent to a quote. In both cases, any changes or comments should be clearly marked, e.g. by square brackets or, for longer passages, maybe a diffrent colour? 

In other words, if the person writing the email is not aware that you might modify it, or you were not given authority to do so by that person (or, in some cases, a superior), any change in the text could be considered a breach of trust. Many consider written communication a form of documentation, especially in a professional context. While correcting obvious spelling or grammar mistakes might seem harmless, any unsanctioned change threatens the validity of the text as well as your/their credibility. I'll add that forwarding an email that the writer might not have expected to be forwarded, which might well be the case if it's written informally, can, in a worst case scenario, also constitute a breach of trust and/or confidentiality. 

They said people jump in because of the company, and they leave (or stay) because of the boss. :) First, discussing with your boss is not necessarily bad, and depending on culture it could be more/less tolerated. (e.g. I've met corporations where you're not supposed to talk to your manager unless she talks to you first). That said, depending on the kind of job and on your seniority/experience (e.g. First Violin on an orchestra vs apprentice on a workshop): 

First of all, you can lead a horse to the water, but you can't make it drink. Second, there can be other reasons for the other person not being as productive as you (e.g. lack of training). That said, if the real problem is a non-cooperative coworker, one strategy is having the workload divided before start working. To let the division be as fair as possible, even if the other person is not willing to cooperate, you can do it this way: 

Define an interface and clearly divide responsibility Like most web projects, yours has a clearly separated front- and backend (probably more so after the frontend rewrite), with a specific interface inbetween. Explain that you're willing to give him the interface he's asking for (REST API), but that the backend code - any part of it - is off limits. Hammer out the functionality of that interface together, but treat the code that connects to it as a black box - on both sides. In any project that involves more than one developer, it is good practice to code against well defined interfaces. This way you isolate your code against implementation level changes and allow for parts of the project to be modified or replaced without affecting the rest. It also allows developers to work together on a project without having to know, understand or agree on all of the code and technologies involved. Insist on writing down a specification (can be simple) for this interface, and insist that changes in this document have to go through both of you. This approach serves three purposes: 

I'm assuming you want to use postal mail and both recipients can be addressed as Mr/Ms (instead of Ph D., Dr. or whatever). Since you are sending only one application, there is no need to write separate addresses on the inside, but only the address you're sending the letter to. Keeping both names on the inside is useful since chances are that the letter and the envelope gets separated by an administrator, so you want to be sure both recipients are informed of the application's arrival. Writing each name and each title in the same line will help keeping the format clean and simple. So I'd recommend using: 

One person creates two sets of independent tasks. The other person chooses which set of tasks does she want to get done. Both of you start working.