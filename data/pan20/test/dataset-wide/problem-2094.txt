I guess you shouldn't teach, but should provide an opportunity to learn. Two hours per day of your time, for months, seems to me an excessive investment in an intern. Instead, just supply the tools they need. Choose and define (specify) tasks, which should be more-or-less within their ability to complete. Be available to answer questions (but not for extensive tutoring: point him at a book instead). Provide QA and feedback, review and testing, of their semi-finished work. I'm not sure what programming tasks (if any) you could assign, which don't require arithmetic, though. The last time I used/borrowed an intern (which didn't take them very long) I asked the intern to install a specific test environment for me (which I needed, to test some software I was developing). 

I think it's about quality assurance: proving that the design implements the requirements, proving that the code implements the design, proving that the tests are testing, etc. I think it's not easy to pretend to have experience with medical software QA, but you can (should) at least brush up on (or review or be prepared to talk about in an interview) your previous experience of software QA in general. 

I reckon that, once they've heard the question, then they can decide whether and how they want to answer it immediately. The question they're asking is whether it will take you quite a while to even explain what the question is. 

It has to be "strong enough". For example if I'm to be their team leader and someone doesn't really understand what I say when I talk to them, that's a problem. As for why "good written skills" are important, even when you don't face customers, many jobs need you to read and write: emails, status reports, documentation, functional specifications, test cases, and comments (not to mention source code). 

If you talk (or preach) then it's quite a common experience to get 'back-talk' -- see e.g. this blog. 

If you think you have a good relationship with your boss (but not necessarily with your company), then keep in touch with the boss. 

I.e. the purpose of the meetings isn't only to discuss the software and to throw my proposal in their face. The purpose is also 'soft' e.g. to reach a team consensus, to hear from everyone, perhaps to let everyone feel they've had an opportunity to contribute, let them feel good about the team. Maybe you shouldn't pride yourself on being "quick", either. Another possibility is to specialize, e.g. at my current job I do software-design things without asking, but whenever there's a UI-design question I'm not sure of, then I ask someone else who's good with the UI. You could do the same with (open questions to other people) for other bits you're not sure of (e.g. "How shall we test this?", "How shall we estimate this?", etc.). You could also try (in theory: I haven't tried this myself) phrasing your statements as a question, for example, "I think we should do such-and-such. Or is there maybe a better way?" 

He was a great shot but his passing set him apart. He owed much of his greatness to his ability to uplift his teammates (also from Wikipedia). 

I clearly don't know what exactly happened, but based on your description my assumption is you spent the game taking the ball away from the other team, dribbling around everyone, and scoring goals. Your colleagues probably think you were acting like a showboating jerk. Your team probably feels this way because you hogged the ball, and the other team probably feels like you were running up the score for no reason. Like almost everyone else said if you want to repair this relationship you should apologize. However it doesn't seem to me like you realize why you should apologize. If you don't understand their point of view and how you should have handled the situation better any apology is going to sound contrived and may reinforce their belief that you're a jerk. For example this isn't productive: "I'm sorry that you feel bad about how I acted during the soccer game. I told HR that I was really good and would ruin the game. Guess I was right..." In my opinion you should have used your skills to enhance the game, instead of dominate it. I know hockey is a different sport but I don't know soccer well enough to pick out a good example. Wayne Gretzky was the greatest for lots of reasons, but I think it is germane that under "Style of Play" in his Wikipedia article they list this quote from Sports Illustrated: 

One thing you can do that I don't see mentioned is just take some time off and/or work from home until the bruise heals or can be covered up with makeup. In general I wouldn't recommend taking time off because of a black eye, but it is an option. Depending on your job I think working from home would be a good option. I don't know what your work policies or situation is so I don't know if you can get time off on such short notice or work from home. I also am not in a position to judge if a request for a week off work without notice will be viewed less favorably than just going to work with the bruise. Personally I would go to work and either tell an obviously false ridiculous story, or just tell the truth. That being said I don't know as much about your unique situation as you do. 

I think you have gotten a lot of great feedback related to the specific questions you asked the other candidates, but I don't see any real answers that address your stated question: How do I tell if a set of interview questions are too hard? One obvious way you can answer this question is by soliciting feedback from other developers. You said that you are the only developer in your organization but that doesn't mean you don't know or can't meet other developers. You can ask for feedback from friends who don't work at your organization. If you don't know anyone else that slings code for a living then you could go to a meet up and try talking to someone there about the task. Finally you could consider running these questions past a recruiter. Of course there may be a conflict of interest there if that recruiter starts sending you applicants who perform amazingly well on your test but don't appear to know anything else... Another direction you could go is search for interview questions online. This does two different things. First it might give you ideas about the style of questions other people are asking. Secondly you can compare the relative level of difficulty between common questions and the questions you're asking. You might think that this route might encourage cheaters since these questions are "known" but anecdotal evidence seems to show that even though FizzBuzz is incredibly well known a significant number of people still fail when asked. Finally, I would argue that "too hard" is really relative to the kind of person you want to hire. Don't dumb down your questions because you feel bad that people aren't passing. Instead set your questions at a reasonable bar to screen out people who aren't going to be successful in the position. I'm certain that a position at Google where the applicant will be designing advanced search algorithms isn't going to have simple questions like "What is one difference between a POST and GET request?" Instead I'm sure they are asked advanced algorithm and machine learning questions. Having questions that are too hard for people who aren't going to be successful, but demonstrate an understanding of the principles they will need to be successful is ideal. So my advice is to not worry too much if the questions are too hard. Instead worry about what are the basic principles you are trying to screen for that a candidate needs to be successful. Once you've isolated that the only real hurdle is making sure your questions are clear. That being said in my opinion there is real value to finding out if a person will ask for clarification before building a grand solution that solves the wrong problem. 

This sounds like a case that wants Architect Also Implements (my apologies for the short, link-only answer). This (documented "pattern") is one of many "organizational patterns" in Coplein's Organizational Patterns of Agile Software Development. How you do that depends. Do you have a team leader? Is the architect your team leader? Who (if anyone) has told the architect to do what he is doing? Without a leader (or if you are a leader) could you schedule a meeting to talk about it face to face? Instead of having layers like that (where you need to consume each other's work), (my experience is that) it might be better if everyone becomes a "full-stack" ('senior') developer where each developer acts as a more-or-less independent team, or maybe pair programming (i.e. teams-of-two), each being assigned their own features to develop and/or subsystems to maintain. Use code reviews (and maybe design reviews) to improve the "bus factor" and to ensure that everyone's work is maintainable by someone else. A benefit of full-stack is that people use commercial APIs (to external system interfaces) as much as possible, rather than home-grown internal APIs (to libraries developed in-house). In that scenario you might still need an architect e.g. as a chief developer: 

And/or if you're more interested in the company than the boss, ask if you could have a meeting with more than one person (e.g. your boss and their boss, or your boss and an HR person): to discuss your future with the company. By doing that you would have a second contact (in case your current boss leaves) within the company, who knows (based on the meeting) that the company wants you. 

That's a contract that I might be disinclined to sign. For example as an employee I wouldn't expect to be sued if someone finds a fault in software that I've written (because I expect them to test it too, etc.) ... but as an contractor (perhaps a.k.a. "independent supplier") I'm not so sure. What if they were sued by their client, and they tried to deflect the liability onto me? They may allow you to tweak the wording of the contract slightly (before you sign it, assuming your request is reasonable and they want to employ you). For example I once altered a contract so that it said I could expect to be sued in the case of "gross negligence", instead of just "negligence" (I decided there's a difference between negligence and gross negligence and the latter would be more difficult to prove). If you are going to be self-employed, here's quite an interesting video I watched recently on the subject of legalities -- Mike Monteiro: F*ck You, Pay Me 

If you wanted to prove your greatness then you should have done it by uplifting everyone. Once you proved you were a threat then the opposition would have mobbed you. Instead of dancing around them all and making them look like fools you should have sent perfect passes to your teammates so they could be the hero and score. Same bit on defense you should have played zone defense and been a wall for any individual player. Even though you would prevent their forward progress still let them pass the ball away to their teammate. That way opposing players have a chance to have fun too. Of course if the score is close then score some easy points to keep your team in the lead. This way you still show off your skills but you do it in a positive way that shows you want to make the team shine instead of focusing the spotlight squarely on you. I think this kind of thinking will lead to a much better apology along the lines of: "Hey I'm really sorry for acting like a jerk out there on the field. If I had to do it over again I would use my skills to lift the team up instead of show off. My selfishness ruined the game, and I won't make that mistake again." As pointed out in the comments a great closing line would be to offer to buy the next round or two of drinks next time you all go out. After I gave this apology I'd also make it a point to give specific praise to your colleagues whenever you get praised. When your boss says, "Great job doing XYZ" try to respond with something like "Thanks I think that turned out really well too. Janice really helped make it all possible by doing XYZ." This will show that you appreciate the contributions of others, and won't try to hog all the glory like you probably did on the soccer field. 

I really think that the phone interview will just leave you with a Sword of Damocles hanging over your head. While the video interview might be a bit more intimidating for you initially it will allow you to nullify what seems to be a big concern of yours. Always remember that you are interviewing them as much as you are interviewing you. Finding out if they will react negatively to your appearance is something that you should discover as quickly as possible so you can make a more informed choice. At the end of the day you want to work somewhere where you can be both happy and successful. A video conference can be one easy way to separate the chaff from the wheat.