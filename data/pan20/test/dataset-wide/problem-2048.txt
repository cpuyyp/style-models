Look it as an opportunity: many companies ask their developers and administrators to take on tasks that larger companies bring in a BA for, so this will very likely not be the last such position you see that asks for something like this. Also, soft skills are a set of skills that are useful practically everywhere you go, even if you are the back-endiest of back-end developers, and the best way to learn them is to figure out how to put them to use. There's an art to explaining technical stuff in a way that non-technical people get but that doesn't sound condescending, and I would not expect you to master this your first day on the job at a place like this. If you put in the effort, though, and are at least aware of those two extremes, you're probably a couple steps ahead of most devs and admins placed into a similar position. 

Yeah, this is a bad idea from top to bottom. Even if Monday morning quarterbacking your boss was a good idea, and it rarely is, this is just not a good idea from the standpoint of the company. 

Sorry, but to paraphrase Henry Rollins on making up sleep, there is no catching up. You either work or you don't. Eventually you'll have experience and with that you'll either parley it into higher-level positions or you won't. That time you spent doing other things is gone and you're not going to get it back. Nor should you worry about this, unless you work in a profession that requires people to be underneath a certain age that you are quickly approaching. In fact, I think that an awful lot of the time, time in your life spent doing things other than your current profession can be an advantage, not a disadvantage. It all depends on how you look at it and how you market yourself. I also took a while to get through college and then afterwards spent several years in a job completely outside of the industry I am currently in. I did customer service and technical support then; I do software development now. This has actually helped me more than it's hindered me because I my path got me a lot of those "soft skills" that a lot of devs who major in CS and then do nothing but work in dev from the day they get their degree ever get. It's a selling point I get to use to differentiate myself from other candidates with similar experience, not anything close to a bad thing. As for the frustration, the key here is to not compare yourself with others but only with yourself. We live in an outward-looking world so I understand that is not easy, but it's kind of vital. If you have to do so, actually remind yourself of why you're where you are when you see younger folks get promotions, etc. in front of you: say "this person has been working in this profession for much longer than I have because I got to do X and they never did." In the grand scheme of things, it really doesn't matter what other people get, as long as you're getting yours. 

So... here's the deal. You work with developers who are better at developing than you are. That's perfectly fine! In fact, you understanding this right away puts you ahead of a big chunk of middle managers out there who never get to this point, either because they purposefully hire people who aren't as good as they are or because they're so consumed with Dunning-Krueger that they never "get" how much better the people around them are. But you aren't being paid to write code, you're being paid to manage other people writing code. So... maybe this will help: think of yourself as less of a "leader" in the sense of a team captain and more of a support staff for them. Be that screen between the upper management and your guys: if someone up top has issues with your team's work or if they need a certain job done in X amount of time, make sure that you and not one of the devs is the person getting that info (and then log the issue and prioritize it). If you don't have a BA, act as one. Speaking as a dev, if I have to talk to non-devs I will but I know that I really, really appreciate it when there's someone in between me and the hoi polloi. The other thing I think that really works that a lot of devs don't necessarily do on their own is lots and lots of communication. Are you working in Agile/Scrum? If not, I'd consider it strongly. Even if you're doing pure Waterfall because your company dictates that you do, there's no reason not to add in some aspects of Agile/Scrum like the daily standup or estimating workload by "sprint" in terms of points. If someone is struggling with a task, grab a more senior dev to talk with them about how to get through it, and try to foster an attitude of "we succeed and fail as a team" so that the folks who might fall behind can catch up with the help of those who are ahead. Finally, you're the person in charge of the systems, stuff like the code base, the check-in process, testing, etc. As a programmer with ADHD, I am a. really, really disorganized at times, and b. I am far, far, far from the only person working in this profession with that particular condition. I personally benefit a lot from having a management/support team willing and able to provide structure. The less I have to think about that stuff, the more I can concentrate on writing code - oh look! Bird! You can also use this place to try out new things, and I feel like the more of this you do, the more your people below you will appreciate the effort. Have you all tried pair programming? There are folks out there who say that it's actually just as efficient if not more efficient in terms of lines written per man-hour than man-to-man coding. Maybe it'll work well for your guys, maybe it won't. You'll never know until you try! How deeply is your team committed to test-driven development? How about code review? I can't say that any one of these things will work for your team but a willingness to be open and try new things will trickle down, I think. 

You don't need to give a company details about your other interview. Some places have boilerplate out there which says "please do not apply for any other jobs while you're applying to us" but I think most everyone realizes that this is not a realistic thing to ask prospective employees to do. If you happen to receive the job offer before the second interview, there's also no rule that states that you have to respond to said job offer immediately, at least not usually. Tell the first potential employer that you need to weigh your options. There's no need to let them know that you're looking into another offer; in this case, it could be perceived as a negative in that it makes it look as though you are their second choice. I realize that you don't really care either way between the two jobs, but I think you do need to ask yourself a question: if you get them both, which one will you turn down? There may be small differences in pay between the two places but by and large retail places pay about the same amount (which is somewhere between "minimum wage" and "dirt") so outside of a 'vibe' you might get from the interview itself I'm honestly unsure why you wouldn't just choose one of them as your first choice. This certainly makes it easier for you if the first interview turns out to be the job you preferred. Otherwise, if they do want you to respond immediately I would go to the old saw that a bird in the hand is worth two in the bush. In other words, don't decline an open offer in favor of another offer which may or may not come down the line. Even retail declines to hire folks sometimes - my memory is that places can be particularly picky outside of Christmas - and if you turn down the first job before being extended the second one, you might be left out in the cold for a while. 

Here is what, in my opinion, you'll want to do: Document everything. If you're not familiar with putting together design documents, consider this a great time to add that skill to your resume. I've worked at jobs like this and what you absolutely need to do, before you do anything else, is put together a design document which explains in exhaustive detail as many use case scenarios as you can think of, talks about all the end-user bells and whistles that your client wants you to add, and even (if you can manage it) provides a general timeframe of when you will be providing which deliverables. It's my experience that this is by far the most important part of this process. I realize that non-techie types will not always enjoy getting together with you to decide in advance what buttons should be on a page or whatever ("that's YOUR job!") but if nothing else, the fact that you've put this document together means that later on, when your client tells you that they want to add features X, Y, and Z, you can say to them "okay, sure, I can do that, but it will cause this product to take [amount of time] longer to develop. Oh yeah, and when these features are added? Put them in the design document and get the client to sign off on the changes. I realize that as a developer this feels like a lot of extra time doing something which is not actually programming and therefore does not feel either productive or fun, but look at it this way: your design document will serve as something similar to the outline of the book you're going to write. Nobody's going to "read" the book in the classic sense of the term but they are going to use it and it's important to know exactly what that book's going to be about before you start to write it. Provide deliverables as soon as you can. What I mean here is not that you should stay on schedule, because of course you want to do that (and from the sounds of it, that may not be any easy thing to do anyway). What I mean is, try and get something out to your client that they can look over and approve/request changes to as quickly as you can. If you're designing a web page or a WPF application, for example, get them a wireframe as soon as you possibly can. As you wire it up and add features, present these to your client as soon as you get them done so that they can test them out (caveat: some folks just won't test stuff out until it goes live or is about to, so don't rely on this; however, you can use this as an opportunity to say "I presented Feature X to you 3 weeks ago. I can change the way it operates for sure but this will take X amount of extra time." Treat development, testing, and design as interrelated parts of the larger process, not stages you get to clear. It kind of amazes me when devs do this, and I'm not saying you will, but it needs to be said: the time for refactoring code is whenever you get a chance, the time for a redesign is whenever the client requests something that you can't provide in the current design, and the time for testing is whenever you're programming. I realize that this method can create spaghetti code, but that's why you refactor. Additionally, if you're the lone developer at your company, your co-workers/clients are not going to know what the "development process" is. They'll have requirements that they want you to meet. Sometimes they'll realize halfway through a job that a requirement they gave you needs to be more robust, or that a way you solved an issue creates non-functional problems they didn't express at first. Never say "I can't. Well, I guess if they want you to design a new version of Call of Duty all by yourself in 2 weeks, you can say that you can't do that in that amount of time. But what I mean is: if your clients/co-workers give you a feature, don't tell them that it can't be done. If it's going to be hard to implement into your existing design, advise them that you'll need to refactor a bit and that it will take longer (try to provide an exact time - if you over- or under-shoot, you can always adjust that later). If you literally don't know how to do something, advise that you'll need to research the solution and that you'll give them an estimate of the added time within a day or two. If there's a physical limitation preventing you from doing what they want, or if what they want would violate some other principle ("hey, can you make it so that people can see their passwords?") then provide other solutions in lieu of "I can't". Constantly communicate. If you can manage it, a brief 10-15 minute daily "scrum" style meeting wherein you briefly discuss what you're working on and maybe get some minor bits of clarification is good even with non-devs. I know that sometimes you can get into that "meeting hell" wherein you're spending more time talking with people about what they want then actually providing it for them, but generally I think programmers tend to err on the side of putting their heads down and just getting stuff done, so it's not a bad idea to maybe push yourself towards constant verification with your stakeholders. If nothing else, a weekly or twice-a-week meeting where you present what you've done so far and discuss the challenges that lay ahead ought to accomplish a few things: 

It sounds to me as though they kind of already know the state of affairs but they need to confirm this with someone. If I'm a non-technical person in that position, I suppose it's entirely possible that this person who doesn't seem to be doing much of anything productive is actually doing scads of work on setting up the infrastructure, dealing with back-end stuff I'd never even think about, and so on. But if you know that's not the case, I think that you do need to let them know this. It's a tricky situation to be in because in a psychological sense any bad news you relay about another person comes back on you as the purveyor of said bad news. The thing is, what's worse here? You getting the rep for being a back-stabber because a co-worker who absolutely needs to not just pull his own weight but carry the team in places can't, or you maintaining your nice-guy persona while the company goes down in flames? You do behoove yourself to be as dispassionate as you can about the whole thing. There's no point in talking about how what he does makes you feel, or speculate as to why he might have gotten this position in the first place. Do your best to present the situation in terms of company impact and cite sources where you can (talk about a specific project he was supposed to spearhead but you did all the work on instead, for example).