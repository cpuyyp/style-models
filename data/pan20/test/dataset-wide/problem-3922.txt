They grow very fast. Denote by N(l) the largest integer such that we can color the numbers with two colors from 1 to N(l) without an l-long arithmetic progression. Now if you use this coloring for (k-1)/2-long sequences and put such colorings after each other, then any k-long arithmetic progression will be longer than N((k-1)/2), which means that even its difference will be at least N((k-1)/2)/k, which is HUGE. 

Let me have another go, because I really love this question. Essentially it's like a SETI@home project - without going into details, let's just consider the theoretical model that some signals arrive from a source that is sufficiently random and then we have to do some computation on it to get some data. (If you prefer groundhogs to E.T., the weather forecast also has this property.) Then whoever computes the data first, will get a coin. The main issue I see with similar models is that they don't satisfy property 1 (verifiability). I thought this could be solved through some court, but as pointed out by Joseph in the comments to the first version of this answer, this would lead to problems. So instead, we should pick a problem that can be verified. Unfortunately, I don't know much about what SETI was doing with the data, but probably there was something that they were looking for (and now I don't mean aliens, but some signals). So we could say that every 10 minutes there's a data that comes from space, the first person to find a signal wins a coin, but the data might contain no signal, in which case nobody is rewarded - I don't see an issue with this happening sometimes. 

No, there isn't (one known). It's hardness is captured by PPAD or FIXP, depending on what you want. For an intro, see here: $URL$ 

I think that the best way to do is the following trivial algorithm. Whenever you want to order the vertices at depth d+1, look at the already ordered level d and associate with every vertex on level d+1 the string whose ith bit is 1 if it is connected to the ith vertex on level d and 0 if it is not. Then order the vertices on the d+1st level according to the lexicographic order of the strings, deciding equalities according to the original order of the vertices in the adjecency matrix (or any other way). I think it is clear that it is impossible to do any better if you insist on property 2, since in this algorithm we differentiate all the vertices that we can. 

First suppose that L=2. In this case imagine that each element of $\alpha$ is the vertex of a graph and its multiplicity in M is its required degree. (Except that you also allow words like aa, moreover, ab and ba count distinct, but I don't think this really changes the problem.) So whether we can produce |M|/L words or not depends on whether the given sequence is graphic or not. See $URL$ Now if L>2, then we don't know the answer to the corresponding hypergraph problem, so probably also your problem is hard. (In the sense that it is probably NP-hard.) See $URL$ 

I think that this follows from the "Sauer-Shelah Lemma". You can see this for an introduction: $URL$ or rather the first page here and Theorem 1 is the lemma I am referring to. From your condition it follows that the VC dimension is bounded by n+log m which gives an upper bound of approximately U^{n+log m}, close to yours (without using the antichain property whose redundancy was already noted by Tony). 

Update 2017.09.26: As I've just learnt from Tamas Kiraly, this notion is well-studied and has several names, such as k-way cut, k-terminal cut, multiway cut. For at least three colors, the problem becomes $NP$-complete for general graphs, see E. Dahlhaus, D. S. Johnson, C. H. Papadimitriou, P. D. Seymour, and M. Yannakakis: The complexity of multiterminal cuts. Earlier stuff: For two colors this can be solved in polynomial time for any graph, as it can be converted to a MinCut problem. Just connect all red vertices into a single vertex $s$, and all blue vertices into another single vertex $t$, obtaining a multigraph (or if you prefer, a graph with edge weights). The Minimum cut in this new graph between $s$ and $t$ gives the partition that gives the coloring maximizing the number of the monochromatic edges. 

This proof uses a combinatorial equivalent of the Borsuk-Ulam theorem. I think that the proof is a little more complicated than the average proofs here, so please check my related paper if you have difficulties to understand. Octahedral Tucker's lemma. If for any set-pair $A, B\subset [n], A\cap B=\emptyset, A\cup B\ne\emptyset$ we have a $\lambda(A,B)\in\pm[n-1]$ color, such that $\lambda(A,B)=-\lambda(B,A)$, then there are two set-pairs, $(A_{1},B_{1})$ and $(A_{2},B_{2})$, such that $(A_{1},B_{1})\subset (A_{2},B_{2})$ and $\lambda(A_{1},B_{1})=-\lambda(A_{2},B_{2})$. We will use this lemma for n=100. If for the boxes in A, the sum of the red balls is more than half of the total number of red balls, then we set $\lambda(A,B)=+red$. If it is more than half in B, then we set $\lambda(A,B)=-red$. We do similarly for blue and green (if they are not set yet to red). We also set $\lambda(A,B)=\pm (|A|+|B|)$ if $|A|+|B|\le 96$ (if they are not set to anything else yet). This way the cardinality of the range of lambda is 99, just as in the lemma. It is easy to verify that it satisfies the conditions of the lemma, thus there must be a set-pair for which we did not set any value. But in that case either A or B must be bigger than 96/2=48, thus at least 49. We can put the remaining boxes to the other part and we are done. Note that this proof easily generalizes to more colors. 

Unfortunately, there are many unpublished results that should be published or at least made available online. For different reasons, the author might not want to publish it. The result can also fall into several categories, such as 

First here is an $O(n\log n)$ upper bound. Make a complete graph whose vertex set is $X$ and the weights on its edges are the distances, $d(x_i,x_j)$. Consider a minimum weight spanning tree $T$ in this graph. Denote the weights/distances of the edges of the tree by $d_1,\ldots, d_{n-1}$. We claim that for every edgedistance $d$ of the graph we have an $i$ for which $d_i\le d\le (n-1)d_i$, which proves the upper bound. For an edge $uv$ with weight $d$, take the path in $T$ between $u$ and $v$. Let the longest edge of this path be $d_i$. We have $d_i\le d$, otherwise replacing the edge of weight $d_i$ with $uv$ would give a spanning tree with a smaller weight. On the other hand, from the triangle inequality we have that $d$ is less than the sum of the weights of the edges of the path, which is at most $(n-1)d_i$. Now, we can further improve this to $O(n)$ with a more detailed analysis, checking how the weights of the tree are distributed. This follows by applying the following lemma instead of the estimate of the previous paragraph. Lemma. Denote by $RS'(n)$ the maximum possible number of intervals of the form $[2^k,2^{k-1})$ that contain at least one number of the form $x+\sum_{i\in I} d_i$ where $0\le x\le d_1$ and $\emptyset\ne I\subset \{1,\ldots,n\} $ and the maximum is taken over all $0\le d_1\le \ldots\le d_{n}$ numbers. Then $RS'(n)\le 2n$. Proof. The proof is by induction. If for every $j$ we have $d_j\le d_1+\sum_{i<j} d_i$, then we have $d_j\le 2^{j-1} d_1$ and thus $\sum_j d_j\le (2^{n}-1)d_1$, so all the numbers of the form $x+\sum_{i\in I} d_i$ are between $d_1$ and $2^nd_1$, in this case $RS'(n)\le n+1$. On the other hand, if there is a $j$ for which $d_j> d_1+\sum_{i<j} d_i$, then divide the $d_i$ numbers into two groups, depending on whether their index is less than $j$ or not. For those whose index is less than $j$, by induction we have that they give at most $2j$ intervals. For those whose index is at least $j$, notice that we can again apply induction, since now $x$ ``grows'' to $d_j$ from $d_1$, so these give at most $2(n-j)$ intervals. In total we get at most $2n$ intervals, we are done. Note that because we have changed $n-1$ to $n$ to make the lemma nicer, we got a $2n-2$ upper bound for the original problem, and if we remove the ``x'' from the lemma, then by induction we get an upper bound of $2n-3$, which matches the lower bound of (i). 

Here is a proof that you cannot get $10$. Call two vectors twins if they are scalar multiples of each other. In a harmonic sets there cannot be triplets, i.e., every vector has at most one twin. Moreover, in any basis of a harmonic set we have exactly one member of any twin. This means that if we have a construction with a twin that shows $2k$ is a basis number, then $k$ is also a basis number. Since basis numbers are even, there cannot be a twin in a construction that gives $10$. In the rest suppose for simplicity that we are in $3$-dimensions and we have $6$ vectors in our set. We give a lower bound for the number of ordered bases. There are $6\cdot 5$ ways to pick the first two vectors, any such pair can be extended into a basis as there are no twins. Moreover, in a harmonic set there cannot be only one vector that is not in the plane generated by them, so any such pair has at least two extensions. This already gives $60$ ordered bases, which is the same as $10$ bases, so we must have exactly two extensions for any two vectors. This would mean that we have four vectors on one plane, and four vectors on another, giving two vectors on a line, which means twins, a contradiction. 

One reformulation of the (original) problem that is easy to work with is given below. It shows that no strategy can work for $3$ suspects. I tried to prove the same for $4$ suspects, but there were too many cases, which I believe could be checked by a program. Two players each hold one edge from a complete graph, whose intersection is one vertex. According to some protocol, in each step one of them can reveal that a certain edge is not hers. We can imagine that in every step each of them holds some graph, $G_A$ and $G_B$, which are getting smaller. The game ends when each edge $e$ of $G_A$ has a vertex $v$ such that every edge $f$ of $G_B$, that is not disjoint from $e$, intersects $e$ in $v$, and the respective condition for the each of edge $G_B$ has to also hold. We call the above a run of the protocol. A run works for $(e,f)$ if $e\in G_A$ and $f\in G_B$ when the game ends. A run is secret, if the above $v$ vertex is not the same for every edge. The problem is solvable if they have a (non-deterministic) protocol that has for any $(e,f)$ a secret run that works for it. To see that there is no protocol for $n=3$, notice that if a run is secret, then we need that both $G_A$ and $G_B$ have at least two edges. This leaves a few cases that are easy to check to see that this is impossible. 

If you take a subsystem, then the degree condition of the Beck-Fiala is still satisfied, so it is also trivially true for hereditary discrepancy. From Lovasz-Spencer-Vesztergombi, we know that the linear discrepancy can be bounded by twice the hereditary discrepancy, so almost the same bound applies for that as well. 

A graph has an acyclic two-coloring if its vertices can be colored with two colors such that each color class spans a forest. 

I think it is not hard to see that the second quantity is minimized by the regular pentagon. First, using Günter's observation, the problem is equivalent to find $$\max_{v_{0},v_{1},v_{2},v_{3},v_{4}\in\partial\mathbf{D}} \min_{0\le i,j,k\le4} \mbox{inradius}(v_i,v_j,v_k).$$ If we don't have a regular pentagon, then there are 3 points who are contained in an arc whose length is strictly less than $4\pi/5$, suppose they are $v_1,v_2,v_3$ in this order. The $\mbox{inradius}(v_1,v_2,v_3)$ is maximized if $v_2$ is halfway between $v_1$ and $v_3$. So this quantity will be less than the inradius of three consecutive vertices of the pentagon, which is less than the inradius of three non-consecutive vertices of the pentagon. 

The problem is NP-hard if your sets are represented by functions as you describe in your comment. This is because you can encode some NP-hard problem with $F_A$. Suppose that $B$ and $C$ are both singletons. Let $F_A(k)$ return a point not on the $BC$ line if $k$ is not the solution of some NP-hard problem and a point on the $BC$ line if it is. This way there are three collinear points if and only if the NP-hard problem has a solution. This also shows that the related (easier?) version is also NP-hard. 

Suppose we have an open set S whose boundary is a closed Jordan curve that has a unique tangent at each point. Is it true that for every epsilon there is a P polygon contained in S such that there is a (1+epsilon) scaled copy of P that contains S? 

There are many sort of equivalent theorems about monochromatic configurations in finite colorings, such as Van der Waerden, Hales-Jewett or Gallai's theorem, the latter of which states that in a finite coloring of $\mathbb Z^d$ or $\mathbb R^d$, there is a homothetic (i.e., scaled and translated) copy of any finite configuration $S$. Motivated by this problem, I wonder if similar statements hold if instead we require that in a configuration $(S,s_0)$ all points in $S$ are monochromatic, while $s_0$ has a different color from the rest. Obviously, we need to impose some conditions on the coloring and the configuration. About the coloring, I only want to demand that it is non-monochromatic, i.e., not all points of the space are colored with the same color. About $(S,s_0)$, I want to require that $s_0\notin conv(S)$, i.e., $s$ is not in the convex hull of some points from $S$, as then we might not have a solution if the "first" half of the space is red, while the "second" half is blue. 

Embedding different graphs, especially binary trees, in the hypercube has a huge literature. However, I could not find anything if we restrict the embedding to be monotone. So I would like to injectively map the vertices of a complete binary tree, $T_d$, which I denote by the binary sequences of length at most $d$, into the hypercube, $C_n$, whose vertices I denote by the binary sequences of length $n$, such that if $x$ and $xb$ (where $b$ is a bit) are two adjacent vertices of $T_d$, then for their images, $f(x)$ and $f(xb)$, it holds that $f(xb)$ has more 1's than $f(x)$ and it has a $1$ everywhere where $f(x)$ has a one. So e.g., $01$ and $011$ might be mapped to $100$ and $101$ or even to $100$ and $111$. (So I do not need that they are adjacent in $C_n$.) Our goal is to find the smallest $n$ for which such an embedding is possible. It seems like a natural generalization of a very well studied problem (at least if we suppose that the images are adjacent in $C_n$, which should not make a difference in the asymptotics). Has anyone every heard of this problem? Do you think it's possible to apply some variant of the Lovasz Local Lemma? I conjecture that $n\approx 1.29d$ but I could only prove $1.29d\le n \le 1.38d$. The lower bound follows from the simple observation that we need $\sum_{i\ge d} {n\choose i}\ge 2^d$, while the upper bound comes from $n(d_1)+n(d_2)\ge n(d_1+d_2)$ and some computer programs. I know that this is not always sufficient, e.g., for $d=14$ we need $n\ge 20$, but I conjecture that we need $n$ to be at most one bigger. Probably I should also mention that this problem came up related to a search problem studied at our university search seminar and some of the above observations are joint works with others. 

Your question is equivalent to whether the combinatorial discrepancy of the dual hypergraph is zero. (In case you are unfamiliar with the notion, start here: $URL$ This problem is well-known to be NP-complete, you can easily reduce e.g., 1-in-3 SAT to it. 

This problem is equivalent to the following. In the strong group testing model ($URL$ are goal is to identify some defective elements, that can be any set of a given closed system $D$, or maybe they are not, in which case we only have to output that they are not. In the non-adaptive model, we have to give our questions in advance, each of which is a set, and the answer is yes if and only if it contains a defective element. It was noticed by Peter Damaschke and it is not hard to prove that a set of questions solves the problem if and only if the complement of any element of $D$ can be covered by a union of them. So if $D=\{ V\setminus e \mid e\in E\}$, then we get exactly your problem.