If you're looking for a very specific data flow, this might be do-able on a Cisco device alone. You can get basic packet source / destination information like this. 

I think you might be going about this the wrong way. If you're wanting to prevent certain subnets from communicating with other subnets, you need a firewall, not separate OSPF instances. The 'OSPF ID' in Cisco devices is not like an AS number in EIGRP. The ID is locally-significant and 'router ospf 1' and 'router ospf 999' will happily form neighborships and work fine. You can use a dedicated firewall device (probably near your edge routers) or just plain ACLs to restrict access between subnets. For instance, on R4 you might do this... 

It the switch isn't booting into IOS, there's a good chance that the flash got formatted before it was sent to you. You'll need to use TFTP to download a new IOS image onto the device. This link will likely help. 

On your Ubuntu server you'll need to configure the subinterfaces to be associated to each appropriate VLAN. This can be done manually like this ... 

The computers should point their default gateway to their respective VLAN's subinterface IP. The router will then pass traffic between the VLANs without issue. If you have any further questions, please respond and include a pastebin link with your configs. Hope this helps! -Keller 

Are the serial interfaces frame-relay? If so, you'll need to map the local interface IP to one of the active DLCIs in order to ping the interface. 

You're on the right track with the crossover cable, but not quite. You need a rollover cable instead. 

If you really wanted to go to crazy town, you could also create a separate vrf for your "private" subnets, run MPLS in your core, enable MP-BGP to exchange labels, and treat the whole network as a L3VPN. But I'm betting that's a little more than what you're needing here. =) Hope this helps, -Keller 

The benefit of using local-pref over weight is that weight only applies to the local router. You may tell the local router to always take ISP2 for a prefix, but that doesn't mean the rest of your network will too. Local-pref will be propagated to all your iBGP peers, and they will all prefer the route in question. If both providers are on the same edge router, than either local-pref or weight will work fine. If you are only taking default routes, you'll need to do some shenanigans to re-originate the destination route inside your own network for devices to follow out a particular ISP. The easiest way I can think of to do this is to make a static route that points towards the ISP you want the traffic to go to, then redistribute into your local BGP or IGP. 

The console cable that comes with Cisco devices combines the Serial-to-RJ45 adapter and rollover cable. Standard port settings are... 

Now you can associate the correct IP address to new interface eth0.221, along with the appropriate default gateway and subnet mask. If this doesn't work for you, please include a pastebin link to your switch config as well as the output of "ip -d link show" on your Ubuntu server. Hope this helps! 

With mode 'pvst', the switch uses Per-VLAN Spanning-Tree (PVST). Each VLAN runs its own instance of STP using the original 802.1d rules (non-rapid). With mode 'rapid-pvst', the switch also uses Per-VLAN Spanning-Tree (PVST). Each VLAN runs its own instance of STP using the updated Rapid STP rules (802.1w). The other mode is 'mst', which runs a configured number of spanning-tree instances for a set of VLANs (802.1s). It also uses Rapid STP rules (802.1w). PVST vs PVST+ has to do with 802.1q support only. 

If you want these devices to be totally isolated from everything else, just add them all onto their own separate switch and call it a day. No point being on the shared company switch if you specifically don't want them to be able to talk to anyone else. Edit: What else is on the same segment as you that you want to avoid? Do you just not want the servers to be able to route out? Or are there other servers on the same VLAN segment that they shouldn't be able to talk to? If you really wanted to get crazy, you could have IT provision a new virtual switch on the Nexus chassis that has your server ports assigned to it. You can use whatever VLANs you like, and they won't communicate with the ones in the main context. Of course, if I was your network engineer and you asked me to do this I would have a good chuckle about it with the guys after work. There are other hacks you could do. PVLANs of course, but you don't have any more VLANs. VLAN filters could be used to only allow your IPs to talk to your own IPs. Just plain old ACLs on ports could stop the L3 traffic too if you wanted. I also have a suspicion that the switch isn't out of VLANs, and your network guy just wants to avoid work or having to explain to you why policy doesn't allow it. But take that for what its worth -- a guess. The correct answer for this is to use VLANs -- this is pretty much exactly what they're designed for. 

Absolutely you can. You're looking for 802.1q tagging, which is the underpinning of multiple VLANs on a switch. Configure your server-facing ports like this... 

I'm not sure you can do what you're asking for. What message could you send to all hosts at FF:FF:FF:FF:FF:FF that would compel them to reply to you? ARPs get sent to the broadcast address, but only the correct host responds. I'd use a combination of pinging the broadcast (192.168.0.255 and 255.255.255.255), the MAC address table on the switch, and a Wireshark tap on the gateway's interface to gather practically all of them. There's no L2 message I know of that will require a response from all L2 hosts regardless of L3 config. 

Are you logging to a syslog server? If not, the logging buffers on Cisco devices don't survive a reboot by default. If you do have the logs, look at the whole network's worth of messages around the time the problem started. Any interfaces bounce? MAC flapping? Strange errors from any devices? Do you have a monitoring platform that can show you which device spiked CPU first? Route table size? BGP prefixes received? With the information you've provided, this is a bit like taking your car to the mechanic and saying, "it doesn't work right, and you can't open the hood. How much to fix it?". This is a really complicated topic that could have thousands of answers based on your topology, hardware, configuration, and karma. 

Based on your edits and comments, I don't think that this is spanning-tree delay that you're seeing. The downtime that you're describing (2 minutes) is really too long to be explained by STP, and I kind of doubt that the Linux servers are running STP with the switches. You also basically are doing single-switch spanning-tree, as a switch stack is considered one logical switch. There are some STP tweaks that are probably a good idea in your situation, though. First of all, you can re-enable Spanning-Tree on your VLANs -- no reason to have it turned off. Mode rapid-pvst is a good idea unless you're trying to run spanning-tree with the Linux boxes. You can also tell the switch that the trunks towards your Linux devices (Gi1/0/2) are not switches. 

Your best is going to be setting local-pref per-prefix to send your traffic out a specific link. This assumes that you are taking full BGP routing tables from both of your providers. You would do this via a route-map applied inbound for the desired provider. 

Why is the specific "oversubscription" ratio important to you? To effectively design for a setup like this, you'd need to know average throughput, traffic characteristics, destinations (intra-switch vs inter-switch), etc. A server with a 10Gbps link that only does minor DNS requests is a much different traffic consideration than a fileserver or a DB server. What are you trying to accomplish by determining these numbers in particular?