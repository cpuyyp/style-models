You can use snapshot replication (it allows you to update the table every 5-10 minutes). If you would like instant changes, go for transactional replication. Note that you cannot publish a replication on SQL Server Express, you need at least Standard edition. 

Using different users will not reduce or increase the performance. It is clearly a security issue. Usually you don't want users from company A to be able to access company B data. I would recommend to create separate users for each application and grant them only the necessary permissions. If you run the application using a user with admin rights you risk a lot when the application gets compromised. 

I have a query that collects customer data. I select a lot of correlated data from different tables. I want to have only ONE result row for each customer. The query looks like that: 

I don't want to wait the estimated 2 months for the rollback to complete. The transaction isolation level of the database is READ COMMITED. Is it possible to kill this session? How should you act if you find such a query in one of the mission critical databases? 

I am designing a data warehouse using Azure Databases (not Azure Data Warehouse though), I have 2 databases: the main data warehouse and a staging database. As in a traditional ETL process, the raw data is stored in the staging, then transformed and finally loaded to the data warehouse/data marts. Since it is Azure SQL, cross database queries don't work and the only workaround I know is using external data sources and external tables, which is pretty problematic. Can you recommend the best solution to access both databases at the same time? My ideal solution would be cross database queries like in SQL Server on premise. 

I am looking for a better solution. I heard that SQL Server Integration Services have a MERGE JOIN and a LOOKUP transformations. I'm not sure if one of these provide the possibilities that I'm looking for. What tool can you recommend? I'm sure it can be done efficiently in SSIS but I just don't know the right solution. 

Some people also suggest to install SQL Server on a dedicated partition instead of the C: drive but I think it is an overkill and does not bring any benefit. The installation itself cannot grow out of control. System databases other than tempdb can (theoretically) do that. I would also recommend putting them and their log files on a different partition. You should definetely not put data/tempdb/log files on the same partition as the OS, because if you run out of space for say tempdb, the OS might not be able to perform correctly when out of space. Also there is another big topic of data separation on different physical drives for security/performance reasons but I will not go into that. 

I am configuring transactional replication in SQL Server. The subscription is configured as push from 2008R2 publisher (distributor is the same server) to 2012 subscriber. The object I want to replicate is an indexed view. The base tables exist only on the publisher. The replication fails due to the following error: 

I have recently upgraded a few SSRS projects and solutions created in Visual Studio 2010 to run correctly on VS 2017. I changed the target SQL Server version to 2012 (since this is the version that is used). One of the problems I face is whenever I upload any of the RDL files to the Report Server I get the rsInvalidReportDefinition error. This problem is further discussed here: Error while uploading a report I used the recommended solution and uploaded the rdl file from the bin folder instead. This time it works fine. The problem is that the files in the main folder still do not work correctly on the report server. I am wondering if I should maybe replace the files in the main catalogue with the files from the bin folder? Can you help me understand this issue better? 

I think my problem might be caused by this old MySQL bug (and this one: /bug.php?id=6295 ), in which they were checking the column constraints before running triggers. But, according to that bug, they fixed it years ago. I was originally running on MariaDB v10.1.19; but according to this MariaDB ticket: jira.mariadb .org/browse/MDEV-10002, they also fixed this in v10.1.6. I have tried it on: 

Create a session variable which holds the accountGroupId. Spring @Transactional & Hibernate isolate DB sessions on a per request/thread basis (in Spring requests & threads are 1-to-1; i.e. 1 isolated thread per request), so there’s no risk of concurrent parameter bleed-through. Create DB stored functions which take in a value and store it in the session variable. Although, if you wanted to, you could just run an update query instead of creating a set() function, but you MUST have a get function. MySQL won't let you put a session variable in a view definition. Create restricted views which compare against the session var in the where clause. Since this variable is an account-wide single value (& won’t be changing from select to select within the same user), this works fine. Each request/user will have their own DB session & their own instance of the session var; all completely isolated from each other. They just call the set() function to initialize their session var before running their queries / inserts, and everything works perfectly. 

Is there perhaps a config problem with my setup that’s causing this to not work in MariaDB? Or is it more likely that the bug got broken again since its original fix? I don’t want to bother the MariaDB devs if it turns out to be my fault. The Problem I have a restricted view which filters on a base table using a discriminator column. The view does not contain the discriminator column. In the base table, this column does not allow NULL values. I created a BEFORE INSERT trigger to populate this column when inserting data through the view, but as far as I can tell, the trigger is not firing. When inserting a record into the view, the DB throws the error: 

I’ve tried doing several insert tests on the base table, and it looks like the trigger is just not firing at all. I searched around online for other people with this problem, but they all seemed to just be syntax errors. I don’t have much experience with this kind of “deep” SQL, but I think mine’s correct. Here’s an example implementation, I also made a SQL Fiddle: P.S. Sorry about the 2 links with spaces in them. StackExchange won't let me post more than 2 links; apparently, I'm 4 reputation short. 

Now, speaking of inserts: this is where it gets sticky. There is an easy solution (very simple triggers), the problem is DB support. There is a bug in MySQL v5.6 (& in MariaDB) where they were checking NULL constraints before running triggers. This prevented using triggers to populate these fields. However, this bug was fixed in MySQL v5.7 (& MariaDB v10.1.21 & v10.2.4). If you use MySQL v5.7+ (MariaDB v10.1.21+ / v10.2.4+), or any other DB which complies with the SQL standard, and runs triggers before checking NULL constraints, you’ll be fine. Here’s a simple code example implementing the fix, and I also made a SQL Fiddle: 

I don't know Oracle but I will clarify what it means in SQL Server. On one Windows Server there can be multiple instances of SQL Server (independent installations). Each instance has their own databases (user databases and system databases). It is important to know that each instance has its own system databases (master, model, msdb, tempdb). Instances can use different SQL Server editions, versions and have different products installed. Some SQL Server components are shared between instances on one server (SQL Browser for example). To access instance A from instance B you have to create a linked server on instance B that maps to instance A. You can also connect SQL Server with Oracle using this mechanism. Each database can have multiple schemas. Schemas group tables, procedures, views and other database objects. 

These two queries should produce the same execution plan and therefore the same results but this one is much clearer. 

Change to . Your soultion would work only if it was an instead. With it works different. The filter is applied for the join predicate and the result is different. 

I'm sorry if this question breaks the rules of DBA StackExchange. I'm not sure if it is allowed in here. I am planning to lead a basic SQL Server training for my coworkers. The course should include some basic information about relational databases and the SQL querying. This is why I'm looking for some training materials. Obciously I could prepare PowerPoint presentations, SQL tasks and all the other stuff myself but I think since it is a well researched topic I should not reinvent the wheel. Do you know of any training materials available that I could use? I have the training materials for the MS Exam 70-461 - Querying SQL Server but I'm not sure if I would be allowed to use it and also they are pretty big. Can you recommend something? 

What I want to do is to change xmlns to a new value. I tried casting the xml as nvarchar(max), using replace and then casting back to xml but it didn't work (string truncation). I tried using XQuery but I kept failing. Can you recommend a solution? 

Share the execution plan, like @YperSillyCubeᵀᴹ said. I think you can improve the performance of this query by creating a nonclustered index on requestStatus, requestId. However: the fact that you are not specifying the column list (I'm guessing SELECT *) may change the plan by introducing Key Lookup or Clustered Index Scan (probably CIS on such a big table). If Clustered Index Scan is inserted to compensate for the lookup, the nonclustered index will not be helpful. I can answer the question more precisely if you update the question with the plan. 

Note that it is the same table. This query causes serious blocking on one of my test databases (I wanted to drop it but couldn't and this made me investigate the issue). The lock type is LCK_M_X. I cannot kill the session - i get the following message: 

I think it's a great news that Microsoft finally changed this default setting. The previous one was really bad - it caused problems with latch contention. Paul Randal's article on the topic 

This way the engine knows when you want to use Column from TableA and when from TableB. It is a good practice - you should always use aliases when writing SQL queries. The query you are looking for might be: