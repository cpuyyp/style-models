I think you are making a mountain out of a molehill. Sharing off-the-cuff project specific tools and scripts happens frequently in the development world. Quite frankly, any software developer who isn't often creating their own productivity enhancement "tools" is almost certainly not going to be a very good developer. When developers share these types of tools then everyone knows what they are getting. What is more likely to happen versus getting blamed is if it turns out that your tool really is useful then the source code/scripts will be added to the software CM system and then the developers will all start adding their desired features. One day your rather mundane tool may blossom into a quite slick application that is a core part of the project's (or even company) development process. If people ask you to "support" the tools then you just be honest and tell them "I only created the tool for my personal use. I can give you the source code and you can modify it to your liking if it doesn't do what you want". Very simple, you don't end up owning the tools simply because you wrote them and others want to use them. 

This is a task for management. First management should try to discover if this is intentional. If so, a plan should be made to fire the offending people. If it's not intentional, a plan should be made to train the offending people. 

Sounds to me as though the CEO does believe what he's saying but doesn't want to force it on other manager(s). Best to have an open and honest discussion about it with your manager. Tell your manager how you feel, but ideally don't threaten to quit. Just go on an information finding mission for now. See how your manager feels about it, try to understand their position. If you hear that you need more experience, ask what areas specifically you can help with to gain that experience. 

As a general rule in negotiations: 1) Try to get quantified info, don't be in such a hurry to disclose your own 2) Have other options so that you don't need/barely want the deal First, don't talk any more about your current salary more than you absolutely have to. Second, don't "ask" them. Tell them this is what you would like. Third, when you do give a number that you're aiming for, don't quote merely a few percent increase above what you expect is possible. Your sights are too low, in my opinion. 

The simple answer is to simply begin working 40 hour work weeks and make sure YOU are efficient for those 40 hours. If you aren't already burned out then the results will become apparent fairly quickly. If you are already burned out then 40 hour weeks probably won't make a difference, so keep working your 60-90 hour work weeks. Keep in mind that if you choose to continue with the long work weeks you'll be looking for a new line of work in the near future and that won't include any careers requiring thinking skills because your body is going to shut down all on its own because you chose not to listen to it. I really don't understand how people can let themselves be so taken advantage of like your company does to you. 

Sounds like you really need a better software change request system or process. A good system will allow change requests to be put through a series of states where the assigned person enters relevant information for their part of the process. Just to walk through an example: Your current ticket/work request is just the change request description and would be in an Initial State. Someone decides that they want to work on the particular SCR so they transition it to an investigation state. The investigation state identifies the problem and recommends the solution. It sounds like your architect should be getting assigned SCRs in this state. For each SCR He'll fill out the field describing his findings and recommended solution. He can then assign the SCR to whoever he wants to implement the recommended solution. The implementer makes their fixes, adds any notes they want to the "implementation notes" field of the SCR and transitions the SCR for verification. Ideally your SCR system is tied into your software configuration management system. This will allow for the person performing the verificaton (sounds like your architect) to quickly see all the changes that were made for incorporating the SCR. It is really a very simple process that is extremely hard to do wrong. This should solve your problem because you can always go back and point to what the architect had told you to do. 

There are only two possible problems. You are not applying to enough places or your resume is not as good as it needs to be. You may want to get your resume reviewed by a professional. Then pump it out in volume. Also, sometimes it is easier to plow around the stump. You could build an amazing piece of software or an amazing website during your summer. If you can produce one that is popular and generates a passive income, even better. At the very least the experience should dramatically improve your chances of getting an internship next year. 

Don't give up. Keep enjoying your hobby. Write code, build websites, API's, utilities, whatever drives your passion. Try to use common technologies in the process. Learn the common patterns. All the while have fun solving problems algorithmically and pick up a deeper understanding of fundamentally important languages like C/Java variants and SQL variants. Sooner or later, you'll be able to answer those whiteboard questions OR you'll be in a position where you'll have so much broad experience and enthusiasm it won't matter. 

So four years of posting questions on Stack Overflow? My advice is put integrity first. Just being honest will take you further than anything you can write on a resume. Edit added: In comments, you have provided more information about another StackOverflow account (other than the one this is linked to) which seems to have credibility and significant reputation. If true, I suggest you can claim ample experience training or mentoring others via StackOverflow, and I would sell to that strength that while also working to fill the gap by actually building a demonstrable and substantial project. Someone with your skills should find it easy to put a project together in short time. Then when asked, you can say you are young and you are working on something amazing - it's in the works! Good luck. 

Simply telling your boss that the person is "very good" doesn't help all that much in determining whether a 25% raise is reasonable. Since you are a small company and don't have an HR department that keeps track of what they should be paying, what I would do is: 1 - Assess the person's approximate experience level or "rank". For example, Junior, Senior, Principal etc... 2 - Get the average salary for that level in your area. You can find that on various websites. 3 - Tell the boss, well I think the person's experience level is about Senior level 2 and according to this website the average salary for a person like this is $xyz. I would then expand upon where in that range the person's salary should be by saying something like "I think the person is very good compared to a typical person at that level so they should probably be a bit above the average". That at least gives concrete information for your boss to work with. After all, a person who is "very good" for their skill level and is already making "very good" money for their skill level probably shouldn't get a 25% raise but if they are vastly underpaid then they certainly should. 

No... part of being professional is competence in getting the job done. You are being mocked because your colleagues are bullies, not because of anything you are doing wrong. 

Why not? I'm skeptical of that assertion unless there's an unusual time crunch. Using reference material only takes seconds. 

I've been working as a contractor in the US for few years. I can give you my perspective on things here, which may assist you, and in particular US readers who wonder about your question. Typically employers here are willing to pay about 30% more for contractors. The reason is that they win back vacations, benefits, unemployment insurance etc. and get added flexibility. So I have a simple rule of thumb that I use to figure the equivalent and translate from perm to contract. I will take my hourly rate as a contractor and multiply that by 1500 to get the equivalent rate I would charge annually as an employee. So for example if I was making $30ph contract I would be looking for a perm. salary of $45,000pa. Or if I want to make $80ph contract-equivalent, I would be looking for a perm. salary of $120,000pa. Then I'll try to quantify and add in anything that's a bit unusual about the job I'm considering, for example travel time, if its particularly close or far, or new skills I might acquire and what value they may bring. Also if I will have to spend time away from family, how much of a premium do I want for that. If I have to relocate, what's the cost of living difference, etc. 

Unless you were brought specifically to make changes then I think it is way to soon for the new guy to be telling everyone how what they are doing is wrong. Many times when a company is doing something that the conventional wisdom believes is wrong, it turns out there are valid reasons for doing it that way. If you don't know the history of how things got to where they are and it turns out that change is not really practical because of company/project specific isses then it makes you lose credibility at precisely the time you are supposed to be building your credibility. My advice to anyone who is new is to first watch, listen, learn and most importantly build your credibility. Who knows, if you do what I say you might learn something. There are times where you'll find that the conventional wisdom is wrong for your company's particular situation. It very well may be that the way they are doing it is easier/better/more-suited for their tasks, once you get used to it. Even if they are doing it wrong, if your coworkers have trust in you then convincing them to change becomes hundreds of times easier than having some new guy telling them how they've been doing it wrong all this time. In the meantime, if you really are serious about bringing in changes, see what you can do about getting a setup just for yourself to use. Maybe someone else will be curious about what you are doing and like what you did, and they'll show someone else and it'll grow without much effort at all on your part. At the very least, you will have figured out how to make your changes work at that particular company when the time comes that it is appropriate to start pushing your changes. 

I looked at your profile, it says "your code should be cleaner than yourself". Also from your comments that you "spent a lot of time explaining concepts", and "criticizing is part of my job as an engineer"... I'm thinking you are keen on giving advice and your advice is simply not appreciated by your team-mates. This may be due to what you are saying, or the way you are saying it, likely some of both. Writing productive and maintainable code won't cause you to be fired. You WILL be fired if you can't get along with the team. This is your problem, not (as you imagine it) your code is too good. Your code might be really good - but MUCH more likely this is a personality clash issue. My advice to you, is don't be the tail that tries to wag the dog. Keep your head down, stop telling people how to code, follow direction, work well with others, write maintainable code. And then you won't get fired. I also note with interest this telling comment from your manager: 

The implication made by "You're the first one to complain", is a logical fallacy. That's how you counter it objectively. The implication is that you're weird, or different, or making unusual requests, or making unreasonable requests, because naturally everyone else is for the most part, reasonable, right? It's a version of Argumentum Ad Populum (appeal to crowd fallacy): Argumentum ad populum Management is trying to make the case that your argument is invalid because otherwise, others would be making the same case. That's like saying when you claim 2+2=4, you are wrong, because no-one else is coming to management saying 2+2=4. Clearly that's a fallacy. You can be right on the merits of your argument alone, regardless of what anyone else is doing. Now, whether or not you should ACTUALLY counter management's argument objectively is the more important question. My advice is, it's rarely advisable to get into an argument, especially with management, unless this is something you are willing to risk your security of employment for. Better to be a gentle persuader, and show them why treating their employees better is better for THEM, not YOU. Everyone listens to WII FM (what's in it for me). 

In my opinion, it depends entirely on the type of client you have. If they are technically savvy and should know exactly what they need and are just using your services because they don't have the staff available then sticking within the defined work scope is the correct response. On the other hand, if you took on a client knowing that they don't have the knowledge to know ALL the specific requirements they are going to need up front, then I look at it as they are also hiring your expertise to let them know what is missing. After all, you are the 'professional' developer, not them. Thus, if you should have 'reasonably known' that without the features they say are missing that the application won't meet their needs then some, if not most, of the blame is on you. In which case, you should learn from your mistake for next time, but try to keep the customer happy this time. Certainly ask for more but recognize your role in the missing functionality. Of course, 'reasonably known' is a bit of a grey area but I suspect you already know if you should have realized if the feature was needed or not already. If the missing functionality isn't something that a typical 'professional' developer should have identified as missing then stick with the contract terms. 

I can't believe people consider disclosing current salary. Never do this! Don't tell recruiters. Don't tell potential new employers. All you have to say is, "I'd prefer not to disclose my current salary". The only people that have any right to that information are your spouse and the IRS. You could be about to be offered double your current salary! Why would you shoot yourself in the foot?! Wait for their offer, then (unless it blows you away) say hmm, you were hoping for more and ask for a few days to think about it. Where you go from there depends on your analysis of the whole offer. 

This question puts the cart before the horse. Employers don't pay to make you feel better. And employers certainly don't want to reward people for complaining about their level of pay. Employers pay to keep you. Employers pay for people who have demonstrable value. So unless you have a better opportunity and you're prepared to walk, and mean it, talking about pay AT ALL is usually a losing proposition. Makes no difference whether its in the appraisal or not. Until you have a better opportunity, you have little to negotiate with. Many employers will call your bluff right up until what you thought was the last second - and then call your bluff well past that time too. Remember, discussions about pay almost never endear you to management. Those discussions create some uncertainty and mistrust no matter what the outcome. That's bad for business - which is about profit and risk reduction. Pay discussions are also more challenging than more routine situations to handle professionally. So make sure you have a really good reason (i.e. substantially higher offer/better opportunity) before embarking down that path.