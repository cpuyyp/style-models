Just refactored the one function. It is hard to tell what your intentions are in some places. Comments are inline, with reasons as to why I changed things 

The StudentRepository is all about database, and shouldn't know about $request and $response objects, that is the job of the controller. What if you were fetching data to put in an excel file, then you can't use the StudentRepository as it was to fetch that data. 

you might want to look at autoloading, it's not very hard to do $URL$ In your templates you are doing 

Authenticate the data source. (Is it a legitimate source, username/password/etc) Sanitize the user data. 

To me it is easier to see the looping logic without all the html in place You could then also look at templating engine if you are going to be doing lots of this sort of thing, there are various options available, smarty, twig, mustache, blades to name a few. 

The advantages of the ini format style, as @MrLore said, you can give a file to someone (not a programmer) and they can do the translation for you. Another advantage is if you use multiple programming languages, the ini file is independent of those. You can also do more advanced stuff like including arguments into the strings 

The dump function, why do you throw an exception if the session doesn't exist, but not anywhere else if the session doesn't exist? I would re-write it like a guard clause rather then having a return halfway through the function. 

If that is the case, then why re-declare then, why not use FILE_DOWNLOAD_PATH and FILE_ENTRY_SEPARATOR directly in your code If you do want to allow them to be overridden, then you could extend your constructor 

Personally, I would just stick with what you have already got. You could try something like this, although too me it doesn't look any tidier. You would need to profile it against your database, to see if it performs any better. 

It works and I can't see any side effects, but it is unusual to see code like this, and I am not sure of the point of creating all 3 user arrays at once. Do you intend to display all 3 user menu options at the same time, or can only 1 user be logged in at once? This is my preference for readability, also if you create a menu array and need items in a different order for different users, it would be difficult to achieve using the current code. 

Keep all the logic out of the html. This often involves building an array of pre-formatted values or structured data. I like the long form of foreach/endforeach, for/endfor etc. Just because I find them easier to spot in amongst the html, instead of looking for a } that could be part of a javascript, etc I prefer the short form of <?= instead of <?php echo 

Then for showing the gallery we could use a data tag instead of class names to identify the links and galleries, then you could easily extend the code to include more galleries, with no extra js 

Well if you want to split hairs, you could do a couple of minor changes (commented below) Honestly, I can't see any advantage in making it recursive, it works fine as it is 

self:: is for referencing static variables, etc $this-> is for dynamic variables Eg your constants are static so 

I haven't read the book you mention, although it looks good so I might buy it and have a read. A few things for me There are echo statements in the code, I am assuming that is for debugging and you are going to remove them. In a couple of places you use die(), and then elsewhere you throw an exception. Personally I would throw exceptions and let it bubble up to somewhere that can handle them properly. Your class is called fileImporter, but it also has a download aspect to it as well. I am wondering if fileDownloader should be separated out. You have a private getter function 

It is not necessary to put quotes around variables unless you are concatenating them. By the way $username is not set in your script. 

Just some simple stuff, a common.php file for common code used by both files. DRY don't repeat yourself. Writing a script like you have is fine, the points i have noted will help you if you come back to maintain it in a year or so, and have forgotten how it works. The bulk of programming jobs are about maintaining a code base, not creating new stuff, so if you can learn how to make maintenance easier, it will be beneficial for you in the long run. (I wish i had learnt this stuff much earlier on) I have added inline comments explaining the changes i made 

The del function, I am unsure what you are trying to achieve by returning false, but returning nothing if it isn't set? Personally I wouldn't bother to check if it is set or not, just unset it, and return nothing. I would also call it delete, so it is painfully obvious to the use what it does 

Have you tried using this function before? It does a fair bit of what you are trying to accomplish. $URL$ Failing that, I would try learning regular expressions, as they can make a lot of your strpos more concise. Its a handy skill to have in the toolbox. $URL$ I also find the a,b,c thing incredibly cryptic You could use constants 

Other things you could do is to manage different "namespaces" (maybe not the best word to describe it) within a session. 

Also why don't you just store the whole lot as jpg, why is it necessary to save them as different types 

There also appears to be no way to overide these private variables which are set to constant values. 

The way I have read the code, it looks like you can see 1 gallery at a time or the home links but not both. It's not much of a saving in code, but you could simplify it a little and assume that if artists-home is clicked that all galleries fade out. 

This snippet of code is from Kohanaphp framework. I have found this the easiest and most flexible way to do what you want. It's not a lot less code then what you have, but at least you are not repeating the array key part. The name of the function get() isn't my preferred naming as I feel it is confused with $_GET, but it is part of the framework, so I have left as is. My preference would be to call it val() (a bit of jquery influence there) It is in it's own class here, but that is not essential. 

It looks reasonably well thought out to me, although I am not sure how much it would be used beyond practice. There are a few small things that can be improved. Comments are inline 

I have done translation of one of my sites into English, French and German and what I found is that maintaining a class with getter's and setter's for a handful of phrases works, but anything more, just becomes hard work I like @MrLore parse_ini_file() approach. with a few differences For example instead of using made up constants like PAGE_TITLE, use the real string in your native language. So my en_nz.ini file looks like this 

The bulk of your code looks fine, I have made what are (In my opinion) a few usability enhancements, but take it or leave it as you see fit. I don't think you can really make the xml processing any less ugly. Comments are inline 

There are no glaring security issues I can see in the original code, but I felt it could be improved.