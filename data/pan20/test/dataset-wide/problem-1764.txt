Why don't you just set the application as the user's shell? That means it is the only thing that gets run when they log in, and (barring some sort of access within the application itself) they can't really do anything else. 

You don't want to capture everything, only text from the ID up to the next slash, if any. So won't do what you want, since it just captures everything. Rather, capture until the following slash (if it exists): 

What's wrong with using macvtap? This is completely painless and doesn't require any further configuration on the host. 

You should also be aware that dynamic module loading was only introduced in the 1.10 development cycle. Modules older than this were designed to be compiled directly into nginx, and would need to be updated for dynamic loading. The module you linked to is such a one. Contact its developer for further information. 

It looks like you forgot to set . If not set, then the master connection will not remain open if that first session is closed. For example you can set in your : 

It is a 32-bit unsigned integer, converted into four 8-bit unsigned integers so that humans can read it more easily. The numbers are represented most-significant-bit-first. 

Keep in mind that if you set the password, but the system BIOS doesn't support hard drive passwords, you will be unable to boot from the disk, and won't be able to access it at all until the password is supplied to it. 

Check and make sure you are on a single version (e.g. ) and haven't tried to mix in sources from unstable/testing, etc. Run . Run . Run . 

Note that both of these fail if prelinking is in use, which is one reason why it's generally not enabled by default anymore on recent systems. 

It can't start because it's already running (and the pid file somehow doesn't reflect that). Kill it yourself, then restart it. 

Use the Apache DirectoryIndex directive to specify which file or files should be treated as the directory index. Example: 

(Note that the ext4 driver is capable of mounting ext2 and ext3 filesystems, which is why your system is currently usable.) 

The Red Hat docuemntation explains how to use to shrink or expand a guest disk image. If you haven't already read Red Hat's excellent documentation, you should do so now. 

Unless you need Apache for some other specific reason, there's no real need to keep it in this scenario. It's only adding overhead, which you can ill-afford in a resource-constrained VPS. nginx + php-fpm is a well supported configuration for WordPress; see their wiki for configuration examples. 

You will need to set up ClassicLink to allow your classic EC2 instance to communicate with your new instance in the VPC. This has two steps: 

The obvious problem is that you have placed inside a block. Best practice is to place it in the block. This is one of the most common nginx misconfigurations. 

If your client needs to use MySQL then that's what you're stuck with. Obviously it will run slower on your computer than on the server, but that's not usually a big deal. If you need more capacity on a temporary basis you can always lease an Amazon EC2 instance for a few hours or whatever. 

You can take your machine off the Internet, and that will stop the attacks. But it will also stop the mail coming in. I suggest you use fail2ban to ban these bots, rather than trying to do it manually yourself. Recent versions of fail2ban already contain postfix and dovecot jails, which are disabled by default, so all you need to do is enable them. For instance, in a file included from : 

is on by default, as it is one of the options included in , which is itself on by default. From the man page: 

First upgrade your kernel. That particular kernel contained a bug which caused various ioctls to print those warnings (and maybe fail) in certain mdraid and LVM configurations. If a fixed kernel doesn't resolve the problem, run an extended self-test on all your drives. Note that the self-test may take several hours for each drive and will degrade performance slightly while running, so should be run at a time of low system activity. For example, to schedule the self-tests to begin at 11 pm: 

All of those should be in the repos already. You should be using to install your RPM and not , as this will provide you automatic dependency resolution. 

Your is wrong. You specified but your app is actually in . This is why Passenger can't find it. The resolution is to fix the configuration. 

That .htaccess just denies all requests. You can easily do the same in nginx with a second . For instance this will every request in that directory: 

It appears that your VPS was preinstalled with various scripts which are useful for providing shared web hosting services. Among these are cPanel and suPHP. While these can be convenient to use, if you aren't actually providing shared web hosting and you're the only person using the machine, then they're mostly redundant and unnecessary. SuPHP, in particular, is designed to isolate users from each other in a shared hosting environment. If you're the only person hosting a site there, then it's superfluous; you can simply set permissions to whatever your applications may require. If you're willing to learn the basics of setting up Linux, Apache and so on, you can probably also get rid of the cPanel license and save a few bucks. 

You said you used . This tool builds packages in a clean chroot environment, but it also keeps a cache of the minimal environment for use in building the next package. If you don't intend to build any other packages ever again, then you can clean out all of the data that keeps around: 

This is the command that actually gets run when someone runs . In this case someone has run , which spawns this process to handle the actual connection. 

The latest Windows NT 4.0 service pack is Service Pack 6a. Microsoft no longer distributes NT 4.0 service packs on its Web site, though as @HopelessN00b noted in his answer,Â they can still be found on MS's FTP site. Finally, whatever it is probably should have been decommissioned years ago. All support for Windows NT 4.0 ended in 2004. 

You won't be getting a wildcard SSL certificate from anyone for $12.99. They are typically much more expensive; I see on GoDaddy's site that their base price for wildcard SSL is $199/year, for instance. A "normal" SSL certificate like you purchased should already serve both www.example.com and example.com. You can probably get away with self-signed certificates for your development/staging servers. 

You have several options to solve the problem of running multiple PHP versions simultaneously on your RHEL 7 server. These options are fully supported by Red Hat under your existing subscription entitlement: 

If you really need Python 2.6 on your old CentOS 5 box, you can use the python26 packages provided by EPEL. 

Your IPv6 address is incomplete. You forgot the scope ID, which appears as a followed by the relevant interface ID. 

Make sure you answer to the abuse@ address as well. Certain spam blacklists will list you if mail sent to either address bounces. 

Ubuntu (finally) switched to systemd with 16.04 LTS. Under systemd, there is no output when you manually start or stop a service, and the request succeeds. There is only output when a service fails to start/stop. 

As the message told you, 2001:41d0:e:4c8::1 has no reverse DNS entry set. To solve the problem, you need to set the reverse DNS for this to the proper hostname value, that also resolves to the same IP address. You can do this within your OVH management panel. 

which don't necessarily lead non-technical users to check . If at all possible, and these are meant to be turnkey systems, configure your servers with default entries such as those provided by Google Public DNS: 

In RHEL 7 and recent Fedora, the system hostname is no longer set in the file. It is now set in the file, which should contain only the fully qualified domain name. 

Adding a to the end of an argument in causes it to try that URL with the paths specified in the directive, in your case . When you load , try_files first tries , which doesn't match, then it gets to and tries , which re-enters the same block. Because doesn't exist, it gets to again, goes back to try again, re-enters the block, and gives you the error. To fix this, specify a reasonable default for when a static file is not found in your . If you have a static-only site, this could be . If you are going to run a web app, then it could be a location for that app. For example: 

Create a static page with your desired content, and then add something like this to your nginx configuration: 

First, the syntax as given is correct. The line in is supposed to begin with . Note that the way you posted it, it begins with spaces, which should not be there. Second, the page you linked to did warn you: 

You said that you can't reach nigelyons.com in your browser, but that's not true. You can reach it just fine. It sends a redirect to www.nigelyons.com. It's that site that you can't reach. And the reason you can't reach it is that it doesn't have an A record in the DNS. To resolve the problem, create a record set in Route 53 for www, containing the appropriate A record. Then wait; negative caching means it could be an hour or more before it becomes accessible. 

The best way to deal with this mess is to install a fresh server and transfer the web application to it (and I would recommend not using cPanel at all). Attempting to clean it up in-place is going to be hours of (billable) work and since cPanel is well known to put systems in strange states even when it's working normally, you'll probably require the assistance of cPanel support if you want to do this. 

The second problem is that you specified a different hostname in the field than you are using in your web browser. While Apache is expecting , you are using . Since Apache doesn't know what to do with those, it punts, and you get your default virtual host. To resolve the issue: 

Each release has several notes of things that may go wrong or that need to be done specific to that release; so be sure to check those carefully. In particular, Fedora 17 made a major change to the filesystem layout and there is a special process for dealing with that. As a general rule, when using this method, one must update from one Fedora version to the next in sequence, not skipping any versions. This makes it critical that you update at least once per year, as Fedora has a very short 13-month lifecycle, and at EOL, mirrors may begin dropping old repositories. If you need to update from a version of Fedora more than two release numbers behind, therefore, you must upgrade using the installation DVD/USB stick. For instance, today Fedora 17 is current and Fedora 16 is maintained. Therefore you can use the process to update from Fedora 15, but anything older will require upgrading using the installation media since the online mirrors will likely be long gone. 

Since CentOS 6.6, SELinux policies that applied to Apache are now also applied to nginx and php-fpm in the same way. Thus you need to use the right SELinux boolean to allow the web server to send mail. 

Your traceroute shows that your traffic was being dropped at Hurricane Electric's network. Most likely they were operating the Teredo relay that your computer had connected to. The fact that packets could not pass further suggests a communication breakdown between your PC and the Teredo relay. And the most likely cause of that is that your NAT device dropped its connection state for the Teredo UDP traffic due to an inactivity timeout. In this case the connection would not come back up again until your PC sent some more traffic over the tunnel, causing the NAT device to begin tracking the connection again. This is one reason Teredo is extremely unreliable in practice despite its theoretical promise to punch through NAT devices. If you need a more reliable tunnel in this scenario, try using SixXS which has their own tunneling protocol that traverses NAT and remains connected (by occasionally sending traffic even when the connection is idle). You can also use a straight up proto-41 tunnel such as the ones from Hurricane Electric, but in this case you have to manually intervene if your IPv4 address changes. 

You'll be happy to know that most (if not all) DNS server software has protection against this scenario. For example: Microsoft DNS server has a MaxCacheTTL setting, which defaults to 86400. So regardless of any TTL setting in DNS RRs, if this is not adjusted, the DNS server will not cache anything longer than a day. BIND also has a similar setting max-cache-ttl, which defaults to 604800 (7 days). PowerDNS alao has the setting max-cache-ttl and defaults to 86400. Unbound names the setting cache-max-ttl and defaults to 86400. Since BIND is still the most popular DNS server out there, its 7 day default will affect you. If you find out this has happened, you'll probably have to wait a week before most everyone has flushed their caches. 

The [END] flag is not relevant here, since you are serving 301 redirects. And as the documentation you linked to states... 

You told the server to bind to port 100. On UNIX systems such as Mac OS X and Linux, ports below 1024 can only be listened to by the root user. To resolve the issue, use one of the following two solutions: 

You're trying to install packages from the spacewalk-client repository for CentOS 7 on CentOS 6. This has no chance of working. Install the correct packages instead.