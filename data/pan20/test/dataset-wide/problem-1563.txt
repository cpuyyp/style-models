Using will flush the IO buffer, which ensures every character is printed before it lets you continue, and is a very expensive operation. You should just use (or if you are using Visual C++), and only flush the buffer at the end of the method, if necessary. 

Not used variables You don't use , , or , so you can remove them. Naming Your variables names should tell the reader about itself. doesn't tell me anything about what the variable is or its purpose. Indentation Your indentation is somewhat sporadic. You should indent one level for each loop, if, function, etc., which will help improve readability, which helps prevent bugs. I'm not an expert on VBA or Excel, so I'll leave everything else to the experts. I just learned what I know by working on the Rubberduck VBE addin. 

I'm doing my first major jQuery development. It's a Widget for recurring events, and is as such a fairly complex beast. The full code is available at $URL$ for those who want to check it out. I appreciate any kind of feedback about any part of the code, so anyone who wants to take a look at it, that would be awesome. I have a couple of specific questions, and it seems best to put them as separate posts, and here is the second one: I have several big snippets of HTML and I'm using jQuery templating for this. My question is on the best way to include these templates. Currently I'm using two different ways, and none of them are obviously better than any other. In one case I use a string literal: 

Using braces will not change the runtime behavior of your code, but it can help you prevent errors if you make a mistake, like Apple did with their Apple SSL bug. 

Continuing the series of Code Explorer posts, here is the collection of view models for the tree nodes: 

I'm not sure what is going to, or should, happen if neither the nor the statements execute. Should there be an statement in there? 

is by design, as I only need to be able to access the s out of this class. This method gets the trees stored in the second level so I can get the items in the third level. returns the menus stored in the top node(s) based on which version of tutorial the user wants. gets the s stored in the deepest levels of the tree based on which version the user is in and which menu they just opened. These methods are the part I do not like, partially because there is no easy way to search the tree for a value. P.S. I'm not sure if this is more of a tree or a file structure as I need it to be able to have multiple nodes at any level, with the true "root" being the variable holding it all together. 

This is neat and simple, but the result is a lot of HTML inline. One of the templates is 219 lines long... :-) The other technique I use is to include the template as if it is a script in the HTML: 

It's more than okay, it is nicely readable, has no problems and involves no abuse whatsoever. I sometimes do the same. 

And it runs an astonishing 23 times faster than the "replace" based tokenizer above, and 30 times faster then the regex based tokenizer, even though it essentially does the same thing. :-) I really did not think it would be faster to run this "dual" regex in two separate steps, and I have tried other "two-stage" variations before that was even slower, but this time I arrived at the right combination. 

it can't find the value because it is a different instance of , even if all the values are the same. So, I wrote this simple method: 

It is easier to see which code is in which scope if you have it indented one level per scope. In fact, some languages take this so seriously that the level of indentation determines the scope, including Python. Also: 

Piece.fs This is an immutable class representing a Piece. It contains each option as a static member to ease building boards manually. 

This can be improved and made more Pythonic. First, there is the and keyword, which you already know of as you used it. Why not utilize that instead of doing two loops? You will have to change the logic slightly: 

In this program, you need to create an instance of a server-side chat instance that contains all its state. You cannot access elements of this class's state just by instantiating another instance--you need a reference to the instance. Once you understand how OOP works a little better, you will understand why you don't create default constructors like this, and why you should avoid fields, methods, and classes. 

With cred to @VedranÅ ego for kicking me in the right direction, my current solution is simply to split the two regex-parts into separate parsings, the first one a split (instead of a match) and the second one a findall on the floats (because doing a split is near impossible, as - both should and should not be a separator, depending on context).: 

Yes, too much for one line, yes, too confusing. Making a map an lambda for two values like that is silly, unless you are trying to win an obfuscation contest. So, the middle version is best. 

This means I don't have the template inline, which is good, but it also means using the Widget is a bit more involved as you need the tag in the HTML, which is bad, and it is a bit of a horrid hack. Opinions on this is welcome, and even more welcome would be a third way that doesn't suck. :-) 

Your naming isn't always clear. How do I know what stands for without seeing the definition? How did you determine to use as your loop variable? 

You have one letter variable names scattered around your code: . Please change this to be more descriptive. 

So, you want a default constructor, but you don't instantiate the class in it? Given your primary constructor (), your default constructor should probably call this constructor with the default port. If you do not have a good default port, you probably shouldn't have this constructor. If your class needs a port number to work correctly, then you really need to remove this constructor. 

Tunaki makes a very good point that your and groupings should not be part of a card instance. However, I disagree that they should be kept as strings. I would make these groups into an . 

I'm doing my first major jQuery development. It's a Widget for recurring events, and is as such a fairly complex beast. The full code is available at $URL$ for those who want to check it out. I appreciate any kind of feedback about any part of the code, so anyone who wants to take a look at it, that would be awesome. I have a couple of specific questions, and it seems best to put them as separate posts, so here is the first one: Does my directory layout fit with what a jQuery developer would expect? Is it "best practice"? The directory structure is this (somewhat simplified): 

Why are you first removing the quotes and then putting them back? And why are you removing the brackets and them putting them back? This does the same thing, except change ' to ". It also doesn't handle commas in names, so if you have that it won't work. In that case I'd probably use a regexp. 

You have in both the and the , at the end of each. Remove duplicated code like this and place it after the /: 

In the / block in , you do at the top of each block. You should move this to just above the conditional if it is going to happen either way. However, I'm not quite sure if it is supposed to use the operator in each given that the comment for the first says you are trimming the top of the range and the comment for the other says you are trimming the bottom. 

Be sure to use in this case because a prefixed or will cause that section of the statement to be evaluated first, while a suffixed or will cause to be incremented after the function call. 

Update: sucks, and that means your format is inconsistent and not parseable without horrid hacks. In that case your code seems OK, although I'd probably do it differently. I would most likely use a regexp to find all cases of commas that are NOT preceded by > and followed by a space to something else, say chr(128) or something like that. I'd then parse the code with my code above, extract the email from withing the brackets, strip all quotes and brackets from the remander, and replace back chr(128) with commas. And the lastly write that to the outfile. The difference there is that I don't try to handle a horrid format, I first try to fix the problems. It makes for cleaner code, IMO. Update 2: I instead replaced the commas that should be split on, making it simpler, like so: