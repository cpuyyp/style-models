at run-time you can associate one mixin to the target class. Jackson matches properties and methods by name and takes the annotations from the mixin. overriding any from the target: 

But really, as it was already suggested, you should design a class that holds all the information of a Player and another for team. 

First of all, ? come on... how hard is it to call it or ? (no need for , we can see its type) but what does the line mean? why are you asking about the first character? ok, you want to know if the subsquent String is to be added or substracted, right? so why not make a method that returns an enum that has values and then you can have a separate method that accepts enum and performs the actual operation. The benefit of this design is that you are better prepared for new operation requirment like which will mean... I don't know, something. Now that I think of it, perhaps you can add the identifying character to the enum values and then in you extract the first character and search for the matching enum, which is a behavior of the enum: 

Now we come to the question of all those statements. You already have arrays that you assign the variables into so why not use them when you ask about the team players? 

in my eyes, in the case of deciding between two options, the short form of the if statement can be used to make it clear: 

the File handlers ( and ) are defined outside of the block, are opened at the beginning inside the block are closed in the clause. 

instance variables and never get initialized and are never used. input file is never closed. some variables are declared out of the scope they should be. For instance in is declared outside the loop but is initialized and used only inside it. It will be more efficient to read the entire input file to memory. Java 7 has methods that do just that and that returns of s according to the input lines so you already know where new line was in input There is no exception handling. to have throw the exception is not good practice for exception handling. 

And manually implode some queries with it. To make it generic, have a method which removes vowels in this way, such as: 

What I have so far seems to work fine, apart from the aforementioned issue, though the amount of code for what sounds like such a simple function is far above what I'd hoped, so I'd really appreciate any ideas on how to reduce it. 

With this, you can remove the first if/else and foreach loop entirely, by removing the ternary and using , like so: 

However, when you increase the number of possibilities to 10, and reduce the guesses to 5, you can no longer do this, and the chances of never guessing a correct number increase dramatically, e.g.: 

If the code will be distributed, read or maintained by others, you might want to look at your naming conventions as they're a bit inconsistent, for example sometimes you use underscore separated names such as , but other times you use sulkingCamelCase such as and in class case. Either one is fine, as long as you use the same throughout. Aside from your single line getters and setters, the function names you've chosen are not always indicative of what the function does. Ideally you shouldn't have to read the actual code to know what a function does, consider these changes: 

Additionally, I'd suggest reading up on your SQL for a start, this whole thing screams out clause. In every case, your database will be more efficient at sorting the results than whatever programming language you're using them in (and certainly PHP). Such as: 

It all looks good to me, though you can simplify your NodeBase and methods if you use variable properties, like so: 

It's secure, but it's really chunky and tedious to write. I'd do this by overriding the magic method to trick GSON into thinking the methods exist, like so: 

I would also avoid using regexes or any kind of manual string parsing, you can do it all with and , thusly: 

So it sounds like they want it so you can add a mouse to the choir and it will only squeak, and a cat will only meow. Instead you have a single choir which randomly picks a sound to make and no distinct objects for the animals. I suspect they were wanting an Animal to make a single noise which is specified upfront in a more object-orientated way. Something like this at a minimum: 

You might have read my question on shortening my code to a one-liner for Problem 1. So, I was wondering, is there any more tricks of the trade to shorten my Problem 2 solution: 

I was trying to solve the final puzzle at the end of the classes chapter (Chapter 8) in "Python Programming for the Absolute Beginner" which is stated as: 

I would like to find a way to keep everything in this python code to as little number of lines as possible (maybe even a one liner??), and possibly improve the speed (it's currently around 12 ms). By the way, this is the problem: Find the sum of all the multiples of 3 or 5 below 1000.Suggestions?Thanks. 

Which is supposed to replicate the classic game of hangman visually. Is the code fully optimized? Is there an other way I could improve it? 

As you can tell, it's meant to represent John Conway's Game of Life on a JFrame. It's my first project using animation and graphics, so I expect there to be a few bad practices. Could anyone provide an honest, critical code review? Thanks 

Which, as I think you can probably guess, is meant to replicate the classic pen and paper game TicTacToe digitally. Has anyone got any tips as to how to optimize/improve my code? 

This is my first ever game in Pygame, so I'm asuming there's a few bad practices. Can anyone improve my code and find those bad practices? 

Can someone provide a code review (particularity on my OOP skills)? Also, what would be the most object oriented way to implement "crazy cards"? 

Down to one line?? This is the official Problem 2 question: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ... By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms. Thanks! 

which takes a file containing match results, and creates a file containing a ranking based on the Elo Ranking System. However, I feel like my method could've been implemented in a better way, so I came here to see for some pointers as to how I can better implement it or pick up any other good practices. EDIT: Here's an example of the input file: 

I have a array and a of a custom object and I'm needing to loop around and perform an operation on both but only as long as one of both is available, the original method is as follows: 

You can increase the readability and reduce the number of checks required in your if block by performing each of the four booleans you get at the start, then checking against them instead of performing it over and over as well as separating out the check then reveal logic into its own method, like so: 

There's a couple of issues with it, for start your nested if blocks are unnecessary: instead of manually checking and returning true or false, just return the result of those methods, like so: 

Unless I'm missing something, you're ing the entire table over an over, then do exactly the same thing with it every time (except with different HTML class names). If that's the case, you can replace the whole file with this: 

I don't really like the method of exception pseudo-typing you're doing, I'd use different objects to represent the type of exception rather than the content, like so: 

The first thing I spotted was this: . I'm not sure if that's an error with your page name or code, but whichever it is needs to be fixed. 

Obviously the on every iteration is inefficient, however as I need to maintain a counter, an enhanced loop means keeping a separate counter and performing a check on it every time like so (list declaration skipped for space): 

Though even this is pretty sloppy, depending on the amount of time you have I'd probably go deeper and write out the standard s and es they're looking for with these tests: , (for all the validation methods), , , etc. 

I've been implementing a custom internal server error page in ASP.Net MVC which will check if the current user is either an administrator or accessing the page from localhost, and if so, show them a whole bunch of details about the error to debug it with, otherwise just send them to a basic HTML error page. So far, it works great, but one problem I had was that if there is an error in a partial view on the page, the system gets stuck in a loop trying to report the error. To avoid this, I'm storing a temporary counter of how many times the current action has requested the error page in , but I find the amount of lines and style of the code to get, set and check this variable a bit verbose: 

2) instead of creating a and then moving it, you can specify the location when you it: this shows more clearly the intention of placing the tower at a certain location 

The inheritance relation between the two classes makes no logical sense. It seems to serve the sole purpose of sharing the instance. Inheritance is more than mechanism for sharing variables. It has application (aka business) meaning. It defines "is kind of" relationship: a is a kind of . The class names say absolutely nothing about what the code does. Well, one could argue that serves as the program's entry point. I've seen this "naming convention" in actual java projects so that's passable. I would call it something like . It is also acceptable to add the method to the other methods instead of putting in a separate class. class is another matter: There has to be better name that describes what the collection of methods do. In conclusion, it is up to you whether has its own method or keep it separate. So, if we look at as that is a class that implements your improved bubble sort algorithm, then can be regarded as a constructor. and it should take a instance as argument. So, from the above constructor, we deduce that holds the int array as internal data structure. So the sort method should accept no arg and return void and if you wish you can add that is a "classic" getter method: allows access to the instance variable. regarding : so we now can deduce that this method also accept no arg. It is considered "best parctice" that a class with a data structure (or just a bunch of variables) will have a string representation of its internal state by overriding 's method. This allows the caller to conrtol to which output the is written. 

there is a useful example in this topic it shows how you can use a instance across methods, something that may be useful in your case. lastly, have a look at which seems to fit at least some of your requirements. if you are doind this asan exercise, then take a look at the class' source code and see hoe they dealt with thread safety issues. 

The only other comment I have is that the and methods are , so you should be calling them as and rather than which is for instance methods. 

There's a few changes I'd suggest to insert, firstly as the second parameter has to be an array, you can use type hinting to indicate this: 

Additionally, you have made and into optional parameters by making them auto-initialise to empty arrays, however you cannot have an statement without specifying at least one field and value, therefore instead of making them optional array parameters, you should use type hinting to ensure they are arrays, and then check to make sure that the arguments are correct before you send the query off to the server, something like this: 

And you can delete the rest of your class. Edit: Using the new method would then allow you to add pieces of text at the specified points in your message, so your validation method that returns a State would use it as follows: 

The best optimisation is only doing what's necessary. When checking the login, you don't check whether they've even been specified until after you hash it, consider reordering it like so: 

Then you can have your validation method return a state, and you can do your checking block after, like this: 

You also haven't got any access modifiers on your methods. As directly prints out a segment of HTML which wouldn't be valid on its own, I'm guessing that it's probably only used once somewhere in your View and as such should be or to prevent misuse. As for the actual code, aside from collapsing some statements there's not much to change. These lines in don't appear to be doing anything though: 

Which will save you a lot of rewriting if you decide to change the names of any of the properties down the line 

You do a lot of mapping from parameters to arrays and vice versa, which you could simplify by storing an array of the parameter names and whether or not you want them trimmed, for example: