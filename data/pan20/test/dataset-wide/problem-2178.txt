Being unemployed is always a scar on a person's resume. Being employed in a different field should only be beneficial towards a person's resume. When you're unemployed the main benefit is that you don't have to take days off when you go to interviews for jobs you DO wish to have. However, aside from this it's not very useful. Being employed as a waiter for example could indicate you as customer friendly. Being employed as a super market stock filler could indicate teamwork. These are all competencies that an employer appreciates. It's always a good idea to fill up any unemployment holes that you make. 

Take those tips with a grain of salt. They seem very situational specific and somewhat out of context. stating your job description and your title is NOT a bad thing. However this should not be the main focus. I believe that's what those hints were refering to. example : 

Since you're dutch, I'd like to say that "sick days" is not a common term in the Netherlands. People will always be sick and the amount of days that you are sick tend to have no effect on your salary or anything similar (not even vacation days). At most it might lower your yearly bonus, if you even have one. Talk to your manager If you're going to be sick more frequently, just talk about this to your manager so that he can manage the situation. If he asks you to work at home during those sick days, then he'll most likely count those "sick days" as working days. 9 out of 10 times this is not an issue and life will go on. The only time you should bother with HR in this situation, is if your manager tells you to contact HR. But it's more likely that he'll do this himself. 

This depends on the company, I would try to discuss this with your company. Since you've worked there for only a month, I doubt that you'll have built up enough vacation days in 5 months to take a full month break. There are however some companies that don't make a big deal out of this or allow you to "buy" extra vacation days. So contact your manager and HR about this. Also, it's also important to see this from a different angle. Depending on where you work, taking a full month holiday could be considered career suicide. Your employer will wonder whether this will be a repeating occurrence even though it probably wont. Also, question yourself on whether you will be heavily missed that month. If the answer is yes, then your employer will NOT be happy about this. If the manager needs to actively look for a replacement for you for that entire month it's quite a big deal. In the end, I feel like you'd need to communicate this clearly with your manager while keeping this in mind. Personally I find it very likely that your request would be denied. However, seeing as you're asking this far ahead in time. I don't see the harm in asking. Whether you graduated from college is slightly irrelevant. You've already started a job. Asking for a month off at the start of your employment is always VERY awkward and unusual. If you feel that the company is very strict on rules. I don't think you'll be able to make your case to your manager. I could imagine a conversation with your manager going something like this. (not as a mail, I'm terrible at writing those and I prefer personal contact) 

When I wanted to do some research, I was able to get a pass to access the local university's libraries for 6 months. Had to go through quite a few checks but it only cost me about Â£25. This is in the UK though, not sure if it is similar near you but it may be worth a try. 

I feel your pain, but just to offer an alternative point of view, I have had many situations when people have emailed me asking for me to perform a task like that and it's incredibly frustrating when they email again 20 minutes later with "please do it, it's delaying us". As a developer, I like to come to the end of a section of code before checking my emails or acting upon them and I'm also in meetings relatively often so emailing me and expecting me to jump on it within 15 minutes is pretty irritating. Now on to my answer. I would suggest having a schedule with them where they do whatever is required of them every day at a specific time. Would that work for you? You can get a fresh build of the code daily and they can schedule it in so that it is not an irritant for them either. Can any of the tasks be automated (by them or you)? 

The reason your CV isn't giving people the impression you're doing great in your current job is that you don't tell them that! Your list of duties is very terse and tells me nothing about what you have achieved. In fact the word "Duties" implies that you were just doing your job, nothing to see here. Make it "Achievements" or something like that instead. Instead of things like "Configure MySQL database for the SIP infrastructure.", you need to focus on great projects you've done and why you were so effective, what was the end result? Here's a line from the graduate role in my CV: 

You need to remember what the drawings are for. Yes, a picture can be worth a thousand words, but it can also add nothing. A Venn diagram may communicate something, though not much added value, yet there is no added value at all in drawing a picture of a python after saying you can code. If anything it's confusing. 

I think you're looking at this the wrong way. Your first programming job should be the one where you learn the most. You want to use it to absorb all the knowledge of your colleagues and become a decent programmer in your own right. As long as you're making enough to live off without getting into debt, try not to think too much about the salary, think about everything else you can gain from the job. Later jobs will pay you more for this knowledge. In short, move on when you're not learning very much any more. 

Have a look at sites like $URL$ There are a lot of resources out there aimed at making it fun to learn to code. Try to find one close to the skills you're using at work and build it from there. Once you've built up some confidence with a technology, come up with a little side product for you to work on at home. Don't choose anything too ambitious, and then use Stack Overflow for specific questions and issues with your project. You'll start to feel more confident in tackling the programming books too after a while. On the other hand, if you try the above and are still feeling like you don't enjoy it, there is nothing wrong with a move to testing. It's a very valid career path, not too badly paid and you are likely to still have chances to dabble in coding if you feel like it. 

At this point you've informed him more than what he really deserves. Hopefully he'll give you more time to figure out the code. If he doesn't then that's not your fault. Make sure to log this. Put it in the report that you'll deliver school, as they will be the ones to decide whether your internship is a success or not. NOT the company. (even though the company tends to have a large influence) If you end up being unable to do all the things that the company has asked from you, you will have proof that you informed the right people in the right way. Shifting the blame from you, towards the company itself. So in short: Document EVERYTHING that has been said and that has been mailed. And put it in your report that goes to school as an appendix. 

Every company has a different culture. However in most cases, people don't care about whether you talk about work or non related questions. Of-course you are expected to talk about work during your working hours. But it would be inhuman to ban occasional random chatting. In fact, random conversations help employees feel more comfortable at work and allows them to work harder. Personally I'm highly introverted so I dislike small talk. On the other hand, extraverted people thrive on small talk. They gain energy and get excited to work harder. At work people find it much easier to talk about work-related things. They don't always need to talk about topics that are beneficial towards the company. But the are often still work related. This is not because they have to. It's more likely that this is the most common shared interest that everyone has knowledge about. Therefor it's easier to talk about it. But in the end, does it matter what you talk about? For as long as you do your job, not really. Again, this is heavily dependent on the company culture. 

The most important thing is that you get inside the software engineer's mind. Know how he intends to code. After that you need to ask yourself how easy it would be to bring him to a level where he can be placed to work on larger projects. Usually this will take between 1~2 months anyway. Furthermore, I would HIGHLY reccomend to let him use the internet for code refferencing. Coding requires a HUGE amount of looking up codes in order to learn them. Once he's done, and you're worried he just copied some code he doesnt understand, just ask him about the code itself. Why did he use this variable here? why did he name it like that instead of fully spelling it out? why use a for loop instead of a while? etc etc. These might be silly questions, but if he's bullshitting you, he shouldnt be able to awnser any of this. Also, try to make your steps as independant as possible and then leave him to his thing while you grab some coffee and do other stuff. If he gets stuck on anything, he can simply skip it and proceed with the next. A lot of coders dont perform well if they are being watched. So by enabling him to do his own thing, he should have that chance. I'd still pop in every 15~30 mins in case he has any problems/questions. Also, this allows you to see if he's a coder that will keep asking questions before trying to find awnsers online first. As for the SQL tasks, I feel like you were too easy on them. I'd show them a small SQL database model and tell them you want to add a certain item, but don't wish to edit any of the current tables. asking him what his suggestion would be in order to implement the change. and also why. basically talk the information out of him. I'd still ask how to make an update/insert/create query though. he can find that stuff within 2 seconds, but if he can't it's an easy way to see if he's bullshitting you. Bottomline is, you need to understand how he thinks. Not how good he is at coding. Also, you may want to tell him before the test, what kind of things he can expect (not in detail, just the outlines). That way he may prepare himself better.