It is OK to ask, although this may not be the best way to ask about it. The employer may benefit from the results of your study - new skills, more experience, wider and deeper understanding of the problem and solution space -, not the sheer amount of time you spent on it. So from the interviewer's part it would be better to ask questions like this: 

You may also want to google the web for research on the positive effects of ergonomic furniture (and the negative effects of the lack of it). A lot depends on the local law, but companies in most countries can be held accountable for employees developing long term health problems due to ergonomically challenged working conditions. In other words, improving the ergonomy of your workspace can be seen as an investment from your company's part to reduce long term health care costs, and also to increase employee satisfaction - which in turn reduces turnover, again saving considerable direct and indirect costs. Ergonomic furniture may look pricey, but a high quality chair / desk can last for a decade. Compared to the cumulated salary of an average employee during the same period of time, this cost is peanuts (or toilet paper :-). So your company can make a huge long term difference in the mood, commitment and health of their employees with an investment the equivalent of which as a salary raise would most likely go unnoticed by most. 

I am not aware of any studies on this topic, but IMHO it would be difficult to arrange such in a rigorous enough way, and it may not be worth the effort overall. The original Fizzbuzz test has been published well over a decade ago so by now it is widely known, thus candidates can prepare for it specifically, including even learning the solution by heart. So you would need a different variation in real life, maybe even at each interview. Which in turn makes it difficult to get any standardized results. Not to mention that the root cause of this whole controversy is the difficulty of even defining what being a good / productive programmer means. Without a good enough definition, how can you even try measuring any correlation to anything? At any rate, so far I haven't heard any compelling arguments on how it would be possible for someone to be a decent programmer but at the same time unable to solve Fizzbuzz. The whole point of the test is that this task - while being a real, concrete programming challenge including fundamental concepts like variables, loops or conditions / branches - is significantly simpler, quicker and easier than any programming task a professional developer is likely to ever encounter in a real job. So I can't imagine how someone who fails Fizzbuzz would be able to solve real life programming problems at an adequate level. Then again, this may show my lack of imagination though, so I am open to counter-arguments :-) Update 

As another angle to @thursdaysgeek's answer, consider how quitting now would look like from your next prospective employer's standpoint. Namely, 

OK so the two options are actually contradicting. What is more, improving your leadership and organisation skills can hardly be done in isolation. Fair enough, you can read some books on it, but to get any actual practice you need to cooperate with others. The other side of the coin is that even if you have read all the world's literature on these subjects, your management must acknowledge this for you to move forward in your career (a communication challenge for you :-) . Both of these boil down to the conclusion that you need management support. So what I recommend is to share your time between the two options. Pick a project for Option B which can be finished in, let's say, half of your free time, then go to talk with your boss. You may introduce your idea similarly to the above, then add that you would like to use part of your remaining free time to improve your communication and leadership skills, and ask for his/her suggestions on this. Prepare some ideas yourself to avoid looking totally clueless, but the main point is to get his/her support, and to get your efforts channeled into your organization's leadership training programme (if there is one). 

I think this is fairly common at many companies, especially smaller ones where most employers, developers included, must juggle many balls at the same time. Only in larger developer teams and/or longer term projects can you really dig consistently deeper into a specific subject or area. However, this situation has its good sides too: it exposes you to lots of different tools and technologies, widening your experience and skill set. This teaches you to pick up new subjects easier and faster, which may give you a distinct advantage in the future when looking for a new job. So embrace these opportunities and strive to get the most out of them. Digging deeper into a technology / tool and becoming an expert of it (above what is explicitly required to do your current job) is not specifically supported by most companies, because - from the short sighted economical point of view - they may not see any direct benefit of it, OTOH it may increase the risk of you leaving them for a better job. (Of course, the rare top-level companies know very well that actively supporting you to increase your competence will bring them better, higher quality, more efficient solutions in the future, and increase your job satisfaction too, making it more likely that you stay with them - this is what makes them top level, after all :-) However, alas, most companies are not quite there. Note though that this depends on you much more than on your employer. If you make a conscious effort to push yourself further in one or more favourite areas, allocating a part of your free time to experiment, study, and/or work on open source / pet projects, you are on your way to become an expert. You may also want to raise the subject with your manager, to discuss how the company may be able to support your education efforts better. In the best case, they may pick you more interesting / challenging projects, send you to some training or conference. In the worst case, your manager may not be able to help you, but at least (s)he is aware of your efforts, which may be a plus for you when it comes to e.g. salary negotiations :-) 

1 as @Journeyman pointed out, these rules are probably even more tedious and frustrating to the IT support guys than for you developers. 

X could remember the time (s)he was not yet so well versed in technical concept A, and the way how (s)he got to the current level. This would help him/her 

One thing to consider is that you are new to the job so you need more stuff to install or set up than your colleagues. It may be that over time as your dev environment stabilizes, you will have less such issues. This may be one reason why your colleagues are more willing to accept the status quo. If this is not the case, the basic question is, why security policy is defined so. Does your company have special security requirements, like a bank, or an organization dealing with classified or sensitive (personal) information? In this case they aren't likely to change their security policy for a relative minority of their employees. Still it may be worth a try, but make sure you do it in a way which doesn't harm your reputation and future career prospects. So instead of telling about your personal frustration, focus on the business aspect of the problem. Being blocked in your work costs hard money to the company. Can you quantify how many hours you (and your dev colleagues) have been held up on average per week / month by these regulations? That gives management an estimation of lost productivity, which can be monetized if multiplied by the average hourly cost of a developer. If this gives a high enough figure, management may take notice and act on it. Another useful measure you can get from the IT support staff by asking them how many and how severe security incidents they had to deal with last year, and how many of these were caused by developers. This might give a justification to the claim that you developers "know what you are doing". If these figures convince management to at least think about a change, make sure that 

In my view, in a professional job we develop software not because we like or need the end result, but to solve our customers' problems. (So there is a notable difference compared to open source development where we are typically solving our own problems, being among the users of the software.) In my career up to now, I have been working on software handling car rentals, SGML/XML document management, mobile network design, airline checkin, telecom data processing etc. - hardly anything I myself could even indirectly use in my normal life. And that's just fine. I found my motivation in delivering working software which solved our users' problems, thus making them satisfied and happy. I was gratified by the smiles on users' or coworkers' face - or oftentimes, when we couldn't even meet face to face, by their emails thanking for the good job I did, and telling how it made their life easier. And even without such feedback, often it was enough to just know that I did a good job, I gave my best, and I produced something I am happy to put my name on, and to think back to later. Although it certainly helps, you don't need to be profoundly interested in the domain, or the end product, of the software you are working on. You can find the motivation within if you look for it. Actually, one aspect of being a professional is the ability to find and keep up your inner motivation of the good craftsman, which ensures you produce consistently good results. (This is not to say you should do just any work you are offered - naturally there are limits to our skills and interests, not to mention ethical considerations like not wanting to work for shady businesses, companies producing stuff harmful for people's health or the environment etc. My point is just that IMHO you may be limiting your sphere of interest too much.) Note also that it is acceptable to apply for jobs you aren't that much interested in, simply to get experience in interviewing, improve your presentation / negotiation skills etc. And while talking to them in an interview, who knows - you might actually get interested in working with them! However, if you are absolutely sure you would never take that job, you shouldn't apply indeed. 

Just write a polite (private) email to the PM(s) in question explaining the issue like you did here. IMO the tone of your post is neutral and nonoffensive, it is not blaming anyone personally, just pointing out the problems caused by the specific behaviour, and the way to avoid them. The only exception to me is the word "hijack", which I would replace with a more neutral expression. A general message template for nonviolent communication could look like: "When you do ..., it causes problems to ... due to ... . You could avoid negative effects by doing ... instead." 

One possibility which hasn't been mentioned by other answers is becoming a Scrum Master. As you are fascinated by people and human interactions, this could be an interesting path, especially if you are interested in Agile software development methods or specifically Scrum. The Scrum Master is not project manager, nor team lead, albeit in some places they can mix the two roles (which may not be ideal, but as you have a solid developer background, it may actually ease your transition). The Scrum Master works on bringing out the best of his/her team, by mentoring, coaching, challenging, motivating, questioning current approaches and ways of thinking etc. Eventually a seasoned Scrum Master may grow into an Agile Coach and/or start an independent consultancy. The other prominent role in Scrum is the Product Owner, this might also be a viable option for you although this may be a less technical role (depending on the domain and the type of product). 

Knowing only what you described above is only (less than) half of the story. Without the other half we can only make guesses. And guessing based on one-sided information usually don't help, rather the contrary. It's easy (and tempting) to make assumptions about the thoughts or motivation(s) of people based on their current attitude or words. However, more often than not our quick and instinctive assumptions prove to be wrong. That person may have had a bad day, a toothache, or you may have reminded him/her to a bad memory from his/her past, triggering a counteroffensive reaction, etc. etc. IMHO it is better not to put too much emphasis on this. You did your best during these interviews, now they are going to make their decision based on that (and a lot of other factors you and us are unaware of). If you don't get called within, say, 3 days, it may be a good idea to politely inquire by mail or phone. Then you will get an answer. If they select you to move forward in the application process, your doubts may prove to be unfounded. If OTOH you happen to be rejected, it may also be of several reasons. They may have simply found a better candidate. Or they have reevaluated their plans and are looking for someone with different skills / qualifications. But if they reject you based on the opinion of a single interviewer who apparently had a bad day, and/or a bad rapport with you and/or is an unpleasant person in general, this is probably not the company you would be happy to work with in the long term anyway, so you may consider it lucky that it ended this fast :-) 

In my experience, this is a very informal criteria which I have never been requested to specifically prove neither in a cover letter / CV nor in live interview. Probably the stories I told about my past work experience were generally enough to convince interviewers about this. To me the point of this is whether you are able to solve problems independently, take the initiative when required and be proactive, as opposed to doing only what you were requested to do, then sitting idly until you get the next task, or following orders to the letter without actually understanding the meaning of what you were supposed to do. To show that you belong to the former camp, you may want to include some short and concrete stories from past experience, and/or positive feedback from customers / management on how you went that extra mile or identified / fixed a specific problem proactively. 

I think the best may be simply to sit down to a friendly chat with the new hire. Start off by saying that you would like to get to know each other better, introduce yourself and your responsibilities briefly, and ask them to do the same. Ask some open-ended questions about their past projects; these usually give you clues to her approach to management, but feel free to ask more targeted questions as needed. Keep in mind that as much as you are curious about them, they are equally curious about you, the new colleagues and environment, their new roles etc. so make sure your discussion is not one-sided. You don't mention your current position but from your post I assume you are going to be their supervisor. In this case make sure there is someone to help them with their questions and daily problems, and mentor them throughout the first weeks / months - it may be you or someone else - and let them know who that person is. You may also want to walk around the office to introduce them to their new colleagues - this gives plenty of opportunities to chat and get to know each other better. 

If you are thinking about some standardized test which can be evaluated automatically, the answer is no, and there never will be. Even though a lot of hiring managers seem to keep looking for it in new and newer flavours, that doesn't make it any more realistic. Which is not to say that such tests are totally useless, just that they should be applied carefully and in the right context. As most of the answers here point out, even during a really trivial test like Fizzbuzz, there are lots of subtle considerations which require human experience, practice and judgement to decide correctly. And being a good developer takes a lot more than passing the Fizzbuzz test. Sheer coding is only a small, albeit important part of the SDLC. Not to mention that it's not enough if the candidate is a good developer in general: (s)he must be a good developer in the actual team which is looking for a new peer. The same guy can be a perfect fit in one team and a complete failure in another. A worthy, albeit subjective :-) read on the topic is Joel Spolsky's Guerrilla Guide to Interviewing. It has some say related to tests too: