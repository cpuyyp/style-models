Feedback The code looks pretty good. The Javascript code waits until the DOM is ready, then caches references to DOM elements in variables before using those variables in the functions later on. I initially thought some of the CSS could be consolidated (e.g. many common styles under and but then I realized that might be tricky with the SCSS... 

I know it doesn't really cover the find or some methods, but these functional JS exercises are pretty educational. 

Taking that one step further using more partially-applied functions, the callback function of the inner can be pulled out to a separate function: 

See a demonstration of the matching here in this playground example. Useless variable In your method there is a variable that gets incremented each time. If you needed the count of each line, the variable (from the statement) could be used instead (and added 1 to)... 

And the same is true for . deadOrAlive() Because checks 3-9 spaces around the given cell, I see cases where it returns values greater than 3. Should have logic in those cases? It appears that it only has logic for return values of 2 and 3. Updated snippet: 

I was able to get a faster (in Firefox that is - maybe not in Chrome or Opera) approach using forEach() and findIndex(). Here is the performance comparison tests. 

Bear in mind that the object would thus be passed as the start parameter to . ParseInt without radix I see one line that parses the response from the user: 

The block can be removed as well. SelectListElement.value I haven't heard much on this front lately but typically to get the value of the selected option in a select list, one would need to use the property, like this: 

Then in that nested function , did you ever see the first conditional (i.e. ) have a truthy value? I tried running it a few times but never saw that occur... 

Average calculation issue The example data happens to be a 3x3 matrix of values, so the calculation of the average appears to be correct. However, try using a 2x3 matrix of values (i.e. remove the 3rd sub-array of values) - it should become clear that the divisor used in the calculation of the average is incorrect. One should divide the sum by the number of readings corresponding to each key, not the number of keys in each sub-array- i.e. divide by instead of in the callback to . Original Array Modification le_m is correct with the statement in the comment: 

One technique would be to apply fundamentals of event delegation by adding a method to handle all clicks. For instance, an event listener could be added to the root element (or one if child its child nodes, like a ) 

Or apply a class name to those elements and utilize that class name in the selector. Also, the width of the container (i.e. ) can be moved into a rule-set. JavaScript Declaring the Constant The idiomatic way of declaring a constant in AngularJS is to use and use dependency injection to inject that constant in the controller. 

It is also advisable to cache DOM lookups instead of performing them each time. So when the page loads, it might be best to store a reference to each input in a variable (or, if using es-6, a constant using ). See the expandable snippet below for an example. 

Obviously that will likely result in extra parameters tacked onto the URL (e.g. , ). You could update the select query to specifically select those fields: 

Response xReprisal is correct - it appears that the user input is not used in the database queries; the query appears to simply select all rows from one database table. Feedback PHP JSON encoded array I haven't used ArrayObject::getArrayCopy() before but see it returns a copy of an array. Why return a copy of the array? Why not just return the array? It isn't like the array returned is modified by the code that calls that method - it merely is used in the response... Also, it only accepts an array or an object, so in the case that the controller method returns an empty string literal (i.e. when the call to returns a value evaluating to ), an exception is thrown with the following message: 

and the messages could be stored in a mapping (i.e. an array), with the index (starting at 0) of each message corresponding to the result : 

Adding Scroll handler One can use window.addEventListener('scroll') also to add a scroll handler - that can also go in the callback to theDOMContentLoaded event. This allows for multiple functions to be called during a scroll, unlike assigning . 

Form validation One option to simplify the code that validates the form field selections is to utilize the HTML5 feature form data validation. Basically, adding the required attribute to all radio buttons (well, at least one per group - see this SO answer for more context) should suffice. With that, the form submit callback function (i.e. can be simplified to merely calling in the line that shows the alert. Cache DOM references DOM lookups (e.g. ) are expensive, and should only happen once per element or set of elements. It is wise to store those in an variable (or constant if you want to use the es6 const). Checking number of correct answers Instead of having the function loop through all inputs, just to see if each is checked and if so, if the attribute is included in , the function could simply iterate over the correct answers and check if the associated input is checked. For a small application like this, the difference between 20 iterations and 5 is small, but it would be a big difference in a larger application. Alerts As Blindman67 advised in a comment on Tushar's answer: 

The layout of the game components is okay, though it would be helpful to have more text prompting the user what to do, or at least the rules and game play instructions somewhere (e.g. in a text box, linked to another page, etc.). In the same vain, I see an uncaught exception in the console if the user clicks the dice when it isn't time to roll. One could catch the exception and alert the user about what happened.