As suggested multiple times on this SE, you should almost always refuse raise offers while leaving. Trying to trick your employer into giving you one is a very bad move. Two things could happen, according to company needs: If you're considered valuable the company will try to keep you on board, and offer you that raise. The main consequence here is that you will start a process where you'll be made less and less valuable, in the case you actually leave in the future. You may also lose a lot of reputation for wanting to leave, and even be let go in the future. If you're considered easily replaceable (this is probably the case as you are just 6 months into the job) your boss will thank you for your work and tell you to pack your things. If you then back down you'll look like a fool, and actually leaving for another job will be your only remaining option. If you really think you deserve a raise, just ask for it. Prepare facts and datas for WHY they should give you a raise, and if you're worthy (and the company can afford it) you'll get it. 

There are a few delicate topics that are better left out of the office altogether, like politics, religion, gender issues, and more in general all things someone may ave a strong idea about. If you fail to divert the discussion to another topic, the best option is almost always leaving. You handled the situation correctly, however it seems that your manager is promoting this kind of "toxic" conversation topics almost intentionally, and this behavior may result into problems later on. Next time the conversation seems to switch to politics, try to discretely move out before it breaks into a fight. Even refusing to speak might convince your manager that your ideas differ from his, so it would be better to stay out of this altogether. 

While the exact sentence you used could surely raise a red flag for the interviewer (I don't know if this guy is gonna stay with us for long or if he's gonna leave the next time other "personal reasons" arise), a single word can really change the meaning. "I left for exceptional and personal reasons" or "I left for unforeseeable personal reasons". This shifts the matter on the fact that those reasons were in fact one time only, and while this may raise curiosity in the interviewer, it should not alarm him. You could also add that it was a coincidence of various personal factors, just to reassure him that this isn't goig to repeat again (or at least that you don't think it's possible). If the interviewer presses you into revealing those reasons, just be honest and direct: "I'm sorry but this is a very personal matter, and I'd prefer not to speak about that." (at this point is usually a good move to introduce a new topic yourself and try to move the interview forward, as waiting for a response may stall the interview) 

You should NOT escalate it, unless there is a productivity problem. You're new in the company, so playing games if you have nothing to do may be the accepted norm, or some sort of unwritten rule. Do your colleague deliver everything on time, is professional when needed, replies to mail in a way that lets you do your job smoothly? If yes, then you have no real problem, and you should avoid taking this moral crusade against the guy. If you seriously want to do something about it, try to have an informal chat with him (without being aggressive). Maybe just making him know that he has been discovered will be enough to reduce his gaming hours. Be extremely careful with this approach, as it's easy to anger a person by making him notice his mistakes. EDIT: If this actually becomes a productivity problem, you should report the exact problem (missed delivery, not replying to questions..) to management, and let them do the rest. Do not mention gaming unless specifically asked. 

How to approach the "customer" (your employer) If they asked you to do the job and you honestly told them what were your capabilities, you have nothing to worry about. Throughout the following months try to keep them informed on your progress and immediatly tell them if you have some kind of problem that will slow you down. You just have to be sure that everyone has the same expectations, and you don't deliver an underperforming product to an overestimating customer. Being confident Keep your resolve and be confident in yourself. Nobody was able to make a fully working and well written software right from the start. Learning will probably be slow at the beginning, and you WILL find obsacles. Don't lose hope and slowly grind your way around them. When you will be done, you'll think everything was a lot easier than you initially thought. Practical tips Learning a language If you never touched any programming language or GUI tool, choose the one you think is better suited for the job (based on languages supported by the libraries of the instrument you're developing for) and try to put up some simple example program, a small CRUD application with a backend of some sort will show you the most common problems and pitfalls for a beginner. For example, you could try developing a small app to manage your friends addresses and contacts. If you have no tight time constraint, don't be afraid to try, fail, and try again. Learning from your own mistakes is extremely important for a developer. Keeping your code clean There is lots of documentation on the internet about this topic, and learning how to divide and reuse your code will surely make your life easier. As a rule of thumb, if a method/function doesn't fit in your screen or a class has more than 7/8 methods you should probably ask yourself if the method/class isn't doing too much, and if you should move part of your code somewhere else. Having well organized code will reduce the chance of bugs in your final product, and will make it easier to fix them or add new functionalities if they ask you. Asking lots of questions and reading lots of examples Websites like Stackoverflow are born exactly to help programmers share their knowledge and get better at their jobs. Most basic questions already have an answer there, expecially for more popular languages. If you don't know something, don't be afraid to ask. 

During my work there are a lot of small pauses, mostly due to outdated/clunky tools and PCs. These pauses range from 10s to 1 min long, and it's really hard to keep focused on my work while being interrupted 5/6 times in a row. I already brought this up with management and tried to automate all longer processes, but I'm now at a point where the only solution is buying better tools or hardware. For example, I just had to copy a file from a network folder, and since we don't have gigabit ethernet it took about 90 seconds. Management already denied buying other tools, as we are a medium-big company, and updating tools would require a major effort. My productivity is high enough and this is not a huge problem, however I feel I could be a lot more productive in a proper environment. How can I deal with a large amount of medium-small interruptions? At the moment I'm already switching to other small tasks, but I take a lot of time to refocus again on what I was doing, and this is less than ideal. 

You handled the first few interactions fine, but you should act immediately to prevent this to transform into a badmouthing contest that worsen morale in the office. The first thing to do would be to have a direct chat (or better, email him to have a record of the conversation), asking if he thinks there are problems with your behavior. Try not to be confrontational, as you should aim to avoid any kind of personal fight in this phase. If he is somewhat reasonable and is not actually mobbing you (maybe he IS just joking), this should solve the problem. Ideally he would state his concerns of you leaving too early and you would reply that your productivity is top notch (it is top notch, right?) and you don't feel that working extra hours would change anything. If he IS mobbing you, don't keep trying to change his mind. This would only lead to an unnecessary fight and worsen the situation. Escalate the problem to your boss instead, and let him handle it. Remember that, by badmouthing your productivity, the PM is also indirectly badmouthing the ability of your boss to handle his underlings correctly. In the end, this is not a matter that you want (or should) try to solve alone, and making recurrent jokes about productivity could easily lead to a big inner fight. 

First of all, you're trying to focus on your work, so there is nothing wrong on telling someone else to wait until you finish what you're doing. A polite "Sorry, I'm really busy right now, could you please ask me later/tomorrow morning?" should suffice. Repeat this until she understands when she should bother you and when she shouldn't. Alternatively, try to shift her towards other means of communication, for example emails. This way, you can take your time and reply her whenever you see fit. If all else fails, tell her explicitly that you're available for questions in the morning and shouldn't be disturbed in the afternoon. Again, you're working, and if something is hurting your productivity it's in your best interest to deal with it in clear and concise terms. 

You have two problems, the first one being that you have nothing to do. That problem is easily solved by asking your boss "Hey, I finished task X, on what should I work next?" The problem of his unfinished code could come up naturally from that. If that doesn't happen, try asking him in a way that won't sound aggressive, like "What about part Y?". Also, sending a mail about something closely related to your task is almost never rude, and you shouldn't be afraid to do that. Work is work after all, and people won't come blaming you if you're just trying to do your job. 

Since your boss is willing to pay you, this would be standard paid overtime. You should evaulate yourself if this overtime requires additional commutes or expenses, and try to come to an agreement to find an ideal compensation for external problems caused by this short additional work. You should also check your employment contract and see if there are regulations about overtime (this may be job and country dependent). As the work isn't much (5 minutes is really nothing) I would just do the work and be paid for it, unless it really messes up your day schedule. Refusing may bring a lot of negative reputation and consequences, while accepting might show that you're a reliable and committed employee. 

I'm considering moving to another town for family reasons, and this would take me too far from my current office. The new town has a severe lack of job opportunities, but there is a branch of my company relatively close to where I would live. How can I ask about the possibility of an internal transfer without giving the impression that I would just leave if not given what I want? 

The way I'm managing this at my current job is by turning my anger into satisfaction. Every time I place my hands on bad code, I try to leave it into a better shape, or at least leave a few TODOs and comments with tips and tricks for those that will come after me. Will they keep writing bad code and ask dumb things? Probably. Will I keep fixing things as much as I can? Sure. After a couple of years you will look at your codebase and feel great at how much it improved with your efforts. Don't wait for change, be the change. 

First of all, track everything you say to them. Always prefer sending them emails instead of calling them directly. This way you're covered in case your manager asks you why you're taking so long do develop something. Second, ask your manager. If you have a problem you think can't solve and still haven't said that to your manager, do it immediately. Chances are he can tell them to give you what you're asking, or give you something else to do in the meantime. If your colleagues don't cooperate, the only way you can remove that bottleneck is by acquiring that company specific knowledge yourself. Copy the repository on your machine and delve into the code, try to refactor methods and understand how and why certain things are done, add or remove functionalities, mess around untill you're confident on how everything works.