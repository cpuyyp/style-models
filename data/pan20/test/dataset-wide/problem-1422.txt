When modifying the index, you can use the modulo operator to make sure that it is within the bounds of the array. Here is what I would do: 

Edit: In the comments below you asked for a cleaner way for the user to see every step, you can accomplish this by using a callback . Then you can modify your code to: 

Yes, some of the things you are doing is redundant and quite messy. As this seems to be a homework assignment I will only provide hints for you here. What you can do is: 

doTurn As suggested above, this method should take the parameter directly. At the moment, this method does a little bit too much and contains some slight code duplication. 

If this is also considered too complicated, it might be because of your array and your bitmasks. Not everyone are fans of bitmasks. You might want to consider making this bitmask-stuff a pure Javascript object with some sensible names and properties instead. For example instead of you can just have Additionally, it is not clear what is at all. I think the language is some Eastern-european language (my best guess would be Polish), but what it means or is used for? No idea. I'd personally recommend using English variable names but if you work with people that does not know much English, I understand that that might be hard for them. 

Yes, you really need to use loops and generalize this! In order for you to learn the most, I won't give any exact code but I will tell you a bit about what you need to do 

Then you computer the of the digits in this array, so for example if is , then that part counts as . Then the result is how much more you have to add to make it evenly divisible by 10. For example, if then the result is as . 

Finally, I personally prefer a little bit more space when there is a whole bunch of annotations and fields together. Such as the following: 

As for the approach itself, I think using a for loop to count the variables "old-style" is better than using as it doesn't involve creation of any new objects. I believe Code Hunt doesn't score the actual run-time performance here, I think it scores based on which kind of code you use for it, whether or not you use a for-loop and such. You said that the level is called so one would expect loops to be used. When it comes to performance, I believe rolfl's code is more efficient than the . 

Use on methods whenever possible, such as for in . Speaking about in , it is not needed at all since all it does is call the super method. 

Use Strings.xml also in the method. You're using it at other places, but you should use it everywhere possible (Except for stuff) 

Formatting USE PROPER INDENTATION - Please! If you're using Eclipse, press Ctrl + Shift + F. If you're using Netbeans or IntelliJ, press Alt + Shift + F. If you're not using any IDE, start doing so! 

If you want to ignore the requirement of using a , you could use Java 8 Streams to solve the problem. 

Private, final, and constants There are plenty of instance variables in your code that could be private, final, and possibly static. 

Additionally, your class is called which I just have no clue what that's supposed to mean. I'm also not sure why it . Also, your method can be 

Note that I'm using here so that the case of all three having the same value gets handled correctly. Now also there's an early return so we don't need all these . 

This approach is essentially the same as @rolfl's, but his way of using streams totally beats this. (I think, until someone benchmarks) Either way, using a and a inner class is a bit (ha-ha) overkill. Back to the topic of... My approach did cause a break in your unit tests though, which leads us back to the topic Choice of datatypes and Don't be dependent on the implementation of . When I used : 

Which, if we always use as the first operand and completely ignore whether or not or (and again, is not handled here) we get: 

What you already have leads to the least code-duplication. It's clear what the "default" margin is and then you provide a specific margin for margin-left. I would definitely stick with this: 

This significantly reduces the code duplication. Another suggestion here is to use for your board, where contains both the color of a and also the and position of the tile, and use a in your recursive method. This allows you to call that method without having to create new objects all the time. 

In the comment you refer to the perimeter of the triangle, but in your code you don't use the actual perimeter. This is very small code duplication. Your code would be a bit more self-documenting if you would do: 

This is a part of my Factorio mod Visual Signals. This code takes a numeric value as input and returns a string for the value, for example: 

The overall quality of your code is very good. It is, at least in my opinion, perfectly fine to have an enum containing the strategy implementations. A few comments and suggestions though: 

As you can see, the number of calls to the method increases dramatically, of exponential order. This is because you are using a recursive approach to the problem that often creates a new "branch". So, how to speed this up? Let's take a look at some of the output for the value : 

This is especially useful for values you change often without caring much about the actual value at the moment, such as changing a player's HP. (I personally often call methods such as or ) Designing an Inventory and Items I think you should look at how the API of Bukkit (the Minecraft server) has been made. Bukkit have a class for ItemStack and also an interface for Inventory. You can probably find a lot of inspiration from Bukkit, although you probably won't even need half of it. Here are some example classes that I think you could use: 

When using a Set, it is extra important that the elements in the set has properly implemented and ! (Or are using the default implementations inherited from the class) Cleanup I suggest you override the methods of a to clear the collection. 

Thanks to marking the as final in the method declaration, it is accessible also from the inner class. You can now use this like: 

This code will continue looping while there is a parent available. Note that the new parent uses the same variable as the previous one, this is an important part in making this loop work. Other suggestions: 

Let the be responsible for that, and save the actual values as instance variables, instead of using . For example, instead of exposing , expose these: 

I am not sure how it all works out when running it, but it is a bit suspicious to me. Perhaps you would want to parse the text as a double (set it to if it's not a number), check the value, and compare using the value instead of the text. Just an idea though. 

And your removed as well and all references to it replaced by . Your already implements , I see no point in wrapping those calls inside this class. 

Generally when using 2D grids, I find a method to be extremly useful. In Minesweeper, I prefer a method rather than a check, as checking if it is a bomb is a common thing to do, and if you want to change to be a matrix of , then it's much easier to perform that change (although then you should make a method in ) 

By not declaring it final and not using a call to it is mutable, and it would be possible to modify the reference using reflection or to use on the map. Declaring it as final makes sure that the referenced map cannot change and unmodifiableMap makes sure that no changes can be done to the map itself. Multi-threading issues. As it currently stands, if two threads would call the method at the same time you would initialize the mapping twice, which is not needed. 

Yes, there's room for a lot of improvement here! First of all, you can "break early" to avoid excessive indentation. Since terminates the script, you can check if the file is not valid. Secondly, instead of ing first and later, you can call with a parameter. This code works in the same way, but is cleaner: 

They could be , , or etc. One thing that you might want to think about is the implementation of and . Let's say that you have a version and you bump the major version, does the next version then become ? In your code, yes, but in reality that becomes . So your should return and should return , so . Besides this, again: Very well done! For fun, I'd recommend that you implement support for classifier versions, like , otherwise I'd say you're ready for more complicated challenges because this one was apparently way too easy for you. 

There's no need to return one of the parameters to the method when the parameter is mutable and is being modified. 

It's often a bad practice to import everything in a package. this will clutter your IDE's Ctrl + Space functionality, and makes it harder for other people to see exactly which things you are using from a package. 

The idea is to replicate the same way Factorio show signals in the circuit network. The code works by determining a prefix, which simply is a potential minus sign. It then determines the middle part (the numbers and potential comma separator to use) and the suffix (the letter at the end). The code seems to work perfectly fine and now I simply wonder: Can I improve this code somehow? 

Note that "option b" might not do the exact same thing, as it lacks which means that the margin-left can be applied from elsewhere. 

I have no clue by looking at these lines what is and what is . I strongly suggest you rename your variables to and , or and instead. is slow You are currently looping through the cells until you find one that matches the . This is slow. As this is only called from , you can instead have return a . Or even better: to make the lookup much faster, because: 

After all digits has been processed, print them in the order they should appear (higher valued digits are put later in the tape, so loop the tape backwards and print the digits). Code: 

This allows it to be filtered with adb's command. What good will calling do? It won't tell the user anything at runtime. Consider creating a dialog window that says what went wrong instead of simply printing the stack trace. 

I would actually, not care much about the right aligning there. This is just my opinion though, I am not aware of any conventions regarding this. If you like it then feel free to continue doing so (for now at least). Inconsistent Spacing. Compare 

Extract the query string to a variable Extract a method, which takes the params as input and performs the query Extract a method closure. (Very similar to extracting a method)