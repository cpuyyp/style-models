What I have so far seems to work fine, apart from the aforementioned issue, though the amount of code for what sounds like such a simple function is far above what I'd hoped, so I'd really appreciate any ideas on how to reduce it. 

And you can delete the rest of your class. Edit: Using the new method would then allow you to add pieces of text at the specified points in your message, so your validation method that returns a State would use it as follows: 

For reading the file, personally I would use std::getline, then split each line into a vector of "words." First of all, this would it easier to check whether to count something as a word (I think yours breaks on contractions.) And then you can just loop over each character of each word of each line for the small stuff. Misc. 's gets called by the destructor when it goes out of scope. No need to do it manually here. Your output says you have 4 sentences. You have 4 lines. Several more sentences. There's probably not much to do about it here, but whenever I see a whole bunch of variable definitions grouped together, my first thought is to move them closer to where they're actually used. But again they're already about as close as they can get here. You never use . 

If the code will be distributed, read or maintained by others, you might want to look at your naming conventions as they're a bit inconsistent, for example sometimes you use underscore separated names such as , but other times you use sulkingCamelCase such as and in class case. Either one is fine, as long as you use the same throughout. Aside from your single line getters and setters, the function names you've chosen are not always indicative of what the function does. Ideally you shouldn't have to read the actual code to know what a function does, consider these changes: 

This is a Date class I made for a hobby project. It does not deal with time at all; that is, the smallest unit of time it considers is one day, and no concern with time zones. Where I do most of my coding, I'm not allowed C++11, so if there are any new languages features that would apply here, I am definitely interested in hearing about it. I'd also like to hear about the overall design of the class, or any edge cases I may have missed. Date.h 

Then you can have your validation method return a state, and you can do your checking block after, like this: 

There's a few changes I'd suggest to insert, firstly as the second parameter has to be an array, you can use type hinting to indicate this: 

There's a couple of issues with it, for start your nested if blocks are unnecessary: instead of manually checking and returning true or false, just return the result of those methods, like so: 

This way, you don't have to override every time, and you also don't have to put "ERROR" into the actual text of the exception. 

First, why do you need this to be sorted? Second, I suspect resorting the list every time you add a new element is wasteful. Of course, it will have no noticeable impact in a program this small, but it is good to be mindful of algorithmic inefficiencies. I/O: To improve flexibility, avoid hard-coding pathnames. It would be better to accept them as command-line arguments. You could use the hard-coded names as default values if the user doesn't supply an arguments. This is helpful if, for example, you want to use a script to run your program against a lot of input-files as a test of some sort. Error handling: If you are going to hardcode file names, it would be good to make that clear in your exception text. Right now if it can't find the dictionary, I will just see the message "file not found", and I have no way to know what you want without opening the code. Including the name of the file not found in the error message will make the program easier to use. 

Another thing you should be careful about is ing the same thing over and over, as it's usually unnecessary and can be replaced with a which will ensure that it's only loaded if it hasn't been in the current session. 

Additionally, you have made and into optional parameters by making them auto-initialise to empty arrays, however you cannot have an statement without specifying at least one field and value, therefore instead of making them optional array parameters, you should use type hinting to ensure they are arrays, and then check to make sure that the arguments are correct before you send the query off to the server, something like this: 

About . It's best to just do, e.g., etc each time. There's a lot of stuff here, and even in this example it would have made it easier for me to see that was built-in, and not something you wrote for this. Variable names: If your name is two words put together, you should use either or consistently. E.g. -> . I'd find even more readable. Some people would even say you really ought to make it . also ought to be more descriptive. Arrange your code logically. First you declare . Then you declare . Then you declare a lot of other stuff. And finally, you make sure opened correctly. Doing all the stuff in one place makes it so much easier to read/fix later on. E.g. 

And manually implode some queries with it. To make it generic, have a method which removes vowels in this way, such as: 

I don't really like the method of exception pseudo-typing you're doing, I'd use different objects to represent the type of exception rather than the content, like so: 

I would also avoid using regexes or any kind of manual string parsing, you can do it all with and , thusly: 

The first thing that jumps out is all the Strings you have which are reused throughout, those need to be removed and ideally put into constants so you only have to change them in one place if you ever need to rename them: