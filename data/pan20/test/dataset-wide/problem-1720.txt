It would be better (and easier) to simply rewrite the sender's address; this will have the same effect, as well as doing some hiding of the internal topology (e.g. the sender won't anymore be something like ). You can easily rewrite the sender of all outgoing mail with . For instance, to change the sender of all outgoing mail to : In : 

It might have been subscribed with the old style . Or it might not have been subscribed at all, in which case won't work. In either case, if you need source RPMs for RHEL 6 you can log in to your Red Hat account and download them manually in addition to FTP. Note that RHN is going away and you need to migrate the system to Subscription Management. 

Sorry, but CUPS is the only thing out there for Linux right now that supports what you said you want to do. Big or small, it's all you've got - as far as software goes. If you can't use CUPS, go buy a cheap print server (or an expensive one) that supports IPP and plug the printer into that. 

First off, I get my stateless autoconfiguration just fine, as well as my privacy address. The privacy address works on the global Internet, which I confirmed by visiting my IP address tool in Google Chrome. So we start fiddling. First, the GUI doesn't provide any configuration options for IPv6; see that "Properties" is grayed out. Everything you might want to do must be done from the command line. The suggestion from @MikePennington doesn't work because this command isn't supported on XP at all. It requires Vista or later. The so-called Advanced Networking Pack for Windows XP can be downloaded for SP1 systems, but this functionality was included in SP2 and whatever it provides should be available already on any SP2 or higher system. Once installed, an command becomes available, but it doesn't provide anything relevant to disabling neighbor discovery. Unfortunately, Windows Firewall on XP doesn't distinguish between IPv4 and IPv6 connections, and so it's impossible to select ICMPv6 messages to block in the firewall. This rules out any Windows Firewall workarounds. Finally, XP doesn't even support DHCPv6. IPv6 itself has matured since this code was released in 2003 (and Microsoft seemingly never updated it on XP) so it is limited by what was known about IPv6 almost ten years ago. As far as I can tell, IPv6 support in Windows XP should be considered "technology preview" and not used in production, or at least used with extreme caution and full understanding of its limitations. Of course, XP is nearing the end of its useful life at this point, (and some would say it already passed the end of its useful life) so if you can upgrade the box, that's probably the easiest solution. TL;DR: Look at the pretty picture. Weep. Upgrade to a current version of Windows. 

Ah, I see an obvious problem with your zone. You don't have address records for your two nameservers, ns1 and ns2. You need to have them both in your zone file, and in GoDaddy's control panel as glue records. 

The first of these accepts all local traffic, on the interface, regardless of its IP address. The second one accepts all traffic from 127.0.0.1, regardless of what interface it arrives on. In this case the first one is clearly better. In the first case, local traffic doesn't necessarily use 127.0.0.1 as its IP address but you probably want to accept it, (the best known of these is Debian's odd 127.0.1.1, but it's possible for global IP addresses to be attached to ) and in the second case, someone could send you spoofed packets with 127.0.0.1 as its source address and you probably don't want to accept that. Second: 

You installed PHP from the repository. It is disabled by default. You should re-enable this repository if you want to install further PHP packages from it. 

You could do it, but you are going to run into performance problems first, and security problems second. Having a "normal" high performance web server answering on port 80/443 and proxying requests to your app server is the way things are usually done. The "normal" server can handle things like static images, JavaScript and CSS much more easily than GlassFish, improving performance. It also will have numerous options for access control, caching, etc. The Internet is full of sample configurations for setting up a web server (e.g. nginx or Apache) in front of GlassFish, Jetty, Tomcat, or whatever app server you want to use. Depending on whose EC2 AMI you use, one of these web servers may already be pre-configured and ready to go. 

What you're wanting to do is not really what the fsid is intended for. The fsid is meant to help uniquely identify filesystems which may not have their own unique identifiers, such as clustered filesystems. Among other things, this helps eliminate hung systems due to stale NFS mounts by letting you repair and re-export a failed filesystem from a different device, setting the same fsid for the repaired export. If a filesystem already has a UUID, it would be used by default. Otherwise NFS uses the major and minor numbers of the device node, which isn't very useful when you are exporting a clustered filesystem. So for these you would need to explicitly set an fsid. The fsid is set on the NFS server, and while it's used on the wire, it is not necessary or even possible to set it on the client side; the client will pick it up on its own. 

You can just forget about setting aliases anywhere, if you use something like Avahi. This lets your workstation and servers (even virtual ones, if you bridged the virtual network) find each other and address each other by name. 

Here we see that the connection was received from 108.162.221.19, one of CloudFlare's servers. If this were blocked in iptables, then CloudFlare would not be able to reach us (from that address; fortunately they have many others). The connection to CloudFlare actually came from 64.244.153.130, which is what appeared in the X-Forwarded-For and CF-Connecting-IP headers. Unfortunately in this sort of setup, this means you can't really use iptables to block visitors. You do have a couple of options, though: 

You have a dedicated server with OVH. By default these boot an OVH-provided kernel from the network, not the kernel installed on your server. You need to change the configuration of your server, in your OVH account management web pages, to boot from the hard drive. 

Plug USB hard drive into USB port. Mount USB hard drive, e.g. at . Copy the hard drive images. For example: 

"Couldn't resolve host name" for something well-known that should be working, is a pretty obvious indicator that something is wrong with your DNS servers. Check and change them if necessary. 

Time to check your disks.... Since it's a (most likely leased) VPS, you can't really check the server's disks, though. You may have to ask the hosting provider to look into it. 

Running anything other than the latest release of your major version of Red Hat Enterprise Linux is not supported unless you have also purchased an Extended Update Support subscription for the server. You can set your preferred release level using the tool. There is no supported way of doing this if you registered with the legacy RHN. 

EL6 already includes Intel graphics drivers. You don't need to do anything unless you have a specialized need that requires you to replace the system graphics drivers. (You don't, or you would have mentioned it already.) In particular, the i915 driver included with EL 6.3 already includes support for your Ivy Bridge graphics. 

This is called an email relay, and any mail server can do it easily. A setup with Postfix, the usual default mail server, is as simple as installing it from packages and then setting in to the IP addresses of the machines allowed to send mail through that host. 

This means the files directory you use for uploads should not be under the . Of course you have to specify its location in if you already completed the installation. 

Ethernet and InfiniBand are two completely different and incompatible layer 2 protocols, for one. That's certainly sufficient. Don't confuse the physical media (layer 1) with the wire protocol (layer 2) that runs over the physical media. 

You're showing a log entry from McAfee Web Gateway. It shows an attempt to access $URL$ which is a very common thing for Windows computers to do. Windows checks this URL and one other URL to determine Internet connectivity. The interesting thing about this particular site is that it only has an IPv6 address. It does not actually have an IPv4 address. This allows Windows to detect IPv6 connectivity independently of IPv4 connectivity. 

Yes, you should reboot. Glibc provides the C library used by virtually every program on the system; all must be restarted in order to use the newly installed version. 

Someone else will probably think of something complicated involving but I think I have a very simple solution for this. Your application caches files using the URL path, without query arguments, as the filename. If the requested URL has a query string, you don't want to use the cache. nginx has a variable which is empty if there is no query string, or contains a if there is a query string. You can simply incorporate this: 

A quick Google search indicates that you also need to explicitly allow outgoing calls in your Skype account profile. For reasons I can't even begin to guess, this seems to be disabled by default. 

Outgoing SMTP on port 25 is blocked by default for all Digital Ocean users. You'll need to contact them if you want it unblocked. 

Pay for your Red Hat subscription and register the machine on Red Hat Network. Use a RHEL clone such as CentOS. 

If your ssh service is open to the Internet, then you need two-factor authentication (8.3). This requirement applies to any account with access to any system on which cardholder data is present (except for accounts which only process transactions and only have access to the data they're processing at that time). You should also have two-factor authentication on your internal network (8.2). The ssh key counts only as one factor, (something you know) even if it has its own passphrase. This requirement will be missed by an external scan since it can't be tested for. But auditors who visit you on-site should look for it. 

Since nobody has yet explained what is going on: Apache cannot bind to the local IP address you gave, because the computer is not configured with that IP address. There are a couple of ways to solve this: 

You installed the EPEL repository for EL6, but you are running EL7. Remove it and try again with the correct EPEL version. 

You need to set the appropriate SELinux boolean to allow the web server to communicate with remote databases. 

Try using firewall rules to restrict IP address usage to the user assigned to them. For instance, let's say that the user bob is the only person who should use IP address 203.0.113.48. His user ID is 503. Then we will deny any other user ID to make outgoing connections using that IP address: