I see this as a cultural fit question, and to answer it I would take the reasons you want to leave your current job and restate it as a positive. For example, a few jobs ago I was unhappy about our (lack of) development process and how every release went out late. What I was looking for in my next job was a company with more structure and discipline, where I could feel proud of what my team built instead of embarassed that we were delivering late again. I believe they're asking what kind of company/development process/team you want to work in. Personally I would be completely honest about what I want in a job because I think it's a waste of time to take a job where I would just be unhappy. On the other hand, if you really just need a job right now you may want to focus less on your ideal job and more on convincing that company you want their job. You can do that by figuring out what kind of company they are (a little research before applying and asking questions of your own throughout the interview process helps here) and then saying you want to work at that kind of company. 

At my work we do tests that are both timed and take-home. That is, we arrange a time with the candidate for one of our developers to be available in case they have any questions, the candidate confirms they've started at the agreed time, then they email their results to our developer when their time elapses. In your case if an in-office test is a possibility, why not just ask the candidate whether they would rather take the test in your office or from home on their own machine? It's a little more work to arrange a timed test outside the office but I think it would be a good compromise. 

Not only is that a lie, it's not even a good lie. Absolutely nobody starts the hiring process without having some idea how much money they can spend on that new hire. Even if they start with a broad range, by the time they're ready to make an offer there are only two real options: they have some idea what you're worth, or they don't know what they're doing. Running a business means your employees need to make you more money than they cost or you will go out of business (probably sooner than later). If you want to stay in business, you can't hire people without having any idea what they're worth. That said I'm going to refer you to patio11, he knows more about salary negotiation than I expect I ever will: $URL$ I believe the most relevant part of that 7,000 word post to this particular question is: 

Block her phone number and email when you leave, and change all of your passwords and/or delete all accounts that you're able to. You can't do anything for her if you don't have access anymore, and you shouldn't have access if you don't work there anymore. If possible, arrange to have a coworker change all the passwords you had to new ones that you don't know. Having her lawyer threaten former employees is purely ridiculous, they shouldn't still have access to any resources at their former job anyway. I think you can safely ignore anything that ridiculous. And for the love of god find a new job. There's plenty of advice here and at askamanager.org about searching for a new job without letting your current job know you're looking. It's not a terribly unusual situation, reasonable employers are going to be willing to meet with you outside of your working hours or during your lunch break. 

Totally true, smaller companies tend to be closer knit. If you prefer a sharp separation between work and the rest of your life, you would likely be unhappy on a small team. Another potential issue with a smaller company is how financially stable they are. It's not exactly unheard of for startups to abruptly flame out and fold, after all. If you do end up interviewing at a startup, it's totally reasonable to ask how much runway they have. If they get offended by that question, that is a gigantic red flag and you should run away. 

Don't forget that you're interviewing the company just as much as they're interviewing you. If they don't respect your time now (and mentioning "rather time consuming" coding projects suggests they don't), it's only going to get worse once they're actually paying you. 

Two things. 1) tell the recruiter that you need to postpone those interviews as tomorrow is too soon, and 2) if you even still want to work with that recruiter, tell them they need to ask you if you're available, not tell you when you have an interview. I'm not sure the recruiter you heard from is very good, it shouldn't be any sort of surprise to them that people have lives and are not always available on a day's notice. 

Holy crap that's awful! I'm pretty sure that's extremely illegal, but definitely consult with a lawyer. 

Yes! You should have code samples (but not of code you wrote at work unless you have permission in writing from your employer - that code is theirs, not yours) regardless of anything unusual about your current job, it can't hurt you to have them handy and might help a lot. 

Problem solving is a huge part of software development and that's a great transferrable skill. Problem solving is useful pretty much everwhere. Definitely emphasize how you were able to take an intimidating, complicated task and break it down into manageable pieces. Communication is another great transferrable skill - it's so easy to build the wrong thing if you don't fully understand the requirements. If you did any requirements gathering or communicated status to other teams that's going to apply to just about any job. I think requirements gathering would be an especially good skill for a student advisor - if the student knew exactly what they needed, they probably wouldn't need an advisor :) Attention to detail is a good one too. I've never been an admin but I bet they have to keep track of a lot of fiddly little details. Software development just doesn't work at all if you don't implement the exact API you were asked to. Ability to learn on your own - another thing that's useful anywhere. Being able to google stuff and figure things out on your own instead of sitting there waiting for someone to walk you through it is always useful. Computer skills - general stuff like being comfortable figuring out how to use a new application or to learn advanced features of something everyone uses like a word processor or spreadsheet program. Software development itself can be a transferrable skill if you're willing to do a little bit of it now and then. There could be some tedious task or part of a task that you could automate with a quick script and being able to do that could make you a huge asset as an admin. 

Yes, you can and should talk to a lawyer. That said, a lawyer is not a magic wand. You cannot wave one around and expect all of your problems to go away. In particular, you should ask your lawyer what the costs of taking your employer to court would be, what the odds of you winning are, what happens if you win, what happens if you lose, and whether you can prevent word from getting out that you sued and/or testified against a former employer. Just because you're morally in the right doesn't mean that other employers in your city won't see you as a potential troublemaker because of the lawsuit. That's hugely unethical of them but it's a risk you should be aware of. 

Micro-management and unreasonable hours are a problem throughout the industry, small teams are not special. When I was interviewing for my current job, I directly asked what they thought about work life balance. At that time the company was very small and they still agreed with me that it was important for everyone to have lives outside of work and time to see their friends and families. Micro-management can be a harder thing to directly question people about since everybody knows it's uncool to treat your devs like badly behaved children who need constant supervision. I would beat around the bush a little bit and ask things like how your potential manager would handle it if an employee pushed back on a requirement or got an excellent result that made everyone happy but didn't follow the exact process they were given. In my experience with small teams, they tend to have a much less rigid development process than larger teams because you don't need much process to coordinate just a few developers. That was very weird for me when I started my curent job, and might be completely miserable for people who really like a clear, defined process. For me personally, it would be a red flag if the dev team was very small in proportion to other departments. I've worked in environments like that before and was unhappy with the quality of the software I worked on because it was seen as a necessary evil that only needed to be just good enough for other people to get their jobs done and no better. tl;dr it's about the kind of working environment you personally like and how the company operates. I would worry more about the company culture than the specific size of the dev team. 

Absolutely! Everybody's tech stack is different, no reasonable hiring manager is going to hold out for someone who just happens to know every piece of their stack already because that person doesn't exist. They're going to hire someone who knows the piece that's most important to them and let them learn the rest on the job. I've never used the exact same stack at two different jobs (most of them have been fairly similar but none exactly the same), so I've never started a job already knowing their exact tech. At my current job, all I knew coming in was the core language we use on the backend, which is Java. I had never used the particular framework we use, I had never touched Mongo before, I had never used AWS for anything, and I had never even used git before. But I had a lot of experience with java and with development in general, which gave my now boss confidence I'd be able to learn the rest of our stack. 

Start slowly and don't try to do everything at once. When you're feeling up to it (don't set yourself up for failure), try something very part time like a volunteer position or an inexpensive class. I mention a class because having to show up regularly and have your work graded might be a good way to test your coping skills for when things don't go well, and even if things don't go perfectly, taking a class still shows that you're trying to learn and grow which always looks good on a resume. Edited to add: please take volunteer positions seriously. You would have to do something pretty bad to actually get fired from a volunteer position, but that doesn't mean you can't hurt your reputation by doing a bad job or being unreliable. I'm the volunteer coordinator for a local gamejam and while I try to be forgiving of people who are very young and have never held a real job before, I've dealt with volunteers who I couldn't honestly give a good reference for. That said, all you need to do is give as much notice as you can if you can't make your shift, communicate whether you will be able to make the other shifts you're scheduled for (one of my biggest pet peeves is when volunteers tell me they can't make it to one shift, so I give them a different one and then they tell me they can't make it to that one either), and try to make yourself useful when you do show up. If the part time volunteer position/class goes well, try asking for more hours or taking a more demanding course and slowly build up to fulltime hours. I recommend going slowly because dealing with depression alone, for example, would be a massive amount of work. Depression + ADHD + personality disorder + treatment + job would be a totally unreasonable amount of work to take on all at once. Building up slowly also gives you a bit of a history to point to (and potentially some references) when you start looking for a fulltime job and need to prove you're trustworthy. Don't look at your employment history as a bad track record from a terrible employee no-one should hire, look at it as proof that you can take stock of a situation you don't like, figure out what the core problem is, and fix that problem. It's really useful in a lot of fields to have someone around who will recognise it and speak up when things aren't working. Depending on what kind of work you do, networking (kind of a terrible term for going out and being friendly) can help a lot. It only takes one good job to break the cycle, which means you only need one friend of a friend to take a chance on you.