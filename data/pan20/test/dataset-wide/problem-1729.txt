The tool can update packages from an alternate installation root. For instance, if your root directory is at then you can update the image with: 

You'll see multiple packages here. The one you're looking for is the one that contains as that is the standard include directory. So install the indicated package: 

You need to make sure you have the RHEL optional channel enabled. Many packages from EPEL require it. The process to do this on EC2 differs from the normal process. Do it the easy way with : 

Check your entire nginx configuration and make sure you didn't set somewhere. This setting should be in your scenario. 

Your KVM-based virtual machine is reporting much more memory used than the running processes account for. I would guess the most likely cause of this is that the host is using memory ballooning to overcommit memory usage on the host. You won't have much control over this unless you also control the host. If you've leased this virtual server, check with the host regarding their memory overcommit policies. 

To answer your question about the GPU power connectors: Some GPUs only need the power provided by one connector, and will only have one. More high end GPUs will need more power and have two connectors. If two connectors are present, you need to connect both of them, or the GPU will not have enough power to run at its full capacity. As for the cables themselves, they are easy to find. The 8-pin to 6-pin GPU power cable can be had from a variety of web sites. For the other connector, use a Molex to 6-pin adapter. Note that with these adapters, both Molex connectors need to be connected to power in order to provide sufficient power. Sorting out what to with redundant PSUs is left as an exercise for the reader; it will probably involve Y cables and prayer... 

The first thing I would do is to try to find out where these requests are going to, i.e. their destination. Apache doesn't log the hostname by default, so you can either use to get a brief capture and inspect it for the request header, or change your Apache log format to log it. I prefer to log it in the otherwise useless second field, for example: 

nginx is looking at the first defined , but it isn't the one you think it is. If you run you will see the directory listing in the actual order it appears on disk, which is the order in which they will be read. This is quite often not the order you are expecting. Which, of course, is one reason why you can explicitly define a . 

The reason this is happening is that the other domain name has the same IP address as yours. Since the last update to their DNS was in July of 2015, it appears that they simply have a defunct domain, and were the previous user of that IP address. This is easy to resolve: It appears that you've placed the configuration for your web site in the nginx default virtual host. This is not a recommended configuration. Your web site should have its own block, and the default block shipped with nginx should be left unchanged. To resolve the problem, restore the default block to what was shipped with nginx, and place the configuration for your web site in a separate block. In this way, accesses to any other domain directed at your IP address will be served the default nginx error page. 

You probably didn't provision a minimal server with Vagrant, so all the packages you needed were already installed. You can locate the package you need with : 

Don't do this if you ever intend to connect the network to the Internet. It's just far too risky. First, you're using blocks of IP address space which belong to someone else. Because of this, you will have difficulty communicating with that other party as your routers may get confused as to whether the traffic should be sent to the other party or your internal network. Along the router confusion line, this is a seriously non-default configuration, and the slightest mistake can result in live traffic with those IP addresses going over the public Internet, or worse, routes being announced to the Internet's default-free zone. Just like when somebody in Pakistan screwed up a router config and caused all of YouTube's traffic to be routed to that country, you could find yourself swamped with the other party's traffic. And many ISPs and peering/transit providers have terms of service which prohibit using others' IP address blocks. If you use other people's IP address blocks, and they leak onto the Internet, you could be nullrouted or depeered or worse. (Interestingly, Apple was one of the first companies to make this mistake; they had to renumber 5000 machines to recover. Their story is mentioned in RFC 1627.) Since you or your predecessors already did it, your only way forward is to fix the numbering scheme. This is not particularly challenging technically, but it will be very time consuming and require some maintenance windows as well as coordination between the system and network administrators. Hopefully you can finish before something really bad happens. 

The setup you are asking for is a very bad idea. If you actually roll this out, everything will seem to load slower. Every server you connect to is going to get hammered into smithereens. I don't know why you're being asked to do this, but you should find out why, so that you can come up with a reasonable solution to whatever the real problem is. Plus, you can't do it with Internet Explorer at all. It has no way to completely disable use of caching (Temporary Internet Files). One situation you may be running into is with people with roaming profiles having large IE caches that end up getting copied around the network. If this is what the real problem is, then you can tell IE to empty the cache when it exits. There will no longer be any large file copies going on, at least with respect to IE's cache. 

Note that you can't do this with packages from incompatible distributions (e.g. you can't install a SuSE package on CentOS). 

It appears some bits have been flipped in those files' names. Whether this was because of the trojan or not, it's difficult to say. But given the names of the files, it's very unlikely that they have any particular importance, or if they do, they are easily replaced. 

You're on your own for installing anything else. As @Matt noted, the motherboard form factor is SSI TEB, so you could theoretically install any board with that form factor, though you may run into other problems (like baffles not fitting back into place, etc). 

We see from your application exception that it is trying to connect to some server on port 1459, and that the reason for the failure is . This has two possible causes: 

Because it was not yet considered GA (stable) when RHEL 7 went into feature freeze (about a year ago). If you need it, MariaDB provide their own yum repositories, including (now) for EL 7. 

Best practice: Keep your own spare parts, when possible. As for machine check exceptions, these are reported by the hardware; the kernel is just passing the message on to you, so that you can take action before the hardware problem gets out of hand and results in a real disaster. The only instance I was able to find of a kernel "misreporting" a machine check exception was the following. In this case, it was a flaw in the processor causing the problem, not the kernel. 

Most likely your Internet Service Provider is blocking outgoing connections on port 25. This is very common with residential cable and ADSL connections. 

You're trying to use the same Unix domain socket for both dev and production. Use different sockets for them. 

You can't use a transparent proxy in this scenario. A transparent proxy must be in the network route of the traffic so that it can intercept and rewrite all of the traffic to redirect it to squid, and since your server is outside your network path, you have no way to do this. If you want to use this server as a proxy, it will have to be a normal forward proxy. 

You have confused your and directives. should contain the port (and optionally IP/IPv6 address) that you want the server to listen on. should contain the hostname of the server. For instance (this config requires nginx 1.3.4 or higher): 

It's redundant. If you reach the end and haven't matched anything, the default is anyway. But having it there makes that explicit for people who don't know what the default is. 

No, you cannot upgrade glibc. Almost every other program on the system is compiled against a specific version of glibc, and may break if glibc is removed or replaced with a different version. We all learned this the hard way in the late 1990s when some distributions actually did try to ship newer versions of glibc on the same distro without recompiling everything. Your application cannot possibly require both SuSE 11 and a higher version of glibc than SuSE 11 shipped with. If it supposedly does, then you need to file a bug report with its developers, as it is obviously not usable in that state. 

The Dropbox repository doesn't seem to exist. Remove it from your configuration, and then contact Dropbox if you really want it. 

By this convention, you can change the serial to and if you always follow it, the serial will always be larger than it was previously.