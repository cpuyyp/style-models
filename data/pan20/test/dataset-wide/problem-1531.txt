The one comment you do have, is started with . I believe this style of comments are deprecated and the C style comments (, ) are favorable. I'll try and find a reference to this claim. 

As per the PHP Functions page To better separate the function's business and the view, consider creating an output string and returning it to be ed. You'd then have: 

Well, that is why I think it's unclear code! As far as your actual code logic, I could write another post on the security and alternate implementations and efficiency, but that would make this far too long! :) 

Now your code might get a big here if you implement each detail with a getter and setter. Sometimes you can manage this, other times not, which then you might break things apart: have the manufacturer get/set in an engine object, and the car will only have the get/set for engines. Like one of the comments said, you should research object prototyping. For a fresh start on JavaScript programming in an object oriented style, read Mozilla's documentation. Misc. I'm not convinced having a variable and a variable are the best way to accomplish creating cars. I suggest a new object, maybe or and create/retrieve/store/pimp your cars their. It will allow for later changes, or dynamic modification of the cars. Purely for fun and for homework: add in the ability to specify exhaust, transmission, tires, driving skill, etc. and then compute horsepower/car level. Pretty soon you could challenge cars up against each other in races! :) 

You're right, global variables/functions in general aren't the best. They can cause issues with naming and referencing in the global scope. There are a few solutions to this, w3 has a section devote to avoiding globals. If your snippet can be placed inside a class (ES6 only) or an app object, I suggest that. 

Here on Code Review, it's common to not receive some sort of feedback for a few hours. We all try our best to be on and answering! 

With that in mind, winston is generally considered a good choice for Node.js logging. It's dependencies are a little dated, and support is minimal. Another option is Scribe.js (lightweight, but also minimal support). 

Where are you getting and ? Same with and . It's okay to add those in your question next time (just without the actual values!) :) In you first you have a typo. The assignment to should really be . I'm not sure why you didn't receive an error for that. This 

Inline PHP Gone! Not even needed anymore! Changes made: A lot, right? Well it's okay, I'll try and explain why I modified your code like this. First off, I placed the button handler directly onto the class and avoided dealing with the call. It cleared things up a little! I changed your call into a call. For your implementation here, I found it to fit real nice. It's the exact same functionality, just in a way I believe to be more clear and readable. Inside of this Ajax call, I added a lot of business logic. It now accepts from the PHP page and then decides how to display the action. The error handler on this is very primitive and could be improved. Note that you must define where in the page the messages will pop up. It appears you have the knowledge to know what I've done here, however if you need me to reference anything or clarify, just ask! Look at that! Done with the jQuery already! The biggest change I made with your PHP was taking out the need for sessions. Everything else is simply topical and hopefully more clear than the original code. Let me know if you don't understand anything. Do note however, I have ed the response that the Ajax will receive. If you needed, you could also format it in JSON, more on that here. And since we cleared out the sessions, the inline PHP is gone! I don't normally just rewrite people's code, but I felt this could have used multiple alterations which wouldn't make sense if I din't have complete context! 

is a nice try, but what's it's point? It's really not useful at all. That's be another reason home-made DB access classes aren't so great. If you do keep it, is it being called by the caller? If not, then you could make it at least. In both and , you return the associative array () which may not be the best idea. What if you want to change the format of return down the line? There's not one easy way to do this. Speaking of those two functions, I suggest you changes their names. I almost started to write how you had to of the same function. It's hard to tell them apart is what I'm saying. 

I can immediately see two more options, perhaps they're something you're after, perhaps not. Option 1 Turn into a multidimensional array. You would end up with something such as: 

I suggest you use someone else's maintained and secure code. They'll often have proper error handling too. Almost every PHP framework has one, and there's a dozen on GitHub. It's too hard to specify one, so I suggets you do your research. Question 4: Yes. Avoid s. Give yourself room to expand with a config file or a config class. Preferably the file, and then a class to interpret the data the file holds. Again, dependency injection. 

Yes you can move the output away from the code, however that's usually difficult to do with this type of procedural code. The code is extremely tightly bound, which makes separation harder than it should be! The two function you call are fine as they are. So lets focus on those for now. 

So it's still pretty long, and since you know the in's and out's of your whole sessions and globals labyrinth, I encourage you to slim that down by at least 10 lines! Note: is experimental. It should work, but I'm not 100% sure it's secure and fool-proof. End of function! 

Essentially you're reinventing a very large wheel. You "wrapper" class has done no more than add configuration, which could easily be applied without a single functioned class. I think the best way to optimize this, would be to either scratch the class aspect, or implement one of the many other stable and supported email utilities available. However, it's up to you. So I'll comment on the code you do have for now! 

Warning: I am far from an expert with Sass! I'll list a few things I think could use some re-factoring. 

Because there's no context to your code, and it's difficult to understand what the purpose is, I couldn't do much besides refactor the code. I was hoping I would be able to suggest alternate methods to get the job done, but I didn't feel I had enough info. JavaScript I was able to DRY it out and come up with this: 

This may sound harsh, I meant to be friendly though :) It's bad/unsafe/vulnerable. This type of situation comes around a lot, which is sort of understandable. However, what is your class really doing? It's essentially pointless to make this class. You've basically just put a class in a class without doing anything different! So actually what you've done is make things less secure. You mentioned a "more dangerous" option of preparing the query. That would be a false assumption. Preparing queries are one of the largest features of the PDO and MySQLi interfaces. They're far from dangerous if used correctly. It's hard to tell if what you're really doing is "secure" because the actual SQL handling functions you've left out. Now that that's out of the way... To improve your coding, you can: 

This could either be turned into a if you have plans on changing the action a category makes. However, neither of these categories requires special treatment in these s, so why not just take out the conditionals completely! Leave it as a one line assignment. In the class of , a variable is created and used in this context: 

Perhaps you're looking for something such as this. You had lots of repetition in your code, and so I basically applied the DRY rules to your code. It could still use a lot of work and I'm sure there's other approaches, but this might help you kickstart the process! Another way to possibly help improve your code would be to separate the logic, database access, and your s. You've probably heard of frameworks and such, and you might want to start looking into your options. It will keep your code separated, and while maybe not shorter, it will be much neater! 

I had some data being paired with flavors, but I got rid of that feature. Is there any chance I can turn this project into something scalable, fast, and modern? 

Is there anything that isn't a number? it's probably a or something so we'll make sure not to capture that. Then we look for a country code. You had only a check for a single digit country code, and if that's what you want, fine. However, know that some nations have codes more than one character in length. 

Let's break it down: If nothing was sent to the page, and the action is either not there or is not 'login', return false. If nothing was sent to the page, then of course action won't be set! Correct me if I've over thought this, but it's essentially a useless check. How about this one: 

Alright, I myself am a Python beginner too. So I'll see what I can review and leave the rest to someone with more experience! First thing I notice, is how much easier reading your code would be if the classes were in separate files. It'd be much more modular, and in fact it would help separate different parts of the code. I'll break this up into section based on class/function. 

I think could use a better name. Perhaps just . Avoid using the function in you code. Consider learning about the different types of exceptions (maybe implement an SPL) and throw an exception instead. As 200_success said, keep the view (the ) out of your model class. Larger projects may require you to keep things separated. Look at your names here: , , and . Try and apply some sort of consistency to your code. Find a style that suits you and the project and stick to it. Here's one to get you started. has very limited functionality. Either make the class more specific, so that it only handles CRUD operations for users, or generalize it more, so that it's more of a query builder class. Comments such as do not really help the reader. In code where readers may have a hard time figuring out what a section does (algorithms, complex sequences, obscure functions, large functions, etc.) then comments are fantastic. If comments are just thrown in willy-nilly, then they're useless. could use some breathing space around the assignment. Again, consistency and legibility are important. Lastly, as 200_success stated, is a pretty bad name for a variable. Again, find a coding style and stick to it. Many would say that variables should have some sort of meaning to their name. 

Database Does this class do something extrodinary that PDO doesn't do? I just can't find the point behind this, as it's basically a replica of PDO with less functionality. Anyways... 

Well, security from what type of threat? You need to figure out what you want to protect against before you can protect against it! Since I'm unsure of what you're protecting against, I'll point out relevant flags. 

I know you've been seeing a lot of php, but I think this is the first time I've seen you ask a question with the sole intention of learning php! Great :) I think you'd be able to handle any critique thrown at you, at so I'll do my best, but it's a simple script which leaves little room for huge critiques! 

This is exactly a third of what you originally presented, however I feel even this could be brought down a notch. You'll notice I stuck the repeating code in a function, and was able to pass the class as a closure. This allows for easier expansion and reduction. I'm confused about the conditional though, because to start off, none of the cells have a class. So I'm not sure why you check if they're because they all fail the condition, therefore coloring it. HTML Not too much to comment on. It's pretty simple and nothing is too complex. 

Here are some flags you may way to consider in order to help secure this connection even more. Each can be found in the docs. 

To expand on @amkoroew's answer: really doesn't seem to be an appropriate name here. When I see that, it makes me want to believe that I'll be given the vehicle that is on top of a stack of other vehicles! That wouldn't make much sense, would it! I suggest renaming to something more appropriate such as plain ol' . Then you can rename your main method there to something such as . 

Question 1: You've partially got the idea. It's acceptable syntax, but it won't work, you need to use which references the current class. However, you're not allowing for dependency injection, and keeping you class very tight together. Here's a way that's commonly seen: