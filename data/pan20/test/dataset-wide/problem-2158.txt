Get your supervisor involved/in the loop of your proceedings. The most vital bits of your communications between both teams should have your supervisor cc'ed. Your supervisor's job is to shield you from unnecessary outside interference, so you can do your job. Ideally, requests and deadlines should not even come to you directly. Where is your supervisor in all this? You getting thumped by entities you don't even report to beggars belief. Your supervisor should run interference for you, be able to stem the barrage of requests coming from other teams directly at you. Do not assume the role of gatekeeper/human shield between Teams A and Z. You're just as much a client of Team Z as Team A and your relationship with Team Z should reflect that. Ensure that Team A is in copy of any correspondence with Team Z on matters of deadlines and new features. When Team Z gives an estimate of 8 months for a new feature, ensure that Team A is in copy of that correspondence so they know what you're in control of and what you're not. When Team A attempts to jump up and down your throat about a deadline, forward the enquiry straight to Team Z (preferably the developers on that team), looping in your supervisor. The point here is that Team A and Team Z must have an established correspondence and communication line, inasmuch as you're the end user of the product. Every and anyone who's remotely involved in any undertaking on this product must be on the same chain of emails. 

It reads like you're positioned as an intermediary/goalie between Teams A and Z. It also reads like you don't have a supervisor/manager. 

The moral of this story is you could have given them a softer landing. Yes your time is valuable but so is everyone else's who will be showing up OT. Yes you're a contractor, but you might want to cut your clients a bit of slack from time to time as part of relationship building. And if you can't afford the slack-giving, you should politely decline without coming off as uppity on them, you know, burning bridges and all that. 

Depends on whether you actually want to put in any effort to tolerating the person. Like oded said, you could simply ask anyone of your buddies upfront if they'd be ok if you paired up there and then and take that pairing to your boss 

Gung-Hoism : As results being the main metric of performance, team members are usually driven harder to deliver. Either by peer pressure or insecurity,developers will bang out code at breakneck speed,stock brokers will make (huge,risky) trades. All to get results Competition: Related to or as a result of (1), competition in such environments tends to be fierce. Whether it's among teammates or between departments, the organisation can easily become a shark pool. While a healthy level of competition is necessary for any successful organization; back stabbing, ass covering and email warfare will generate friction between the elements of an organization. Any organization will become counter productive pretty quickly under such conditions. It sounds bad but this quality will breed a fighter in you. You'll develop a can do attitude like no other place can impart Merit based rewards: A result driven environment is not kind to lazy staff. Or politicians. Or incompetence. You're going to be rewarded based on what you've done (successfully) and not by being teacher's pet. Work volume: This is one thing I believe the "Results-oriented" and "Fast-paced" phrases have in common; there will be plenty to do in a result-oriented environment. You'll get a lot of action, if, you're in the right place at the right time. As a result of 1 and 2, it's not uncommon to have turf wars between managers and departmental heads. With regards to projects and budgets, if you find yourself on the team of the bigger shark, you'll have plenty to sink your teeth into. If you're on the losing side, you'll spend a lot of time sitting on your hands. 

This is your cue to start the transition into management/team lead role. Start the transition. This business is not friendly to aging/aged developers who are not up to date with bleeding edge technology. After seven years in the wild with (presumably) rich experience width and depth, you're ripe and primed to lead a team or manage projects. Consider the following for your transition 

Are you the only one who feels the way you do? Exercise a little caution here. Remember in those cartoons where someone asks an assembly of soldiers who wants to go on a mission, and then the rank and file step back, leaving one poor sap in front? Racism is a pretty heavy accusation, play the card with caution. If you've others in your corner, you might have enough critical mass to start and maybe effect a change (whistleblowing,etc). You're indeed are in a very uncomfortable situation. 

I'd personally be more disposed to picking more projects in the proprietary platform where I am right now if I saw some kind of value proposition or usefulness of the language. What they've done is try to duplicate(poorly) a well known and popular scripting language, and the only value it's delivered is to lock my employer into their platform with no hope of escape 

It's mostly a test of your understanding of the fundamentals of Computer Science (which should be a prerequisite for any programmer). Software development has evolved to the point where the fundamentals of building good product have been abstracted away from the average developer. "High-level" languages have bred a new crop of copy-n-paste programmers that don't know why it's working, only that it does. While it's not easy, almost anyone can learn an API nowadays. Asking about algorithms, data structures and design patterns helps a lot of companies weed out the programmers that can raid Stackoverflow for good answers, without understanding the operating principles behind them. You'll also find that many companies that ask about such fundamentals, build in a variety of platforms. Rather than ask for things peculiar to a specific language/platform, they'll open the interview with more general computer science questions. Knowing the fundamentals of CS helps you make better higher level decisions when programming. If I were an employer, I'd want to recruit a programmer that knows the difference between a Stack and a Queue; a ArrayList from a LinkedHashSet; Bubble sort from Quick Sort; There are performance/design implications for these decisions. It's important to understand them, rather than just ripping something off the net (by an author that may have made the wrong decision without your understanding/knowledge). Knowing the solution is not understanding the solution 

Reading other people's code: Writing code is a form of a social obligation in the software development business. At the back of a decent developer's mind is "Write this class like the next person that's going to read it is a homicidal maniac that has your home address". There's well written code and poorly written code. Start learning to discern between both so you don't needlessly take the blame or berate yourself unnecessarily for an organization's years of neglect and bad practice. See this article for a shortlist of good coding habits (and bad ones). You can start with this category. Learning new tools: GIYF. Google is your friend. Your first port of call for learning to do anything in this life (Yes, anything), should be all-knowing google. You're not that special in that you have a problem in a tool/project that has never been experienced before. Someone, somewhere has experienced that perfect storm of issues and has written about it. Seek out that forum/blog post and start helping yourself. I'm pretty sure that your colleague's exasperation stems mainly from this fact, things they'd expect you to hit google hard for, you're coming to them. You're only ever truly screwed with google when she only turns up a single page of results. Then you reach out to your mates. Learning in general: Divide and conquer. Try not to approach those megalithic classes/packages as they are, megalithic packages. Take them in in small, manageable chunks. You've been there only 3 weeks, so give yourself a small break. All you need to know for these few weeks is what you need to execute specific tasks/ functions "Oh, what handles authentication in this project", "What factory method creates the objects". Pinpoint programming is what I call it. Start with what you need for now. You'll grow to cover the bases eventually. Unless you're a Macarthur foundation alum, no one is going to expect you to have the codebase down pat in 3 weeks. Even when searching for solutions on the interweb, you don't go "JAX-WS API", you go "How to authenticate a JAX-WS". Poco a poco, you'll cover all the bases in the API Be honest with yourself: Identify quickly what areas are your true weaknesses with regard to the technology stack and devote extra time after work to becoming a power user of the tech. Myself as an example, there are APIs/frameworks that I consider myself a power user of, things I'm able to answer questions on in SO. Then there are those that I'm a casual user of either because I don't care enough to go deeper/I have no need to know more than I use or I simply can't get the hang of it. Be able to categorize your tech in order of your strength and with regard to your organization's needs. For your own empowerment and peace of mind. I find myself dealing with issues easier when I've admitted to myself, "This isn't my forte". 

Possibly unrelated, this sounds like a small shop, possibly a one-man firm or family-owned firm. Be prepared to exert your influence and hold your own in the face of pressure. There'll be many more situations like this. The good thing here is that your situation is a resume-building opportunity. There will be a lot of work to do and too few hands to do it, leaving you with a fast-track from junior to senior developer and a lot of opportunities to get your hands dirty. Ultimately, you don't want to spend too long there, to spare yourself the risk of burning out 

Like other answers have previously stated, this is probably unethical under ideal circumstances and possibly illegal in many countries. That being said, I'm wary of recommending you fake it till you make it as some answers/comments have recommended. The trouble with politics is that one cannot predict how far many people will go to register their support or disapproval of a political stance. Pretending you're in support of a specific political position may become your undoing somewhere down the line, when your employer asks you to show your support for the company line. It can range from simply wearing a shirt that shows support for a candidate to participating in a rally. Both can easily get you mobbed and hurt. Play it neutral Take the swiss option. A neutral party, I believe is the safest bet. Being as apathetic as you can toward political overtures will, at worst, get people to try to convert you. At best, you're tagged as boring, and you'll most likely be left alone. For example: 

Conversation-based email listing: with this functionality, you can view all emails that bear the same subject in a collapsible thread. This gives you the ability to drilldown to specific emails, along the same thread. Rule-based email folder storage: this would allow you setup rules that would route emails to predesignated inbox folders. That way, at glance, you can have an overview of your correspondence history with any contact you setup a rule for. Windows messenger integration: this integrates the windows messenger IM client into your inbox. With this, your chat history, and emails with a specific contact can be grouped and viewable from one spot Meeting/Calendar sync: This functionality is provided by default with outlook. Your calendar is part of your inbox, so your meetings, emails and chat sessions are part of a contact's thread. 

It might. Depending on how/if it reaches them. If they get wind of it by "word on the street", definitely not a good look on you. First and foremost, suits want to save money/have more money. Then next to that professionalism/ethics. I think the moral of the story here is discretion. Exercise large quantities of it. You'll have to filter through a lot of noise and static to get meaningful suggestions. 

Ultimately, what you want in a developer is flexibility and intelligence, by-products of a firm grasp of fundamentals of software development 

To be frank one or both of the last two might affect your ability to perform, but you're not obligated to disclose either. Same goes here. It's more to do with being honest with yourself than with the employer. You're well within your rights to inquire the schedule and nature of your prospective job (actually, you'd be wise to do so) and determine for yourself; whether your schedule will adversely affect delivery of your job functions. If however you BS yourself into taking a position you were fully aware would not fit into your personal obligations, and it turns out to be a crapshoot, you have only yourself to hold accountable 

I wouldn't worry though, as long as you didn't leave destruction in your wake on your way out from the last position, no one should harass you for a couple of weeks of unpaid vacation 

You're going to start a fire. Are the impending budget cuts meant to be public knowledge at this material time? If not, you might start a panic/fire within the rank/file, possibly loss of morale and premature ship jumping. Unless you have a very close, possibly mentor/mentee training relationship with one or two of them, refrain from asking more than one or two people for an honest opinion and sealed lips. 

It's an interview. Ask them what the itinerary will be. They want you to meet your potential team mates and vice versa. Both parties need to get a feel of what the other person is like in a civil gathering. They'll be watching for behavioural cues that'll tell them how you'll fit into their team (everybody recruiting is an amateur psychologist these days. le sigh). Expect a showing to most of the people you might be working with and at least a discussion with the 2 most senior people on the team. It's not unusual to start talking money at this point too, especially if you're meeting with decision-makers on the team. Just don't be the one to bring it up While you're there, don't get carried away in the pageantry of it all. You should also be trying to assimilate as much they're trying to glean from you. Do you like the office environment? Are they all perched on stools in cramped, noisy environments? Are they all a group of backburned geriatrics or a gang of yobs or a mix of both? Make your own assessment of the shop while you're there, they certainly will be making theirs of you.