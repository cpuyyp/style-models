You will need to look that part up and just use it as your target email address as described in the link above. 

So now the GPS unit is working with Raspbian and connected with the satellites, producing useful data. 

It will help you figure out your connections. Point to the one you want and use config to get the password and router IP entered. Make sure you're on the right interface under Prefs. Then try Connect. As you make changes, use ifconfig to see the results. Sometimes a reboot is required before they take hold, since curses is changing the configuration files. 

where 1 is a sequence number (arbitrary - increments with each reading), 13.83 is the voltage reading, and 3645 is the light sensor output in Lux. Note that the Arduino sends as few characters as possible. Here is the Pi program that receives the data: 

I believe any damage to the mini-SD slots on a Rpi would be most likely caused due to improper usage - such as inserting the card upside down and trying to jam it in, etc. But in terms of actual ratings, the best answer I found on this is related to photography, where people insert and remove their cards much more often than we do in our Raspberry Pis. How many SDHC card insertions/ejections does an average camera slot withstand? And the best answer is excerpted here: 

The simplest answer is to install gnome-system-tools - then you will have a menu, Preferences, Screensaver program that can help you do those settings in the GUI. 

Rsync spends a lot of time (and bandwidth) backing up all the extraneous locales when a full system backup is performed. It takes up a lot of disk space for features that will never be used on this system, which is based in the US. Would it break Raspbian if all but the en directory were removed? 

This one is on the workbench being configured to read battery voltage and sky intensity then send the results on to the Pi. My solar tracker and actuators have their own small (50W) solar panel and a marine battery, so this will add more data to the mix. The same battery is used by the other circuit with the relays, to power the actuators (I have 3 in my system, moving 2 panels each). It has a small pair of solar cells to sense the position of the sun and act accordingly. A typical string coming in from this would look like 

After doing this, it will be set to persist through restarts. One nice side-effect is that the date format will be mm/dd/yy 

I have a half-dozen of them, monitoring various sensors around my solar power plant. All of them have Arduino Nano's connected to the Pis via USB serial port, to do the ADC necessary for measurements. The Pis collect data as it comes in to /dev/TTYUSB0. Arduino IDE is installed on each Pi to make reprogramming of the Nanos very simple, via the same serial cable. Most use T-cobbler boards to give room for extra circuitry like voltage dividers and extra connections for various sensors and their power requirements. One innovation I use is to use one set of power rails on the cobbler board as a local I2C bus, connecting the Pi to the Nano to the sensors. Each Pi also archives its data to a USB flash drive every 30 minutes. They generally go around to take readings at 1-minute intervals so the data files are small yet provide enough detail for my purposes. The Pis all connect to a dedicated router by WiFi. It provides a subnet just for them so other traffic can't interfere. The WAN port on that router is then connected into the larger network, so PiNet becomes a subnet. All the Pis have full Internet access for updates and downloads when necessary. All the Pis have clocks synchronized by NTP Each of my Desktop PCs has, in addition to cables to the larger network, WiFi adapters which connect to PiNet, for remote access to the Pis via RDP. This is how I can reprogram both the Pis and the Arduinos while sitting in the office. My Tablet runs Remoter so I can connect directly into any of the Pis when I am working on their hardware. Every other device, from PC to Pi, is using external USB WiFi adapters with those 2-foot tall high-gain antennas. Two of them use mag-mounts with extension cords for the same kind of antennas - so the Pis can be kept away from the hot air temperatures while maintaining communications. These antennas provide rock-solid connections for data throughput. The Pis can all talk to each other, and one of them is the "master" that uses cron to periodically archive the data to a USB flash drive from the others. My NAS PC uses a Windows Task to bring in the archived data (via scp) to hard disk for backup at midnight every night. gnuplot to produce graphs of what all is happening. Very inexpensive and reliable way to make it work. --EDIT - I solved the problem of my MASTER's script constantly prompting me for passwords as it consolidates the data from the other 5 Rpi3s that are collecting data. Turns out it is simplicity itself. You can see my post on the subject here: How can I use scp/ssh in a cron script without entering a password? I'm now free to let the computer just do it for me. 

I see these instructions and the lack of seeing your wiring nor the output of your i2cdetect query. This means that you have the correct instructions to make it work. Answer: Simply follow them. Let me point out that this clock is to be set by the Pi in the first place. That implies that the Pi is connected to the Internet and gets a NTP-based time and date setting periodically. Then you must do extra work to keep this clock synchronized to the Pi. So I don't see any use-case for using this module in the first place. My suggestion is that you just let the Pi keep its own time. 

In Windows this same change is even easier. Just click on the clock and follow the prompts to change the Internet time to time.nist.gov then update. By doing that, even transfers into and out of Windows (for hard drive backups) are a LOT faster as it skips files with the same creation date on both sides. This has a pleasant side-effect of minimizing the amount of time it takes to ROBOCOPY out to a backup drive, too. 

Can the Pi Emulate an HID device with via USB? This can be done with ANY kind of Pi The least-expensive solution is to use the Pi Zero. The text of this link is way too long to post here, but the Zero can be any kind of HID. Keyboard, mouse, flash drive, camera, whatever you can think of. Turning your Raspberry PI Zero into a USB Gadget 

Now I know it is connected and that it works, and is receiving data at 9600 baud. (This is an issue, however, since the NMEA standard very specifically says 4800 baud is expected.) I even know the data is in the NMEA format, described here: NMEA Data Format Which I found using this search: $URL$ Question is: How do I set it up for use? 

Finally found the solution, in Python 3.0 documentation of all places. pySerial API EXCERPT: In serial.Serial class, 

I see this product, the Arduberry: $URL$ And this project to do a blink like on the Nano: $URL$ So my question is about the integration of the Arduino programming with the Rpi3 hardware/software. Arduino is easy to program, and it might be useful to use this board to add analog inputs and to prepare data that could be saved in the Rpi3 for use in creating informative web pages. But I am not finding any good documentation about the integration part. Particularly access to the Rpi3 file system. Any suggestions? 

Very simple. Nano mounted on a breadboard so there is room for voltage dividers and such, then linked to the Rpi3 by the programming cable to send the readings to the Raspberry Pi and to receive instructions to toggle digital outputs which can switch relays. (I always use single-character instructions. Arduino char 'X' means to shut off the inverter, for instance.) Python code to process input from the serial port: 

Took the target SD card back to the original system and booted it right up. It works fine - and now is the correct size and brand new. 

and it opens two terminal windows: One sitting at a prompt, and one sitting at the gnuplot prompt, with both in the correct directory. It leaves the original terminal open also. Then I work for hours using those two windows. editors and scripts for data manipulation in the command window, then plotting in the gnuplot window. (I use the statement in some plots so the plot window updates periodically as I change the underlying data.) ---------------------------------------------------------------- You threw a real curveball with your question text, by the way. I gave it the old college try to answer it specifically. I tried a bunch of different methods to make it show a directory before the prompt, including calling a script that does the ls and then a pause, and ls simply hangs up. Also tried doing ls >ls.tmp then cat ls.tmp in a script, and even ls | more and every way I tried to get it to do what you are asking failed because there is something different about ls. Whether in a separate script, or using -e "ls; pause" it simply hangs. Hence the solution above that is closest to what you are asking for. Long-term prognosis for your project is good. I believe the most important thing you were seeking was the ampersand to hold the window open when invoked in a script.