That is, the first $j$ bins (the most left $j$ bins) contains less than $j$ balls, for each $j\le i$. Question: Estimate $\sum_{i<n}{Pr(E_i)}$, in terms of $n$? When $n$ goes infinity. A lowerbound is preferred. I do not think an easily calculated formula exisit. Example: $\lim\limits_{n\to\infty}{Pr(E_1)}=\lim\limits_{n\to\infty}{(\frac{n-1}{n})^n}=\frac{1}{e}$. Note $Pr(E_n)=0$. My guess: I guess $\sum_{i<n}{Pr(E_i)}=\ln n$, when $n$ goes infinity. I considered the first $\ln n$ items in the summation. 

For all $x$ in the domain of $f$ we have $y=f(x)$ if and only if $g(\alpha(x))=\beta(y)$ For all $x$ in the domain of $f$, let $w=\alpha(x)$. Then we have $g(w)=z$ if and only if $f(x)=\gamma(z)$. " 

One of my friends asks me the following scheduling problem on tree. I find it is very clean and interesting. Is there any reference for it? Problem: There is a tree $T(V,E)$, each edge has symmetric traveling cost of 1. For each vertex $v_i$, there is a task which needs to be done before its deadline $d_i$. The task is also denoted as $v_i$. Each task has the uniform value 1. The processing time is 0 for each task, i.e., visiting a task before its deadline equals finishing it. Without loss of generality, let $v_0$ denote the root and assuming there is no task located at $v_0$. There is a vehicle at $v_0$ at time 0. Besides, we assume that $d_i \ge dep_i$ for every vertex, $dep_i$ stands for the depth of $v_i$. This is self-evident, the vertex with deadline less than its depth should be taken as outlier. The problem asks to find a scheduling which finishes as many tasks as possible. Progress: 

In particular, he showed PTIME-hardness by reduction from the circuit value problem. My question is about the restriction of the decision problem to linear lambda terms which are planar in the sense that they can be typed without using the exchange law (e.g., $B = \lambda x.\lambda y.\lambda z.x(yz)$ is planar, but $C = \lambda x.\lambda y.\lambda z.(xz)y$ is not). Is this an open problem? I would suspect that it has lower computational complexity, since Mairson's encoding of boolean circuits uses non-planarity in an essential way to distinguish "True" from "False". I'm specifically interested in $\beta$-equality of planar lambda terms, but the problem is related to deciding equality of proofnets for non-commutative multiplicative linear logic, so I'd also be interested in any results in that direction. 

If the tree is restricted to a path, then it is in $\mathsf{P}$ via dynamic programming. If the tree is generalized to a graph, then it is in $\mathsf{NP}$-complete. I have a very simple greedy algorithm which is believed 3-factor apporoximation. I have not proved it completely. Rightnow, I am more interested about the NP-hard results. :-) 

c-chromatic number is defined in the paper Partitions of graphs into cographs. It asks for the minimum number of colors used to color vertices such that each color class is a cograph. Cograph is a P4-free graph, i.e., there is no induced path of length 3. The paper denotes the c-chromatic number as $c(G)$ and proves that $c(G)\le \lceil \frac{1+\Delta}{2} \rceil$ in Remark 12 on page 4. The proof can be used to convert any coloring to a coloring of at most $\lceil \frac{1+\Delta}{2} \rceil$ colors, in polynomial time. In the study of the classic graph coloring, i.e., the chromatic number $\chi(G)$, greedy coloring was discussed. The performance of greedy coloring is determined by the order of vertices. In the worst case, a graph needs $\frac{|V|}{2}$ colors while $\chi(G)=2$. This implies that the approximation ratio of greedy coloring is arbitrarily bad. Similarly, when we are coloring graph into cographs, we can use the greedy coloring. Given a order of vertices, label each vertex with the smallest color ( assume colors are labeled as 1, 2, 3, ....) such that each color class is a cograph. My question are : 

The target position of the snake can be derived by the same transformation. Hence, reconfiguring a snake is PSPACE complete, even on planar graphs. 

To reverse an edge, the snake first clears the center route and then takes the center route once its head reaches the opposite vertex. We embed vertices of the constraint graph as shown below, where each of the three colored parts is a half of an edge gadget shown above. The points where the edges touch make sure that the incoming weight of each vertex is at least $2$ by forcing the snake to take the center route of some edge gadgets. 

A reduction from planar 3-SAT should work. At least if the disks need not have equal size. Start by creating a triangular grid of disks (shown in blue in the figure). We enforce these disks to be in the cover by not covering one of their points by any other disks. Now what remains is to cover the gaps left in between disks by a minimal number of disks. Illustrated are And- and Or-gadgets that can be connected using wires of arbitrary (even) length. Wires are simply a series of disks that each cover two gaps. Variable gadgets are each a cycle of And-gadgets, where each C-terminal is connected to the A-terminal of the next And-gadget. This creates B-terminals that can each connect to an Or-gadget. Finally, there may be unused gaps (that are not part of any gadget) which we can simply fill using a single disk. Then, if there is a solution to an instance of 3-SAT, there is a set $D'$ that for each And-gadget covers either terminal $A$ or $C$, but never both. And in which the gaps that are part of wires are covered exactly once. Hence, such cover is optimal. Conversely, if no solution exists, some wire needs more disks to cover, or some And-gadget is covered by both terminal $A$ and $C$, requiring a higher cardinality cover. 

This is not a homework, though it looks like. Any reference is welcome. :-) Scenario: There are $n$ different balls and $n$ different bins (labled from 1 to $n$, from left to right). Each ball is thrown independently and uniformly into bins. Let $f(i)$ be the number of balls in the $i$~th bin. Let $E_i$ denote the following event. 

I am going to edge color an undirected simple graph. The following randomized offline algorithm is showed at Online Algorithms for Edge Coloring. Offline: The potential colors are ordered 1, 2, . . . , 2$\Delta$−1. The edges are ordered at random, and we greedily assign color 1 until a maximal matching is colored 1, then we start over with a random order of the remaining uncolored edges and we greedily assign color 2 until a maximal matching of the remaining edges is colored 2, and so on with the remaining edges and maximal matchings for colors 3, 4, . . . In paper Online Algorithms for Edge Coloring, the authors claimed the offline algorithm is the same as the online algorithm as follows. Online: The edges are ordered at random only once, and each edge in turn is colored with the least valid color out of 1, 2, . . . , 2$\Delta$ − 1. The "same" means, for a given graph. If the first algorithm needs $c$ colors with probability $p$, then the second algorithm uses needs $c$ colors with probability $p$. So there is not clear justification that the given two algorithms are same. The paper claims "For the second algorithm, if we consider sequentially when colors 1, 2, . . . are assigned, the same bound holds.". In fact, they turn out to be different (see the examle below). So my question is: can the offline algorithm be made onlne? I cannot handle the multi-times random ordering ( after each maximal matching is removed, the order of the remaining edges is shuffled). Example. 

Let $p$ be the query point, and assume the interval tree is sorted by lower endpoint and each node stores the maximum endpoint in its subtree. Perform a tree-walk and stop the recursion whenever the lower endpoint of the current node is greater than $p$, or the maximum is smaller than $p$. Now at most one downward path (of length $O(\log n)$) reports no interval, namely the path that would be taken by binary searching the lowest endpoints for $p$. Illustrated example: 

Finally, the black lines of all edge gadgets are connected to form a single cycle, so the head of the snake chases its tail. If between two edge gadgets, we make the black path sufficiently long, the snake must always traverse the black paths in the same cyclic order. To show that the black paths can always be constructed in a planar manner, consider a spanning subtree (thick edges in the figure below) of the constraint graph. Then we can make black edges follow this tree as illustrated below, resulting in a planar graph. 

In any case, as glossed in the abstract of the original tech report, the idea of the proof is to show that HOT is a "hierarchy by definitional level". That is, he defines a notion of rank for a HOT combinator, and a family of combinators $Hn$, such that each $Hn$ has rank $n+1$ and is not $\beta$-equivalent to any combination of HOT combinators of rank $n$. This implies that HOT is not combinatorially complete, because if the $S = \lambda x.\lambda y.\lambda z.(xz)(yz)$ combinator could be derived from a combination of HOT combinators of rank $n$ for some $n$, then so could any other combinator, in particular the combinator $Hn$ of rank $n+1$. 

To decide whether such path exists, consider the following flow network: In the graph $G$ let every edge of $E$ have capacity $|E'|+2$, and all edges of $E'$ have capacity $1$. Now add a source and sink $S$ and $T$ with edges $(S,s)$ and $(u,T)$ of capacity $|E'|+2$, and edges $(S,v)$ and $(t,T)$ of capacity $1$. Now the maximum flow from $S$ to $T$ is $|E'|+3$ if and only if there were edge-disjoint paths from $s$ to $u$ in $D$ and $v$ to $t$ in $G$. For vertex-disjoint paths, we can treat each vertex as a pair vertices (one for incoming edges, one for outgoing edges) with a capacity $|E'|+2$ between them. 

what is the worst behavior of greedy coloring on cograph coloring? Is it possible that the greedy coloring needs more than $\lceil \frac{1+\Delta}{2} \rceil$ colors? 

Given two directed acyclic graphs $G_1$ and $G_2$, is it NP-Complete to find a one-to-one mapping $f:V(G_1) \rightarrow V(G_2)$ such that $(v_i,v_j) \in D(G_1)$ if and only if $(f(v_i),f(v_j)) \in D(G_2)$? $D(G)$ is defined as the set of arcs in $G$. 

Any reference for the formal definiton of the so-called "one-to-one reduction" is appreciated. Thanks. 

The chromatic number of graph, $\chi( G)$ is hard to approximate for general graphs. Are there results of hardness of approximating $\chi(G)$ for triangle-free graphs? 

Let $E_r=\{e_0, e_1, e_2\}$, $X_i$ be the indicator random variable that whether color $i$ is assigned to one edge from $E_r$. $X_i=1$ iff the i-th color is not assigned to the edges e_0, e_1, e_2. We calulate the expected number of colors from clolrs $\{1, 2\}$ which are not assinged to any of $\{e_0, e_1, e_2\}$. For the "first algorithm": $E[X_1+X_2] = Pr(X_1=1)+Pr(X_2=1) $ $=Pr(X_1=1)+Pr(X_2=1|X_1=1)\cdot Pr(X_1=1) + Pr(X_2=1|X_1=0)\cdot Pr(X_1=0)$ $=(\frac{2}{3})^3 + (\frac{1}{2})^3 \cdot (\frac{2}{3})^3 + (\frac{1}{2})^2 \cdot (1- (\frac{2}{3})^3 )$ $=\frac{1}{2}$ For the "second algorithm": We list all the $9!$ orderings, and get $E[X_1+X_2]=12/27=0.44444$. The follwoing is responce for @vzn, thanks very much. 

I suppose some of the above points might sound negative, though I wouldn't call them "cons" but merely "realities" of intersection and union types. On the other hand, from a language design perspective, one reason for making the effort of supporting intersections and unions (and for getting them right!) is that they allow more precise properties of programs to be expressed in a fairly incremental way, requiring a much less drastic transformation than, say, dependent type theory. A brief reading list: 

[Expanding the comment into an answer.] First, just a clarification about counting bound variables in a combinator (= closed term) $t$. I interpret the question as asking about $$ \text{the total number of distinct bound variable names in }t $$ so that for example the term $t = (\lambda x.x(\lambda y.y))(\lambda x.\lambda y.yx)$ counts as having two bound variables, despite having four binders (i.e., lambda abstractions). This way of counting was initially a bit strange to me since it is not invariant under $\alpha$-conversion: for example, $t$ is $\alpha$-equivalent to $t' = (\lambda x.x(\lambda y.y))(\lambda a.\lambda b.ba)$, but $t'$ has four distinct bound variable names. However, this is not really a problem, because the minimum number of distinct bound variable names needed to write a closed term $t$ is equal to $$ \text{the maximum number of free variables in a subterm of }t $$ and the latter notion is invariant under $\alpha$-conversion. So, let $\mathcal{C}$ be the collection of all combinators which can be written using at most two distinct bound variables, or equivalently the collection of all combinators whose subterms have at most two free variables. Theorem (Statman): $\mathcal{C}$ is not combinatorially complete. It seems that the original proof of this is contained in a tech report by Rick Statman: 

Here is a variant of the SAT problem in which a satisfying assignment must have additional properties. Input: A 3-CNF formula $f$ with variables $x_{1\dots k}$. Output: For an assignment $S$ of $x_{1\dots k}$, let $\overline S$ be defined such that $x_i=true$ in $\overline S$ if and only if $x_i=false$ in $S$. Is there an assignment $S$ such that both $f(S)$ and $f(\overline S)$ hold? Is this problem still NP-hard? Examples: 

Consider the first backward edge $(u,v)$ on the requested path from $s$ to $t$, then $u$ must be reachable from $s$ in the graph $D$. Now, for each such reachable backward edge $(u,v)$, it suffices to show that there is a path from $v$ to $t$ in $G$, such that this path avoids a path (in $D$) from $s$ to $u$. The problem is in $P$ if this can be decided in polynomial time, since there are $O(E')$ candidates for the first backward edge. Update: (I'm don't think the following works, because flow from $v$ to $t$ might propagate back into the path from $s$ to $u$)