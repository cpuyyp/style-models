There are several style guides (e.g. google has one), it is up to you pick one or do your own but there is no universal style guide. Important is just that you are consistent in your code so that you don't use different styles in different files, that is confusing (irritating) I find your code looks fine from the style point of view. Normally one would avoid (if possible) to include the headers like Hangman.h and CharReader.h in your header GameManager. Instead you declare them as pointers in the header and remove the headers. 

arguments to the function should be declared const since it is a good indication for the user of your function that you are not going to change the contents of strings 

other than that i find it was quite clever way of calculating atoi, it took me a moment to understand it -- sometimes it is better to let the compiler optimize the code for you than try to write too clever code. 

then in your GameManager.cpp you include the headers and instantiate the classes in the constructor. 

general impression overall the code looks clean and tidy so it is quite easy to follow some comments/suggestions MISRA and other coding practices recommend to always use compound statements after conditionals to make the code more clear and more foolproof for maintenance 

I would introduce a layer in between your threads and the file. E.g. have a thread that handles all writing to the file, it holds a mutex protected queue which is written by the other two threads. That way you have a layer between the physical file (slow access) and the queue (fast access). You then do not have to lock the file in any way since only the thread that writes the file needs to have access to it. 

I would like to add to @LokiAstari's excellent answer It is a good rule to write out all possible tags in a switch statement, you have one case which you do not handle also add a default as well to catch any invalid values that may be added in the future. Your / functions I find are a bit too long, IMHO it would be better to split up the function in a couple of separate functions to make it more readable. (Also here you suddenly stopped having any comments). You have quite a few variables in your functions so separating the functionality into several small functions will help with that too. When you write comments have in mind that the reader often wants to know why something is done, not what is being done since that is the purpose of the code. When you initialize member variables do it in the form of 

Exceptions in C++ are normally not used to steer program flow as you do in handle_replay(), I think it would be better to have a simple do {} while loop to handle "replays" When you create a project like this it is good to put it in its own namespace to avoid problems with functions overloading/collision when you don't expect it. E.g. 

What I have so far seems to work fine, apart from the aforementioned issue, though the amount of code for what sounds like such a simple function is far above what I'd hoped, so I'd really appreciate any ideas on how to reduce it. 

And you can delete the rest of your class. Edit: Using the new method would then allow you to add pieces of text at the specified points in your message, so your validation method that returns a State would use it as follows: 

If you want all your exceptions to follow this style, then you could have one parent Exception class, then make your application exceptions extend it, like so: 

With this, you can remove the first if/else and foreach loop entirely, by removing the ternary and using , like so: 

You can increase the readability and reduce the number of checks required in your if block by performing each of the four booleans you get at the start, then checking against them instead of performing it over and over as well as separating out the check then reveal logic into its own method, like so: 

It's secure, but it's really chunky and tedious to write. I'd do this by overriding the magic method to trick GSON into thinking the methods exist, like so: 

The only other comment I have is that the and methods are , so you should be calling them as and rather than which is for instance methods. 

The ideal package structure is one which indicates usage. Classes such as these which exclusively contain static methods are definitely utility classes, which I usually put in a subpackage of your main application. From what it sounds like, you don't have a main package at the moment which ideally would be your website (in reverse domain order), e.g. so that the more specific elements are later, then on top of that you'd have the name of your application which may make it something like . This would be the core of your program, and from here you could then add on your extras. The package in particular doesn't sound helpful: your entire program seems to relate to Twitter so it doesn't really convey what that part of the program does. Frankly, I'd just put all those classes under and add in more sub-packages if you add more classes. And generally speaking, in Java packages should be exclusively lowercase. 

There's a couple of issues with it, for start your nested if blocks are unnecessary: instead of manually checking and returning true or false, just return the result of those methods, like so: 

Therefore, I think you need to either increase the number of guesses to 10 (at the least), or chose a smaller set of things to guess, like A-F, 1-6, or something GUI based like Mastermind. 

I understand his argument, but the code is harder to read and there's a higher chance on bugs when doing date/time calculations without using date/time objects. I also can't cast it to a in the query because I'm using LINQ to Entities. Which method is the better one? 

The goal is to construct a with a connection that uses an access token. The access token is acquired with ADAL (Active Directory Authentication Library). The problem is that acquiring an access token is an async operation. Luckily, ADAL uses for its async calls, so it should be safe to do sync-over-async without risking deadlocks. Full code is provided below. The focus for this question is on the sync-over-async code and method of registering the , but remarks for the other code are welcome too. Container configuration 

A user first has to choose between Red, Blue and Green. Upon selecting an option, additional form elements are displayed, depending on the choice. For Blue, a Date and Font are required. Currently, there's no need for a third level, but who knows what the future brings. In order to represent this data, I've come up with the following model (after many attempts). 

We have a table with calculated data that groups sales by product, year and month, to provide fast querying for statistics. My colleague argues that the year and month should be two separate fields, because a day is meaningless. I want it as a date field, because using two separate fields leads to awkward code like this 

One thing I'm not sure of: is the readonly property necessary for or can I write ? I'm not worried about the tiny chance of multiple calls to the same uncached object causing multiple and I'm also not worried about stale data. The main goal is to cache some informational data that is simply displayed on the screen, instead of retrieving it every request. I've tested this with an expiration of 1 minute and a class that gets on creation, and it worked fine, so I believe the code is bug-free. 

A picture says more than a thousand words, so here's a mock-up. The actual choices are different, this is just a sample. 

I don't think there are any possible edge cases here, at least some initial tests don't reveal any problem. I think it's short and readable, but readability is often hard to judge when you're the author. Any remarks? 

I'm using s for hard-coded choices, so I can make decisions based on the value. s come from the database and do not matter in the programmed decision flows. This works, but I can't help but feel like this is an ugly solution and I'm worried about future modifications. I've never had to make something like this before so I can't make decisions based on past experiences. The UI design is more or less set in stone, unless strong arguments can be made against it. (I'd need to bring them up to the designer and project manager.) 

And manually implode some queries with it. To make it generic, have a method which removes vowels in this way, such as: 

Then you can have your validation method return a state, and you can do your checking block after, like this: 

The first thing I spotted was this: . I'm not sure if that's an error with your page name or code, but whichever it is needs to be fixed. 

The first thing that jumps out is all the Strings you have which are reused throughout, those need to be removed and ideally put into constants so you only have to change them in one place if you ever need to rename them: 

Another thing you should be careful about is ing the same thing over and over, as it's usually unnecessary and can be replaced with a which will ensure that it's only loaded if it hasn't been in the current session. 

You do a lot of mapping from parameters to arrays and vice versa, which you could simplify by storing an array of the parameter names and whether or not you want them trimmed, for example: 

Though even this is pretty sloppy, depending on the amount of time you have I'd probably go deeper and write out the standard s and es they're looking for with these tests: , (for all the validation methods), , , etc. 

Unless I'm missing something, you're ing the entire table over an over, then do exactly the same thing with it every time (except with different HTML class names). If that's the case, you can replace the whole file with this: 

Obviously the on every iteration is inefficient, however as I need to maintain a counter, an enhanced loop means keeping a separate counter and performing a check on it every time like so (list declaration skipped for space): 

I would also avoid using regexes or any kind of manual string parsing, you can do it all with and , thusly: 

However, when you increase the number of possibilities to 10, and reduce the guesses to 5, you can no longer do this, and the chances of never guessing a correct number increase dramatically, e.g.: 

I've been implementing a custom internal server error page in ASP.Net MVC which will check if the current user is either an administrator or accessing the page from localhost, and if so, show them a whole bunch of details about the error to debug it with, otherwise just send them to a basic HTML error page. So far, it works great, but one problem I had was that if there is an error in a partial view on the page, the system gets stuck in a loop trying to report the error. To avoid this, I'm storing a temporary counter of how many times the current action has requested the error page in , but I find the amount of lines and style of the code to get, set and check this variable a bit verbose: