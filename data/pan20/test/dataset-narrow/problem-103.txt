There are many causes for this type of behavior, and one of them is what is called the hidden node problem. This is a very common problem that is often overlooked (in my experience). The use of a range extender can often create a situation where this problem occurs and can reduce the effectiveness of some of the solutions to the hidden node problem. In your case, the AP/router (or even other stations) may be able to still "hear" the station when it is close to the extender, but not when it is moved further away. Range extenders are not generally a good solution in almost any situation. The main positive point they have going for them is that they are inexpensive. I would look at other solutions, while it may cost more, it will be far more reliable. Here are a couple ideas to start (not knowing enough about your needs or the site to make any real recommendation): 

This is a large issue with many nuances, and one that has valid concerns on both sides of the issue. To get to the heart of this matter, you need to understand that the Internet is not a single entity. It is made up of a large number of individual networks that are inter-connected. A consumer pays an ISP to connect their personal network to the ISP's network. The ISP may be paying another service provider (often more than one) to connect to their network or the ISP could be a major carrier themselves (i.e. providing large bandwidth connectivity over large geographic areas). These larger carriers interconnect (or peer) with each other at multiple peering points (data centers where they each have a presence). The services to which the consumer wants access are either consumers themselves or may operate large networks of their own. The other concept to understand is that the internet was largely built on an "over-subscription" model to keep costs low. What this means is that if a ISP/carrier had a certain amount of network capacity, they might sell 10-30 times this amount of bandwidth to customers, knowing that customers don't use all the capacity they pay for 100% of the time. With "always on" internet and consumers using their bandwidth more (both total and average), this ability to over subscribe has been significantly diminished. Since ISPs/carriers are looking to expand their network capacity and don't want to increase costs to customers (who may choose to move elsewhere if they do), they are looking at other ways to increase revenues to offset the additional costs. Some of the ways that parties are looking to increase revenues involves treating traffic differently based on the source and/or destination of the traffic. The intent of net neutrality policies would be to prevent providers from treating traffic differently, no matter where it is sourced or destined. So let's use an example to illustrate some of the issues. To get information from a service such as Netflix a request goes from the consumer's network, to their ISP's network, possibly to one or more carrier networks (for this example, let's say A and then B), and finally to the Netflix network. For simplicity, we will assume the reverse path is the same. 

Generally when subnetting using requirements like these, it is easiest to start by organizing the subnets from largest to smallest. In your example, you have a /24 to work with and need to fit a /25 (y), a /26 (x), and a /28 (z) into that range. A /24 is easily separated into two /25s. The first of these becomes your y subnet. The second /25 can in turn be separated into two /26s. Similarly, the first /26 becomes your x subnet. From there, it should be easy to figure out z from the remaining IP addresses in your original /24. The unused IP addresses could then be reserved for future use. 

No, this isn't right. As I stated above, one could create a "Bluetooth access point" and bridge the traffic to the Ethernet segment. It would not require any sort of network adapter with an independent MAC address. Just because it hasn't been done (to my knowledge) due to a number of reasons that make this impractical, doesn't mean it isn't possible. Edit: not overly familiar with Bluetooth, but a quick follow up web search for "bluetooth to ethernet bridge" turns up a number of such devices. So there may be devices out there already doing this. 

In general, no you cannot do so in Windows with any normal drivers. There are products that provide their own custom drivers that will allow you to capture 802.11 traffic, but product recommendations are specifically off topic. Keep in mind when looking at products that you find a solution that best meets your needs. For instance, if you are running an 802.11ac four spatial stream network, you wouldn't want a capture solution for 802.11n two spatial stream. While it may be better than no solution, there will be traffic it won't be able to capture...but sometimes the capabilities of the network outpace the capabilities of the tools you can use. 

Provide direct connections between your router(s) acting as the default gateway and the other routers using "virtual" interfaces, for example through the use of VLANs and trunking/tagged links. Gives the same first two benefits I mentioned in the first option. Add a router (or routers for redundancy) between hosts in Net1 and R1/R2/R3 (as well as other similar locations such as Net2/Net4). Basically provides all the benefits from the first option, but requires extra hardware to a manage. 

MACA is broader term that covers any sort of wireless media access control. It encompasses CSMA/CA as well as a number of other protocols. CSMA/CD and CSMA/CA are very similar. The primary difference between CSMA/CD and CSMA/CA is that CSMA/CD requires that a host be able to both transmit and receive on the medium at the same time. CSMA/CD was originally used in 802.3 communication because all hosts could see traffic from all other hosts, however most modern 802.3 communication is full duplex and as such does not use CSMA/CD. CSMA/CA is used in 802.11 communication because physics makes it very difficult or impossible for a device to both transmit and receive at the same time on the same frequency (even if you use a separate transmitter and receiver to attempt this, the proximity of the transmitter to the receiver will tend to "drown out" any other signal). Neither CSMA/CD nor CSMA/CA make use of RTS/CTS as part of their protocol, they are three entirely separate protocols. However you can use RTS/CTS with either one, although it only really makes sense with CSMA/CA in certain circumstances. RTS/CTS (or CTS-to-self) is an option in 802.11 for a few reasons. Primarily it is part of a protection mechanism to allow older 802.11 devices and newer 802.11 devices to communicate properly (specifically 802.11b or earlier devices with 802.11g or later devices - many DSSS devices wouldn't recognize OFDM traffic as another 802.11 device). It can also be used to resolve a number of different issues. However due to it's significant impact on 802.11 performance, it is not recommend to use if you can avoid it. CSMA/CA is always used for 802.11 traffic whether you use RTS/CTS or not. Edit: As requested in the comment, however this will make the answer significantly longer, even keeping the explanation on the simplistic side. RTS/CTS was originally implemented in old serial devices that used half-duplex communication to determine when data could be sent. When full-duplex serial communication was implemented, RTS/CTS was repurposed to allow serial communications to implement flow control. This RTS/CTS worked by sending a signal over separate conductors than those used to actually transmit the data. Since 802.11 doesn't have different connectors, it's RTS/CTS is different in that one side sends a RTS frame and waits for a CTS response (which will include an amount of time being reserved). Other stations that hear the CTS are supposed to back off for that period of time to leave the air clear. The major drawback is that RTS/CTS frames, similar to other management frames, must be heard by all stations and are transmitted at the lowest common base data rate; this it typically significantly lower that the maximum data rate (i.e. often this is 1 Mbps when the max data rate today is often 300+ Mbps). This means that each RTS/CTS frame transmitted in the air can take as much time as 300+ data frames. To reduce this performance impact, 802.11 devices can implement a CTS-to-self mechanism instead, reserving the air for themselves. However this should only be done when used for the purposes of providing legacy support (many 802.11b devices do not recognize 802.11g signalling as 802.11 traffic and this helps prevent them from creating collisions). If you are trying to alleviate hidden node problems (i.e. two or more stations that are able to associate to the same access point, but can't see each other and end up tranmitting at the same time), you need to use full RTS/CTS as you need the CTS to originate from the AP. In addition, both mechanisms (RTS/CTS and CTS-to-self) can introduce performance issues to any neighboring BSS that is exposed to the CTS frames as they will be required to back off as well. CSMA/CD starts by a device listening to the medium to see if it is clear of other transmissions. If the medium is clear, it will start transmitting and if the medium isn't clear it will back off for a random amount of time and then listen again. When the device is transmitting, if it receives a signal at the same time, it will trigger the CD part of the process. To resolve the collision, the device immediately stops sending it's data but continues to transmit a "jam signal" to allow all devices to detect the collision and back off for a random amount of time. The device that was transmitting when the collision occurred will also increment a retransmission counter and try the frame again unless it has reached it's maximum retries. CSMA/CA starts the same as CSMA/CD; a device listens to the medium to see if it is clear. If it is then it will begin transmitting otherwise it will back off a random time and try again. However, as I mentioned earlier, it is not possible for a wireless device to transmit and receive at the same time, so it cannot detect a collision. Then how does a device know if it experienced a collision? It can't and doesn't, hence why it isn't CSMA/CD. In CSMA/CA the receiving station will send an ACK for received data frames, if the sending station doesn't receive an ACK, it assumes the frame is lost (due to collision, interference, noise, or any other reason) and retransmit. In 802.11 there are often two retransmission counters, one that will cause the next retransmission to use a lower data rate (i.e. higher data rates require better signal quality, so perhaps a frame the fails to transmit at a higher data rate will succeed at a lower data rate) and one for the maximum number of retransmissions. Well, that is a brief explanation of how they work. Hopefully this is enough to help you understand them a bit more. 

Want to take a guess at my answer here? This would depend on the particular networks's behavior as a whole. Different networks will behave differently (based on vendors/models and configurations). My guess is that on the majority of networks, this would not result in the scenario you describe. 

In the absences of a feature like IGMP snooping, a L2 device will flood a copy of the frame out every active interface besides the one on which it was received. In your example, this means that both SwA and SwB will send the multicast traffic out every one of their active ports besides the receiving port. IGMP snooping is a feature on most modern enterprise switches which allows the switch to learn which devices are joined to which multicast groups and only forward the frame to those destination ports. In your example (assuming both MachineB0 and MachineB1 had joined the multicast group and are the only devices besides MachineA0 to do so), SwA would send a copy to SwB and SwB will send a copy out the ports going to MachineB0 and MachineB1. The frame would not be sent out any other active ports. 

As for features that can create problems like this, there are a number of them including dynamic ARP incpection (DAI), IP source guard, or any other feature that requires the use of DHCP for hosts to operate on the network properly. However, just disabling gratuitous ARP won't typically cause a difference in how those features work. So maybe something like an ARP rate limit may be in play. Ultimately, your simple question of are there such features, we can answer. Telling you which and why they are working as you describe would take much more information (vendor/models of devices, diagrams, configurations, packet captures, etc). 

Yes, you put your IP helper statement on an SVI on SwB (which has no IP address). It should be on the SVI for VLAN 2 on SwA. Keep in midn that if you are configuring an SVI for the first time, it is disabled by default. To enable the SVI, you would need to add a no shutdown statement to your configurations unless you had previously configured and enabled the SVI. This also assumes that the DHCP server is connected to Fa0/3 on SwA and that the station is connected to Fa0/2 on SwB based on your configuration above. Edit: A final note is that your DHCP server needs to be configured to understand it is providing service for more than one network. If it hasn't been configured to do so, it may not provide the correct information necessary for the setup to work as you wish. 

Only if the SSIDs are using two different radios. If the different SSIDs are using the same radio, then no, they must use the same channel/frequency. Note: Portions of this post are copied from my own response to a similar question on ServerFault. 

When it host is going to send IP traffic, it first checks to see if the destination IP address is on the local subnet. It uses both it's IP address and the subnet mask to make this determination. If the destination IP is not on the local subnet (your case), the host then checks to see if it has a route to the destination IP in it's routing table. Generally most hosts only have one route, the default route or gateway that is provides somewhere to forward traffic for any other network (barring any more specific route to the destination IP). In your case, with no configured gateway, the host will determine it doesn't know how to get to the destination IP. This means it has nowhere to send the traffic resulting in the traffic being dropped while generally returning an error like "No Route to Host." 

Beyond that, I would start at the NICs as you already indicated. Could be you got some from a bad run. 

First, a PSK is not a password. This is a common misconception. A PSK does not provide any sort of authentication. Rather, it is a known value by the station and AP to generate and securely (at least from outside sources without the known value) exchange keying material for use in encrypting further traffic. To be clear, WPA/WPA2-Personal does not authenticate, it only encrypts traffic. As such, the behavior you describe is normal 802.11 operation. Your Android device was able to connect to the SSID it was configured for and then with the same PSK, it was able to successfully negotiate encryption with your new access point. 

TL;DR: It is impossible to answer your question (as currently written). Frankly, I am tempted to close the question because there really isn't enough information to answer it (i.e you aren't providing any vendor/model numbers or enough detail). Generally speaking, an Ethernet interface will not be able to speak to a serial interface. So if you are talking about a something that allows you to simply plug a RS485 connection into an RJ45 port (i.e. something goofy like cutting one end off a RJ45 cable and connecting the individual wires to the terminals), then no this will not work. If you are talking about an actual device (at least $50+ draws it's own power via power supply or PoE) that will convert the serial signal into Ethernet data and back on the other end, then the answer is maybe. There are two types of Modbus that I am aware of, Modbus serial and Modbus TCP. If your firewall says it can do DPI of Modbus, it may be speaking strictly of Modbus TCP. If you converters are converting Modbus serial to Modbus TCP, then this may work. If your devices are converting the serial to Ethernet in any other way (as one example, a proprietary format that encapsulates serial data in encryption for security), then the answer is at best back to a big question mark and quite possibly no. Even if we assume that your firewall can actually understand the Modbus information in the Ethernet traffic, it still doesn't mean the answer is that it will work. Just because a firewall can identify it as Modbus traffic doesn't necessarily mean it will be able to filter out specific Modbus function codes based on this information. Without knowing what firewall you are talking about, we are again back to the issue that you haven't provided enough information.