I've got the following tricky problem: I'm using pin #22 (GPIO25) of my Raspi 3B as a GPIO input and read its state by using the pigpio function , where is a pointer to the function called when pigpio detects a state change. After adding a JustBoom DAC HAT sound card, the input kept on working, but once I started talking to the sound card by using the function of the mpg123 library, I stopped receiving alerts from pin #22 without getting any error messages. The pinout description of the sound card states pin #22 as optional (for use with an IR receiver). I don't have such a receiver soldered to the sound card, so that I don't really understand why the card interferes with a pin it isn't using anyway. Low-level checks by using and did deliver correct resoluts: Once I pulled pin #22 to high, I received a 1, and a 0 when I pulled it to low. Any hints? Thank you for any useful information. 

So, what I want to know is: should I be worried about this RPi 3, whose red LED turns off occasionally during boot, in the long run? (otherwise, even with the red LED turning off, this RPi 3 still boots fine - if I hook a screen on HDMI and a keyboard, then I can log in etc, without a problem; except I've noticed there's sort of a color gradient box on screen, that shows and disappears in sync with the turn off/on of the red LED... EDIT: this color gradient is/was apparently called "rainbow indicator") 

The current use in this case seems roughly similar to the previous case, so I would assume, that it is not a problem that the PSU can deliver less than the RPi 3 max rating of 2.5A -- but the problem was that the voltage was too low; so with a power supply voltage of close to 6V, finally the red LED turn-off issue is not there anymore. 

I've now got an Ultimate GPS board attached to the UART, and use both the GPIO pins, and the SPI interface by addressing the pigpio library. The pigpiod docs tell me that pigpiod would control the UART, too, but then it would probably interfere with the gpsd, which already controls the UART. Any suggestions? 

OK, I've managed to solve the problem myself: In fact, I had prepared the sound output beforehand by using the ALSA audio API functions described in this tutorial, unfortunately including a call to the function, which engaged the sound output device. After studying the sourcecode of out123, I found out that out123 already opens the sound device when issuing the function â€“ by using , of course. However, I've still gotta find out how to make the necessary settings to ALSA when working with out123. 

I don't have much experience with Raspberry Pi. However, I've just noticed a difference in booting between Raspberry Pi 2 and 3, and so I've taken a couple of videos to show that. In both videos, the Raspberry Pis use the same image (based on Raspbian 7), and are powered by the exact same USB cable (which is connected to externally powered USB hub); both videos start with the RPis unpowered, then I plug in the USB cable at the other end into the hub to power them (unseen in videos), then the LED light patterns during the boot process are captured for about a minute. For the RPi 2, typically once the red LED is on, it stays on - while the green LED flashes according to disk/SDcard activity: 

When calling mpg123 from the command line, though, I do get line 1, but not line 2, and the line with is also missing in the debug output! 

Apparently, when calling , the function is also called and switches off the sound card. How can this be? Does everybody know hot to prevent ALSA from shutting down the sound card? Thank you. UPDATE: Upon another user's advice, I found this when calling : 

At least I've now got a workaround now: I got the sourcecode tarball from Github and compiled it myself. I know this isn't a very clean approach (especially not not on production systems), but at least I've got a working mpg123 installation now. 

After a thorough check of the wires leading to the display, I found out that the soldering of one of the ground wires (which is soldered to the GND connector of a USB cable, which is itself plugged into the UPS of my Raspi) had gone loose (which was invisible at first glance). Unfortunately, it wasn't just some GND pin, but display pin #20, which must be pulled to GND for the display for its SPI interface to work. After resoldering this wire, everything now works fine. :) Shame over me!! 

You do . You can just use one bigger power supply and cables out. In general it is a good idea to not overload the Pi. So that means if you can power the LCD using the seperate power cables, and wire it directly to the power supply! You should invest in a a slightly supply. Forgot these cheap USB things. I am talking about power efficient that only use as much power as you need AND provides clean DC power. You do not have to break the bank, you can get these of ebay or dx.com for about a fiver for a 3A and under a tenner for 5A. 

So the best choice here is the Model A for low power consumption. To further decrease power consumption. 

What is strange, is that the current measured rarely goes over 0.5A during boot, so it didn't seem to me that lack of current is the reason for the red LED blink (although, arguably, the "refresh" rate on the LCD of the PSU which shows the current measurements could be slow enough, so as to obscure some current spikes, if any were occurring). At this point, I measured V26 (voltage on pins 2,6) - which should otherwise provide Vcc - it measured 4.72V, that is, roughly some 0.3V less than the input voltage. So, at this point, I started increasing the voltage supplied by the PSU. First I increased to 5.45V; in this case, the V26 was 5.15V - and while the frequency of red LED blinking decreased, it still did turn off at times. In the end, I set the PSU to 5.94V; in this case, the V26 was 5.63V - and finally, there was no more red LED blinking! 

I'd like to play MP3 files on my Raspi 3B by using mpg123, so I added (among others) the following lines of code into my app: 

The default device is a JustBoom DAC HAT named plughw:0,0. When using mpg123 on the command line (by using the device name explicitly, or resorting to the default device), everything works fine, but when using the mpg123 library functions in client code, I always get such an error, no matter whether I set the device and driver names to NULL (which means trying out the drivers out123 knows and using the default device). I don't really execute mpg123 by using fork ()! What's the problem here? Thank you for your help. UPDATE: After switching to the recent mpg123 version from GitHub & setting verbosity to 3, I get the follwoing messages when issuing : 

Ok, thanks to the answer from @Milliways, I decided to make another test with powering the RPi 3. First, I should note that the tests in the OP question were made with a USB hub, which comes with an adapter that is rated 5V, 2A DC. I was sort of expecting that if there is only one USB load in the hub, that all of the available 2A current would be given to this load - but it is also quite possible that each port of this hub is current-limited to 500 mA, regardless of how many USB loads are connected. Also, here I tried a different Rpi 3 board connected on this same hub - and it also exhibited the red LED blinking during boot. Anyways, to get rid of this unknown, I soldered myself a USB 'power' cable, powered directly from a Thandar TS3021S adjustable PSU. This PSU is rated at max 2A (which is less than the RPi 3 maximum of 2.5A); I've set the current limiting to some 1.9+A -- and as a bonus, the PSU measures/shows the actual current used on its LCD. So, here are the results - when I set the PSU to 5.01V, the red LED still blinks (it's a bit hard to see on the video, but is still visible): 

A brief look into the out123.h header file revealed 2 as the current API version. I've got libmpg123-dev from the sid branch, as the version from the stable branch lacks the out123 files I need. What's wrong here? Thank you for any useful hints. 

As I'd like to play MP3 files on my Raspi 3B, I installed mpg123 together with the libmpg123-dev package so that I can call mpg123 from some host application. However, every time I call out123_open (), I get seven identical error messages, which read as follows: 

The return value of is then , but in the same moment, the status LED on my sound card (JustBoom DAC HAT) is switched off, and the card delivers no sounds any more (until I reboot my Pi, at least). The debug messages emitted when is called look quite strange: