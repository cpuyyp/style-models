Which will save you a lot of rewriting if you decide to change the names of any of the properties down the line 

And you can delete the rest of your class. Edit: Using the new method would then allow you to add pieces of text at the specified points in your message, so your validation method that returns a State would use it as follows: 

So it sounds like they want it so you can add a mouse to the choir and it will only squeak, and a cat will only meow. Instead you have a single choir which randomly picks a sound to make and no distinct objects for the animals. I suspect they were wanting an Animal to make a single noise which is specified upfront in a more object-orientated way. Something like this at a minimum: 

Then you can have your validation method return a state, and you can do your checking block after, like this: 

With this, you can remove the first if/else and foreach loop entirely, by removing the ternary and using , like so: 

If you want all your exceptions to follow this style, then you could have one parent Exception class, then make your application exceptions extend it, like so: 

The first thing that jumps out is all the Strings you have which are reused throughout, those need to be removed and ideally put into constants so you only have to change them in one place if you ever need to rename them: 

As this part of the question has been skipped so far, I'll take it: Do you think this is too hard? I think it is. Similarly to your game, in classic Mastermind, the player has to guess a combination of 4 non-unique coloured pegs, and each time is given a mark for the number of correct position and colour combinations. 64 = 1,296 possible combinations However, with your game (to borrow the nomenclature), there are 10 possible pegs, and as they're unique the combinations are: 10 x 9 x 8 x 7 = 5,040 possible combinations Which is an increase of 288.8%, furthermore you're only giving the user 5 attempts to guess, as opposed to Mastermind's 6, 8 or 12. The reason Mastermind plays with a minimum of six, is that you get to test every combination, e.g: 

Do you really need to have a dependency on ? Why don't you just require it to depend on ? I'd also completely get rid of the class. What do you need it for? If you want an abstract class to represent a you can create it but you should do it in the following way: 

I'd structure your program in a slightly different way. First, instead of passing around two arrays of , why don't you introduce a data structure and work with it? It would save you from checking that you get passed two array of the same length, which looks quite neat to me. I think you could also consider introducing a data structure to hold your pair of slope and intercept value. If you do that it will be much clearer what your function does. Since you eventually want to have a function you can play with, you could create a . In this way you decouple the computation of the coefficients that best fit with your data and the construction of the corresponding curve. This enables you to play not only with the curves you fit from data but also with curves you can define from their coefficients. I think that a nicer way to compute the value could be by putting as much math as possible in some temporary variables you define in the block. That could allow you to separate the high level computation you need to perform with all the other smaller steps required to compute some other intermediate results you need. If you apply the changes I suggested you should come up with code similar to the following: 

Note that you need to include both the start and stop dates but returns the difference between these two dates causing an off by one error (Credits to mjolka for noticing it). For instance is one day but you want to include both these dates so we should add one to the result. 

There's a few changes I'd suggest to insert, firstly as the second parameter has to be an array, you can use type hinting to indicate this: 

The ideal package structure is one which indicates usage. Classes such as these which exclusively contain static methods are definitely utility classes, which I usually put in a subpackage of your main application. From what it sounds like, you don't have a main package at the moment which ideally would be your website (in reverse domain order), e.g. so that the more specific elements are later, then on top of that you'd have the name of your application which may make it something like . This would be the core of your program, and from here you could then add on your extras. The package in particular doesn't sound helpful: your entire program seems to relate to Twitter so it doesn't really convey what that part of the program does. Frankly, I'd just put all those classes under and add in more sub-packages if you add more classes. And generally speaking, in Java packages should be exclusively lowercase. 

I don't really like the method of exception pseudo-typing you're doing, I'd use different objects to represent the type of exception rather than the content, like so: 

I would also avoid using regexes or any kind of manual string parsing, you can do it all with and , thusly: 

Another thing you should be careful about is ing the same thing over and over, as it's usually unnecessary and can be replaced with a which will ensure that it's only loaded if it hasn't been in the current session. 

It's secure, but it's really chunky and tedious to write. I'd do this by overriding the magic method to trick GSON into thinking the methods exist, like so: 

In order to have a more object oriented solution, I'd replace the that you use to choose the integration method with polymorphism or with a strategy pattern. I'd also avoid mixing methods that handle input/output and methods that does the computation of the result. Consider having I/O in a separate class that the one actually doing the integration. Is your class representing a single number or a set of number? If it has to represent a single number please call it . I'd introduce a data type and use it to introduce the output of the method. Why should it return a ? 

I also noticed this comment and it is a bit of a red flag to me. It is the only statement in that method so you should have it to actually return something, not only to make the compiler happy. 

Generally it looks good, at least to an Haskell beginner like me. I find the use of to be a bit confusing. I admit I had to read your comment to understand why you used it. I think it could also have introduced a bug. What is the expected behaviour for ? Your code returns but I would expect . Was your behaviour intended? This solution fixed the issue. 

I think you should try to separate better then concerns of your application, creating different functions for the different logical tasks you do. I'd create a function to handle/validate interaction with the user and another function to convert your numeric value to the corresponding grade. You're right that your approach has lots of duplication. You can easily improve it by creating a sorted map or a list of pairs of marks and their lower bounds. In your case the list should contain: 

I'd change a few things to make your code cleaner. Your method does three different things: it extract the message from the context, it creates the intent and it finally launches the email app. What about introducing a class, a , and an methods? is definitely to arrow-shaped. I'd refactor it to separate the logic of creation of the package info string and the code to retrieve the instance. 

The first thing I spotted was this: . I'm not sure if that's an error with your page name or code, but whichever it is needs to be fixed. 

The best optimisation is only doing what's necessary. When checking the login, you don't check whether they've even been specified until after you hash it, consider reordering it like so: 

I've been implementing a custom internal server error page in ASP.Net MVC which will check if the current user is either an administrator or accessing the page from localhost, and if so, show them a whole bunch of details about the error to debug it with, otherwise just send them to a basic HTML error page. So far, it works great, but one problem I had was that if there is an error in a partial view on the page, the system gets stuck in a loop trying to report the error. To avoid this, I'm storing a temporary counter of how many times the current action has requested the error page in , but I find the amount of lines and style of the code to get, set and check this variable a bit verbose: 

Therefore, I think you need to either increase the number of guesses to 10 (at the least), or chose a smaller set of things to guess, like A-F, 1-6, or something GUI based like Mastermind. 

If number of lines is your primary concern, then really all we can do with this is merge your array creation lines, and use to create temporary arrays which you can loop around, like so: 

It all looks good to me, though you can simplify your NodeBase and methods if you use variable properties, like so: 

Additionally, you have made and into optional parameters by making them auto-initialise to empty arrays, however you cannot have an statement without specifying at least one field and value, therefore instead of making them optional array parameters, you should use type hinting to ensure they are arrays, and then check to make sure that the arguments are correct before you send the query off to the server, something like this: 

Your implementation looks good but I can spot a some flaws in it. To begin, you check that after having already dereferenced it at . Moreover I'd like more to see an in the case of a tree rather than getting the answer. I don't even get why you create a new . Why can't you use the nodes you already have in the original tree? In your implementation you try to access the left and right children but you never set them before in . 

The updated code looks much better but you could try to extract some more common structure. You can define fading in a general way that allows you to plug in some fading strategies. You already have fade in and fade out but you'll be able to reuse the same code for other 'fading'. 

I think you should clarify what is for. It is true that it allows you to run some slow operation outside the main thread but it is not meant as a way to achieve parallelism. It is just a way to allow your application to continue processing without blocking on expensive operations. Have a look at this video which explains it quite clearly. You obtain multiple threads with your fire and forget execution deriving from but you should avoid using them. They should be used only in event handlers. You need a more structured approach. You need to create several instances and start them in parallel. Obviously, each task can perform async operations. This MSDN article is a good starting point on how you can do that. This is the code I came up with and that should do the trick in a cleaner way. 

Disclaimer I'm not a Javascript expert so I cannot guarantee that the code I wrote works flawlessly but I hope you at least got some ideas on how you could improve your code. 

I also recommend you train your ability in converting recursive searches in bst trees to iterative ones using while loops. It is good practice. 

You should embrace the builtin types Python provides for you. I will show you how you can replace every method in your class with functions based on those. First becomes: 

1000 unique strings representing paths through the graph will be generated. Ideas on how to improve the function would be greatly appreciated. Also on the format I'm using for representing the graph. It is usually very efficient to store a graph as a dict whose values are themselves dicts, but perhaps there is a better format. 

They work, but I would like to be able to parametrize the key too and not just the value. And the / is because there was a strange compiler error about borrowing I couldn't solve. 

is just . is also very easy to replace. Your makes a class out of what should be a function. It can be implemented like this: 

I'm not pasting the source for , and friends. They are all declared using the keyword for maximum performance. It should be obvious what they do if you know that they operate on a struct containing three float fields; , and . The second less known one is Segura-Feita algorithm: 

I'm learning Rust so as an exercise I'm trying to write a datatype wrapping the builtin to allow it to store duplicates. Like the STL multimap type. The functions I have: 

Why are you passing in here? You don't use that variable afaict. You can easily change the signature to . Anyways, your insert can be made better by using a pointer-pointer! 

I have a graph which we can think of is representing a network of train tracks. Each node is a station and each edge is a piece of track connecting two stations. Each station node may be connected by more than one track and all tracks are one way (i.e the graph is directed). My job is to find as many routes as possible connecting one node with a set of destination nodes. Routes may contain cycles to the train track analogy breaks down here, but whatever. I have Python code to perform this task, but it is to slow so I would love to get some help in making it faster. Below is my traversal function: 

However, when you increase the number of possibilities to 10, and reduce the guesses to 5, you can no longer do this, and the chances of never guessing a correct number increase dramatically, e.g.: 

I have a array and a of a custom object and I'm needing to loop around and perform an operation on both but only as long as one of both is available, the original method is as follows: 

Additionally, I'd suggest reading up on your SQL for a start, this whole thing screams out clause. In every case, your database will be more efficient at sorting the results than whatever programming language you're using them in (and certainly PHP). Such as: 

This way, you don't have to override every time, and you also don't have to put "ERROR" into the actual text of the exception. 

Obviously the on every iteration is inefficient, however as I need to maintain a counter, an enhanced loop means keeping a separate counter and performing a check on it every time like so (list declaration skipped for space): 

If the code will be distributed, read or maintained by others, you might want to look at your naming conventions as they're a bit inconsistent, for example sometimes you use underscore separated names such as , but other times you use sulkingCamelCase such as and in class case. Either one is fine, as long as you use the same throughout. Aside from your single line getters and setters, the function names you've chosen are not always indicative of what the function does. Ideally you shouldn't have to read the actual code to know what a function does, consider these changes: 

There's a couple of issues with it, for start your nested if blocks are unnecessary: instead of manually checking and returning true or false, just return the result of those methods, like so: