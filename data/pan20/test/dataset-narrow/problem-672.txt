As far as I know, Meteor's reactivity is one-way: changes in data are reflected in the DOM. To go the other way (DOM to data) there's two common methods: 1) grabbing data directly from the DOM when it's needed (i.e. to save it) as you've done above and 2) binding DOM elements to data models, and using the data models for CRUD operations. 1 is simpler to implement, but 2 gives you more control over data-flow, subscriptions, and life-cycles. 2 has plenty of great libraries you can use, so you don't have to reinvent the wheel just to leverage these benefits. Backbone.js is probably the most well known plain-JavaScript library for this sort of thing (also check out Lo-Dash and Exoskeleton if you haven't), but the Meteor ecosystem may have a preferred library for this. 

$this->get('feed_parser') is just a fancy way of getting a SimplePie object from the PIMPLE container - you could just instantiate a SimplePie object yourself (if you want code you can't test). After running this code, $item would be a PHP array (or some collection class) containing the details of one image. In my case, I then exposed this as JSON and a REST API endpoint for use by JavaScript, but you could just as easily have PHP output the appropriate HTML. 

allows you to combine and , essentially allowing you to do pattern-matching in situ. Leads to 1 less intermediate collection (seeing that you aren't using lazy s) and cleaner code. 

Putting in s everywhere makes your code look somewhat cluttered. Instead, use Python's support for raw strings, in the form . Note the prefix before the double quotes. That's what designates the string as a raw string. In raw strings, each character is stored WYSIWYG, which means that linebreaks in the string are preserved. Avoid the burden on the user of the script for choosing the correct clear-screen command. It is possible to detect the OS in Python via: 

Now, you feel like you've probably lost all your beautiful formatting! Not to worry - to the rescue! It'll get you a containing the representations of all the elements in the , separated by commas and spaces with the whole thing enclosed in square brackets. So now we get to . Why hard-code ? I'll show how you can get the maximum number up to which to check for perfect numbers as a command line argument, and improve usability while at it! 

I think this is fine for something as simple as a volume control; however, there are some limitations to at least be aware of: 

You could simplify this even further by using a single CSS class for all elements that need animating. e.g. Also, if there are any animations that are triggered by mousehover, you could do all the animation in CSS with the pseudo-selector. Finally, make sure the CSS transitions you use are compatible with all the browsers you're supporting. 

While this may seem "decently normalized", it's not. As you said yourself, there will be a lot of (redundant) NULL values, but also, relationships will not be enforced correctly, as this schema allows for duplicate records for any combination of Post/Group/Link and Tag. For instance, you could have two tagmap records with the same and . Now, while you could add a compound key consisting of PostID, GroupID, LinkID, and TagID, then you have another problem: a single record can contain more than one (non-tag) Post/Group/Link relation. e.g. a tagmap record with = 1, = 1, AND = 1. This can lead to update anomalies. See Second normal form. A normalized solution would be to have three separate tag-relation tables as abuzittin gillifirca suggested: , , and . Doing so will eliminate all the redundant NULL values and allow you to enforce relations correctly. Having said that, I'm guessing you came up with this design, because you want to use a single query to fetch all entities assigned to one or more tags. You can still do this with multiple tag-relation tables like so: 

Try using and it's method instead of repeated string concatenations. As an additional point, you could set the capacity of the on instantiation to the maximum expected size of the output, to prevent array reallocations. That is, replace where is a , with where is a . s are mutable and avoid the object allocation overhead of concatenations. 

Type Coercion is not readable! Don't use implicit Boolean coercion of numbers in code which you claim to be "readable" - it isn't. Use proper comparisons in readable code, and leave the cool weak-typing hackery for the golfed version. How much does writing out the actual condition improve the readability of the code? Everything else seems to be fine - naming, indentation, and all. 

Type-alias to and import it to reduce some visual clutter. Also do the same with by aliasing it to to reduce visual clutter even more. 

Suggestions I guess you are coming from a C/C++ background. Java arrays have a property called , which gives its size, so you don't need the parameter . Just use wherever you have used . I actually once thought that swapping the first element with every other element times was an original algorithm for rotating an array I had thought up myself, and it's in-place but this has a time complexity of . There exists a better algorithm working in time, which uses the idea: Instead of moving one by one, divide the array into different sets where the number of sets is equal to the GCD of and and move the elements within the sets. In Java, the code would look like this (note: This only does a left rotation): 

Definitely separate your PHP from HTML as Alex suggested. You probably don't need to go the full MVC route for something so simple, but simply generating your PHP variables then outputing your HTML would make your code a lot more readable/manageable. I like your idea of generating a random string and checking it, but Flambino's right, it will never be reliable (by design) - also, imgur probably hates you ;) A simpler approach would be to consume imgur's RSS feed: $URL$ I was bored one morning, so I added something similar to the login page of one of my projects. It pulls one random image from lolcats' RSS feed and inserts it into the page. Here's the code that pulls the image: 

Since RequireJS invokes the module, it would be problematic to construct dynamically. There's no good way of creating more than one instance of your view – probably not a problem. The View is tightly bound to a specific DOM structure. This means it will require extra code to make your View responsive. e.g. a small volume control for mouses (desktop) and a big one for fingers (mobile). 

Simple, succinct, and to the point. I'm absolutely sure your code is overcomplicated for its intended purpose, and functional programming is not just about pattern matching and recursion, it's about being able to create greater functionality from pre-existing functions. 

Note that 's methods don't throw any exceptions - you need to call on to find out if any errors occurred. Internal calls may produce exceptions which may propagate up to , but that's not the general case. (Check the JavaDoc here.) The same for reading the file. Here my stylistic suggestion (2) should come in useful. Alternative Constructors and Encoding has a constructor , which does exactly what you do manually. You could just provide it the file path and it'll work. No need to manually create and objects. What is that in the second parameter? There's an overload of this constructor without the parameter - ideally, as @Peter Taylor said, you shouldn't use it. Why? "CSN" stands for "CharSet Name", or the output encoding. You'll generally want to pass in , which should be (case insensitive) for . You can find by importing . Encoding can be a problem when you go multiplatform. Note that or do not have such a parameter in any of their constructors. What you would want to do here if have Java 7+ is to use the class ' method to create the with the specified charset. You might call it like this: 

People do this sort of thing all the time in the JavaScript (this.arguments) and Python world (*args); however, by removing type constraints from the parameter list, you have to be wary that you're always providing the types of parameters your function is expecting. If one of your parameters is supposed to be a string, and someone passes in an object, bad things may happen. Conversely, some very respectable projects use multi-line parameter lists. It's fine to have a lot of parameters, as long as they're all necessary, but it's always good to be skeptical. Long parameter lists is a good code smell – if you see them, the code may need refactoring, but not always. As far as the attributes of Box's, forget about programming for a second. Conceptually, what are the properties of a box? Can a box still be a box without a color, tileW, tileH, walkable, speedY, and speedX? Can a box still be a box if it doesn't know how to draw itself? If your answer is no to all of these, then your code is fine, and requiring parameters as a single collection/object vs. individual parameters is (arguably) a matter of preference. That being said, I would move the three lines to a separate method . It's best to only do construction in the constructor, and leave the rest – like rendering – to other methods. 

All in all, functional programming is about composing functions together to write programs; immutability and stuff is good to have but it isn't primary. You have some repetition, as in the check - see if you can get rid of it (Hint - you might want a function which can iterate over the values of the enum and check if any of them have won). Also, this 

The initial direction is always ; although you accept the initial direction as an input, you never use it. That line should be 

Style You have inconsistent indentation and spacing. If you are using some very simple text editor like Notepad for writing your programs, you might one check out editors with auto-formatting of code, or use an IDE. Also, you don't have proper whitespace surrounding binary operators. Finally, your variable names are somewhat nondescriptive, but in this case it would have been OK if you had properly documented your methods. 

Make your function parameter . Although C++ is call-by-value, making it explicitly and mutating a local copy of the variable is never a bad idea, and it does make your function contract that much clearer. On the performance side, since on any reasonable computer will have maximally 16 bytes (64 bits of 8 bytes is the case for all common architectures, except for probably some microcontrollers which will have less, even as less as 1 byte) (note that the upcoming RISCV architecture does have a native 16-byte (128-bit) integral data type, but the 64-bit one is the default), you can easily make this function a template, such that the computation of the byte vector can be done at compile time without much overhead and incur no runtime overhead. You can probably even pre-set the capacity of your utilising . Although I'm not sure if this suggestion will work in the constraints of your application. 

The advantage here is can be anything as long as it shares the same API. OK, so now let's talk about ensuring only one DB connection exists at any given time. Since the DI dependencies are just anonymous functions, you can just use the static keyword inside of the dependency definition; however, Pimple makes this even easier by providing a method that does this for you. As per the documentation: 

I'm not following. Which file/object? You appear to pass the JSON object from to your constructor, and this is just a plain JavaScript object. 

After a cursory glance at the character codes for these, it looks like the lowercase is 32 (decimal) higher than uppercase. e.g. 'é'.ord - 32 == 'É'.ord You could try something like this: 

Since this is all the code you posted, I'm going to assume you're only using these functions in the place they're defined, so the later code would be best. It's more readable and doesn't include unnecessary identifiers. Your question is really about anonymous functions, not closures. To answer this question, you should ask yourself, "do I plan on using these functions elsewhere"? Since anonymous functions, by definition, are not bound to an identifier, they will be inaccessible everywhere except where they are defined. This is the version that I would recommend: 

For , an algorithm is to do it the normal, C (pointer-based way). Traverse the list maintaining references to 2 elements, the current element and it's previous element. At the element to be removed, set the field of the previous reference to refer to the element following the current element. This would work far better with loops than and . Again, imperative and functional don't really mix well in the same part of the program. Take a look here for a reasonable functional singly linked list in Scala. 

(This is in fact what I translated into Java, having coded this much earlier for a personal project). This is not as memory-efficient as @coderodde's iterator version, but it is algorithmically simpler and easier to understand, I hope. I put in a few tests in so that you can check that this code does the same thing as yours. Note that here you can replace the and with and to get an even more general version of the code which can find the Cartesian product of any collection of s. Here, you should also swap 

I ended up using the decorator pattern. The report view and each graph object now implement a method. When the report view's is called, it iterates over each graph, calling the graph's . The latter method receives the report view as a parameter, and this provides access to convenience methods for creating/retrieving DOM elements for the graph to attach itself to. New report view: 

Likely, just has a single default state, but if you ever want to construct this object yourself, you should consider return-/exporting the definition from your module, rather than returning an instance of it. A simple solution here is to simply return the result of . Use a template. In the future, you can use additional templates to support other platforms. e.g. start with a desktop template, later on create a mobile template, and choose the template dynamically at runtime based on the environment. 

This looks pretty good, not much room for improvement I think. LinkedIn's JavaScript is calling linkedInApplySuccess, correct? All you have to do is specify data-success-callback, or something similar, in your HTML? The only minor thing I would do is instead of sending just the job ID, send the entire JSON object. As long as resources aren't an issue, it's always best to capture all data and disregard the stuff you don't use rather than only collect the stuff you're currently using; this is because requirements change, and in the future you may want to do something with the data you've been ignoring. For instance, you may want to calculate how many people are applying for jobs with the position "Chief Weasel Wrangler". You can alter your code to something like this: