Here are my thoughts on this. Editor and Terminal This is most likely the more lightweight solution. Editor and terminal often don't consume much space (or, at least, come bundled with the operating system so it doesn't really matter) and start fast. Using editor and terminal can demonstrate students that writing a program can be done without using a huge IDE including a lot of tools, as it is essentially not more than writing down instructions using a normal text editor and executing them. An advantage, especially for beginners, could be that it doesn't overexert the students with too much information - in contrast to IDEs that come with syntax highlighting, code style checking, automatic error correction and code suggestion. It's worth noting that there are multiple "levels" of editors: When choosing the editor, one could choose between a simple text editor without any programming-related features (not even syntax highlighting), more advanced editors that have syntax highlighting, or something like IDLE, which is an IDE on the one hand, but at least in my opinion more like an advanced editor. This could help finding a compromise between a fully-featured IDE and a text editor. IDE IDEs are most likely a more heavyweight solution. Normally, they consume a lot of disk space as well as memory and have a notable startup time. They can assist fixing errors by highlighting them and providing possible solutions. This is definitely an advantage in day-to-day use, however, when it comes to teaching how to find errors, one could interpret this as a disadvantage, as it's possible that students start to rely only on their IDE when searching errors and wouldn't be able to find them without any help. Furthermore, IDEs can help to improve programming speed with features like autocompletion, built-in refactoring tools etc. A feature that could be nice to have for beginners is that IDEs normally have a nice debugger which could be used to motivate students to debug their code when they see an error. This is something the editor/terminal combination can't achieve - even if there are command line debugging tools, they are most likely not user-friendly enough. What I believe is also worth noting (inspired by Ben I.'s answer to a related question, thank you) that IDEs come with integration for professional developer tools like version control systems or unit testing. I am not sure whether this is already needed in the first year of programming, but I can definitely come in handy later. 

I'd say, it is a set of instructions1 (a "language", the words are the operators, sentences are expressions and so on) to tell a computer what it should do. There are instructions to do basic arithmetic or calculations, instructions you can use to interact with the user, and instructions that can control the program's flow, for example by repeating other instructions or branching, so it does different things when confronted with different inputs. 

I personally use the built-in Git integration of various IDEs in my day-to-day work and am very happy with it, so I could recommend it to everyone who doesn't want to experiment but just wants to have a good-working Git client. 

Providing a reference solution that is not visible to the students until the course is done. Having a way for your students to define a finished solution they can (probably only virtually) "hand in"1 

Providing a reference solution To achieve this, I would just create a repository containing the reference solution when the course is done and share the link with your students. If you have the ability to create private repositories, you could use this to check that only your students have access to the reference solution (and not also the students of the course you give next year). Defining a finished solution Each student has their own working repository. As it's necessary that all of them start with a given initial set of files, they could create their repository by forking a "starter pack" repository you provide. If this wasn't required, they could just create a new empty repository on their own. To mark a state as finished, I would use branches. You could for example require your students to create a branch in their repository once they are done. Having everything in one namespace (optional) Most Git hosters allow the creation of organizations or groups. If you want to, you could create one for each course you give. This organization would then contain the working repository of each student and the reference solution when the course is done. This would provide an easier overview for you over your students' repositories. 

To highlight your code changes, you could try using the Git support of your IDE. The text editor Atom as well as the JetBrains IDEs (like IntelliJ or PyCharm) highlight inserted, changed or removed lines by coloring the border green, yellow or red, as long as the changes are uncommitted. Combined with a high zoom level or fullscreen mode this could help your students to follow what you do and find out what you've done if they weren't paying attention by looking at the border marks. Git To use Git, you have to create a Git repository in the folder with your code files first. This can normally be done in your IDE (Atom: Ctrl+Shift+9, click on "Create repository"; PyCharm: "VCS" → "Enable Version Control Integration", select "Git" and press "OK"). Now, the change highlighting is active. When you're done presenting the changes, you have to commit them to tell the IDE that you've completed the changeset (Atom: Ctrl+Shift+9, click "Stage All" at the top right, enter a commit message and click "Commit"; PyCharm: "VCS" → "Commit Changes", toggle the checkboxes next to the changed files, enter a commit message and click "Commit"). 

TL;DR: If there's no special reason against it, release them before the assignments are done. If you'd like to keep them secret to the students while developing, I would still recommend releasing them after the assignment for the students to help them to evaluate their mistakes. 

In my opinion, Moodle is a great tool to manage lesson-related things. Usually, the school IT department installs Moodle (which is free and open-source) on a central server and makes it available for teachers to use. To start, you set up a course for you and your students. The access to a course can be limited (for example using a registration key you hand out in a lesson) so only authorized persons can view the course contents. Each course provides a discussion forum which can be used for course participants (students and teachers) to ask and answer questions. You can set up an email notification for new forum posts, with which I've made good experiences.