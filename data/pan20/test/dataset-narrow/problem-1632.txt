It is unlikely you bricked your pi. Short of pulling the plug when the Pi was flashing its BIOS its pretty hard to kill one. It is more likely that when your pi lost power abruptly that something in the hardware configuration manager got a little confused. This happens from time to time. Re-flashing your SD card is a good guess but not my default default solution. First thing I do is to pull power cord and let the Pi cool off for a couple of minutes before I try again. Its also a good thing to double check to make sure the USB cable your using for power isn't frayed or otherwise worn. Swapping cables and/or power supplies here isn't a bad choice either if you have the extras lying around. Remember, with RPi's the shorter the USB power cord is, the better. The next thing is to pull the network cable if its connected via Ethernet and see if it will boot without the network cable connected. I'm thinking this is where your problem is because you said the Ethernet port lights didn't come on. If this is the case, after a normal shutdown you should be able to plug your network back in and the Pi should boot normally. Why would the Ethernet make a difference? Some Ethernet controllers and hubs support something called Power-over-Ethernet or PoE. Even if the hub or router does not offer PoE it might offer pass-through support for PoE. If your network cord has the extra pairs of wires inside, thats where PoE flows. 100baseT networking only uses two of the four pairs, and cheaper network cords might only provide those two pairs. PoE is great for IoT projects but can be a pain in the neck for troubleshooting power issues because if your using a network cable that supports PoE and your using a router that supports PoE or PoE pass-through, you might be supplying some power to the Pi that way unintentionally. The Pi does not support PoE, so this would be like any other undesired voltage. The Pi has a polyfuse to protect itself from this, but until the current reaches quiescence the polyfuse wont reset and your Pi won't boot. If that doesn't work, we head into less common areas. Try a different power supply and USB cord next, if you didn't earlier. Its possible that with a different power supply the Pi will fire up and everything will reset during the boot sequence. If that doesn't do the trick, pull the power and then pull the HDMI cable before plugging the power back in. HDMI can provide limited source current to a HDMI device (for HDMI plug-in hardware like Chromecast or Fire Stick) and like PoE, this can upset the power controller on your Pi too. If you use a display adapter or run headless you can skip this step. If the unit doesn't have a display, or the display stays blank, how can you tell if the unit booted? Watch the green light next to the red power light. When power is applied to the Pi both red and green lights should come on. The green light should go off and start blinking or flashing as the Pi starts booting. The red power light might go back off and stay off if the power is less than optimal, but the Pi will boot as long as the green light shows activity. If there isn't a display, how can I safely power it back down after it boots? If you boot to the command line this is relatively easy. Wait five minutes, plug in a keyboard, and carefully key in your login and password. Then type and wait until the green light stops flashing. If you boot into Pixel instead of the command line you have to watch the lights as above. Once the green light stops flashing or blinking and stays off for a few moments, you can kill the power. If these blind methods make you nervous, you can go a little risky here and hot-plug the HDMI. Unlike a network cord with PoE, it is 'safe-enough' to do this to double check if your Pi is booting. Its not really good for the Pi, but in this edge case we can get away with it. Still isn't booting? Next remove any hats, including a display module, and anything else connected to the pi like the camera module. Double check to make sure any extra pins or jumpers have been removed from the run holes or the GPIO, and that the Pi is resting on a non-conductive surface. Try again with Pi bare (wait to plug your keyboard in until after you see if it boots) and watch for the behavior of the red and green lights light above. Then re-flash your Pi and try with just the HDMI or display adapter installed once you have your re-flashed card installed. As a last ditch, try powering the Pi without a SD card installed. The Green light should stay on, even if the red light goes out. If neither the red or green lights come on, then its time to look into what options for warranty you may have, as its likely the Pi has some other fault. The good news such that it is, that the newer Pi 3's are out and just as inexpensive. Good luck, and I hope this helps. 

No, you really cannot use an AC (alternating current) solid state relay (SSR) to control a DC (direct current) load. ref: $URL$ The design of a Solid-state Relay will not allow it to reset if a DC load is used. 

Now that makes a whole lot of sense. No NOOBS for an SSH implementation, have a nice day. Many thanks to Simon Long and the folks supporting raspberrypi.org Note: there was some considerable discussion of this issue at $URL$ but ultimately, using NOOBS without a keyboard/mouse/monitor really isn't an intended usage case. The Simon Long response really makes more sense. 

If you are using windows, I'd recommend using Visual Studio. I see that Visual Studio 2017 is now out, and supports both Windows and Mac operating systems. The number one reason I'd recommend this, is there is a Visual Studio Marketplace tool available "Visual C++ for Linux Development" that is pretty amazing for anyone pushing code to remote devices. You write code on your desktop/laptop in Visual Studio (VS). VS pushes code to your remote device (raspberry pi) for you. You don't have to SSH login to the PI. You don't have to copy code from one place to another. This makes it much easier to manage your project, keep track of updates, ete... More importantly, that tool includes GDB (Gnu Debugging) which enables you to step debug content on your Raspberry Pi, directly from Visual Studio. If you've got content based on GPIO inputs, you can see exactly what's going on real time. Here is friendly introduction for using Visual Studio with the Orange/Raspberry Pi. that shows the use of the extra "Visual C++ for Linux Development" tool, including some sample code. Note: I've been using Microsoft Visual Studio 2015 Community Edition (which is free) up until now. Its not clear on the cost of Visual Studio 2017 (if any) Edit: It turns out other Integrated Development Environments (IDE) also support GDB debugging. Here's a link describing the process for JetBrain's cLion's IDE. The JetBrain software is way cool, but obviously not free. Edit #2: Scratch Visual Studio for Mac. That seems to work only for Android/iOS apps and .net. Seems to be no go on C/C++, Python, Node.js ... there is no extension manager option, unlike normal Visual Studio. Sigh. 

So it turns out I was doing it wrong (or not using the tools as originally intended). I received a nice response from Simon Long, the author of the blog entry referenced above: 

As I look thru the raspberrypi.org website, I do see this link, currently showing two different compiled images of Raspbian Jessie. 

The only real surprise here is that it blinks the output LED at all at low power. I'm guessing there is an internal threshold in place. If you are driving DC loads, you will want a solid state relay designed for that purpose. For DC control of DC loads there are many options available, depending on your output voltage and current requirements, that may be less expensive. (Here's a rough list sorted by loads, small to big: optoisolators, basic driver circuit with BJT transistor, Darlington circuit, Mosfets, IGBTs or if you need it, DC/DC solid state relays) Reference