We all know goto is the spawn of satan. To learners though, it seems easy and quick. In simple, short program codes having a goto or two won't turn the code into unreadable spaghetti code. So students have a hard time understanding why they shouldn't use jump statements. Even if they believe that I (the teacher) strongly believe it is bad practice, they won't "internalize" this. My current strategy is elegantly forgetting about jump statements altogether. I don't tell them these things exist, hoping by the time they discover, they'll be used to coding right. Not only Goto, but also loop or subroutine/function exit statements (although I do use these from time to time in the darkness of my room, but I always feel dirty when doing so). Should I teach them jump statements? If yes, how do I make them feel just how bad they are? Give them a huge code with many jump statements and have them try to understand? What is your strategy? 

Many things can be used as analogy for pass by reference: renting books from a library, and seeing the marks in it someone else made; lending some item to a friend, etc. I find it harder to come up with real life examples for passing by value, but one example is photo copying course notes, or artists (or forgers) copying famous paintings. So, lending someone my course notes VS letting them make a copy of my course notes, then see them pour coffee over the notes while they are learning from it - in case one, my originals are ruined, in case two, my originals are safe. (Instead of pouring coffee, we can have them add improvements/comments to the notes, to make it positive instead of negative). 

I don't understand all the hate this question is getting. I'm guessing the answers depend on the context a lot. Context of my answer I regularly hold company trainings. Adult education. These are full day IT trainings, that means 9 AM to 5 PM. In the contract we offer 90 minute blocks with 15 minute breaks between and a 45 minute lunch break. Importance of breaks A break is not a waste of time. Researchers disagree on the amount of time an average human can uphold focused attention for, but all agree it is measured in minutes. I have learnt 4-5 minutes at the university, and I have read some researchers claiming it to be up to 20 minutes. But you can't expect an average human to uphold focused attention for hours at an end. It is possible to renew attention, this is where the teacher comes in by changing the rhythm, the tone, the visualization, the exercise. But from time to time, breaks are needed. (The 8 second attention span you hear about is different, it is the burst attention span or whatever it is called.) It is not just the attention though, but moving/stretching as well. Most workplaces have recommendations, and though there are slight variations, most revolve around the "work for 60 minutes, get up and move for 15". This is not only beneficiary to the health of the individual, but also (many studies point this out) improves work performance. Answer to the original question My actual answer is: explain to them why breaks are important, explain to them how getting up, stretching, moving can help them concentrate, but don't try to force them to do so. If sitting is the new smoking, then dealing with it is similar: you can't just forcefully take the cigarette out of their hands. They know their own bodies and what type of break refills them. And they will learn the importance of breaks the hard way. 

When programming on a projector screen, the audience can easily get lost. Besides the obvious things (large enough font size, good indentation, short but helpful comments identifying sections), how do you help your audience follow what is going on? Students who look away for just a few seconds (to write something down or to change something in their code) will have a hard time finding the small things I have changed in the code. They can't be expected to pay 100% attention all the time, but I hate having to show the recently changed 2-3 words or few lines of code again and again. I'll post one program I find very useful, but I'd be glad to hear of other tools / methods. 

The basics Let me start with a quick overview of how JPEG (as usually applied) compresses color images. 

Colorspace and downscaling. Raw images are usually encoded in the RGB color space. The human eye is more sensitive to the luminosity of images than to their chromatic aspects — as an extreme example, we can understand black and white photos quite well. Therefore JPEG images store more information about luminosity and less about colors. This is implemented in two steps. First, the RGB color space is transformed into a different color space (in a linear fashion), YCbCr (similar to the TV color space YPbPr) in which Y is luminosity and Cb/Cr encode how much the pixels are blue rather than purple (Cb) and red rather than green (Cr). The Cb and Cr planes are then downscaled or subsampled, that is, their resolution is reduced, usually by a factor of 2 in the horizontal direction (the eye is more sensitive to the vertical direction). From this point on, the three planes are compressed individually. Division into blocks. Each of the color planes is now divided into 8×8 non-overlapping blocks (in contrast, in MP3 the sections are partially overlapping), which will be compressed more-or-less individually. This division is the reason for the so-called blocking effects, since the superimposed grid cuts through features of the image. Spectral compression by quantization. The basic insight behind JPEG is that nature is noisy, and this noise is filtered by the human visual system. It follows that we can throw away the noise without substantially affecting the way the image looks. It remains to decompose the image into its "substantial" and "noisy" components, and this is accomplished by a 2D Fourier transform. Recall we are trying to compress 8×8 blocks. The most important feature of a block is the average value of its 64 pixels, known as the DC component (or, zeroth Fourier coefficient); the DC components of all blocks are just a result of scaling down the original image by 8 in both dimensions. The importance of the other components, known as AC components, depends on their frequency — the higher frequencies correspond to noise, whereas the lower frequencies are more informative. However there is no clear cut distinction between features and noise. For this reason, we need to retain all components, albeit with different accuracy. Accordingly, we quantize the different components to various degrees, depending on the frequency: components corresponding to higher frequencies are quanrtized more. The exact quantization matrix depends on the disparity between the horizontal and vertical dimensions, and has been determined experimentally. (It also depends on the quality parameter of the compressor.) Entropy encoding. It remains to encode the quantized components into bits, which is done using Huffman coding, a standard encoding scheme. Since the DC components of all blocks are a downscaled version of the entire image, we expect them to vary continuously. Therefore instead of encoding their actual values, we encode them differentially, that is, we encode the difference from the preceding DC value. The AC components don't have this behavior, and so are encoded absolutely. 

Artifacts Why does compressing geometric drawings result in artifacts? Geometric drawings are very different from natural images. They don't vary continuously. Spectral compression results in "smearing" effects, since we are only retaining the lower frequencies. The best illustration of this is the Gibbs phenomenon, which is the continuous analog of the same issue. When trying to represent a step function using Fourier series, we need to use all frequencies. If we suppress the high frequencies, we get something really different. Lines in a geometric drawing are the discrete analog of step functions. Another problem is the blocking effects. Imagine a diagonal line. JPEG partitions the space around these lines into 8×8 blocks, which are compressed individually. No attempt is made for the resulting lines to match exactly, and indeed they probably don't. This is very apparent because lines are very clean and exact, something that cannot be said about real-life images. Teaching ideas Using software like Matlab, you can show the effect of quantization on a real-world image, and then compare it to the effect of quantization on clip art. You can vary the quantization steps to show the effect of downplaying the higher frequencies (and also what happens when trying to suppress the lower frequencies). You can demonstrate the effect of blocking by varying the angle of a line which is compressed block-by-block, or fixing a line and varying the block size. You can use a low quality setting to emphasize the effect, and include the block boundaries to highlight its origins. 

Bottom line I strongly believe that public presentation is only warranted when the amount of work to be presented is so vast that a synopsis is indeed helpful. Subsequently, I don't believe in immediate feedback, and especially not one produced under peer pressure. Ideally, I'd have a seminar, where students present the results of their research / lab study, followed by an assignment of groups of students to study the results being presented, followed by another seminar where the "study groups" critique the works they were assigned to. 

Some background info I've studied CS and was briefly a TA. I had to submit exercises in Java written in pen on paper. I also saw the exercises submitted by other students. None had even a correct number of opening and closing brackets, let alone other typos. My other background is in printing and typography. Having worked for a while in a publishing house, I assure you that the number of mistakes in mathematical and programming-related books is astronomical when compared to regular prose. It is not humanly possible to verify handwritten formulas in reasonable time. Every single textbook I had on subjects like math and CS had dozens of mistakes that I was able to discover, and the denser the material, the more mistakes there were. There are prominent mathematicians like Vladimir Voevodsky who try to change this situation by developing better foundations for automating proofs. I believe that this is the way to go. 

Here's a personal story. It's about various art schools not CS, but the situation is similar, I believe. While in high-school, I also studied in art school. The teacher in the art school was a renowned professional, I believe he even had some awards from the ministry of education (we are talking about socialist style education). As part of our activities in the art school we were supposed to learn to talk about what we were drawing. (Artists are also expected to produce statements...) The unfortunate reality of the trade is that the bizarre blabbering of the artist about her work is what makes all the difference, not the quality of the said work. In an effort to teach us to do this, the teacher required us to start with something like bringing a stool in the middle of the classroom, standing on it and announcing own name and some other personal details, like hobbies etc. Some kids in the class seemed to enjoy the activity. I wholeheartedly hated it. I thought it was stupid and pointless. I also believed that people should judge artists' work on its own merits, and that using words to describe an art piece is by definition worthless, because would it be possible to use words to describe images, why go to such length as to create those images in the first place? This practice was novel and quite in contradiction to the education system which emphasized modesty and objectivity, thus seeing such attempts at entrepreneurship as outright evil. I went to college first in the post-socialist country, then in a country which had no such past, and was basically copying all of its education system from the States. Now commenting on peers' work was a requirement rather than some extravagant way to spend time in the classroom. However, what I also learned was that peer criticism was anything but objective. In fact, social dynamics in a classroom would distort the feedback so much, that it would be much worse than no feedback at all. Regardless of the quality of their work, prettier girls would get much better feedback than boys with unremarkable appearance. Students who previously received positive feedback from a peer would feel socially obligated to repay the favor. Some people learned to exploit this simple behavior more than others... Not to mention that typically, there were a handful of bright students per classroom, who would either deservedly steal the show from the rest, or would be in opposition, and thus get no (useful) feedback what so ever. For long time I believed that peer criticism was just a bad practice created by people who never cared to verify how well it actually works / the problems it creates. However, as an adult, I went to school once again, now to study CS. Here, the situation changed: the amount of work a student is supposed to produce and the difficulty of communicating the results of the research is such that it certainly justifies a brief oral introduction. It doesn't feel stupid and the social pressure, while still there, faded into background since it no longer has this strong influence on the reception of your work.