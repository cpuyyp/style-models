For that reason I have been contemplating the upcoming Catalyst 6880-X with SUP2T or even the Catalyst 6500 with SUP2T. I am a bit uncomfortable putting an "enterprise" switch as a PE device in a provider network though. 

Manually. Takes most time. Safest? Depends on the one doing the config. Use some tool like Kiwi Cattools or Rancid etc. Much easier but you would need some kind of logic to check if VLAN is already existing or you could mess up the naming structure. Maybe not a huge deal? Script it! Use Perl, Python, Ruby or whatever language you have experience with. Takes some time to build it but once it done you could reuse script for other configuration tasks. It would be customizable but it depends on if you are comfortable coding. Use SNMP. Never tried this. Would require RW on the devices and I don't really like running RW on my network devices. 

When you tried pasting that many rows of config it was sent faster than the router could handle. You need to use a terminal client that supports using a line send delay. If you use a line delay of maybe 10 ms then the router should be able to handle it fine. You can also put a character delay if that is needed. 

Generally a router runs IGP to populate the Routing Information Base (RIB). This is the control plane, routes are then installed into the Forwarding Information Base (FIB). This is the data plane forwarding, depending on platform, there may also be distributed forwarding on linecards so the linecard will have a local database. When running LDP, labels are advertised to adjacent routers based on the RIB. The labels are then stored in the Label Information Base (LIB). This is the control plane and equivalent to the RIB but contains labels. The LIB is then one of the components used to build the Label Forwarding Information Base (LFIB) which is the equivalent of the FIB. Running LDP, without an IGP, the labels would not be assigned because there are no routes in the RIB. This could be solved by entering static routes but it's obviously not a scalable solution. When using RSVP-TE, labels are not assigned through the RIB. Tunnels are manually defined, connectivity is still needed between the headend and tailend, which is usually done through IGP but could be done through static routing as well. There are special cases where routing is not needed with RSVP-TE because the neighbor is statically defined such as in the configuration below: 

is enabled on the server because the server decides if pruning is used in the domain or not. For pruning to be effective it needs to be enabled in the entire domain. If a client was to enable pruning then it would only have effect locally. This would not have any positive effect in the domain except for the device that you had configured it on. Also the point of using VTP is to have a single/few points of administration where you send the VLANs. Enabling pruning on all devices individually would go against the idea of VTP. 

I'm assuming you are talking about MPLS VPN. The MPLS VPN is more secure than a regular Internet connection, it's basically like a virtual leased line. However it runs no encryption. So it is free from eavesdropping unless someone misconfigures the VPN but if you carry sensitive traffic it should still be encrypted. This kind of VPN is not authenticated so it's a private network but not authenticated and encrypted like IPSEC. If someone has physical access to your network they could sniff packets. With the regular VPN I assume you mean IPSEC. IPSEC is authenticated and encrypted depending on which mode you are running. So if someone gets hold of the packets they should still not be able to read them. 

I'm running into what should be a very easy problem to solve- I need to see all routes coming from one specific next-hop on a few cisco ASR 1002-X's that I have in my network. Normally this should be as easy as a filter on , but all of the output is coming up on two lines due to the length of the interface names, making the filter useless. Here is some example output: 

I can confirm that the command is available on a Nexus 2248TP connected back to one of my n5548's- I don't have a n7k-hosted n2k to test with. You're also not the only one who has asked this question before without a solid answer. Based on what I see here, and the understanding that when the Nexus 70xx's were designed they were built solely to be DC core/aggregation switches and weren't built to be as flexible architecturally as newer iterations of Nexus HW, I can only surmise that an access-layer feature like voice vlans was not built into Nexus 7k line cards. I wish I had a better answer for you, but since there doesn't seem to be any documentation publicly available to confirm this, I would suggest contacting your nearest Cisco SE if you have access to one and see if they can provide a better answer from the Nexus engineering teams. 

802.1x was specifically designed for end-point devices to authenticate to network switches and was not designed for switch-to-switch connections. Because of this, it is highly unlikely that you will find any switches that can be a 802.1x client, so the answer to your Y question is no. To answer your X concern (see XY problem)- preventing a malicious entity from monitoring and intercepting traffic can only be reasonably accomplished by maintaining physical security of your network hardware and cabling infrastructure. As @Ron mentioned, it is trivial to configure a device to act as a network tap that can be placed between any one of your switches -provided that physical access can be attained- that can then passively monitor traffic on your network, regardless of whether you have 802.1x configured. MACSEC would be an example of a technical measure that could potentially prevent this type of attack. 

My organization currently has a pair of Nexus 7010's (Sup-1's) in one of our smaller data centers as our core switch (we still currently implement a Core-Dist-Access model). Long story short, this data center ended up not expanding out as was originally forecasted and the 7010's ended up being overkill, both in terms of capacity as well as rackspace/power. Due to upcoming EOL's on the 70xx architecture and the age of our current gear, we are looking at replacing these with something newer and smaller. I was initially looking at Nexus 77xx's as it is recommended upgrade path for the 70xx's, but I feel that this is still overkill. Instead I am interested in the Nexus 6004's as a smaller form factor replacement. I know from the documentation that the 6004 provides layer-2 feature parity, but I have not been able to find any information regarding its layer-3 features and capacity as it compares to the 70xx's and 77xx's. Does anyone here have any experience implementing 6004's in a core layer-3 data center role that can provide insight on its layer-3 capabilities? Alternatively, does anyone have any documentation that compares the 6004 with either 70xx's or 77xx's on layer-3 capabilities? Note: VDC is not a requirement for us. 

No matter what I do (including increasing the terminal width to 256 chars), the output is always on two lines, removing the ability to use the pipe/inc filter. I'm aware I can redirect to file, copy to my desktop, and then start doing some manual searching via a text editor, but that is all very time-consuming when I'm in the middle of troubleshooting an issue. Is there a way to filter a list of all routes on a router by next-hop IP, even when the next-hop IP is displayed on the second line of output of ? 

So the port will only be modified in case it is not unique. This link to Cisco is a pretty good overview of NAT. 

Which it is. Because there are two ABRs here with the same cost both routes are installed into the RIB/FIB. If we increase the cost to one ABR then only one entry will be installed. 

Because the layer 2 domain would be limited and each management VLAN would only span a pair of switches, any reachability issues would be easy to point out and find the origin of the problem. 

3 routers sounds like overkill to me but it would be interesting to see the topology and hear him explain the reason behind it. Depending on your requirements for redundancy and/or loadbalancing a 1921/1941 could be fine for your needs. That would be only one device because it has both routing and switching if you stick a HWIC Etherswitch card in it. The high availability design would be to have two routers and two switches but then the servers should be dually connected as well. 

What I recommend is to setup a virtualized environment. Either through Vmware workstation or preferably ESXi with vSphere if you have a server to spare. That gives you a very flexible solution. 

Cisco IOS is the standard operating system from Cisco. It runs on 800/1800/1900/2800/2900/3800/3900/7600 routers. It also runs on Catalyst 2960/3560/3750/4500/6500. Some newer platforms such as Catalyst 3650 and 3850 run IOS XE which is IOS running as a daemon on a Linux kernel. Then you have NXOS which runs on the Nexus platform. IOS XR runs on the SP platforms such as ASR9k. 

A VPN tunnel uses IPSEC which encrypts the packets, usually between two LANs connected via the Internet. IPSEC tunnels have no multicast support which means that you can't run dynamic routing protocols like EIGRP, OSPF and ISIS over the tunnel. There are also various forms of VPNs like DMVPN, SSL VPN and GET VPN. A GRE tunnel can be used for many things, to support multicast, IPv6 or even CLNS which is used for ISIS. A GRE tunnel has no encryption which the VPN tunnel has. To get support for both routing and encrypting the packets it is common to deploy IPSEC and GRE together so that it's supported to run dynamic routing protocols over it. There are also other tunneling modes like IP in IP, 6to4, ISATAP and so on. 

In theory you can run MPLS without an IGP, any sane network admin would not though. MPLS labels can be assigned through: 

I would use ESW card in router if I had small office that needs to have 5 users connected. Then I would have router and switch in same device instead of buying a separate 2960 or such. The only benefit I see with using EHWIC card would be if you need to use LAN features like port security, private VLAN, DHCP snooping etc. However in the first case you mentioned you would use the router as pure router and leave switching features for a real switch. So it boils down to if you want to have routing/switching in one device or multiple. The only real use case I see for it is small office that doesn't need 24-p switch. You would only need to manage one device as well. 

You can use an application called to make use of USB to serial cables. There is a 4x serial -> one USB available which would cover 4x switches. That way you get virtual USB ports like ttyUSB0, ttyUSB1, ttyUSB2, ttyUSB3. You can then map these USB ports to TCP ports like: 

I have seen this quite a few times myself and in most cases, depending on where I was capturing traffic, this was the result of propagation delay. If you're capturing somewhere upstream closer to the sender, particularly in high latency links, you will see lots of packets sent to the receiver before the receiver has time to receive, process, and acknowledge the packets and for those acknowledgements to make it back over the network to your capture point resulting in an apparent "ack burst". Propagation delay is what causes this effect. This is sometimes better understood via an example: Take a scenario where you have a server and a client separated by a wide area network that has a BW capacity of 100Mbps and a end-to-end network latency (propagation delay) of 50ms round-trip-time (RTT), the client has advertised a classic TCP receive window (RWIN) value of 64KB, transport is IP, MTU and TCP maximum segment size are 1500 and 1460 bytes, respectively, and the server is sending a large file via TCP to the client. In this scenario, congestion windows/slow start, selective acknowledgments, and RWIN scaling are ignored for simplicity's sake. Due to the concept of receive windowing, the TCP sender (the server in this case) knows it can send up 64KB of TCP payload data before the client (receiver) acknowledges it has received any of that data. With an MSS of 1460 bytes, this would equate to 45 packets for a total of app. 526Kb (64KB + TCP/IP overhead / 8 bits per byte). At 100Mbps, the server is able to send those 526Kb in approximately 5.3 milliseconds. The server is unable to send any additional data until the client starts acknowledging the data that has already been sent (data in flight). Because of the propagation delay of the network, it takes 10ms for the first data packet to arrive at the client (20ms RTT/2 = one-way delay). Even if the client acknowledges each packet immediately as it arrives (or more likely, due to delayed acks, acknowledges every other packet), those acknowledgements will take another 10ms to travel from the client back to the server. By the time the server receives the first acknowledgement, it will have already been waiting for at least 14.7ms since it sent its last packet to the client, with the rest of the acknowledgements arriving over the next several milliseconds. When capturing traffic on the server side, this will appear as a burst of data packets from the server, followed by a delay, followed by a burst of acks coming in from the client, followed by (or interspersed with) another burst of data packets etc. until the data transfer is complete. What's important to understand here, though, is that from the client side, it is acknowledging packets as soon as they arrive, and indeed if you captured on the client side, you would see a delay, followed by an even mix of data packets arriving and acks being sent out, followed by a delay, etc. This is why it is very important to understand where the traffic capture took place when interpreting it. Now, this traffic pattern can also be caused by many other factors (e.g. low or over-utilized CPU/memory/etc. resources, poor NIC drivers, or old NIC hardware on the receiver), but in most cases I have dealt with this was the result of good 'ole propagation delay/high latency. 

I haven't been able to confirm this in any documentation yet, but I have looked for the "switchport voice" command on the copper ports on my own Nexus 7k and it is not an option for me either: