Bear in mind that the functional approach would likely be somewhat slower because a function call is added for each iteration, but for a small number of controllers this should be a negligible difference. If you would like to become more familiar with functional JavaScript, I recommend these exercises. Use partial(-ly applied) functions for callbacks Instead of making a closure just to call : 

janosâ™¦ has a good points- the validator is a good idea. In addition to the error that there are table cells outside of a row, there are also warnings that the table rows don't all have the same number of cells : 

A couple improvements: Pop from array and iterate over remaining items in nested loop I tried to modify the nested for statements used to add to and use a functional approach like with array_reduce() but instead found the example in this answer. Consider shifting (i.e. popping from the beginning) from the array to yield an array with the remaining elements with which to generate pairs. 

And if you really want to make it shorter, use short-circuiting logical operators (though some may argue it is less readable or isn't as verbose): 

One can consolidate the DOM-ready callbacks (I.e. ) into one, instead of one for each UI initialization call. 

Some might argue that storing the method call in the variable just adds an excess variable that is only used once. Unless the method name is long, it could just be condensed into the conditional: 

There doesn't appear to be a way to get the results directly from . Taking the concept from this answer, one could get a snapshot result, create an array filled with dummy values (e.g. s) and then map calls to snapshotItem(). 

This way, the call to only appears once. The advantage here is if values needed to be updated (e.g. the values passed to ) that would only require updating one line instead of two. While this is a short block of code, the concept can apply to much larger blocks as well. While the re-written line has the same number of lines as the orignal, it could be simplified using a ternary operator: 

You could utilize to copy the array, then use to call instead of using the loop. Originally I was thinking that the could be eliminated but there is a need to get a regular array instead of the typed array (i.e. Int32Array). If the array being copied (i.e. ) was a regular array, then you likely could just use - see this jsPerf to see how much quicker that mapping could be. 

Image.prototype.createImage() After adding the image to the DOM, this function calls and then . Because of that, it is basically superfluous to add the image to the DOM and then reload the page. That function could basically be reduced to the following, utilizing the function to add the images. 

I agree with the advice of AntK - especially about only required once. Another aspect to consider is that when applying CSS using .css() will alter the style attribute directly, which will cause a repaint and reflow1. Instead of modifying the style attributes directly, add and remove classes. For example, the following CSS classes can be added: 

vs event listener For a small page like this, it is fine to assign a function to . However if there is a need to have multiple functions executed when the page is loaded, then use (similar to the event callbacks registered for the change events on the inputs). Also, the DOMContentLoaded event might be more appropriate than load. 

Initially my eyes are directed at the two branches of the conditional and ways to eliminate the redundancy. Would it be too long of a line to move that conditional check of inside the inside the ? 

I suggest you read Stop Writing Slow Javascript. I know it starts off by bashing jQuery but beyond that it has some useful considerations involving DOM interactions. After reading that article, I suggest the following changes. DOM lookups The function performs a DOM look-up for elements with class images-container, which also happens in the DOM-loaded (jQuery) callback. Instead of doing the lookup twice, make the scope outside both functions (would need to use instead of ). 

Did you already look at the React documentation for Component? If not, then I would start there. Otherwise feel free to search the web for "react component" and similar queries. Feedback Useless constructor override The TabList overrides the parent constructor and does nothing beyond call the parent constructor. Perhaps it was leftover from when there was more functionality but it would be wise to remove the method, in case the parent method signature was to change, then this method override would also would need to be updated. 

Unreachable line in ? In the statement, there is a line after the statement for the last case (i.e. ). I believe that is un-reachable. 

Overview I think the interface and implementing classes looks fine. If there were common methods that both classes implementing the interface would use, then an abstract class might be a good route to go. For more context of when to use which, refer to this SO answer. Router It would be wise to consider using named controller methods in the routes instead of the basic routing approach using a closure. The two last routes current have 5-7 lines each. When new routes are added that may have similar lengths, that can make the route file very large. Method critiques 

And then could be eliminated entirely. Alternatively, the condition in the first nested loop could be negated and then the could be eliminated: 

0-based Flower grid areas Why add 1 to the x and y values in UrFlower's template? Perhaps you are so used to 0-based indexes and wanted to keep those values in the markup orthogonal with your ways... Those flowers could be put unto an array and looped over using ... but for 5 flowers that might be too excessive... CSS Inline style vs CSS There are static inline style attributes in UrPlayerView.vue - e.g. : 

Usage of Vue looks good. There are a few general JS aspects that I have feedback for (see below, under last "question") but usage of Vue components and other constructs looks good. 

Initially I was thinking of suggesting the clause, but I don't think that would help in this case, since the query selects the aggregated count and uses that for a comparison. One option is to use a Common Table Expression (CTE) but apparently those aren't introduced until MySQL version 8. One other option is to make a View: 

Unreachable code in controller method In the controller method , it appears that there are two return statements, and those come before the line that would close the database connection (i.e. ) - thus that line is unreachable. To ensure that the connection is closed properly, one would have to store the return value in a variable and return it after closing the connection - something like the code below. Also, presuming the answer to the question in the previous section is that there isn't really a need to copy the array, just return an array in all cases, even if it is empty... warning- untested code: 

Yes, overwrites the previous value each time so after the loop (i.e. the call to ), will contain the value of the last element with class name quant. 

Bear in mind that for functions passed as the listener argument to , the first argument after any arguments bound via Function.bind() will be the Event reference. 

Store DOM references Every DOM-query (e.g. ) is expensive. Instead, store those references in a variable and use that variable instead of re-querying the DOM. 

JS cache DOM references The JS code provided only shows two occurrences of but it would be good to store that in a variable... And if browser compatibility of const isn't an issue, use instead of , since that value should not be re-assigned. 

That method could check if the target of the event was a table cell by checking the tagName attribute (for ). To restrict to only certain table cells, add a class attribute - e.g. team. If that class is found in the target element's classList, set the team property to the innerHTML of the target. 

Feedback The code looks good so far. There appears to be good separation between the model, the view and the controller. I like how the model methods are succinct. The controller method is a little on the lengthy side but hopefully the feedback below and in the answer by Tomanow will allow you to improve that method. Suggestions Regular expression I agree with Tomanow's answer (except that you might not need to worry about stripping the pre-text, presuming that the pattern matching only matches country codes and names). A regular expression can be used in to match each relevant row, and using a named sub-pattern, the code and name of each country can be selected: 

to implicitly check if has a value - if not, use before incrementing the count for the value of the given element. 

I don't really think there is a downside to this approach. Below I outline an alternative approach to updating the text - it may not necessarily be better but possibly more robust. Feedback This looks like a good approach - who needs the fakepath anyway?? I tested this code in Windows 10 Chrome, Firefox and Opera; Safari on Mac OS X, as well as FIrefox on Linux Mint. It appears to work in all except in Firefox on Linux Mint, where the output tag text was not updated correctly. I was able to update the code to use Element.innerHTML for setting the HTML correctly. Alternative approach An alternate approach is to use String.split() on the file input value, splitting on , then use Array.pop() to get the last item in the array. Expand the snippet below to see it in action. In theory, this alternate approach should be quicker because it just uses string splitting and array access instead of a regular expression replacement... Here is a jsPerf test - so far it seems it is quicker to use the split() technique in FF and Edge on Windows but not Chrome... 

I can't claim to be familiar with Electron, but after looking at the documentation and an example on github, it appears that an electron convention is to use / 

See this illustrated in the sample below. Accessing container div from DOM BenC re-wrote the code to access the container (i.e. ) only once and went so far as to eliminate the Cat class. If you wanted to keep the Cat class, you could still assign that DOM reference once in the DOM ready callback. I would suggest declaring the variable outside the Class and DOM-ready callback: 

As was mentioned in the previous section, ecmascript-6 features are used in this code so it is generally advisable to use instead of (or for constants)). 

Looking at the and methods I see a lot of redundancy. I would abstract out code to save related data - e.g. 

Presuming there are multiple inputs with class "quant" (perhaps 1 for each row in the table), then this code will get a collection of elements and then as is desribed in the documentation for .attr(): 

Feedback As was pointed out in other answers, the (outer) array isn't really associative- it is numeric, and the sub-arrays are associative. And I agree with the point in mickmackusa's answer - just use along with to simplify that function. The within iterates over the keys, which will be numerically-indexed and thus it is pointless to create and increment it manually. It can simply use the associative syntax (i.e. ). Suggestion Simplifying array generation Perhaps the code used to add values to is synthesized for this post, but it could be simplified, using a or even , combined with to iterate 7 times, plus to generate the spelled out numbers: 

Simplifying sub-queries I believe (but haven't tested, since I don't have your data and expected output) that the conditions can be updated like below, which would allow combining the sub-queries into one, eliminating the usage of : 

Adding Scroll handler One can use window.addEventListener('scroll') also to add a scroll handler - that can also go in the callback to theDOMContentLoaded event. This allows for multiple functions to be called during a scroll, unlike assigning . 

See a demonstration here. For more context, refer to the article below. I know it comes off in the beginning as tough on jQuery but it has some useful information. Stop writing Slow Javascript. PHP Should anything be returned from the PHP to the client side? Perhaps it would at least be useful to have the front ent be aware that the request to the server-side was successful... It appears that and May get overwritten between row iterations... If there is only supposed to be one row, perhaps using would be a better solution than using a loop- or if you just expect one row, remove the . Also, if one row is expected, the database query could be updated to limit results to a single row - e.g. using with MySQL, with T-SQL/SQL Server, etc. And are you intending to use hungarian notation for the variable naming convention? If not, what is the convention? Update I see you added an answer for the PHP simplification. I regret not thinking about that aspect in the past (I expect I would have concluded the two queries could be reduced to one if I had just stepped back and thought about it), and believe it can be simplified even more. That is because the field to update can be substituted directly from the variable (i.e. ), and can be used to check that the value of matches one of the two column names instead of using two disjoint, separate conditions.