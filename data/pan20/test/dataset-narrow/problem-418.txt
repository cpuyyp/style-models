would be much easier to read, if you would combine s and align equality signs, question marks and colons: 

  Rewrite in ES6 Here comes rewrote code in ES6. Note, that there are still some repeating hardcoded magic numbers and few more things to fix. I also did not changed your logic of drawing, just rewrote the code. 

Benchmark The above code executed with a speed of 133,230 ops/s ±4.14%, whereas yours at 17,562 ops/s ±4.14%, which is almost 8 times slower. 

Loop iterator declaration These two lines suggest that you treat variable like if it had block scope, which is not the case: 

Respond with JSON (ᴀʀɢᴜᴀʙʟᴇ) If you responded with instead of , you could use it later as instead of . That way you could access values of response as properties of an object in the future. If this doesn't seem necessary, it may be an overkill, though. Rewrite After applying all the above suggestions (and more), the code could look like this: 

I came up with something yet faster than both you and @Flambino, but it still gives me timeout. EDIT: The problem was infinite loop in one of the cases. Thanks to @Flambino for spotting it. Anyway, another way to do it, would be: 

Generalize drawing pyramids and their walls The only difference between , , are coordinates. You could create an array of pyramids, with each pyramid (an array too, because why not) containing two arrays for each of two their walls. And walls would be arrays too ― arrays of arrays of two integers representing coordinates of points that the said wall consists of. But the talk is cheap, so here is the code: 

Word of explanation: this code adds appropriate word to an array and then joins that array into string by . Then regex replaces the last comma with and we have our ready string. More specifically, regex matches comma followed by space, 1 or more uppercase letter(s) and an end of the string. 

Benchmark Comparison of actual run times for various values of \$n\$ with regression curves and their \$R^2\$ (y-axis is in milliseconds per 30,000 runs). Linear solution: 

It's simply change to the loop, but it gives significant performance boost without compromising readability at all. Interestingly, despite es are generally slower, replacing the rest of the code with regular loops has negative impact on performance. ES5 version 

„Some” of your names are overly verbose (word broadcast seem to be everywhere) and other are not descriptive enough, like . Wall of text This 

Remarks It sure is an interesting, hackery approach. Taken into account that this code must be compatible with archaic browsers, I would say it's rather fine. Few remarks: 

property Use with argument instead. That way you could define multiple listeners of that type if necessary. function Firstly, escaping into anonymous function to pass it as an argument to is unnecessary. This 

Remarks API security Your API endpoint () uses insecure and archaic SSL configuration. Actually, I couldn't connect to it at all, since I have tweaked up browser configuration. Few key points about your API's security: 

Note however, that this method uses which returns version of JS engine of the browser itself, while in cases of running in compatibility mode it would be desirable to get an actually used engine version, instead. Also, minifiers would get rid of this code, since for browsers other than IE < 11 this is just a comment. 

Pure HTML and CSS Solution below may be a little hackery, because CSS wasn't made for things like that, yet. It has it's downs when you look deeper, but well: that's what you get for writing hackery CSS. Also, it resembles design from your question from before the edits you made. 

since the value of itself doesn't change ― it's always the same array throughout the code; only those array's values change. Window resizing scenario This code doesn't account for possibility of viewport's scaling. 

Explanation First part of my function () builds intermediate object that looks like this afterwards: 

could be completely removed — and can be declared in HTML as 's attributes. Hardcoded numbers It would be better to rewrite 

In the above code you just take all classes of given element and you match your number using regex. Simple, fast, concise. It is more efficient, because there is no splitting and filtering involved. Same code in previous specification of JS: 

The second definition is completely unnecessary. Hardcoded colors You have total of 6 unique colors referenced in your code, two of which have 3 occurrences. It means that wanting to change some color, you have to not only look for it throughout your entire code, but you also may have to search for all it's occurrences. It would be far better to create enum-like object, like this: 

An important thing to note: many people would say that it needs to be broken out, e.g. by creating object and 3 it's instances. While generally true, in this case I find this code fine. OK, now that we have a function to create pyramid, we could break it even further since it consists of repeating code as well. Each of those repetitions could simply be a separate functions to create a wall, since the only difference between them, besides coordinates is wall color. This is how I would break them: 

This answer is probably not worth much, but I'd like to add my 5 cents. Who knows, maybe it will have some noticeable impact on performance: 

Rewrite It's definitely not the shortest solution provided in here, but it's performing only one iteration throughout the array and it's the most performant one, as well (see the next section). Note, that it uses elements of ES6, although it could be easily ported back to previous versions of JavaScript, e.g. using Babel transpiler. 

That way no type conversion will be performed. Don't declare functions within loops You declare function withing your loops in your code. That way on each iteration you in fact create a completely new function. Name your anonymous functions Named function expressions may come in handy when it comes to debugging. Quoting "Named function expressions demystified" by Juriy "kangax" Zaytsev: 

And other are overly cryptic, e.g. instead of . Also, it's usually considered good style, to put space after and — arguably — begin comments with uppercase letter. Use ES6 (perhaps) While just a suggestion, because you may want not to do it due to the browser support, you could simplify your code by using ES6. doesn't need the parameters The following parameters could be hardcoded into function they are passed too: 

Quotation marks You mix single () and double () quotation marks. Use single ones as they minimize cognitive load, unless that would force you to use character escaping. Two elements You have two variables referring to the very same : 

That way you wouldn't have to remember to change all those lines each time you change 's and . The same goes for 

Lastly, instead of setting timeout at every function call, you could call once, outside the function. Encode Use function to encode whatever you pass as URL parameters. Approach of constant querying the server Constantly querying the server to know whether update is necessary or not, is rather far from the best possible thing to do. It would be way better to be able to get the message directly from the server, once it is necessary. This is where WebSockets come in handy. After linked MDN (emphasis mine): 

Remarks Your code solves this problem using very naive brute-force approach, which has polynomial complexity, i.e. \$O(n^c)\$. It's also pretty legacy and unusual, at least. Specifically, I'm talking i.a. about your use of label and . Moreover, it's a good habit to use identity operator wherever applicable. Rewrite Project Euler is a set of math-oriented programming challenges, and as such, authors of your problem sought for a solution that would use the least common multiple. Such solution has only linear complexity, i.e. \$O(n)\$, and it may be implemented in ES2015 (formerly ES6) as follows: 

Also you could add more spacing to all your blocks of code to aid readability. Unnecessary is very often a useful statement, although it shouldn't be used if it can be avoided without compromising readability. This in my opinion 

Remarks You have translated your problem into code in a pretty literal and straight-forward, but insanely inefficient way. You are not relying on any mathematical properties, trying to solve everything in a brute-force fashion. Remember, that Project Euler is a set of programming challenges that are math-oriented, though. Three more far less important things to note: 

Conditional compilation Another way of achieving the same, would be to use conditional compilation to detect JS engine version. Change function from previous code to: 

Well, is not the preferred method of passing variables to SQL statements. You could hurt yourself, e.g. if you didn't explicitly defined character set to the right one. Use prepared statements and instead. Style You have a few style problems, i.a. indentation and naming issues. 

The second part just iterates by years and for every year by it's letters and builds array. Optimized version First part of my function ( loop) can be replaced with 

because is already a string and as such both template literal and are redundant. Code repetition Instead of entire , you could decide whether to call with or parameter based on the result of computation of . See above code rewrite to see it implemented. 's second parameter 's second parameter can be fully omitted. Unnecessary second loop and Instead of saving all widths to an array and then running one more loop through that array, you could just set the widths right away. That way you wouldn't need neither a second loop nor the array. Right now the said loop makes your solution have the computational complexity of \$O(2n)\$, where \$n\$ is the , while it could be \$O(n)\$. Use instead of for array declaration Since it's better to use „by default”, this 

Here is rewrite with a lot more changes than those listed above (a lot could still be done, though): 

is a floating point number, which will cause unwanted subpixel antialiasing. To prevent this use efficient (and a bit hackery) method of rounding: . Note, that it may cause small visible sun jumps. End animation after 20 seconds Your animation fades to black after 20 seconds, but it's still happening. It would be more efficient for the rest of webpage to stop it after that time. 

and use it later by writing e.g. . Naming You mix camelCase (e.g. ) with all lowercase names (e.g. ). Also, I think that some names could be better, e.g. could become . Comments Some comments are not that helpful: 

EDIT due to comment: It should be noted that this function will return error if called on element without matching class. If this function is going to be used on such elements, it would be wise to modify it by enclosing the entire match (everything between and ) by the following code: .