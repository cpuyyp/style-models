There are 2 clock sources that are not officially (?) listed with a string id available to the command. 

Neither one of the available PiCam's can see the part of the spectrum you are looking for. Unfortunately the data sheets for either one are incomplete and doesn't show a valid frequency response of either, 

If for some reason, you prefer to use method (2), then you need to blacklist the kernel module. To do this, you simply enter the the word , followed by name of the module in any file under . However, there is already an empty, reserved file there, called for this purpose. However, after 6 months, you will have forgotten about this, and what it contains, so you are better off naming it after the module you are blacklisting. 

In any case, when disabling the service with , it should replace the file with a symlink to , only that this doesn't happen in the right place (according to above). So instead we have to remove the file manually (backup it before) and then create the link. 

There are (at least) 2 clocks here that are non-zero, and , but which do not have an official name. What do they represent? (Are there others?) 

However, this is not generally recommended, for obvious security reasons, as you have no idea what is happening or going on! So instead do the following. 

In this post, we will tell you how to play and record using the external USB sound card. A future proof success plan? With RPi's updates there is a constant flow of new changes and improvements, often breaking old solutions. The idea here, is to make as few changes to the system as possible or making them obvious if needed. That means, we prefer to use a by-user configuration, than system wide one. I.e. Try to use configuration files in your home directory, rather than in root owned system files. 

Either way, you are asked to run the script directly from the curl response output, like this. (Do not use sudo!) 

Next, we fix the system config, using the same card index numbers as above. We need to do this, because some system packages would never see your user config file. 

You need to setup something called (DynDNS). This will give you an always accessible domain name, reachable from the outside. There are plenty such solutions. Here are two sources: 

Those batteries simply can't handle driving the entire RPi3 + H-bridge + motors. The batteries are each rated at , but RPi3 alone, need a constant power supply of not less than ~2A. Either use a RPi0 or another battery, such as those for mobile phones. I bet if you connect a screen to that pi, the low power flash would be shown. 

The correct way to install Ruby on your RPi is to follow the instructions from one of these locations: 

If you don't like this, make sure to pass the option to the rvm-installer. If you do so, you will need to manually do this: 

Now make sure to repeat the above also for ,and the same files in the directory: if not already there. DISCLAIMER The above is most likely not the correct way to do this, so please regard this as a very experimental work-around until that buggy beahviour has been resolved. It may very likely break your ALSA functionality altogether. 

Once this has finsihed, I can also complete this answer... The point here, is that seem far more userfriendly, once the binaries has been created. Why these are not already widely available for the RPi3, seem quite crazy. 

EDIT Apparently the research was performed on the normal (non-NoIR) camera module, that has the IR filter. 

From where do you want to play and record sound on your system? Your options for playing sounds, can be: 

Background It's amazing to see how much effort has been put in to trying to resolve various sound related problems for the Raspberry Pi. Apparently it must be the weakest spot for new users to successfully develop with and use ALSA under Raspbian. Having spent considerable time and effort trying to get my own RPi3 sound working in different OS versions and in other Linux distributions as well, I've decided to write the conclusive to-go-to solution page. At least for the topic of using an external sound card on the latest Raspbian Stretch. The ALSA sound system ALSA is meant to support any kind of *nix based device, regardless of its hardware configuration and regardless how old is the hardware. Needless, there is little point in trying to get into the details of 20 years of its development. We simply apply the essence to a current situation. However, at no time in history has mankind produced such an amount of useless and dysfunctional diagrams, as for trying to explain ALSA. The only ones remotely informative are these two: 

You will need some verified files to test with. You can download and use these if you don't have any. 

Node is always outdated on any Rpi distribution. (Because of backward compatibility, fast development cycles of Node, and somewhat lazy maintenance efforts by the Rpi org.) So you need to update it manually and that is not trivial as you need to remove a few node packages with package manager () first and then re-install them with . Follow the instructions in my post here. 

The thing that over write your user ALSA config is most likely the lxpanel. Within the lxpanel there are several applets (the clickable icons). The lxplug-volume applet has proven to be one of the culprits as can be seen in the code of volumealsabt.c. Remove the Volume Applet by left clicking on the panel and selecting it, and then delete. Check for updates to , by running the following: 

Unless you are planning to use the audio jack (in 1) or HDMI (in 2), you should disable this kernel module. There are two methods to do this. 

However, as is well known, the Raspbian distribution maintainers like to hold back on the version releases, so this package is most likely already outdated, compared to what's available. To get the latest (or even developer) version, use the RVM method below. 

C. Disable the internal (Broadcom) sound card The internal soundcard is driven by the kernel module in: 

The answer is that those mp3 files are using a non-standard , that cannot be set in omxplayer. Any sample-rate below the standard (CD quality) of 44100 Hz, will be ignored and thus the audio data conversion will go through the data faster. 

I've got an external USB sound-card from C-Media running on my RPi3. I can play some recordings using aplay/arecord by specifying the card index and ALSA plugin. However, many other sound files does not play at all, or not as expected. Some other player software does not work either. Q: How can I set up ALSA to use it by default? 

Debugging attempts If the above doesn't work, then read this. As a side, there seem to be a bug in how systemctl is handling services. The FS in the pi is different (by missing parts) from other Debian based systems, so where the service scripts are located and handled is not fully according its own man pages. To see the relevant ALSA related services, do: 

TL;DR (Let's get going already!) Reboot and plugin your external USB sound-card, so we start on the same page... A. Collect some info 

Using a USB sound card, I'm trying to play mp3 files, with the default omxplayer. But although all other software works fine, omxplayer play my mp3 files at 2x speed, sometimes even 4 times. Is there any solution for this? 

This is an old problem that regularly re-surface, most recently after an upgrade to the latest kernel and firmware, for Raspian Stretch, . It seem that it may have something to do with both how Raspberry Pi's are using the systemd services when boot and shutting down and how the ALSA daemons and services have been setup initially (or after system upgrade). My best guess is that the post install scripts for something is not recognizing that you already have an file and then tries to restore it to some default. It is unclear from where this default is coming from. Certainly not what's written in the comments of the many ALSA or system services config files or related man pages. But it seem to be coming from a bug in the lxpanels volume applet. In my case, the following seem to have resolved the issue: