I personally like sudo or super for this when combined with a traditional cgi, and security can be managed to minimize risk (this can be done securely). The main criticism of cgi for large scale projects is because it forks for every request it does not work well with large numbers of requests. This criticism does not apply in this case because the main limit of bandwidth to this cgi script is what is connected to the gpio pins, and forking allows the script to run in different security context then the web server. There are some common mistakes that should be avoided: 

Use of a password with sudo. This is hard to do, prone to mistakes and seldom provides any benefit. Allowing full permission to the web server. The www-data user only needs to run one script for this to work. It does not need full root access. This can be done easily with sudo. 

I seriously doubt that you will be able to reverse the hdmi port and use it for input, but It would require at a minimum a different kernel, disabling the X server and the frame buffer and writing a custom driver, if it is possible. You may have some luck with the camera port, but I know very little about it. Vga would require high speed a/d circuitry. It would be a fun project but nothing quick. 

I use Raspberry PI 3 and wnat to get more GPU memory to work. I overclock my PI to get more performance because I use it for home Apache/PHP/MySQL server, Access Point and somethimes play music and watch youtube videos. Here is my config.txt setup: 

Is there a way to run some kind of PWM for fan speed control inside bash script? Here is my current script 

After last line I get this error: update-rc.d: error: initscript does not exist: /etc/init.d//etc/init.d/rpipwm.sh After that error I update with this: 

3.5" TFT LCD Version 6.0, 480x320 display from eBay and try install on Raspberry Pi 3 using this tutorials $URL$ After instalation of this drivers my display start work after reboot but stack on boot and don't want to move. I use drivers for raspbian-jessie LCD-show-160520.tar.gz Can you help me? 

I made Bash script what running fan for cooling. PIN20 is PWM out and this script work perfect. I run this script over therminal arroun 15 hours. Afer all tests i register script for autoload after reboot like this: 

And reboot. After reboot my script start to work and all is fine arround 20min. After that time my script stop to work. If I run this manualy on terminal script can work hours and hours with no errors. What's mistake? Here is my script. 

Although fat has all sorts of problems I don't think this is necessarily one of them. ext2 might offer some improvement, ext4 probably would, but your biggest improvement would be compression and archival. either something like zip or tar.gz or maybe since these are sequential images mpeg 

Most display managers can be configured to have multiple X servers and on boxes with one or no monitors using Xvnc works well. The setup that I use has the advantage of using the main X configuration with out using xdmcp. I use xdm because it is the most configurable. here is my /etc/X11/xdm/Xservers file 

increase the source voltage: if you lose .4v over the wire increase your source voltage to 5.4 volts so that you get 5v at the point of use. You must measure your exact voltage loss. increase conductor diameter. decrease cable length. This is easy enough, if you use an ac extension power cord you can place the power supply close to the rpi. 

Feel free to change the geometry to what ever you want. You would just need to generate a .vnc/passwd file and adjust the path to match. If you don't want a local X server comment out or delete the :1 line. Other display managers will probably work, but the configuration would be different. 

Unfortunately SD cards does not work the same way as spinning hard disks. The biggest problem here is wear leveling (ensuring that all blocks were written approximately the same number of times). Since it is done at the SD card level, system has no idea on how it's implemented. The basic idea is the same, however - you try to write to block but the card decides that it should instead write this file to block , because got too many writes already, which may require to get swapped and so on. Details of this operation may vary from vendor to vendor. In any case, the card has to keep some kind of index of which blocks are mapped where and how many times where they written, etc. Unfortunately SD card has no idea about partitions on the card and so it's not impossible to swap blocks between different partitions. It's even quite likely since one partition is read-only so after some time it's blocks will be much better for writing than the ones from writeable partition. In case of power failure in the middle of such swap, it may corrupt filesystem even on read only partition. That being said, because each SD card has limited number of writes, it may break quite quickly when written extensively. Because of that, SD card (and any other flash device) is not well suited for such workload. 

Cron may not support backtick command expansion. put your commands in a script and run that from cron instead. much easier to debug. 

that either windows or one of the net work adapters on it (probably the wireless one) is using its own mac address in your dhcp packets, or your dhcp server is not using mac addresses but some characteristic of the wireless link as unique identifiers, and since you are using the same link ... 

MIDI (Musical Instrument Digital Interface) is a simplex serial protocol (that is only sends data one way. If my memory serves it uses a standard uart. My first thought would be fire up minicom open up the usb midi adaptor tty device and set it to n81 31250 baud, then just do an ascii transfer. the two issues Are that that is a nonstandard baud rate, and something in my mind wants to say even parity which would mean 7 data bit. Give her a try, It can't hurt. 

the web server. wrapper.cgi: this program is called as www-data by the web server it calls sudo or super. sudo or super with a configuration file that only allows www-data to call real.cgi real.cgi: This program writes to gpio after preforming final checks. Be very careful when writing this. 

There is "safe mode" boot option in raspberry Pi firmware for some time now. To enable it, you have to use a jumper to do short between pins 5 and 6 on P1 header. This makes bootloader code to almost ignore content of config.txt (except from option) using default values and try to boot with (or if it's not available). By default boots to minimalistic busybox based initramfs. It mounts /boot/ by default so you can easily edit it and restore your RaspberryPi to normal boot. More informations (including photo) on this thread. 

I believe is a setting responsible for that clock as I saw some foundation members mentioning APB is a internal clock driven by GPU (but I haven't found a definitive proof for that). You should not threat it like a static value but I don't know how it can be determined from userspace. Also by default, if , cpufreq will be changed according to system load. It should be between and which both, defaults to 250. On the other hand, kernel SPI driver seems to be using (according to file) clock which seems to be set as static 250Mhz. driver does not change this value (as far as I can see, it only sets ARM clock but it is doing this through GPU which may adjust other frequencies by itself automatically). 

Not all VNC servers support file transfer, specifically the original realVNC server used on debian and the raspberrypi does not. The tightVNC file transfer extension is not well supported on anything but windows. 

There are some USB hubs with active power management that when they are plugged into a computer try to negotiate power consumption with every device, so they cut out the power to every device to start plugin events. These hubs (which are otherwise very nice hubs and work fine for every other use) will not work to power the RPI and act as a hub for it at the same time. the two workarounds are to add a really big capacitor (or battery) to the RPI so that it will function through this power interruption, or to steel power from the hub's power supply instead of the hub. It would probably be easier to just use a cheaper hub. 

As rasbian and umbutu are both debian based, they have a lot in common, including typical apache configurations, so there are probably no problems following for one on another, other than the wisdom or lack thereof of the author. 

So all it does is to indeed read the hardware register each time you read the state of the pin. And does the same thing when not run in mode: 

RaspberryPi uses CPU so it's not possible to directly use on it. You would have to recompile everything and probably do some other changes in order to run this distribution. Most of the tools should be available in Raspbian (or other RaspberryPi's distributions so that would be easier way to use the tools. You can also take a look at PwnPi distribution which claims to have 200+ network security tools preinstalled. 

The CPU of RaspberryPi is quite low-end and it can't really decode video at decent speed (even SD MPEG2). Hardware acceleration has to be used but by default only H264 can be hardware accelerated. You can buy a licence key to enable additional hardware decoders from RPi foundation (currently you can buy MPEG2 and VC-1 license). Graphics chip on RaspberryPi is VERY powerful and if video is encoded with a format supported by the hardware decoder, it can easily play HD content 1080p. But you will have to transcode all your material that is in different formats. And hardware decoding only works with dedicated video player (omxplayer). It is used by RaspBMC so if you plan on using this solution, you should have no problem. If you are planning on running your own distribution, you have to integrate omxplayer. Also bear in mind that omxplayer is quite young project and while it's quite stable, it's not perfect (like most things on RPi dedicated software). Normal graphical environment (X server) does not use accelerated graphics. This is why you found some informations about slow GUI rendering. AFAIK XBMC is using OpenGL ES which does use hardware acceleration so it's not a problem if you plan on using it. There are some problems with sound as it's drivers are not good quality right now. You may hear some glitches in audio. There are also problems with USB on Rpi, this wont let you use USB card to make audio problems go away. And since network chip is also connected using USB, there may be some glitches. Most of them are addressed right now in new versions of software but there may be some more. Because of the way USB on RaspberryPi was designed and because of the drivers issues, there may be problems with some USB keyboards or other remote contollers. You may need to use good active hub to connect USB devices. Especially if you are planning on using Wifi. 

Not all modems can be used for dial in. Almost all landline modems will work fine for dial in, but with GSM modems you need to verify that it will work. The fast easy way to check is to verify that it will sind RING messages and supports the ATA. If the modem meets those requirements it will work (with suitable adaptors). Install mgetty and read its documentation for software details. If the modem does not support those features there is still a slim chance it will work, but it will be much harder to setup. The modem bobstro linked to may work, but it is designed for other use cases (it is designed for continuous internet connection) and probably will not work with mgetty. Unfortunately you will probably need to talk to a salesman to find the right modem for your use case. If this is noncommercial you may also want to look at HAM based radio modems. P.S. use ppp not slip. slip is better than nothing, but ppp is much easier to use. 

The longer the wire and the smaller the wire the more voltage you loose. That is a plain and simple fact. There are basically three ways to compensate for this: 

MCP3008 can do that. You can build module for mesure voltage. Here is some links what can help you: $URL$ $URL$ What I will do is made one converter what will mesure voltage between 100 and 500mV and decide if voltage drop below 400mV or 350mV to strat shutdown sequence. Also maby you can mesure core voltage of your PI in BASH script but I'm not shure is good way for this. Here is code: 

I want to avoid sleep or somehow simulate PWM to my fan have real speed control instand of ON/OFF in defined intervals. Can someone help me? Thanks! 

Can I use or something else to get more GPU memory to video can play better? For now I have cutting when play videos and that not like. Also I want to get best performance from this machine. For cooling I have pwm controled fan and big aluminium cooler. Here is how my device look: 

I build wifi router for my house in the countryside. I only can have internet via wireless so I buy USB grid antenna and connect on PI and made a bridge to internal antenna. USB antenna is connected to internet provider via PPPoE connection what I setup via and internal antenna share this network in my house. The problem is that I can access to Raspberry PI via my laptop but internet not pass via that bridge. Also I setup static IP because sql and apache server what I need. How to broadcast internet via this network? Here is my configuration from /etc/network/interfaces 

Note: It seems that which commands are supported depends on both HDD and HDD->USB converter being used. 

There is at least one option you can use that does not require adding additional Ethernet port to your RaspberryPi - using VLAN switch. This can be quite expensive since the cheapest VLAN switches I know costs something like 35$. But it has some additional benefits (even more ethernet ports, way more to learn, etc). You can configure them to tag each port with different VLAN id, and then create multiple VLAN interfaces on your Pi. Each packet that is tagged, will be visible on proper tagged interface on your Pi, effectively providing something many virtual interfaces. 

No. You have +5% tolerance. This means that the voltage should be between 4.75V and 5.25V. 5.1V should be fine. Moreover, you can find such adapter on a list of verified power adapters on RPIs wiki. Keep in mind, however, that 0.7A is quite low. It is recommended to have at least 0.7A but remember that you are on a low side of this parameter. Please also note that power adapters does not always provide what they say they are and there is some tolerance to it's values (and it's usually not specified by manufacturer). So if you have any problems with your board, I suggest you to do simple voltage test as described on this wiki page. Actually, I suggest to do this even if you don't see any problems and also test the voltage given without load on the PSU before connecting it to RPi.