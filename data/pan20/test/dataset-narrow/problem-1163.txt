determined by the value of the bit the underlying automaton was recording. By the conditional probability I went over earlier, there is an $h_0$ is the $p$ family such that, 

If ​ (ceil(degree/n))+1 ​ is "large", then there doesn't actually need to be such an X$\hspace{.02 in}$'. 

and $\;\;\;\;$ non-uniform NC1 $\: \not\subseteq \:$ L $\;\;\;\;$ . Ryan Williams showed that $\;\;\;$ NTIME[$2^{\hspace{.02 in}n}$] $\: \not\subseteq \:$ non-uniform ACC0 $\;\;\;$. 

probability of being divisible by something beyond the cutoff point. ​ (To verify that that argument works despite density not being countably additive, do that for each {1,2,...,n} separately.) 

$\text{the }i\text{-th bit of the output equals the }i\text{-th bit of } x_0$||$x_1]$ . ​ ​ ​ ​ Multiplying the number of states by ​ $4\hspace{-0.04 in}\cdot \hspace{-0.04 in}C\hspace{-0.04 in}\cdot \hspace{-0.04 in}j$ ​ lets the automata track $i$ and 

of $S^{V_1}$ is computationally distinguishable from the distribution of $\:\left(P,V_1\right)(x)\:$. 

The complexity of intermediate problems stands everywhere, since that case is impossible. Let $b$ be the base of $\log$. $\:$ (It's probably $2$ or $e$, but it's value isn't important.) For all $n$, if $\: b < n \:$ then $$2^{\hspace{.02 in}(\hspace{.02 in}\log(n))^{1+\frac1{\log(\log(n))}}} \; = \; 2^{\left(\hspace{-0.03 in}(\hspace{.02 in}\log(n))^1\hspace{-0.02 in}\right) \cdot \left(\hspace{-0.06 in}(\hspace{.02 in}\log(n))^{\frac1{\log(\log(n))}}\hspace{-0.03 in}\right)} \; = \; 2^{\hspace{.02 in}\log(n) \cdot \left(b^{\hspace{.02 in}\log(\log(n))\hspace{.03 in}}\right)^{\frac1{\log(\log(n))}}} \\ = \; 2^{\hspace{.02 in}\log(n) \cdot b^{\hspace{.02 in}\log(\log(n)) \cdot \frac1{\log(\log(n))}}} \; = \; 2^{\hspace{.02 in}\log(n) \cdot b^1} \; = \; 2^{\hspace{.02 in}\log(n) \cdot b} \; = \; \left(b^{\hspace{.02 in}\log(2)}\hspace{-0.04 in}\right)^{\hspace{.02 in}\log(n) \cdot b} \; \\ = \; b^{\hspace{.02 in}\log(2) \cdot \log(n) \cdot b} \; = \; b^{\hspace{.02 in}\log(n) \cdot \log(2) \cdot b} \; = \; \left(b^{\hspace{.02 in}\log(n)}\hspace{-0.04 in}\right)^{\hspace{.02 in}\log(2) \cdot b} \; = \; n^{\hspace{.02 in}\log(2) \cdot b}$$. 

$\Theta\left(n\cdot \log_k(n)\right) \: = \: \Theta\left(n\cdot \frac{\log_2(n)}{\log_2(k)}\right) \: = \: \Theta\left(\frac{n\cdot \log_2(n)}{\log_2(k)}\right)$ and $\Theta\left(n\cdot \log_{k!}(n)\right) \: = \: \Theta\left(n\cdot \frac{\log_2(n)}{\log_2(k!)}\right) \: = \: \Theta\left(\frac{n\cdot \log_2(n)}{k\cdot \log_2(k)}\right)$ 

As shown earlier in this answer, there are infinitely many n such that $1\hspace{-0.04 in}\big/\hspace{-0.07 in}\left(\hspace{-0.02 in}n^{2+j}\hspace{-0.02 in}\right) \; < \; \operatorname{Prob}_{\mathcal{O}}\left[A^{\mathcal{O}}(n,z^{\mathcal{O}}(n))\right] \;\;\;$, $\;\;\;$ so there is a polynomial such that the sequence whose n-th entry is the lexicographically least 

(CSP = "constraint satisfaction problem") CSPs for which either the variables are restricted to less than two values or the constraints take less than two inputs are obviously trivial, and Schaefer's dichotomy theorem 

those papers does not specify a constant number of colors. (For a similar example, consider k-variable-SAT versus SAT.) 

For any given objective function, let BotL (best-of-the-list) be the algorithm that evaluates the objective function on a set of inputs and returns an input from that list that had maximal output (from among those inputs), with ties broken arbitrarily. $\:$ Since APX only includes problems 

$\:$ compute the group operations, and compute the group actions and there is no known efficient quantum algorithm 

$(\lceil \text{input_length}\rceil \hspace{-0.04 in}-\hspace{-0.05 in}1)/p \; < \; (\text{input_length})/p < (C\hspace{-0.04 in}\cdot \hspace{-0.04 in}j)/p \leq (C\hspace{-0.04 in}\cdot \hspace{-0.04 in}j)/(2\hspace{-0.04 in}\cdot \hspace{-0.04 in}C\hspace{-0.04 in}\cdot \hspace{-0.04 in}j^{\hspace{.02 in}2}) \; = \; 1/(2\hspace{-0.04 in}\cdot \hspace{-0.04 in}j)$ . ​ ​ ​ ​ Thus wikipedia' string hashing method has small enough collision probability for this answer. 

is good if the configuration is good for at least one suffix of $x$, and bad otherwise. $\operatorname{Pr}[\text{Automaton outputs }x \;\; | \;\; \text{Automaton reaches a bad configuration}]$ $\leq$ $1/j \: < \: \operatorname{Pr}[\text{Automaton outputs }x] \;\;\;$, so it's possible for the automaton to output $x$ without reaching any bad configuration. 

[s'i is DSSEA's output after sending ​ $\star$ , (i,1) ​ along streams 0,1 respectively ]. ​ ​ ​ Output the lexicographically least element of S which differs from s' on a minimum number of positions. 

a precision-$n$ approximation to $\pi$ can be computed in time $\;\; O\Big(\hspace{-0.04 in}M(n)\hspace{-0.02 in}\cdot \hspace{-0.02 in}\log(n)\hspace{-0.04 in}\Big) \;\;\;$. 

For input length of at most one block, collisions are simply impossible. ​ ​ ​ Otherwise, $\text{maximum_collision_probability} \leq \text{degree}\hspace{.02 in}/p \; = \; ((\text{number_of_blocks})\hspace{-0.04 in}-\hspace{-0.05 in}1)/p \; \leq \; (\lceil (\text{input_length})/(\text{block_size})\rceil\hspace{-0.04 in}-\hspace{-0.05 in}1)/p \; \leq \; (\lceil (\text{input_length})/1\rceil \hspace{-0.04 in}-\hspace{-0.04 in}1)/p \; = \;$ 

of $\mathcal{S}$ from the set of that clause's literals which are false, one can trivially find the set of those elements of $\mathcal{S}$, and using that set to extend [the subset of $\mathcal{S}$ induced by the assignment] 

and a (circuit encoding a) function ​ g : {0,1}n -> {0,1}n+1 Correct Outputs: ​ ​ ​ elements x of {0,1}n+1 such that ​ g(f(x)) ≠ x . 

Interleaved with those computations, output a bit of $\pi$ approximately $t_{curr}\hspace{-0.03 in}\big/\hspace{-0.02 in}2^i$ steps after outputting the previous bit of $\pi$. $\:$ At the end of those computations, output the rest of the first $2^{\hspace{.02 in}i+1}$ bits of $\pi$, then increment $i$, set $\: t_{curr} = t_{next} \:$, $\:$ and go back to the beginning of this loop. With the fastest known integer multiplication algorithm, 

Given $\left[\hspace{.03 in}j_0,j_1,j_2,...,j_{(3\cdot k)-1}\hspace{-0.01 in}\right]$, $\:$ where $\; J = \operatorname{sum}\left(\left[\hspace{.03 in}j_0,j_1,j_2,...,j_{(3\cdot k)-1}\hspace{-0.01 in}\right]\right) \;$, $\;$ if there are $k$ different stores, $\:J$ items, and $\:(3\cdot k)+(4\cdot J)\:$ customers, 

Proof: O(log$\circ$log) + o(log$\circ$log) ​ = ​ O(log$\circ$log) ​ , ​ ​ ​ so even if the output is in unary, we can assume 

by trial division and do the arithmetic operations mod $p$. ​ ​ ​ In particular, NC2 can do the same. ​ Observe that wikipedia's string hashing method takes the input as a stream, so 

then ​ ​ ​ NP $\subset$ r.o.$\hspace{-0.04 in}\big(\hspace{-0.05 in}$DTIME(2^(n^(o(1))))/g$\hspace{-0.04 in}\big)$ , ​ where maxL(n) is an upper-bound 

For such n, $1\hspace{-0.04 in}\big/\hspace{-0.07 in}\left(\hspace{-0.02 in}n^{2+j}\hspace{-0.02 in}\right) \; = \; 1\hspace{-0.04 in}\big/\hspace{-0.07 in}\left(\hspace{-0.04 in}\left(\hspace{-0.02 in}n^2\hspace{-0.02 in}\right)\hspace{-0.06 in}\cdot \hspace{-0.06 in}\left(\hspace{-0.02 in}n^{\hspace{.04 in}j}\hspace{-0.02 in}\right)\hspace{-0.04 in}\right) \; = \; \left(\hspace{-0.02 in}1\hspace{-0.04 in}\big/\hspace{-0.07 in}\left(\hspace{-0.02 in}n^2\hspace{-0.02 in}\right)\hspace{-0.03 in}\right) \cdot \left(\hspace{-0.02 in}1\hspace{-0.04 in}\big/\hspace{-0.07 in}\left(\hspace{-0.02 in}n^{\hspace{.04 in}j}\hspace{-0.02 in}\right)\hspace{-0.03 in}\right) \; < \; \operatorname{Prob}_{\mathcal{O}\hspace{.02 in},\hspace{.04 in}x\in \{0,1\}^n}\hspace{-0.06 in}\left[R\hspace{-0.04 in}\left(\hspace{-0.04 in}x,\hspace{-0.04 in}\left(z^{\mathcal{O}}\right)^{\hspace{-0.04 in}\mathcal{O}\hspace{-0.02 in}}(x)\hspace{-0.05 in}\right)\hspace{-0.02 in}\right]$ . Let $A$ be the oracle-algorithm that takes 2 inputs, one of which is $n$, and does as follows: Choose a random n-bit string $x$. ​ Attempt to 

$\text{and } \: \langle \hspace{.02 in}y_0,\hspace{-0.03 in}y_1\rangle \neq \langle x_0,\hspace{-0.03 in}x_1\rangle \: \text{ and } \: \langle h(\hspace{.03 in}y_0),h(\hspace{.03 in}y_1)\rangle = \langle h(x_0),h(x_1)\rangle\big]$ $\leq$ $1/(2\hspace{-0.05 in}\cdot \hspace{-0.04 in}j\hspace{.02 in})$ . ​ ​ Let $h_0$ be such an $h$. $1/j \: < \: \operatorname{Pr}[\text{Automaton outputs } x] \;\; \leq \;\; \operatorname{Pr}_{\langle \hspace{.02 in}y_0,\hspace{.02 in}y_1\hspace{-0.02 in}\rangle \leftarrow \text{Automaton}}[\langle \hspace{.02 in}y_0,\hspace{-0.03 in}y_1\rangle = \langle x_0,\hspace{-0.02 in}x_1\rangle]$ $=$ $\operatorname{Pr}_{\langle \hspace{.02 in}y_0,\hspace{.02 in}y_1\hspace{-0.02 in}\rangle \leftarrow \text{Automaton}}\hspace{-0.05 in}\big[\langle \operatorname{length}(\hspace{.03 in}y_0),\operatorname{length}(\hspace{.03 in}y_1)\rangle = \langle \operatorname{length}(x_0),\operatorname{length}(x_1)\rangle$ 

For complete graphs: Order the possible-directed-edges as [[1,0],[2,0],...,[|V|-1,0],[0,1],[2,1],...,[|V|-1,1],[0,2],[1,2],...,[|V|-1,2],...,[0,|V|-1],[1,|V|-1]],[2,|V|-1],...,[|V|-2,|V|-1]], and imagine the perfect binary rooted tree whose levels correspond to initial segments of the possible-edges under that ordering, 

$\;\;\;$ , (output or not i_1) , ... , (output or not i_(fanin-1)) $\:$ for each OR gate $\;\;\;\;\;\;\;\;$ and $\;\;\;$ clauses $\:$ ((not i_0) or (not i_1) or ... or (not i_(fanin-1)) or output) , (i_0 or not output) 

STCON(n,k) is obviously in [$\hspace{.02 in}$NL with k$\cdot \hspace{.02 in}O$(log(n)) bits of non-determinism]. 

and x is a CNF-SAT instace and ​ size(C) ≤ (number_of_variables_in_(x))$\hspace{.03 in}$j ​ and C(v) satisfies x. ​ ​ ​ Obviously, each R$\hspace{.02 in}$j is in FNP and NP-hard. ​ ​ ​ If they are all FNP-hard under non-uniform parallelizable reductions, then there can't even be a version of time-lock puzzles against 

one has $\;\;\;\;\; H_2(m) \;\; = \;\; x\:||\:\:111...[b\text{ of them}].\hspace{-0.04 in}.\hspace{-0.04 in}.111\:||\:H_{\hspace{-0.02 in}1}(m)\:||\:z \;\;\;\;\;$. and For all 3-bit strings $x$, for all salts $r\hspace{-0.02 in}$, for the string $m$ that results from salting $x$ with $r\hspace{-0.02 in}$, if $m$ is 

use circuit-SAT, commit to the values of enough gates, and then use the code of the commitment scheme to prove that the values committed to are correct and cause 

does not use anything about the partial transcripts for the other provers and the randomness strings used for the verifier's interactions 

are coin-flips, NC2 can output a list of triples ​ $\langle \text{prob},\hspace{-0.02 in}x_0,\hspace{-0.02 in}x_1\rangle$ ​ such that the pairs formed by taking the right two entries from distinct triples 

In particular, such balls intersect at most $D$ of the groups of ​ $m\hspace{-0.04 in}+\hspace{-0.05 in}1$ ​ points, and the coordinates 

2(n-2)/113 elements which is such that distinct elements of S differ on more than 4/9 of the positions, 

Thus, by this formula, there are ​ $n\hspace{-0.04 in}\cdot \hspace{-0.05 in}\left(\hspace{-0.02 in}n^{n-2}\right)$ ​ distinct reachability oracles 

For strings $s$, say a configuration is bad for $s$ if the probability of the automaton outputting $s$ 

By two paragraphs ago, its probability of outputting the string without entering the accept state is zero, so its probability of outputting the string equals its probability of entering the accept state. By Lemma 6.1, given $j$ in unary, NC2 can compute those probabilities. ​ NC2 can also 

rational approximations to $\: \sin\hspace{-0.03 in}\left(x\hspace{-0.04 in}\cdot \hspace{-0.04 in}2^{\hspace{.02 in}y}\hspace{-0.02 in}\right) \:$ and $\: \cos\hspace{-0.03 in}\left(x\hspace{-0.04 in}\cdot \hspace{-0.04 in}2^{\hspace{.02 in}y}\hspace{-0.02 in}\right)$ 

(for $j$ given in unary) NC2 can find a deterministic finite automata for each hash in the $p$ family. 

As far as I am aware, those provide the only known constructions of non-interactive statistically hiding commitments in which knowledge of a trapdoor enables efficient and undetectable equivocation, a property that is useful for zero knowledge protocols and adaptive security. Any family of one-way group homomorphisms with the first three properties (from the third and fourth lines of this post) can be converted into such a thing by having the domains act on the codomains via $\: \langle a,b\rangle \mapsto h(a)\cdot b \:$, $\:$ with the identity elements as the distinguished elements. A restricted version of the Pedersen commitment scheme can be obtained as a special case of applying the above conversion to the group exponential homomorphism, whose one-wayness is equivalent to the hardness of the discrete logarithm problem, although that is not hard for quantum algorithms. (See Shor's algorithm and that page's section on discrete logarithm.) 

"Is it known to be NP-complete?" No, because such mathematical coincidences are not known to not occur. 

string's next bit. ​ ​ ​ ​ ​ ​ ​ The only other way for it to not output the whole eventually-periodic string 

By Theorem 2, there exists an oracle-function $\mathcal{S}$ such that with $\mathcal{P}$ as in that theorem, 

and four other customers interested in each one of the items, then the maximum can't be less than $\:\frac{4\cdot J}k+3\:$ and the partitions whose maximum is 

The DNF circuits for an arbitrarily length-$\ell$ truth table have size at most ​ $\ell^{\hspace{.03 in}2} \cdot \operatorname{polylog}(\ell)$ , 

loss of generality that at most $\:O\hspace{.01 in}(1)\:$ different security parameters will be used. 

For $\: 1 < n \:$ and $\: n^{o(1)} < \sigma \leq n \:$, $\:$ how small can $L$ be for there to be for there to be an 

The other issue was what trees are allowed. $\:$ Since I have no idea how one would weight depth vs. number of nodes, I will keep things simple and require that the trees be perfect. 

from {0,1,2,3,...,n-2,n-1} $\big(\hspace{-0.04 in}$so in particular is in NotTooManyPcc$\hspace{-0.03 in}\big)$, ​ but by this paper, 

is the probability of the automaton outputting that string and each of those probabilities is greater than $1/j$ and for each string x, if the probability of the automaton outputting $x$ is greater than $1/j$ then 

since such circuits have input locality $\:(\hspace{.02 in}\log(k))^{o(1)}$,$\:$ which means one can 

For numbers M of possible strings and positive integers j in o(log(M)) and error probabilities bounded above by ​ 1$\hspace{-0.04 in}\big/\hspace{-0.04 in}\big(\hspace{-0.04 in}$M(1+Ω(1))/j$\hspace{-0.03 in}\big)$ , one can similarly get an asymptotic lower bound of ​ ​ ​ $\big(\hspace{-0.04 in}\lfloor \hspace{-0.03 in}$log2(M choose n-1)$\rfloor$ - 1$\hspace{-0.04 in}\big)$ ​ / ​ (2$\cdot$j - 1) ​ , 

good configurations, $x$ has less than $\: C\hspace{-0.04 in}\cdot \hspace{-0.03 in}j \:$ distinct non-empty suffixes. 

is equivalent to replacing "families" with "sequences" in that definition.) Questions: Is the "better obfuscator hypothesis" known to be false? 

at that stage is just a statistically binding commitment. Let $\: p: \omega \to \omega \:$ be a polynomial that bounds the number of oracle queries $S$ makes when $V^*$ only requests one proof. $\:$ Suppose the statistically binding commitment scheme being used 

Hardcording separate randomness for each update does not increase that number, so the initial randomized algorithm must be able to keep at least ((n-2)/113)-2 bits of state between updates. For all integers n, if ​ 25992 < n ​ then ​ n/114 < ((n-2)/113)-2 . 

$[b\hspace{-0.04 in}+\hspace{-0.05 in}3 \text{ bits whose values don't matter}]\:||\:H_{\hspace{-0.02 in}1}(m)\:||\:[3 \text{ bits whose values don't matter}]\;\;\;\;\;$. 

if $\;\;\; 1\hspace{-0.04 in}\big/\hspace{-0.07 in}\left(\hspace{-0.02 in}n^{2+j}\hspace{-0.02 in}\right) \; < \; \operatorname{Prob}_{\mathcal{O}}\left[A^{\mathcal{O}}(n,z^{\mathcal{O}}(n))\right] \;\;\;$ then $1\hspace{-0.04 in}\big/\hspace{-0.07 in}\left(2\hspace{-0.06 in}\cdot \hspace{-0.06 in}\left(\hspace{-0.02 in}n^{2+j}\right)\hspace{-0.04 in}\right) \; = \; \left(\hspace{-0.02 in}1\hspace{-0.04 in}\big/\hspace{-0.07 in}\left(\hspace{-0.02 in}n^{2+j}\hspace{-0.02 in}\right)\hspace{-0.03 in}\right)-\left(\hspace{-0.04 in}1\hspace{-0.04 in}\big/\hspace{-0.07 in}\left(2\hspace{-0.06 in}\cdot \hspace{-0.06 in}\left(\hspace{-0.02 in}n^{2+j}\right)\hspace{-0.04 in}\right)\hspace{-0.04 in}\right) \; = \; \left(\hspace{-0.02 in}1\hspace{-0.04 in}\big/\hspace{-0.07 in}\left(\hspace{-0.02 in}n^{2+j}\hspace{-0.02 in}\right)\hspace{-0.03 in}\right)\hspace{-0.04 in}-\hspace{-0.04 in}\sqrt{1\hspace{-0.04 in}\big/\hspace{-0.07 in}\left(2\hspace{-0.06 in}\cdot \hspace{-0.06 in}2\hspace{-0.06 in}\cdot \hspace{-0.06 in}\left(\hspace{-0.02 in}n^{(2+j)\cdot 2}\right)\hspace{-0.04 in}\right)}$ 

$y_0$ and $y_1$ are chosen from a distribution independently of $h$. ​ In particular, it will still apply when 

NP-hard ​ ​ - ​ ​ The corresponding decision problem is NP-hard (with respect to C reductions). FNP-hard ​ ​ - ​ ​ There is a C reduction f from satisfiability to the corresponding decision problem 

$t_{next}$ and those bits of $\pi \big]$. $\:$ At the start of those computations, output the $2^i\hspace{-0.03 in}$-th bit of $\pi$. 

For all non-negative integers $n_0$,$n_1$,$n_2$ and random strings $r_0,r_1,r_2$ $n_0 \:\: = \:\: (n_0+n_1+n_2)-(n_1+n_2)$ $=$ $\operatorname{plaintextsum}(\operatorname{encrypt}(n_0,r_0),\operatorname{encrypt}(n_1,r_1),\operatorname{encrypt}(n_2,r_2))$