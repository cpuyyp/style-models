Now, let's look at how many times you iterate the strings: The first string is iterated N * N times, and the second string is iterated N * N times, where N is the count of the characters in the string. This makes 2N^2 iterations. It would probably be much faster (depending on the string length) to split these strings into character arrays, sort each of the arrays, and do an iteration like this: 

What are those doing as local constants? Those should probably be fields. They aren't specific to a single method, the whole class uses them. 

Now that is just plain messy. And it hides code on the screen; it took me a second to figure out what was going on here, and it will you too, when you come back to it next year. Write each statement on new lines like so: 

First, use / blocks around parts that can throw exceptions. For example, what happens when an IOException is thrown by the file, perhaps because the data is corrupted and the file exists, but cannot be opened? Second, I don't know what constitutes failure, but an app-closing failure is failure in my book: 

Right here, I would not align your code like this, it is easier to write and makes just as much sense without those extra spaces: 

Your code is a very neat as a general rule, but your style is a little off. C++ typically uses braces like this: 

After a somewhat lengthily discussion in the chat room, I have set up an IoC container with Unity to store my settings in. This is my static IoC class: 

See these files for the necessary files to set up the Command structure: $URL$ Now, the easy part is wiring this up to the UI; the tricky part might be understanding the wiring. So first, we need to let the UI know where to look for the data. We set the : 

Don't put your logic in . 's job is to start and stop the program--not to do any logic. Your should look something like this: 

I do not like my XAML very much. The way I place the for the white pane over two rows, only to provide a margin to keep the copyright text out of it seems very hackish. Just as bad is the way I put the elements in a textbox (they are not allowed to be placed directly in a because it is not a ), with the XAML-drawn logo (courtesy of ThunderFrame) inside. Is there a cleaner way to do either of these? 

However I know this function has a bug: javascript can have cyclic references (causing infinite recursion). To fix that I need to either limit the traversal to a particular depth or check if I have already visited an object. Here I'll do the latter: 

Use instead of ; it is shorter and faster in all cases I've ever bothered to test. Don't use inline, javascript doesn't have block scope (only function scope) so it is better to declare all necessary variables at the start of your functions. Cache to make code more readable. Use toString instead of a regex test for checking for the bool type simplify loop and store the upper bound in a variable instead of computing it every time Use a check on the loop. 

In these cases, you would need to do more than what you are currently doing in your method to take care of unregistering these functions (In IE7 and below). My perspective would be just to let it leak (tell the users to get a better browser). IE6 would leak until the browser is closed, IE7 would leak until the page is out of the navigation cache. In every other browser, once the DOM is detached (or the timeout occurs, or the ajax post happens, etc.) these functions are not reachable from the global scope anymore (and so they are removed in the next garbage collection cycle). Cleanup in IE Essentially what you are doing in is move the stuff you want to delete in the previous route to and then in you take care of deleting the old references. Really the only things you should care about are those properties that you cannot actually get at via variable properties once set. Whenever you do a (or similar) you would want to do something like this: 

every time you call , jQuery needs to do some work in the background to figure out what you mean in the string. You can instead cache these items and not need to depend on retrieving them repeatedly being fast. In this case it doesn't make much of a difference, but eventually it will cause your page to be slower. There is too much extra junk in the way to make it apparent what is doing. A good rule of thumb is to wait a week, then if you cannot glance at a statement and know that it is both in the right place in the function and what it is doing then something is too complex. While your code is probably sensible to you right now I am willing to stake the claim that in a few weeks/months when you go to add some other functionality you would waste some time trying to figure out what this is doing. 

If the user were to enter "r" instead of an value, for instance, it would crash. You can fix this by adding this: 

Also, I would probably just use an unless you really need the larger number size provided by an unsigned , in which case I would probably use a . 

Sure there is. Check the input and notify the user, and let them try again. And do it in a dedicated method. Maybe you can modify the stub method I gave you into and make sure it is within the ranges provided. This is a perfect example of extracting similar logic into a more generic function. 

So, sᴉɔuɐɹɥԀ suggested I write a SEDE query to find first questions with answers posted within 24 hours, and here it is: 

Now, I like that part good enough, the trouble is getting the values from higher up the tree. I am defining a tree like this in my class: 

Continuing the series of Code Explorer posts, here is the collection of view models for the tree nodes: 

This may not run as is. Notice in the first place that I converted to an . This is sheer conjecture on my part, and will need to be changed to the type of the control you are clicking. tell the method which control is being clicked, so you don't need to have all this duplication in a single method. If you have trouble getting the value of to change, you might need to use the keyword, but because this is a reference type, you probably don't need to as they are passed by reference automatically. Note also that I changed the style to . This works the same, but is the style you typically use when working with boolean values. You should put spaces around your operators, and name your variables a little more descriptively than or . If I could run and test this entire program, I might be able to get this down into a single method that could replace all the functions, but this is all I see at the moment. 

I like the way it is displaying, but I doubt it is correct to use spaces to create submenus. I also am doubtful about my removing and entered the submenus the way I do. I have looked into a couple different methods, but nothing really seemed to suit my needs; I will appreciate any input. I will also appreciate comments on my use of GlobalVars; I think this is the best way to hard-code data, but I am not quite sure if there is a better way; the default apps use JSON files, but I don't know how to use them. Is this something I should learn and implement, or is it fine the way it is? Screenshot of what I am doing: 

JsFiddle to show it works. Interestingly this version is also about 20% faster than the original code. (see: $URL$ 

This code looks mostly fine to me, when the method gets called, gets moved to and then when happens, gets deleted (and eventually garbage collected unless a reference to it continues to exist somewhere else). However I think you could do better by encapsulating each route in a function that takes care of and for you. Something like: 

You only need to bind the click event once (toggle is a shortcut for binding to click and attaching two alternating event handlers). 

In response to the comments: This is very similar to the code you initially put up. I derived it again on a gist using the code you put in your question here (slightly different from the code in the fiddle): $URL$ Clone that repository to see the full history. 

This looks mostly fine by me (ignoring Reflection and other more obscure sources of thread safety failures), but I wouldn't call it a Queue per say (because of the duplicate check there). Does it really matter what order the set of items in this collection are in (if so then the duplicate check introduces a bug in that ordering, if not then why not call this a )? One change you should really make is adding to your private members. Also, while this looks thread safe, there is no reason to assume that it is safe to use any of the items inside of it or any inherited versions of it. Consider code like this (intended to obviously be unsafe): 

Assuming is unique (if not then so you get the exception for more than one element). In both cases you should probably catch the internal exceptions and throw your own in its place to hide the implementation details (or specify in the method documentation that it will throw these internal exceptions, but I would think of that as bad practice). 

The problem of not all paths returning something is still here, so change the last line to . If you inline then the pattern logic can be replaced with : 

Lock based concurrency in .NET is a fairly simple paradigm (compared to the other ways of ensuring thread safety in .NET). When you lock, you declare a block of code as a critical section, protected by that lock object. .NET ensures that a second piece of code in the same app domain will never be running in a critical section protected by the same lock object while one instance is. Here is a good resource for more threading information: $URL$ Pedantry When most people discuss thread safety they mean it in the same sense as saying strings are immutable. That is to say, as long as you don't do anything I shouldn't reasonably expect you might do it is safe. Unfortunately, locks aren't good enough to actually provide true thread safety (bulletproof against reflection and C# pointer code), they are good enough for most usages where you control the software stack out to the actual application. If you need to ensure thread safety in these instances you must ensure thread safety at the field level in your classes (stuff like the keyword will help you here, but watch out). Some example threads that would break your safety here: 

This next action isn't used by the game, but rather publishes the data so another system can hook into mine and receive updates about games. 

You cannot do though, because it doesn't know how much space to give for when it is assigned. Naming: What does mean? From the context, it is clear it means , but why not name it to clearly specify what it is timing. Typically you use PascalCase for public field/property names, and camelCase for private field/property and variable names: 

Your CSS isn't too bad, but there are three problems according to the CSS validator at W3C. First of all, it complains about your because you are not allowed to use negative padding values. From my tests, it appears you could remove this line without affecting anything, or you could change the value to to shift the text up by 10 pixels. Second and third, you reference the color twice in your code as . You did your colors correctly in all other places, so this must just be a slip. 

I found I could remove the lines without effecting the display. In , you don't need to set . I do not know why you need to do that to remove the spacing in the class, but I was unable to get it working without it. I do not like that as it is not clear why you need to set the there, and there is probably a cleaner way to do it, but the usual trick of using a negative margin value isn't working, and neither did setting the to . I did not make any other changes; as I said above, your CSS is very clean and neat. 

I recently added Pool Checkers to my Checkers game. My main concerns are about how I manage calling the correct variant in my functions. Because this is a library, any public-facing method in can be the starting point, and because I use pure functions, I have to get the information in every function. I'm not sure if I managed this very well, or if I can improve it. The game rules are in PoolCheckers.fs: 

Why not create a method for this and pass the necessary values? You would have to pass several values, so this might be a pain, but it would have less repetition than this way. 

I decided to help @Matt out a bit and ask a PowerShell question. This is a simple guess-the-number game learning how to use functions with and without parameters, and use the input and output functions. All comments are welcome.