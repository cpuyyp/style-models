The answer depends entirely on what you mean by "entity". What makes something an entity? The whole point of components is that you can give real substantive definitions to these concepts. That way, you don't have to use the "entity" class for everything that can move the way many engines do. You talk about a "level element". What is that? What does it mean for something to be a "level element," and how is that different from the behavior of an "entity?" You are the only one who can answer that. 

GLSL is just the shading language. It doesn't deal with where vertex data comes from, where textures come from, fragment blending, depth testing, the viewport, framebuffer objects, etc. Shaders are important, but they're not everything. While I'm sure the Orange Book talks about these, as necessary for discussing GLSL, it doesn't go into the detail that other books would. 

That's a poor assumption. Indeed, I would even say that this assumption suggests that your general idea of "polish" isn't necessarily polishing anything important. "Polish" is not adding glow. "Polish" would be adding glow to something such that it makes the game better in some material way. Does that object need to glow? How does that glowing fit into your overall visual design aesthetic? Do other objects need to glow in order to make the entire presentation more coherent? Gratuitous effects are gratuitous. As are gratuitous AIs, gratuitous levels, gratuitous enemies, gratuitous areas, etc. In a well-designed and well-polished game, every element exists for a purpose. Putting more "stuff" in a game does not make it more polished. Making the game a coherent, cohesive work is what makes it more polished. This will generally involve doing boring stuff. Making a UI that looks like it belongs in that kind of game. Making sure that all your UI elements have a consistent look and feel. Making sure that your UI screens all make sense and have consistency and logic to them. Ensuring that enemies and other objects of interest are visible and noticeable, popping out of the background. Ensuring that the player's play experience through the game is smooth; the game doesn't get too difficult too early, and it doesn't get too easy later on. Polish is all of those little things that you know you need to do, but take a long time and in many cases aren't very interesting. And they're certainly not why you started making the game in the first place. Yet these are what makes a good idea into a great game. And these things are not easy to do. They require a lot of grunt work. The only real way to know how much is enough is to give the game to other people and let them play it, then see how they react. Ask them if there is anything that feels missing from the experience, or if they ran into trouble, or anything of that nature. 

A concern I would have with this system is this: ELO is based on number of games played. Which means that, initially, the player has no accurate information about their character(s). All they have are a bunch of people with random, hidden stats. Indeed, ELO ratings are very misleading, because ELO is relative. If you're fighting a bunch of guys with low defensive stats, your attack ELO is going to be disproportionately high. In fact, if you have a lucky streak with the RNG, this can make a lower attack character look like a higher one. Which means that, not only have you hidden information from the player (their actual attack rating), you are now lying to them by letting them think that their attack is higher than it really is. This is purely subjective on my part, so bear with me. I feel that a videogame represents a social contract between the player and the game designer. The game designer provides a game, which displays information to the player. It is the player's job to see this information and interpret it. It is the game designer's job to make this information sufficiently clear for the player to be able to properly interpret it and make reasonable, meaningful decisions from it. Game design, at its most core, fundamental level, is what any artistic endeavor is about: communication. If I see that I have a high attack rating, I should expect that to be legitimate information. That is my right as a player, and it is the responsibility of the game designer not to infringe on that right. I would consider it a mortal sin for a game to deliberately give me false information, especially info which is critical to my success. This is not misdirection or an unintended accident. This is perfidy: a game designer willfully and deliberately not acting in good faith. And your ELO system can do exactly that, since ELO is an estimate that only gets better with the number of games played and the level of opponents faced. It's one thing for a game to accidentally mislead you. Or for me to simply misunderstand a clue. But numbers are hard data. And if I have a high numerical value, I have every right to expect that this number is in some way accurate. Even if I don't understand what that number means exactly, I should expect that a character with 50 in some stat is at least somewhat better at that task than a character with 20 in that stat. Break the social contract between yourself and your players at your own peril. Furthermore, your ELO system encourages players to engage in more fights than they might want, just to get a more accurate idea of their ELO. I'm not a fan of a system that encourages the player to play in this way. I would prefer that the player want to play naturally, not has to be tricked into it just to get actual information about their character. The thing you need to think hardest about is this: why do you want to hide these stats? What do you gain by it in terms of design? Or what behavior are you trying to prevent the player from being able to do? In short, what do you want your system to achieve that showing these stats makes harder or impossible? Giving players (or people in general) information allows them to make more informed decisions. Thus, by denying them information, they must make due with less. This typically leads to more conservative behavior out of the player if losing has any real downsides. However, because the accuracy of their information is based on number of fights, it could lead to far more wild and experimental behavior, just to find out what a character's stats are. Is this what you want? 

The whole point of a component-based entity system is that it's flexible. Each entity can have exactly and only what it needs. If a particular entity needs a collision volume and a place in the world, then it has that. If a particular entity doesn't need an AI, then it doesn't have that. As to how you go about attaching them, there are two ways to do it: completely free-form, and slot-based. By slot-based, I mean that there is a set of pre-defined components that every entity could have. There are a set of specific classes that is hard-coded into the entity class. You check at runtime as to whether the entity actually has those components or not. A more free-form system allows you to put any number of components into the system. That is, the set of possible components is not hard-coded into the entity. Components in such a system would be named. To access a component of an entity, you would call a particular function and give it a name. It would search its list of components and return that component. In the latter case, your components would need either polymorphism or some form of type-erasure or something in order to store them in a homogenous list and fetch them components later.