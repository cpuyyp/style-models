Please note that even though you wish to dismiss a solution, it may still be valid. If you want quad's vertices to have Z=0, there's a scale matrix for that: 

Since is valid in constructor but not in , it seems that the destructor was called before , perhaps by copying an instance of the class. P.S. Errors like these could be prevented by following the Rule of three. 

What free / non-restrictive open-source solutions (not GPL) are available for decoding game videos? The requirements are simple: 

Effect interface has always been the highest level shader-related interface. Most probably the Effect interface simply abstracts away some of the problems in dealing with constant buffers but it also uses them under the hood. Whether the API is actually easier could probably be a question of requirements. If you want to build a very simple application, the effect interface might prove itself useful. However, if a more sophisticated engine is what you actually need then the Effect interface could probably even slow down the development and impose restrictions on some of the required optimizations. 

First of all, OpenGL is full of weird things so a driver bug, however unlikely it may be, is still an option - consider testing the app on different setups (nVidia vs. AMD, older drivers) and other tiny modifications of code. For example, you could start with removing the "glBindBuffer(GL_UNIFORM_BUFFER, 0);" line - it appears to be doing nothing useful anyway. Since everything here appears to be correct, the problem is most probably not here. There are two options: gDEBugger and stepping through the code in the C++ debugger. It appears that something is being reset just before drawing. In gDEBugger, there's a "call history" feature which could help you see which calls were made before the draw call and in what order. By the way, I strongly suggest you to wrap every error-returning call with a macro that checks for all possible errors and throws them. It has to be a macro to support extended debugging (printing file, line and the faulty line of code itself) that can be disabled in release builds. If some secret rule is broken, such setup should warn you of that immediately. 

My guess is that the slowness comes from this "adding objects to a grid" thing. This is not the "grid implementation" as everyone knows it because such grid implementations usually include only one native (or smaller, like a few bits) value per grid cell. How you use it is totally up to you. However, there must be no nested arrays or anything as horrible as that. So in this case, I don't see a good reason why a grid should be used. 

A->B can be solved by using navigation meshes instead of a grid. This implies a big change in pathfinding data generation. Cases like C and D are just corner cutting: if character is moving in a path and inside a "corner" (cell where previous, current, next cells are not on a straight line), push it in direction of both previous and next cell. The only problem is to determine the distance from real position (the pushing distance). That would probably require the distance from current cell as input. Something like this: 

In my Asteroids game the user can scroll through space. When scrolling, the ship is drawn in the centre of the window. I use interpolation. I scroll the window uing , centering it around the centre of the ship. On my first machine (7 years old, Windows XP, NVIDIA), I am doing 50 updates and 76 frames per second. This is smooth. My other machine an old compaq laptop (Pentium III) with Linux and Radeon OpenGL driver delivers 50 updates and 30 frames per second. The ship regularly seems to "shudder" back and forth when at maximum thrust. When you position the mouse cursor beside the ship it is obvious that its relative position in the window changes. Also, the stars seem blurred into short "lines". Playing the game in non-scrolling mode, the ship moves within the window, is therefore not called repeatedly and there is no problem. I suspect a bug in my positioning of the ship and the window but I have dumped out these values and they seem to only go forward, not forward-back-forward. The driver does support double buffering. I guess if it is my bug I need to slow the frame-rate down to debug properly. My question: is this an obvious driver bug or is the slower machine uncovering a bug in my stuff and if so, some debugging tips would be appreciated. I am drawing in world co-ordinates and letting do the scaling and translation so if I had a quick way of verifying what pixel co-ordinates OpenGL produces for the ship centre, that would help clarify this. 

I've had a quick look at VBOs in OpenGL and they seem to be a good way to transfer large amounts of vertices to the Driver. They rely on all the stuff you passed being in one contiguous block of memory. You're wondering is the STL vector class a good fit? Well it is if you can treat it as single contiguous block of memory for passing to the functions that OpenGL will use for transferring Vertex data between your array and the VBO. So can you do that with a std vector class? According to its documentation: 

Declaring a method as virtual in a base class causes the compiler to introduce a hidden pointer into objects of this class (and its derived classes). This is the , the pointer to the . This pointer and table can be absent in classes that do not declare any virtual methods. The vtable holds the addresses of the correct methods to call. There is one vtable per class. When an object is constructed, its vfptr is set to point to the appropriate vtable in order to make this all work. All virtual method calls are indirectly looked up in this vtable to provide the polymorphism. Therefore, determining which method to call takes place at run time, not compile time or link time. You must be aware of how virtual methods work in order to use them safely. I recommend further reading, inclusing virtual destructors (very important). Polymorphism can be exploited with or without pointers, using dynamically allocated objects or automatically cleaned up objects. References can be used instead of pointers: 

Just like to say that I have little experience in the lua language BUT, If you take the x y z position of your model "Freddy" and the x y z position of all your other bricks, from there you could find the distance between "Freddy" and the brick and whether the color of that brick is black or not. Then when "Freddy" is a touching distance from the brick, you can allow him to pass through it or not. Hopefully this helps. 

After looking through my code over and over again, I found what I did wrong: The problem was that I hadn't initialized my tile map before I was trying to get the layers of the tile map, so it gave me the exception. All I needed to do was move the tile map initialization before I found the layers. 

This may, or may not, be the correct answer for you, BUT In your code, when you draw the platforms images to the screen, you add the camera's position to their x/y positions. This would not be necessary because you would then have problems with colliding, because your adding the cameras scroll to it so you wouldn't see them in their colliding positions. If you wanted to keep that, then I would suggest adding the camera x/y to the collision section. Hope this helps. 

Well, If you did a basic google search, you would find lots of answers to your question. Here is a good website to answer your question, straight from SFML itself: SFML and Code::Blocks This is based off of windows, but I'm sure it will work for all platforms. Hope this helps. 

I've been working on an simple RPG game and I'm having troubles figuring out how my graphics should look. I'm wondering if any of you could give some advice on how they are/could be more pleasing to the eye. Here is a couple of screen shots of the game itself: 

This is a little late, but... This is an example from c++, written by me, but you could probably take it and write it out in unity. You could take a random number using the rand() or any other random function. Then take that number, and as you place down each tile upon the map, use that number to determine what type of ocean tile it is going to be. 

The problem is, is that when I try to get a certain layer from the tile map, it return a null pointer error like so: 

Any suggetions/comments! Thanks! Sorry, I'm unable to post more pictures, because of my repution :( Edit: After some working on the look of the game here is where I got to... 

While following a tutorial with LibGDX, I am working with tile maps. This is the method that I'm using: 

I have tried various ways of getting the layer but none of them seem to work. Here's an image of my tile map in the Tiled map editor: