If you are not using OpenGL, then most games load sprite sheets with rotation already done (see other image).. You only need a quadrant worth of rotation pre-calculated. It saves memory and you can rotate on the fly to 90/180/270 without loosing quality to cover the other 4 quadrant (going back to the first figure, notice that the grids will align perfectly with rotations of 90/180/270 degrees). 

I'm in a bit of crunch time and I find myself spending way too much time tinkering with an algo, so I would like some help. In the game I am working on, there are some old-style, pixelated minigames. One of the minigame is a spaceship in a cavern. The caverns curves and narrows down over time until the ship crashes in a wall. I want them to be generated at random during runtime. I'm having a problem creating the walls of the cavern and narrowing them while keeping a smooth curve on them. For the narrowing, I keep track of it with a variable that decreases over time, but how about the curving and how to keep it natural? I've though of a keeping a target point that goes up and down randomly and have the wall try to reach for it, therefore smoothing the randomized number but it is not working great. Any ideas/algo? 

The simplest solution: you can store the initial version number of the game at installation in PlayerPrefs. Then when you add the ads, you can have a check of the minimum version number versus the initial version number. Or you can record in PlayerPrefs whether it is a paid version or not on the initial launch again. That leaves some problems: what if someone uninstall the paid version and reinstalls the free version? You might need a way to grant them the "no-ads" flags remotely. I use in-game gift codes for that, but it requires a backend of some sort (using parse.com). It is also susceptible to hacking of the local data, but if someone is willing to go to that length, it doesn't matter what you do - so don't worry about that. 

Just like the particle system solution, you can use 2dtoolkit to create the same effect. Add 3 children game object to the character with only a sprite attached to them. Change the alpha and coloring as needed. Then you can vary the sprite's local positions depending on the speed of the character: 

Finally, you have the equipment which work just the same way: all defined in a file using a custom format 

I am trying to come up with a system to measure or estimate the skill of a player at a single player game (so no head-to-head rating system help here). Specifically, it is a pinball game, but I do believe it is similar to most point-based single player games. I have thought of 3 approaches: 

I am having what is probably a newbie problem with Unity, but for the life of me, I can't find a decent solution to it. In short: my rigid bodies collide, but sometimes, they interpenetrate and stay stuck. I am looking for a solution that would either 1- stop the interpenetration from even happening 2- or at least eject the bodies to 'unstuck' the collision. By making the physics fixed step 0.01 instead of the default 0.02, I can avoid some of the interpenetration. However, that hardly sound like the proper way to fix this problem. Here is a screen shot of the bodies colliding. The car on the right is shown completely and you can notice that the ones behind have penetrated the others to some extent. 

You are saying here: If the left mouse button was released AND is being pressed currently; This seems like contradicting actions, mouse buttons are usually pressed first, then released to signify a singular action (or continuously pressed to signify on-going action(s)). Perhaps what you are looking for is here is: If the left mouse button was released OR is being pressed currently; 

Open the application and go to New. In the dimensions, put 8 for width and 8 for height. A new 8x8 canvas will open, typically I zoom in all the way to 3200%. I'll also get rid of the white background layer, by making a new layer, then deleting the background one. Now you have the canvas to work on, you can save it as a .pdn file. When you are ready to save the tile/image/sprite, go to File -> Save As, and choose file type: PNG. A "Save Configuration" box will open up and you can choose "Bit Depth: 8-bit" to save the completed work. 

Consider the factors: 1 - purpose of this character is commercial in nature, as even if it's a small event in your game, everything about it would be a commercial for the game 2 - no actual work is being copied here, only a reference to an idea 3 - no amount is copied, again only an idea is used 4 - one could hardly claim that MGS series would be out any consumers due to a minor reference in your game Now for extreme contrast suppose you had this example: 

Consider the factors: 1 - purpose of this character is commercial in nature, as even if it's a small event in your game, everything about it would be a commercial for the game 2 - the persona of Solid Snake is clearly captured in this work, 3 - the combination of the hair style, personality trait(smoking), similar appearance, and very close sounding name create a large portion of copied work, 4 - it is possible that some potential consumers of MGS thought your work was a legitimate MGS work, and those consumers only purchased your product because they thought it was Solid Snake In the first example, it would probably be very easy to win the defense case of Fair Use due to each factor strongly favoring the defense. In the second example, the case could go either way, and depends on how strongly each factor was argued and how much it was shown to weigh into the argument. It's key to remember that copyright claims are 'reactive', so a copyright holder has to feel infringed upon to enact it. Therefore, the "grey area" cases are only an issue when actual damages are occurring. In any case, an extreme example, like one where Solid Snake's persona was so accurately copied that you would think Konami/Kojima was credited but was not, is a clear violation. 

I think your way works best. These sort of items each give a condition, if used together they produce a different condition, then you would effectively need all 3 possible conditions defined. You could also go about it by creating a new type of definition when both items are present, but this actually adds to the convolution: 

If you developed the demo in the video on your own you should be able to understand what is needed for the movement animations. You need to post examples of attempts at coding the movement. In simple terms; You need to capture the movement event(s), you then need to specify which animation(s) to use in those events. 

} To go back to your code, you should be able to simplify it in the following way. The loop is gone, otherwise, if you have other contraints that you didn't mention, you can always add it back. It works by tracking which pointer id is used for which control (move/shoot) when DOWN is triggered and reseting them on UP. Since you don't use gestures, you can restrict your switch() to DOWN, UP, MOVE and OUTSIDE. 

It wasn't specified if you want to do a game professionally or as a hobby. For a professional game, you need professional graphics. Minecraft is a great counter example, but an exception to the rule. As a programmer making games for a living, I get the graphics from a paid artist and from online websites that sells 3d models, images and sound. For a hobby, there are free online resources as well as doing your own art. However, if you are anything like me, my art sucks, takes too long to do and I don't like the end result of the game. That means I lose my mojo doing stuff I don't like vs stuff I do like and I am not motivated by my results... which means: I get it from good sources. Get at least decent looking placeholder for your graphics. Then figure out how to get a better version, if you reach the point when you are ready to release, etc.. Don't force yourself to do stuff that will demotivate you - whatever it is. Motivation is the only thing that will make you finish your game and finishing the game will be the most important thing for you to accomplish. Do not squander motivation on graphics if it is not your thing, but realize that a nice looking UI will motivate you. 

So as you can see, if you are doing some scaling in ObjectB.Start() and expect that setting the scale right after the instanciation will overwrite the values, that won't work... Of course that's just one possibility, but it did happen to me a few times so that's the first thing that jump to my mind. 

What you are trying to do is also fairly similar to what older MUDs did. I am more familiar with the Diku variety and I'll explain it briefly here. If you think that is what you are looking for, you can look up the source code, it is fairly straightforward. First, the different stats and skills are all hardcoded. Strength is a concept known at the code level. Same for hp, armor, stealth, fire resist and so on. All the skills like backstab, spells, hide, etc., also exist in code. All the rest of the data is loaded from a database, even races and classes. So a character structure would be 

Solved Thanks to everyone who helped me with the issue. There were a few factors in play. First, there was the scale. What I did to figure this one is create an empty scene and put 2 cubes in there. I varied the size and position of the cubes (from 68x35 to 0.65x0.35 for size and the position by factors or 10 as well) and attached a script to move them, with variation in speed by factors or 10 as well. So all else being equal (same size on the screen and time to cross it), the size of the objects elected a different response to collision: big object got interpenetration, small ones none. I am not familiar enough with Unity to explain the cause of that, but it is reproductible. A possible second factor was the shape of my colliders and how it may be possible that they screwed up the ejecting part. The colliders I had were not overlapping, so I simplified them to 2 boxes in the shape of a cross. Finally I was setting the position of the objects manually in FixedUpdate and that caused some problems with interpenetration at lower scale (at higher scale, it didn't appear to matter). I changed that to work with the body velocity and it helped. 

SECOND LEVEL Here is when the problem occurs, on the second level, as you can see the first player square (the upper, smaller square) to the left is not disappearing along with the target square (the bottom, bigger square): 

The problem was a body from the previous level seemed to be left behind for some reason in that spot in the screenshot from level two. To correctly and definitely remove the bodies, I now do this: 

Finally, all you would need to do is setup your grid check to see if the new position is inside of the grid, so when a touch occurs on the screen, you can check to see if it is a valid grid position! A bool function which checks the borders (like on the website I linked above) should do. Then wherever you have used onTouch for your controls, in this function I assume: 

You can use the grid functions like so, maybe use a pointer to the grid class, in the same class you handle your touch input. 

Does anyone have an idea why the first player square, when I create a new level, ONLY registers collisions with my columns? I have no idea and I would really appreciate any help. If you need any further clarification please comment/message me. Thank you. [EDIT] So I have fixed my initial problem mentioned above! For anyone wondering it was to do with how I am deleting/removing bodies from the world. A body, or multiple bodies were not being fully removed correctly, and were carrying over to the next level. My answer to the problem is below. 

To round out the coordinates, you would need to make use of Android's Math.round() function, this function can either take a double (which returns a long) or a float (which returns an int) - I assume you would want to pass in a float and gain an int. 

Hope this helps! Don't hesitate to contact me/comment on this if you need any clarification or any more help. 

When I checked the size of the vector after the clear function, it was all as expected, and the same for when a new level was created. When debugging through the second level and monitoring collisions, I use contact listeners from Box2D, I did find that the first player square was always colliding with a column, I do not know why, here is the log entry: First player square: 08-30 10:50:46.636 15664-15770/com.example.app.jason.jasons_app D/TKT﹕ Player colliding with 6 08-30 10:50:46.636 15664-15770/com.example.app.jason.jasons_app D/TKT﹕ Player colliding with 6 08-30 10:50:46.656 15664-15770/com.example.app.jason.jasons_app D/TKT﹕ Player colliding with 6 08-30 10:50:46.656 15664-15770/com.example.app.jason.jasons_app D/TKT﹕ Player colliding with 6 08-30 10:50:46.785 15664-15770/com.example.app.jason.jasons_app D/TKT﹕ Player colliding with 6 08-30 10:50:46.785 15664-15770/com.example.app.jason.jasons_app D/TKT﹕ Player colliding with 6 Second player square: 08-30 10:50:46.935 15664-15770/com.example.app.jason.jasons_app D/TKT﹕ Player colliding with 5 08-30 10:50:46.935 15664-15770/com.example.app.jason.jasons_app D/TKT﹕ Player colliding with 5 08-30 10:50:47.226 15664-15770/com.example.app.jason.jasons_app D/TKT﹕ Player colliding with 5 08-30 10:50:47.226 15664-15770/com.example.app.jason.jasons_app D/TKT﹕ Player colliding with 5 08-30 10:50:47.406 15664-15770/com.example.app.jason.jasons_app D/TKT﹕ Player colliding with 5 08-30 10:50:47.416 15664-15770/com.example.app.jason.jasons_app D/TKT﹕ Player colliding with 5 08-30 10:50:47.566 15664-15770/com.example.app.jason.jasons_app D/TKT﹕ Player colliding with 5 08-30 10:50:47.646 15664-15770/com.example.app.jason.jasons_app D/TKT﹕ Player colliding with 5 08-30 10:50:47.696 15664-15770/com.example.app.jason.jasons_app D/TKT﹕ Player colliding with 5 08-30 10:50:47.696 15664-15770/com.example.app.jason.jasons_app D/TKT﹕ Player colliding with 5 08-30 10:50:47.746 15664-15770/com.example.app.jason.jasons_app D/TKT﹕ Player colliding with 5 

For a grid system, I haven't yet implemented this code in anything other than an engine, but I'd imagine it would be similar. I implemented the Tetris clone in Unity 5, using this website: $URL$ The grid section of this webpage might be of some use to you. I will try my best to convert it into java code, and make it android relevant though. For setting up the grid I'd imagine a 2D array would be best, so you can keep track of the positions inside of the grid: