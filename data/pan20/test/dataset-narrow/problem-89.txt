What you need to do is implement QoS. QoS is a very large and complex subject (too broad for details here, as entire books are written on how to use it) that encompasses everything from classifying and marking packets, to performing some sort of action (shaping, policing, queuing, etc.) based on the classification/marking. To properly implement QoS, you need to have a comprehensive set of QoS policies that are implemented consistently across your network. Also, understand that your QoS policies and markings will not work on the public Internet. You may be able to pay your ISP to respect some of your QoS policies and markings, but QoS on any traffic sent from your ISP to others on it way to the destination will be ignored. You also have no direct control of any traffic coming from the public Internet until you have received it on your network, where you can properly mark and treat it. To properly treat the traffic, you need to first mark it, and you want to do that as close to the source as possible, ideally on the source device, but you can get into trouble simply trusting applications. Practically, this means marking on the access switches as the traffic comes into the access switches. Some Cisco switches default to marking everything coming as (Best Effort). You probably want most traffic to be marked , but you will want VoIP data to be marked (Expedited Forwarding). You will also want to mark some things, e.g. control traffic (VoIP control, routing protocols, etc.), with a higher priority, bu not , and you will want to marks some things, e.g. server backup, with a lower priority. Once you have your traffic proper marked, then you want to use that. Cisco switches can do some limited queuing, but you certainly want to use the markings on your routers where you can do queuing, policing, and shaping. Typically, you will want to set up a priority queue for VoIP to guarantee some bandwidth, and you really want to police any traffic beyond the priority queue bandwidth. Other traffic will have various queue sizes. You really want to keep it fairly simple. A rookie mistake is to try to set up markings and queue for every different traffic type. The simplest, and often best, QoS policies leave most traffic as , and you only mark and treat differently any exceptional traffic like VoIP, control, or bulk traffic differently. 

This is absolutely not the way to accomplish your goals. Only real routers should send out RAs and the switches should be set to block RAs from other sources. The end-devices should get their global addressing information through a real router or be statically configured, although they will generate their own link-local addresses using ND, and, if they aren't allowed to use a router, that could be all they need since it will allow IPv6 network on the local link. Non-routers should not generate RAs because other devices will try to use them as routers. Non-routers sending RAs is considered a form of DoS. 

Based on the comments, you need source routing enabled on the routers. It is disabled by default for security reasons, and the routing options in a packet will be ignored if source routing is disabled. Your host must supply the route options in the path. You can use Cisco's extended traceroute to specify the route options, but it will not work unless you have source routing enabled on all the routers in the desired path. This also forces traffic to be process switched, and this will slow routing. If your desire is to test propagation times, you will find they are slower with source routing. Once you have finished testing, you should disable it. Your network design is fairly meaningless if the hosts determine the path which traffic will take, and it is a security problem. You are unlikely to find any businesses or Internet carriers/providers which have this enabled. You can use the extended traceroute. Something like: 

The reasons for half-duplex ethernet are as you understand them. In fact, there was a movement to not include half-duplex for 1000Base-T, but it still made it into the standard. For 10 Gb ethernet, half-duplex was dropped so there is no such thing as 10 Gbps half-duplex ethernet as a standard. Unless you still have a hub (they are still around) or a device that doesn't support full-duplex (they exist, especially for 10Base-T), 10Base-T or 100Base-TX on UTP don't really need half-duplex. 

The host gateway should be set to the layer-3 device (firewall, router, etc.) address on the same network as the host. The gateway is the host on the network that knows how to reach other networks. If the gateway is configured as an address on a different network, you would need a gateway to reach the gateway, so it will not work. 

That's not a node, that's a cloud representing the Internet. You have no way of knowing how the Internet is connected, so it is represented as a cloud. It represents a whole lot of nodes. 

I suppose the point of this task was for you to figure out how to generate and capture different types of ICMP messages. Without directly giving you the answers, I will point you in the direction of how to figure it out. RFC 792 describes ICMP messages. There are different possible sources for ICMP messages: 

Without more information, I can only give you general ideas. First, never just connect two networks together via a layer-2 switch unless you set up a specific VLAN for this. You don't want to bridge separate layer-2 domains. Next you will need to let each router know about the networks on the router, and how to get to it. This will be on a separate interface, either logical or physical. Routers learn about networks in three ways: directly connected network, statically configured network, or by a shared routing protocol. Simply connecting a cable between the two networks is probably going to lead to big problems for the users. If you provide the information I asked for in the comment, we can give you more specifics on how to achieve what you want. 

Ethernet has no facility for error corrections or re-transmission when errors are detected. Any frames with errors are discarded immediately. Upper-layer protocols, such as TCP, must handle any missing datagrams and ask that they be re-transmitted. Networks generally assume it is better to drop traffic as soon as possible. Some transport protocols, such as UDP, have no expectation that anything sent will be received, and some applications, such as VoIP or video, are tolerant of some missing data since it would be much more disruptive to ask for the missing data to be resent. The size of the layer-2 frame is only important in that it be at least as large as the minimum frame size, and no larger than the maximum frame size. You seem to be suggesting something which has been often debated about the transport segment size, especially when it comes to UDP. 

Edit: I found a paper that lays out the update discussions to the original OSI model. It appears that in the original model, there was no connectionless mode, even in the Network Layer. In any case, this was all hashed out well before the Internet went commercial in 1995, and any web sites that claim the Transport Layer cannot use connectionless protocols are simply incorrect. The current OSI model, available since before the Internet went commercial, has always included the connectionless mode. It's like reading the reports by doctors from the 1940s and 1950s claiming that smoking is good for you. I know people who still quote those doctor recommendations. Networking moves orders of magnitude faster than medicine, and the original OSI model was out of date before the Internet went commercial; it has been obsolete for 24 years. and anyone who cares about the original version far out of touch with reality. 

I think you are confusing things since the implicit deny at the end will deny all traffic from any host, not just the one host, except what you explicitly permit, and that is not what your question wants to do. In any case, you need to have something in your access list. 

The SonicWALL is a firewall. It is best to have everything behind the firewall that you possibly can. You need to discover the reason that the server is not behind the firewall. It may be a legitimate reason, and you may be able to get around that reason. Switch-to-switch links should be trunks. Call centers are usually sensitive to single-points-of-failure, and this network design has a bunch of them. Having the switches daisy-chained, especially such a large chain, leaves you vulnerable to having the loss of a single switch disabling most or all of the LAN. In the current switch configuration, having the server connect to two different devices doesn't mean much. If the first switch in the chain quits working (for whatever reason), all the switches quit being able to get to the firewall. 

IPv4 also provides for fragmentation and reassembly of packets, but that has been eliminated in IPv6. 

I don't think you are going to find exactly like what you want. The document to which you refer is the documentation; there's not a lot to this feature. Refreshes happen automatically under the two circumstances detailed in the document, and there is nothing in place to force a refresh: