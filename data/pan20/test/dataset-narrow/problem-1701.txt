Can I completely remove the ip6_address? In the documentation link that I posted above, there is something related to wlan0 - Is this the setting related to WiFi? 

I even tried to just give raspberrypi instead of the raspberrypi.local, but nothing seems to work. I tried to ping raspberrypi.local and raspberrypi, but nothing seems to work. I get a Host not found message back. Any ideas as to what is wrong with this? How can I resolve this? EDIT: I solved it. The problem was that my Windows laptop was not setting up any network with the Pi even though I had a LAN cable connected to the Pi from my Windows machine. My Windows laptop is connected to the home internet via WiFi. Now, I connected the Pi directly on the router at my home and bang I can see the pi listed in the set of devices at my home and thus I was able to log in! QUESTION: My router is in the cellar, how can I now just use my Mac to give the Pi the needed internet connection? I don't want to go to the cellar every time I want to play with my Pi. Any ideas as to how I can make the Pi connect to the internet just using my Mac? 

With both the options, I get a constant red light after a couple of seconds of connecting the Pi to the power source. Is this some problem with the Power source? How can I resolve this? I have tried to flash my card atleast 5 times, but to no success. I then came to the conclusion that this could be a problem with the Power source. Can anyone throw some suggestions on how I can make this work? 

with a USB to Micro USB Power supply by connecting the USB to my Mac. I had another power adapter that I was using on my mobile phones. It is rated at OUTOUT: 5V 1A 

I recently got a new Raspberry Pi 3 Model B+ and I managed to flash the OS. But the problem seems to happen when I try to boot it. I do not have the official adapter, but I tried the following: 

My Rspberry Pi 3 Model B+ has the SD card with the latest Raspbian lite OS. I connect it via the USB port of my Mac for the power supply and the Ethernet cable is connected to my Windows machine. I can see the green light flashes for a while and then it goes off after say 20 seconds. I then see a constant red light. I then open putty on my Windows and try to ssh into the Pi. I also have an empty ssh file under the boot directory. When I now try to boot into the pi using putty, I get the following message: 

I'm trying to set a Static IP for my Raspberry Pi 3 Model B+ and I have been referring to the following documentation: $URL$ I want to have a static IP for my Pi when I connect it via a WiFi or a LAN cable. I basically want both the options to have the same Static IP. What I do not understand is the following: In my /etc/dhcpcd.conf, I see some IPV6 configurations like this: 

This is an extract from a guide I wrote a while back. Connecting to your Raspberry Pi from “outside” may not be as straightforward as you’d expect. With connecting, I mean of course using the ssh protocol, which has been the most common way to log into *nix systems for ages. If you are using GPRS or 3G to connect your Pi to the internet, chances are that it is impossible to establish an ssh session to your Pi. However, initiating an ssh session from the Pi itself to a computer elswhere on the internet, should in most cases not be a problem. In fact, once you have established a connection to another machine from your Pi via ssh, you can use this connection to connect back to your Pi. This can be done by what is called reverse ssh port forwarding, a technique that at first eyesight looks very complicated and difficult to get ones head aroud. I will now go through the steps that you need to perform to be able to log in to your Raspberry Pi from anywhere. The first thing you need, is a Linux server. I highly recommend Amazon EC2, where you can get a server instance for free (well, almost). I do not cover the details on how to configure it, in this document. Setting up the server 

Next, we need to create the ssh config file. If not present, create it in folder, with the name config. This example is assuming that you are running an Amazon EC2 instance. You will need the ip-address of your instance, to proceed. I highly recommend assigning an elastic IP address to your instance. Into the config file, paste the following (change the ip address to that of your own Amazon EC2 instance): 

All hardware accelerated players go directly to the video hardware (overlay). You can only view them on a monitor connected directly to the Pi. 

The command should succeed without any error messages. The following script is more convenient. It checks if a connection already exists, and spawn one if not. You could execute the script periodically from crontab, to ensure that the connection is always up. 

Then press i, and paste the content of the clipboard into the file, by pressing CTRL+V, or right-click and Paste. Then save the file, by first pressing ESC, then followed by ENTER. Next, type the following: 

The command above may give an error, because this procedure differs amongst Linux distributions. You may also try 

Have a look at $URL$ where you will find framebuffer drivers for the Raspberry Pi. A huge list of displays are supported, and you may be lucky and find one driver that is compatible with your display. If not, there is also a “generic driver” which can be configured to support displays not on the list. If you manage to configure your display using one of the Notro framebuffer drivers, the framebuffer will be available as a device, , which you can map to memory and then write to. There are a lot of options for drawing to the display. The Pygame library can be used, and Adafruit has an excellent tutorial explaining how. Edit: If your display is based on SSD1322, you're in luck, as support for it is going to be included in FBTFT: $URL$ 

EDIT: You could use a ready-made current sensor like this ready made module(or something similar) to measure the current between the output of the relay and your load. That current sensor uses a I2C interface, so it should be easy to connect to with the pi. 

see more info here but if you want to use A pnp transistor: I think a voltage divider with a pnp transistor might work: 

You do not need to use different ground and voltage pins for each sensor. In fact, it makes no difference at all, because all of the ground pins come from the same source(so they are all connected) and all the 3.3V pins come from the same source. So even if you use different ground pins, they will all still be connected anyway. In fact, you could build all the sensors on the same breadboard, with each using the same power wires(the red and black wires) - the only pins that need to be different for each sensor(ldr) are the signal wires(the yellow wires). 

Most generic ordinary pir sensors can't be "disabled"... So all you need to do is ignore the input. For example: 

I don't think I fully understand your question. Relays can either be on or off - depending on if the output to the relay module is high or low. So if you're controlling the relay from code, just keep a variable that tracks the state of the relay. for example, in python: 

to the bottom. This will make it so that your server starts up automatically every time your pi boots! hope this helps and feel free to ask for clarification! 

The simplest route would be to use . port forwarding is forwarding an internal lan(local area network, the network created by your router) ip address's port(for example, the port your raspberry pi's website is on) to your external ip address(the address you are given on the entire internet, not just locally.). this would make it so that you could access your website by typing your ip address into the address bar. you can do this by accessing your routers admin panel and setting up port forwarding, so it will be different for different routers. here is a nice guide. You will want to forward your pi's ip address, with the port your website is on. then you can access your website by typing your ip address(you can find it by searching for ip on google) into the address bar of a web browser. be warned though: there are security risks to this approach, so make sure you research them first. 

DO NOT TRY THE 3.3V realays with the rpi without a transistor. Switching a relay on requires quite a bit of current, and gpio pins can supply very little current(I think less than 8ma). if you try to operate a relay with a raspberry pi gpio pin, you will most likely break the gpio pin(and possibly other parts as well) on your pi. The solution is to use a transistor, as LotPings mentions. A transistor works by taking a very small current and using it to switch a much larger current. There is no way around using a transistor and diode to control a relay with the rpi, unless your relay is a relay module with a transistor already built in. As for the code, use python's rpi.gpio library. It is really simple. To get you started, google raspberry pi rpi.gpio hello world Hope this helps, and let me know if you have any questions!