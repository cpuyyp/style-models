When the -command fails, the 3rd line will in fact create a new 1024 byte database file in the current folder. That file is not used by Firefox of course, so may be deleted. 

Yes, it exists: a short list at Multi-monitor KVM. I guess there will also be software solutions, where for example the PC would be a server for the screen as sent by the Mac. 

So, using "Exchange" requires IMAP to have been enabled on the server. Using "Exchange" in Mail does solve some issues, but at a cost: 

Both workarounds might not work at all, if the VPN server you use does not allow for direct access to internet IP addresses. (And I guess they'll indeed disallow that, as relaying your requests is the only way they can add the advertisements.) Can you provide any details on the exact VPN service you're using? Did you try other secure sites, such as $URL$ or some internet banking? And above all: can you access $URL$ like suggested in your screen capture, without any security warnings? (You can try another browser for a first test as well.) If you're using (somehow, I don't really trust that site) then here's a note from the main developer, which makes me think that HTTPS over its default port should be no problem: 

(On Redhat Linux, shows only but without the contact information; on Debian version 4.7.20 yields summaries of all domains like above, and additional detailed info for the exact matched domain, apparently by doing an additional query at for that exact match.) I even tried to telnet directly, but cannot come up with anything I cannot do using the -command, so I guess that is useless: 

When using such dedicated domain then Apache also won't have to rewrite any relative URLs, such as into . However, this might imply you won't notice failures in rewriting absolute URLs (especially possible when JavaScript is involved). Like a failure to rewrite back into might go unnoticed if the same URL exists on the production server, and the browser fetches that directly. That might be a benefit, or could be a disaster when you're still logged in to the production server and think you're changing content on the staging server... Using .htaccess Just for posterity, earlier I figured one could also use something like the following in a file: 

So, the center pins 4 and 5, and their neighbours 3 and 6, follow the original conventions. But pins 2 and 7, and 1 and 8, could not follow that conventions due to electrical requirements. Hence the other two pairs are wired to pins 1 and 2, and 7 and 8. Also note that keeping twisted pairs together is important to limit crosstalk. And different pairs have different twist rates, so maybe interchanging pairs (like using brown for blue, and blue for brown, on both sides of the cabling) affects electrical characteristics too; I'd stick to the standard colour scheme. 

The Printliminator free bookmarklet might be your friend! (This bookmarklet updates itself, but I think the folks from css-tricks.com can be trusted.) 

I've not used it, but is seems to support a lot of blocks, and certainly looks nice. Still, as for Bengali no browser shows a fallback glyph (but shows squares instead), installing it might not even solve the issue for all blocks... 

Hold down Option while clicking the Time Machine icon. That will change "Enter Time Machine" into "Browse Other Time Machine Disks". Find whatever you want to restore there. (Alternatively, why not restore your whole account? That's an option during a brand new installation. And note that OS X 10.5.3 or newer is required for a reliable backup!) 

Though one can indeed manually choose some encoding (and not forget to disable that when visiting another site), actually the web site should have correctly specified it. Either the server or the web pages themselves should specify something, for otherwise all the browser can do is make some best guess. And of course, if an encoding is specified, then the HTML document should in fact use that encoding. Not so much for the web site from the question, as shown below: To see if the web server specified something one needs to look at the so-called headers. Using the online service from web-sniffer.net to reveal the headers you'll get: 

Not all visitors connect directly, but use a proxy server (for speed, or to hide their IP address). Some proxies add some special "HTTP header", like X-Forwarded-For, to specify the original IP address. If present, then its value should be used with care, as one can easily add a fake header and make it refer to some innocent person. Most log files do not show that HTTP header, so you'll need to do some scripting of your own to ensure these headers are logged, if you want them. 

You can include the options in your SSH config file, like . To test this when Screen Sharing is not running, run the built-in Python web server: , and then point a browser to 

â€  In case it matters: I have enabled System Preferences, Accessibility, Mouse & Trackpad, Trackpad Options: Enable dragging. So, dragging does not require "truly" clicking the trackpad. Without that, tapping with an additional finger might count as clicking too. 

To disable it altogether, go to and disable . However, beware that such might affect plugins/add-ons as well, which seems to be why some want to remove that option, for which someone noted in May 2016: 

A 500 Internal Server Error indicates that Chrome does try to load the page and even gets a server response (being the 500 error). So, the server fails. It probably has some logs? As cookies are stored per (sub-)domain, and localhost and 127.0.0.1 are different domains, my bet is that Chrome has an old cookie for localhost, which has not yet expired, but is somehow no longer valid. Even if PHP and phpMyAdmin are backwards compatible (so would handle differences after upgrades), the troublesome cookie might have been created while you were testing the new PHP and new phpMyAdmin. And now that you reverted the upgrade either PHP or myPhpAdmin does not understand the newer format of the cookie or a session it refers to. 

To circumvent "You cannot share your own computer", only if you run into that (probably only happens when connecting from a Mac to another machine, not what you're doing): 

As almost every website uses cookies: probably yes. Like: in your first browser window(s) to the target website your browser will probably be sending the website's cookies to that site, and then suddenly the man in the middle sees traffic to the same website but without those cookies. (And after the first incognito request: with other cookie values for the incognito windows.) Also, if incognito mode does not share the cache with the regular mode, then the man in the middle might see new requests for resources that you already received earlier. Such might also indicate a forced reload, but it surely might give the man in the middle some idea. (And for subsequent requests: different values for or headers.) (In case of a shared connection, this assumes the attacker knows which computer makes the requests, but that might be easier than one thinks.)