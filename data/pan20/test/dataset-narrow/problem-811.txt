Switch to a more modern journaled filesystem such as XFS or ext4. In these systems a full fsck isn't necessary if the filesystem is unclean; the journal is just replayed, which takes a second or so. Even if a full fsck is forced, ext4 is significantly faster at fsck than ext3. You're going to need a Linux system from the last several years that supports ext4. In particular, kernel version 2.6.24 or higher. It sounds like your system is pretty ancient, so it might not even have support for ext4. If that's the case, it's almost certainly far past end of life anyway... (Note: While ext3 is journaled it is missing several optimizations present in ext4 which cause fsck to run much faster.) 

Yes, you have to be redundant. Except in very limited circumstances, blocks are only parsed once, and the closest match wins. Though you can reduce the pain of this by removing the common configuration parameters to a separate file and then using to include it in both places. 

This is obviously not valid, as cannot appear in host names. Change this to something appropriate. Third: 

First, we need a definition. Long-lived protocols are those for which the connection is intended to remain open indefinitely. (An example of such a protocol is ssh. While an ssh connection can be short, it is meant to be able to idle forever, thus the protocol is long-lived.) Short-lived protocols are more transactional in nature; a particular action occurs, or series of actions, and then the connection is closed. By these definitions HTTP is a short-lived protocol, even with keep-alive. The fact that an HTTP connection may remain open for minutes or hours while data is being transferred is irrelevant. And Keep-Alive is a performance optimization meant to allow a client to make multiple requests of the server over a short period of time. Servers must drop an idle Keep-Alive connection after some time, because they have only a limited amount of resources for holding open ports, and the client doesn't need it to remain open anyway. Because HTTP cannot remain open and idle forever, and is not designed to do so, it is a short-lived protocol. 

So you should check your logs and fix that. And you're really going to need more than one nameserver here if you intend for this to be a serious web host, but you seem to know that already. 

Oracle Database 11g runs only on Windows, Linux, Solaris, HP-UX or AIX. If you want to run it on a Macintosh, it must be running one of the supported operating systems. So you either must reboot to a supported OS with BootCamp or install a virtualized OS with VirtualBox, VMware Fusion or something else. 

If you aren't running perl CGI scripts (most people don't) then disable mod_perl entirely. If you must have mod_perl installed, disable perl-status if you had it enabled. If you weren't using perl-status, this issue does not apply to your system. Oh, and file a security bug in launchpad and ask why in the world they haven't pushed a security update for hardy. 

KVM provides full hardware virtualization, but you can use paravirtualized disk and network drivers (virtio). Most current Linux distributions will use them by default provided you've configured them when setting up the VM. In full hardware virtualization, every component of the virtual PC appears to be a physical PC and the guest OS uses the same device drivers as it would if it were on a physical PC made of the same hardware. This can be slow because the hypervisor has to emulate common hardware for the benefit of the guest. In paravirtualization, guests can use specially written drivers for some performance-critical devices (like the disk and network drivers) to improve performance back to near bare-metal numbers. The paravirtualized driver, instead of talking to emulated hardware, talks (almost) directly to the native hardware. The disk and network drivers are generally the first to be paravirtualized, since they provide the greatest performance benefit. Other devices can be paravirtualized as well, though doing so doesn't provide quite as much actual real-world benefit. 

Make sure it actually belongs to Facebook. If you're blocking a small website that doesn't have their own AS, you don't want to do this, as you'll block other people as well. For instance, not all of the ASNs returned above are actually Facebook's. 

You can't really "fix" a user who mistypes an email address. So there's not much you can do about those bounces. As for the two greylisting examples you gave, just wait them out; postfix will resend the messages. 

Once you know who these mistaken requests are being addressed to, what to do next may become clear. For instance, it might turn out to be some big company in which case you can go find their network admins and yell at them. 

But doesn't resolve to localhost, but to your public IP address. To resolve the issue, whitelist your public IP address instead. 

Software leap second issues wouldn't have caused a physical hardware failure. Applications running under Linux might have issues, though, but any of those should only require being restarted (Java, for instance, was infamous for going haywire at the leap second.) Notably, a quick search fails to turn up anyone else having leap second issues with Fit-PCs. Most likely what's happened is you suffered a power surge, lightning strike or similar activity that fried two of your three Fit-PCs and probably made the third one questionable, and that this happened on the night of June 30. What was the weather like? (Now a power surge might theoretically have been caused by the electrical company having its own leap second failures...) Your best bet is to have them replaced. 

You need to put the files in some other directory, not under . Such files are intended to be accessed only by the system administrator, and it's a very bad idea to allow any other user to get in there. As you can clearly see from your directory listing, the permissions on allow only root to read and write that directory. All others have no permissions at all. This is why user prosody cannot traverse that directory. 

Your web application sent the second redirect. Check its config to make sure it knows what domain it is supposed to be serving. Curl doesn't like the SSL certificate because you didn't install the intermediate certificate. 

You can install PHP 5.3 on your existing CentOS 5 system by using the vendor-provided packages instead of the corresponding packages. 

The -r option makes it recurse, and -vv makes it extra verbose. It's also possible that a file that iptables wants to read is symlinked to a file in a user's home directory. In the current reference policy, iptables has access to read/write . One final note: It appears your system has SELinux in permissive mode. This means that these events are logged, but not actually denied. You can restore enforcing mode by running . Then watch to see what breaks. :) 

Most likely you aren't sending the country code. This is required for all Skype Connect outgoing calls. So if you want to dial the London speaking clock, you would send: 

You really don't need a separate firewall for a single host; Linux iptables is more than sufficient to protect the server, and (if you run Red Hat/CentOS) will be on and reasonably secure by default. The first thing you will want to do after the server is up is to make yourself a user account, and then secure ssh by denying root logins with a password. In set either: 

Postfix is not being particularly aggressive. It's trying to deliver mail in accordance with SMTP and various best practices. This is Yahoo's fault. Yahoo has extremely low limits on simultaneous recipients of a message from a single sender. I see this occur with a small 500-member list with only a couple of dozen Yahoo addresses on it. The contents of this particular list are extremely time-sensitive; if the message isn't received, read and acted on within two minutes, it loses much of its value. My "solution" is to warn Yahoo Mail users that Yahoo may delay receipt of their mail and that they may wish to consider a different provider. This may or may not work for you. Since Postfix retries the remaining recipients pretty quickly, this isn't usually a serious issue. Some other possible solutions are: 

The problem is that none of these proposals have gotten any real traction, and to the best of my knowledge, most browsers don't even implement this. Until today, the last I'd heard was that no web browser implemented it. Even Mozilla's own bug tracker shows it as unimplemented in Firefox, so I'm not really sure what your friend demonstrated. So you have two negatives with this approach: First, most people won't be able to view your web site if you don't have address records and only rely on the SRV record proposal. Second, it won't really protect you from any but the most idiotic of morons, as it's quite trivial to query the DNS and locate your server's actual IP address, and using only a SRV record makes it only slightly less trivial; you have to do two lookups instead of one. Big hairy deal. 

You are using gems with native extensions, but they were compiled against libraries on the source system that have different versions on the target system. So you need to rebuild your gems on the target system. 

This is done to prevent what is a relative URI from being misinterpreted as an absolute URI with an unknown scheme. It is not something you want to turn off, as the breakage would be even worse. Fixing your script to deal with this should be trivial. 

You can control which IP address Apache listens on using the directive. Just make sure that each server's configuration specifies only the IP addresses you want to use for that particular server. For instance: Server 1: 

I don't think anybody uses NIS anymore - or at least, wants to. The fastest and easiest way to get a nice LDAP+Kerberos environment up is FreeIPA. It's easy and light enough that I even use it at home. Red Hat's Identity Management Guide is a great introduction to FreeIPA and will get you up and running quickly. Note that while Ubuntu has FreeIPA, the version in 12.04 LTS is older and may have bugs or missing features compared to more recent versions.