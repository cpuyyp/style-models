should probably be . You indented the conditions of your statement too far. That should be indented as: 

To help ensure your site displays well across browsers, you should validate your HTML at the W3C validator. It is actually very good, but there are two problems. and are invalid - you should remove the attribute. You can validate your CSS at a W3C validator too. Other than the unknown vender extensions, it appears to be valid. Your JavaScript looks neat and clean for the most part, but your have irregular indentation in a few places: 

I'm sure there are plenty of other things to comment on, but I'm too lazy to write a more in-depth answer at the moment, so I'll leave it for anyone else who wants to answer. 

A year or so ago, I wrote a checkers game for the Universal Windows Platform. Now, I wrote a web-based version of it hosted at $URL$ This is the first of a series questions about my best practices. Related to Checkers Board Editor, but web-based. The requirements of this system are to allow the user to place checkers on a board and get the FEN value of the board for a given variant, which they can then use to create a game from that position. They can also choose which player makes the starting move and choose common board positions to start modifying from. 

I'm not sure how this would affect the performance of your code, or whether it is important that the variable stay the same, but it is good to always keep your variables in as tight a scope as possible: 

You don't really need that if because the top part only returns when the condition also is . Otherwise, both the condition and the return is . Change it to: 

That constructor looks kind of messy. What I would do here is create a field and assign it in the constructor: 

Please use braces; blocks without braces are just evil. Also, VS 2017 offers to clean these up for you, so it won't be extra work to change your style: 

When are you ever going to have to access that from outside the method? That should be . Some of your methods should probably be private as well. The access of fields, methods, etc. is very important to control to prevent outsiders from seeing what you are doing. When I create an instance of this class, which should I be able to see your background information and what your methods are all doing? 

Also, you should use proper indentation to help you read and understand your code better, which will help prevent bugs. This doesn't do anything: 

Your code seems perfectly fine the way it is, and I would say the only thing wrong with it is from the user's perspective. You have the Category menu overlapping the Title menu, which is not good; you should adjust your columns to prevent this. 

The Print command. This is a full replacement for the Project Explorer's Print command, down to not having any margins on the printed page. Should I extract the print logic, or is it OK the way I have it embedded like this? Does it make a difference that this is the only place RD ever prints? 

First, there is the obvious . That will remove any deliberately prefixed/suffixed spaces. The reason for that is I was getting the value wrong. When you get the value like this, it formats as . The correct way of getting the value (and comment) is: 

Beyond not having the basic framework for the HTML, you have one error according to the W3C validator: 

Before I start, let me say that this code looks pretty good. You seem to have tested your algorithm pretty well and I've never read about shuffling algorithms other than the Fisher-Yates, so I won't comment on it. 

Why define something just to make it throw an exception every time it is used? This is being abstracted from , so if you don't do this, it will use the defined in . If that is not correct for this instance, you should either not abstract from , or you should implement the correct version of this. If you use a block, there should usually be a block too: 

The Import command. This command replaces the Project Explorer's Import command, only it allows you to select multiple files at once, and will import them all. Currently, it aborts if any of the selected files is invalid--should I make it so it imports all valid files and pops a message with a list of any invalid files (if there are any) instead? 

Not sure which version of C# you are using, but if you are using C# 6 (and you really have no good reason not to), you can simplify this statement: 

In the block, I find with menu needs to be opened and assign the main menu item to , which selects the menu through the data binding, which calls the handler, which opens the menu: 

Here, I get the doc comment, its summary block, and the param lists. Then, I build the full parameter list, build a list of nodes, and replace the old doc comment with the new one. When I build the list of nodes, instead of checking which items are separated with a newline, etc, I just remove all XmlTextSyntax nodes that only contain whitespace (which contain the beginning and the newlines), and insert my own between each item. I also leave the beginning node to prevent messing with the whitespace before the doc comment. All other items, except the current param nodes, go into the list. The param nodes are all entered together from the list to keep the items in the same order as they are in the method. If the last item is not an XmlTextSyntax node that ends with a newline token, I add a newline to prevent the beginning of the parameter definition from being added to the doc comment. This seems awful long and complex compared to some Roslyn code fixes, and I am wondering if I am missing an easier way to do this. Example change (full test suite can be found here): 

This is written using C# 5, so please don't mention any C# 6 enhancements. All other comments are welcome. 

We were discussing Standard Deviations in chat, so I decided to write a standard deviation calculator: 

First, as mentioned in the comments, you should return the boolean values / instead of the string values /. This should be faster, and is cleaner and more correct. Second, can be dangerous. Before I read the program and figured out how it worked, I entered the first string, only to have it promptly crash because it expected an integer. The solution to this involves two steps: 

will throw an exception if the user types a non-number. Use to see if it is a valid number, and make the user input a valid number. 

Passing the configuration needed to be updated into the method ensures that the other settings are saved as well because the only settings updated are the ones related the unit test settings. Because the configuration passed in has reference semantics, the parameter passed in keeps the changes. 

In a few places you assign a variable, then immediately return the variable. Instead of this, you should return the result of the calculation. One such place is here: 

Here is a Battlehips game in F#. Now, before you start jumping up and down on my code, please understand that, for all its awesomeness, F# has a serious limitation: Its compilation is linear, and the solution structure cannot have folders. Any code that uses other code must be below the other code, whether in the same file, or in another file lower than the first file in the compilation sequence. Here is my file. It contains basic data and methods not specifically relevant to other groups. 

The doesn't do anything except assign a variable that immediately goes out of scope, and the doesn't do anything at all. 

If I read that correctly, it enters the loop, logs the error, and immediately exits the loop, unless the is not entered there, upon which it sets the to and loops again. I would probably do this with a guard clause rather than a loop which under all normal circumstances should never actually loop. Also, I expect R# would tell you the default case is never hit, and may be removed unless you have plans to add future values to . This is how I would do this: 

Eleven, you have a bug in your logic. You do not check if the customer orders a negative amount of food: 

First, your CSS has no errors, which is very good. You can check for errors at the W3C validator. Looking through your CSS, it looks very neat, and I would only remove a little bit of unnecessary code. Also, the display seems to be optimized for IE. I set it for FireFox and Chrome, and it displays almost correctly in IE. The trouble is, the box for displaying the output is visibly small in FireFox and Chrome. With my changes, it is 1 pixel too large in IE, but it is not as noticeable. First, I would just use the element here, instead of : 

Additionally, I recommend putting braces around your statements. They won't prevent bugs, but they will help prevent bugs. 

Because attributes are supposed to specify the language of the webpage, they are not allowed to be longer than 8 characters, according to the W3C validator: Bad value javascript for attribute lang on element script: Subtags must not exceed 8 characters in length. The correct use for this attribute would be to use it as this for a Spanish webpage: 

Fourth, when you attempt to get a hint after the game is over, it still returns "undefined". Fifth, when I was playing it with my keyboard, sometimes when I would press down to merge some numbers and there was a space between them, the numbers would just stack next to each other instead of merging. I'm not sure why this happens. 

This will help ensure there is an entry for each country/capital and make it so you only have to update things in one place. 

Your HTML is pretty good, beyond the fact that you do not have a doctype or other supporting HTML elements. You should always construct your HTML files like this: 

Dead code does nothing, except take up screen space, and confuse people who don't know why it was written and removed in the first place. Braces This is a bit of a holy-war. However, at least one bug (the Apple SSL bug) was caused by missing braces. Personally, I use them: 

Right after this, you break out of your loop and . This could be written to demonstrate you are immediately returning a fail signal like this: 

Note that I extracted the actually conversion to another method. Also, please give your controls better names. Perhaps instead of . You can change these names in the Properties window. Those blocks are a pain to read, and probably even more of a pain to update. Unfortunately, I don't see a better alternative at the moment, other than to extract them into, for example: 

I have minimal experience doing this, so I don't have a fix, but you can test everything for yourself at the W3C HTML validator. 

It will only fire on fields to make things simpler (fields in other scopes should be properties, anyway). If the field is only assigned inline or in the ctor, it should be Fields cannot be if they are: A. Assigned in any scope other than a ctor or inline. B. Passed as a or argument. C. Incremented or decremented with the prefix or postfix or operators. 

If you are not sure about any of the other code is called, and how it interacts with this, please feel free to ask for it or an explanation of what it does. This works because each index of the collection of search values in corresponds to the index of the matching in . My keys are all stored in a .resw (resources) file for ease of adding multiple languages. I have a feeling this isn't good, although it is simple enough to maintain, so please tell me everything wrong with it. 

I have a Back function, and it is growing. I also think this is terrible, but I don't seem to get how it can be improved: 

This looks pretty good, but there are a few things you can improve. First, you should use descriptive names: 

Have you ever seen the abbreviation SRP? It stands for Single Responsibility Principle, and states that every unit should do only one thing. For example, a method should only do one thing, a class should only do one thing, and so on. Your method should start the program and only start the program. Reading the data, working with the data, outputting the data, and so on should all have their own methods that are responsible for, and only responsible for, that. Your method is good as it is only responsible for multiplying the two matrices. 

Don't store information in strings. What happens if you want to check this value and type ? Or what about ? Those checks will both fail. Create an enum with these values. 

I have an , and I need to know the index of a specific in the collection. However, when I hard-code the values like this: 

You will probably be able to remove the type hints as well, and F# will still be able to figure out what types the parameters are. 

Next on my list is to generate more tasks, especially when working with larger passwords, so basic pointers on how to split the password into groups for each task more efficiently would be welcome, but please do not provide a full solution - I need to think this through myself. 

Now it only signals that values are selected and should be removed when the Remove button is clicked, and the WindowClosed event fires to handle the window being closed: 

One potential fix for this is to make the setter private (), so only the class itself can modify it. This does not remove the bug-like behavior, although the setter probably should be private anyway. The other option is the remove the setter entirely and let the internal class directly modify the backing field. I would probably go this route. 

Your code looks perfectly fine. In fact, it all validates by the validators at W3C perfectly fine, with one exception - your HTML file should be structured like this: 

Here, I create the custom text for the inspection result and register a code fix. I'm not sure whether I should DI the parent here, or just call here. Opinions welcome. This is the quick fix: 

Just put one space there. I don't know C++ at this level, so I will leave optimizing it to the experts. Hope you get some good reviews on that. 

If the menu is open, we do not use the loop, but it still would work because the menu is still the first instance of with its specific in the list. 

Your indentation is off there. Each closing brace should have the same level indentation as the opening brace, unless they are on the same line, which is rare. Naming Your names should state what the function does or variable is, and only what the function does or variable is, and the variable/function shouldn't be/do anything but what the name says it is/does. tells me nothing about what the function does. doesn't tell me what the variable does, what it contains, or what it is used for. appears to do UI updates, according to the comment. Loading an object is not the same as displaying it, and loading and displaying from a single method violates the Single Responsibility Principle. 

You are missing a for your HTML. The doctype tells the browser which version of HTML to parse it as, and the latest doctype is , capitalization not required.