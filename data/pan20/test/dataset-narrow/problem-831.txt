The command histories for each window are in memory for each bash session. You'd have to have bash write to different history files for them to persist and remain separate like you're asking. You can do this by setting per screen session. I imagine the way to do this would be something like this in your startup file: 

It does depend on what is hitting your firewall. IME, blackholing the traffic has the best effect. I recently had a flood of DNS queries on my domain server from a small number of addresses. Someone had decided it offered a valid enough response for a root-server query (it's not an open resolver) that it was then made available to a DDoS tool to use. A bit of discussion with the owner of one of the IP addresses showed that it was a spoofed packet and any response was going to do the intended DDoS. So I blackholed them as soon as I spotted them. They've all gone away now. If it had been someone mistakenly thinking it was an open resolver, then sending back misleading information might have been effective. Certainly confusing! 

I often have more than 10 windows running and wanted a way to select them. I found out how to configure C-a Shift+0 through 9 to select windows 10 through 19. 

The short answer is yes. The way to do it is to enable . Courier supports a Mail Submission Agent (MSA) which is just like a Mail Transport Agent but is intended for non-local mail injection. MSA servers not only listen on different ports (587), but are capable of correcting minor errors in the SMTP data from the client's mailer. The other main benefit is that you can easily and simply disable relaying from external hosts on the MTA and enable authorisation on the MSA. This neatly gets around trying to authenticate from particular domains which is almost impossible because the authentication request happens before the from domain is provided. The biggest downside is that you have to change all your clients to send mail to port 587 instead of port 25. 

Double check if you are installing SQL Server on a server in the same domain of the SBS. Even if you think it was, it may have lost trust - so try rejoining the computer to the same domain. 

I’m wondering if the conditions of automatic failover are not being met at the time of your tests? Specifically - if the database is not synchronized with the mirror (check mirroring state from sys.database_mirroring) at the time of failure AND/OR if the witness and mirror are not connected at that time (test via pings between participating roles). You could also have a situation where your Partner and Mirror are not connected to each other - but the partner and mirror databases are still connected to the witness independently. In that case the witness sees nothing wrong (and hence no failover). But you mentioned you shut down the server itself, so this sounds less likely. Or are you saying that the failover eventually happens but your re-connection fails? In this case, detection and failover time vary depending on how the principal failed and total time to recover the mirror db. 

Executes sys.dbmonitorupdate periodically (for example – once a minute). This call does the following: Retrieves values from sys.dm_os_performance_counters Inserts into msdb.dbo.dbm_monitor_data When a threshold is reached, an error is raised Regarding the alerts, it may not fire because sp_dbmmonitorupdate is in the context of msdb. So you don’t get a fire for individual databases, but you will for all databases. 

Whilst a dump of the database would probably work, in my experience, properly documenting all the access and setting it up again with statements is much better. There are two benefits to doing it this way: 

You're running out of memory. That's what OS error 12 is. (see /usr/include/asm-generic/errno-base.h) It looks like it's happening on startup. What else are you running on the box? How big a buffer pool are you asking InnoDB to create? Are you running 64-bit or 32-bit? Do you have any swap? Wade. 

This gives me the current user, current host current directory (without replacing $HOME with ~), current window and last error return. Since I normally have 16 or more screen windows open, knowing the current one is useful. 

Some virtual environments name some of their virtual devices with names that are a bit tell-tale, for example, VirtualBox presenting a graphics card that calls itself "VirtualBox Display Adapter". But looking for those ties you to a particular VM and possibly a narrow range of versions. It might be possible for your code to see what sort of virtualisation it could set up. If that fails entirely, you might be in a VM. But you just as might easily be on a box that doesn't have any VM capable hardware. 

If you have trouble re-configuring your shell again, you could use GNU screen. If your SSH session times out, just login again and reconnect and your shell will be just as it was. 

A service like LogMeIn or GotoMyPc will be the best option in this situation. They use encrypted SSL over http to connect directly to the server. You will then be able to connect from your laptop and can lock this down. 

In the VSphere client click on the hardware status tab. You can see all the insight information. Also you can configure alarms via VCenter for status info off these. Also if you go into Configuration --> Power Management and click on properties you can set the iLO details for power management. 

ESXi is a bare metal hypervisor. It is designed for headless use, and is more of an enterprise environment product. For the example you have given it would be more suitable to use VMware Workstation VMware Product Website You can then use dual monitors, and it is OS agnostic. 

Vendors produce SAN equipment with their hardware because it works. Trying to build your own “SAN” is going to be a disaster waiting to happen. The reason HP, EMC, Dell etc have such a high price tag on there SAN hardware is because it is thoroughly tested, you get warranty (Normally 4 Hour Return to Service) You could never GURENTEE RTS if you used off the shelf hardware. I would persuade any person that tries to skimp on this and get the product that is proven. I know this isn’t always the best option for a business but can you cope with the downtime when you can’t fix it? 

Be sure that your team checks out the following KB: $URL$ Risks of misconfiguration could include not being able to bring up the cluster resources after they are finished with their changes. Have them pay close attention to the following sections in that KB: 

I’m assuming based on your listing that your alerts are firing when you select all databases, but not firing when selecting specific database. The flow of the database monitoring SQL Agent job is as follows: 

I don't know if this is the universal behavior or was fixed later on - but I did see a case of this. So if this describes your situation and don’t want to use “all databases” – then you’ll need to either write your own detection procedure and job to get around this (might be other solutions too – but you don’t have the option to change the aforementioned system stored procedures and still keep things supported). 

per your first question, replication of system databases isn't supported. Regarding your core issue: Have you traced events that would tell you definitively that this is not being enabled by end-users? If this happens periodically, you may want to audit/trace for related events to make sure that this is indeed the case. The most common reason behind this is that indeed someone has enabled this functionality at some point (sometimes as innocent as just experimenting with the Replication wizard in SSMS). With that said - there was a rare case I saw where running DBCC CHECKDB \ DBCC CHECKTABLE with data loss marked the database for replication during the fix (even though it wasn't a publication). Rare situation, so I think you should validate the more common one first (unless you've been doing a DBCC CHECKDB\CHECKTABLE with data loss recently).