This looks pretty good -- views should generally be pretty minimal. These seem pretty short, and most of what you've done so far seems appropriate. One pattern you might think about is using a mixin to dry things out a touch more. Eg, you have all your methods decorated . If you created a LoginMixin, with and just decorated the method there, you could loose a few repetitions. Mixins are also nice to have, as you can stash other repetitive elements in them as needed. 

Comparing different data types in Javascript involves the type coercion system, which in javascript is a Bad Thing -- you're basically putting yourself at the mercy of an extremely unpredictable system. But, beyond that, it's not even clear what your intention with this line is -- how does it make sense to compare a float to an array? 

The following query was used for the above purpose and I want to know whether this approach is acceptable or not, and also any feedback regarding the logic and its implementation. So could you review this code please? NOTE : The table has a field called to hold the month and year of salary (ex value. ) The table has fields called and to hold on and off of attendance. This field should be used when filtering data pertaining to a month. 

Length should be 10 digits or characters All should be digits except the last one Last one would be x or v in simple letters 

That decouples the interface of the function from its implementation. One nitpick about your above code, which I only noticed noodling around with it now in a shell session: That's a very long function name. It's generally good to be longer than shorter and more explicit than less, but also consider it can be tiring and people have to remember the names of your functions. Try to find the shortest name that accurately and specifically describes what the logic does. I would probably name that logic something like . 

In this case you just want your input to be an integer (or a long). So using the regex is one idea. But you should also consider malicious users. What if you try 

For readability I would recommend create a instead of working with . Typos are sometimes difficult to track. 

Don't do a lot of work in the constructor This is a bad programming practice in general. Because just creating instances can already take a lot of time. I would prefer an method instead. Or put the work you are doing in the constructor, in the method. Which can call a or something. Prune entire BFS iterations If you hold a maximum radius for each node while visiting. You can determine at start that a certain node will not decrease the radius. When it is already visited with a higher or equal radius. 

If I understand what you're looking for correctly, it's the cheapest rate for a particular phone number. If you already have the rates of each operator as a dictionary of key/value pairs, then you don't need a regex at all. The following code finds the cheapest rate in a set of dictionaries: 

Alternatively if you need everything from foo just do and then call , , etc. If you get tired of typing long names, you can do something like . 

You could also think about how you actually initialize this script. You mentioned you're running it as a cron job, so I think this layout makes sense, but you could also rewrite this as a class and place the init logic into the method of the class. 

NOTE: When populating since I need only two fields ( and ), The DataService returns a instead of the as the model has about 10 other fields as well. The will be used in subsequent tasks like Search, Insert, Update etc. Could you please review this code and provide your feedback? You may give your attention to the way that I've used properties to set and of the Combo. If there is anything which is not acceptable kindly let me know with an alternate solution. 

Basically the code should be readable, consistent and should perform the validation properly. Which option could be considered better? If both are not good please propose a way to do this? 

Which is too big for int/bigint. When the exception is not caught well and your error pages expose information. Worst case this may expose information about the underlying directory structure. Which can be used by hackers while doing other attacks. And even when this is not the case, passing through exceptions are not a best practice. I would rather use a built-in php method for that like intval. As an addition to this, you can also use prepared statements which is another very good way to protect against sql injections. 

We've already used datetime.now(), it's both simpler than timestamp.strftime and it's nice to not have to introduce new functions unless necessary. There's an even shorter alternative you could use, which trades off a little readability for space: 

At the end of the file. This allows the file to either run as a script or to be imported into other modules. For example, if you wanted to reuse your function in a different project, you could then do . 

I assume you intend to be using integer division here? Ie, ? Also.. why are you repeatedly declaring different variables with the same values? 

All that is left to is checking if all bits in the mask are set to true by the current player. This is very easy using the bitwise -operator. Example: 

You are having a lot of duplicate code, parsing numbers. Check out the class which has these methods builtin. $URL$ Remark: When efficiency is important, may be a lot slower than . In this case I still recommend putting the one time effort of creating your own custom read methods. 

You are looping over all intervals. This means you have to check all intervals with each other. Hence complexity: This is a well known problem, you could find a lot of reading about this online if you want. 

I just want to know whether I've done transaction handling well. Also what about the other types of transactions available in .NET with regard to this code snippet? Also are there any redundant things in this code? 

I'm using the following query for multiple transactions. This is the scenario. Generate Salary (this is not in the scope of the query) I have employee attendance in table. Then the salary is calculate from the attendance by using a stored procedure and resulting figures will be displayed in an interface allowing users to monitor / modify (entering allowances etc). THE QUERY 

First of all, I support @EBrown about whitespace and braces. Some other ideas depending on what you are doing: 

Consider using an field instead of . You are using a lot of hashing, which causes overhead on a String. 

So we only need to work with the first 9 bits of an integer: To check if winning we can use the following masks: 

=> All bits in mask are set to true REMARK: Instead of looping, you could hardcode all row and column masks. Which are still only 8 masks. If you understand this, you should also be able to understand how to