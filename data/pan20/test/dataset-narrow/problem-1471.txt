How are novices' mental models of variable storage affected by programming language choices? Most Intro to CS teachers (I think) do not delve with breadth and depth into details of how variable names are tied to data and datatype. As a result, some students create pieces of their own mental model of how the computer is storing these variable names, data, and data type. What mental models of memory storage in general (and for sequences in particular) are typical in students who learn Python first vs. students who learn another language first- one that treats arrays more like C does? Background Several single-university studies (e.g. Jayal et al. 2015) have found that a post-secondary sequence that starts out with Python and then transitions to Java performs as well as a sequence that starts in Java. Another question asks how to optimize that transition. Python has particular elements that do not correspond well to Java, however. Negative indices (with which means that is ) and slices (with which is ) are commonly found in code students stumble upon on the Internet, making it somewhat useful to mention these language features when teaching about lists and strings. Python's native types don't include a type in which pointer arithmetic can be exploited for speed, though the library offers an array. I suspect that when students learn about Java arrays, they probably build a mental model that fairly closely matches how arrays are stored in memory in C. Python does not actually store lists in a sequence of equally sized memory blocks; is a perfectly valid list. Does the mixed-type sequence or slicing or negative indexing in Python change a student's initial mental model for lists, arrays, and other sequences? 

As states in the US consider requirements to add a CS endorsement to a teaching certificate, the proposals vary widely. The changing landscape is described in the April 2017 EDC document State of the States Landscape Report: State-level Policies Supporting Equitable K-12 Computer Science Education. Iowa SF274, passed June 2017, allocated \$250 thousand for CS professional development. This is dwarfed by \$500 million announced this week by the US Department of Ed and the tech sector, but like parallel initiatives in many US states, it led the state's Department of Ed to consider CS endorsement requirements. The Department of Ed drafted recommendations as a starting point for a working group to consider. Iowa DoEd is suggesting in that draft: 

"Active learning" teaching techniques in STEM courses increase performance by half a standard deviation compared to traditional instruction. The National Academy of Sciences (an authoritative source) published a review of literature (an article which puts together all articles that meet date and study characteristics criteria) on active learning vs. traditional lecture in university STEM courses. The metastudy concluded that the data were so conclusive that it is no longer ethical to conduct such human experiments in which half the university students receive traditional instruction. The metastudy suggested that subsequent studies should instead drop the traditional-classroom control group and pit one active learning technique against another. Freeman et al. (2014). Active learning increases student performance in science, engineering, and mathematics. Proceedings of the National Academy of Sciences 111:23. Retrieved from $URL$ 

The College of St. Scholastica in Minnesota has a Computer Science Education graduate certificate program. It is a four-course sequence designed to add a CS endorsement to a high school teaching certificate, though no state-issued endorsement exists yet in Minnesota. The courses: 

I believe that it is typical for a first semester in cybersecurity at the post-secondary level to include 2+ weeks of law and ethics prior to covering tools or techniques. The consensus of professionals at the NICE cyber conference was that extensive ethics education should precede any instruction on penetration and that ethics education should be ongoing through the course, integrated into exercises and instruction. 

I post this draft recommendation because the crowd-sourced opinion of this community would be informative to me as a member of the working group. The fact that the discussion here would be useful to someone like me as a CS educator in a time of fervent activity in legislative and executive realms is a reason not to close this question. 

What activities, and with what resources, are effective for students to learn about the status and consequences of inequities in computing resources? Activities could address inequities within a community or across the globe. Background: The Advanced Placementâ„¢ CS Principles course has two "essential knowledge" (EK) statements related to this topic: 

Draw ongoing attention to the potentially confusing point by banning cardinal descriptions of an element's position. Avoid referring to the "first element" or "second element" and talk only about "element at index 0" or "at index 1." Insist that your students speak only of indices and not of position in a sequence. If you ever use cardinal numbers in human language, you might get it right ("the second element is the element at index 1") but beginners will stumble, as you point out. If you correct with a smile when a student speaks to refer to an element with cardinal numbers, the class will join you in "catching" cardinal language. While there's nothing wrong with cardinal language, a playful "ban" gives students the opportunity to think through the point of confusion every time someone speaks about an index. Your question as to "does teaching pointer arithmetic reduce student mistakes related to 0-indexing" is an empirical question. I don't know, but I'm suggesting another treatment, the playful ban. My evidence is mere anecdotal experience that this works in my classroom with my teaching style. There does not exist, to my knowledge, any report in the CS ed literature comparing students in a class that "prohibits" cardinal description by friendly censors vs. a class that does no such thing. As CS educators, we have a long way to go before we can boast of a compendium of empirically derived pedagogical content knowledge. Physics has the tome I envy: a 4-pound 11-pt-font book summarizing peer-reviewed measurement of effects of classroom nuances like this. Please, CS ed, produce something akin to Teaching Introductory Physics. Guzdial's Learner-centered Design of Computing Education is a wonderful book, but we have a long way to go to match the physics education community's understanding of their craft. 

Create a DNA-like representation for the alphabet This activity establishes a background experience that can later be used when teaching that DNA and computer data are sequences of discrete values. Each student picks three colors and creates a 27-character table showing all permutations of "codons" of the colors, akin to the 4^3 DNA codons representing amino acids. This activity was implemented in a U.S. grade 7 science classroom. An example of the student work is shown below, although the printed worksheet was revised after the pilot to make more explicit connections to both computer science and genetics. Sample student work: 

I distribute starter code with a filename like and ask that teams turn in files labelled with the names and , , and and the non-working version or for example. 

Uncle Long Hair gave a perfectly good answer. I'm adding information about a particular CS course for high schools that does include Agile. The Project Lead The Way curriculum for AP CS Principles has students divide their work on a project into a prioritized backlog and divide the top backlog item into a sprint task list where each item on the list can be accomplished in a small amount of time. Students aim to knock out two sprint tasks per session, and a sprint lasts a week. Work on a project might last two weeks. A sprint lasts a week with Scrum standup at the end of the week, where students report progress. That's not really what is supposed to happen in a standup, but it works in the classroom. The teacher serves the role of the Scrum master. Students are exposed to the lingo with a "Scrum in 10 minutes" video. After they've done it for a few projects, Scrum poker is added in one activity because some teachers and students find the mechanics fun and lets the class talk about the importance and difficulty (especially for beginners) of estimating how long something will take. For some teachers, once or more during the year, pairs create the problem they intend to solve and then swap with another pair and solve someone else's problem. This provides a client, albeit without engaging the community. 

If students are learning penetration tools and techniques, they should first be required to learn, at a minimum: 

There are many academic articles reporting high engagement, especially among students underrepresented in computing, using physical computing. $URL$ . Most of them lack a controlled study design. That doesn't mean they don't provide evidence however. For example, from Peppler 2013: 

First offered in 2016-17 (previously in pilot), the AP CS Principles assessment includes two open-ended through-course performance tasks and a timed paper exam containing multiple choice and multiple response questions. This question is about preparing students for the timed paper exam. What strategies are effective ways to prepare for this exam? What resources are available? How much if any class time should teachers plan on for going over practice questions along the way and in a spring review? Calibration: Obviously it depends on student skills and knowledge coming in, on school environment, and on pass rate expectations. I'm trying to ask for advice useful to a typical teacher, but I also want answers aligned to the CS-4-All inclusive philosophy. So for the purpose of this question, please assume 

Here is one article, covering many countries and focused on data about adolescents, that could be used for this purpose: $URL$ The graphics in this article are rich with both data and data concepts. The article summarizes a more exhaustive primary source. 

Have students analyze data about the inequity of access to computing resources, and facilitate the discussion of an assigned reading. Here's one procedure for doing that: 

That said, probably wise to heed the central advice of Kicking Butt in Computer Science: abandon gender difference as the underlying theory in what works, and emphasize instead a high value on diverse interests and on applications that positively impact people's lives. 

Is it problematic to teach students to use an empty loop to create an loop? If so, what learning progressions avoid the problem? The question is an empirical one, but reasoned hypotheses and evidence would both be welcome. Background and Context Several thousand US middle schools and several thousand US high schools have VEX robotics equipment and RobotC licenses as contractual vestiges of Project Lead The Way (PLTW) engineering programs for middle and high schools. RobotC is a proprietary language from an institute associated with Carnegie Mellon University. RobotC does not have an structure. $URL$ . The PLTW curriculum uses a "Natural Language" module of RobotC that includes wait-until functions like , but these cause the robot to be incapable of responding to input during the wait-until statement. In the middle school where I am teaching, my predecessor assembled the VEX kits into "squareBots," a design suggested by VEX and RobotC. The robot is equipped with two motors driving left and right sides of an eight-inch square chassis, equipped with a set of sensors. The robotics equipment engages kids, but the RobotC language has inherent problems pedagogically; this question is about one such problem in particular because I think the question is more broadly applicable than just RobotC. The problem To implement a wait-until algorithm capable of executing other code while waiting, I've tried teaching the idea to use 

Your curriculum for CS Principles should evolve over time as your students' background evolves over time. If your students' background is not evolving from year to year, your district is implementing CS too late in the K-12 sequence. That is, if your AP CSP is a 10th grade course, a 2017 crop of 10th graders might be new to programming and you can softball and differentiate your instruction in order to avoid preparatory priviledge. But you should make sure your middle school is providing CS opportunities to all students. Using nested loops to iterate across and manipulate image pixels is engaging and developmentally appropriate for middle schoolers. A 10th grade course in 2019 should be full of students who have created and debugged a program. 

Focus on inequities in environmental consequences from mining, manufacturing, and disposal. This was suggested by richard. He also recommended The Story of Stuff: Electronics 8-minute video. I think environmental injustice of computing is worth learning about and considering alongside inequities in access to computing resources. Understanding the issue helps students digest domestic news and is presumably within the scope of the CS Principles writers' intentions and easily within the scope of the Explore PT. Wisconsin's governor, for example, is pushing for \$3 billion subsidies and relaxed environmental requirements in exchange for Taiwanese Foxconn to make a \$10 billion investment in a manufacturing plant rippling to create 13,000 jobs to make flat screen TVs here instead of China. News articles on the issue would be easy to find for the 2018 Explore task. 

I'm going to clean this up later, but am posting the verbatim work of the CSTA members so others can chime in with additional bullets. I'm aiming to have one resource per bullet: Resources name, link, annotation, example ideas for projects 

What are engaging sources of data with which students can explore, develop questions, analyze, and draw conclusions in an intro CS course? I'm looking for flat files like XLSX or CSV, or relational databases in an environment that permits selection and export of a flat file. Kelly Powers asked (nearly) this question in the CSTA-members listserv in May 2017 and got 14 answers in a couple of days, which I'll consolidate and extend in an answer here. 

Pair programming rather than solo programming is best practice in the CS classroom. Online IDEs like Cloud9 allow both members in the pair to work in a shared environment like google docs: working with independent keyboards and mice. What are effective practices for students working side-by-side to collaborate in such an environment? I've experimented in my classroom and have arrived at my own solution, but I think the question deserves crowd creativity and crowd evaluation. Note: I've experimented with Cloud9 in both online and onsite instruction, with different results. This question is about students working onsite, side-by-side. Background: Extensive use of pair programming in the K-12 environment is best practice over solo programming. Pair programming increases persistence and engagement, and reduces frustration and boredom. See for example Hanks et al. (2011) Pair programming in education: A literature review. Computer Science Education 21:2. Schools are increasingly using Chromebooks, which preclude a locally installed IDE. Computer science is being taught in an increasing number of sections on a school's master schedule, precluding instruction exclusively in a desktop computer lab environment. Effectively teaching programming using Chromebooks is important. 

The AP framework indicates these objectives should be associated in the classroom with the computational thinking practice of "connecting computing" by finding ties among computing concepts, impacts of computing, and connections between people and computing. My question is not necessarily constrained that way, though it seems inherent in achieving the objective. (I came across a resource on this topic that I wanted to share. A related question here did not exist, so I intend to share the resource in an answer but not to imply that the resource or lesson format I share is the best one. Please share other resources and lesson formats!) 

Without guidance, students will sometimes spend a large amount of time on a computer science assignment in a portion of the assignment that does not engage CS skills and knowledge. An example is a student who spends a lot of time creating costumes using the drawing tools in Scratch. The problem can include code, however, such as a student who has established expertise in simple conditionals but continues to build out an adventure game using repeated application of the same pattern without gaining any conceptual ground. What practices do teachers use to successfully retain the student engagement driving a student to exert ongoing effort but redirect their effort to realize greater gains in learning skills and knowledge intended by the teacher?