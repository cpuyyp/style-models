Yes, that is expected behavior. The "removal" update looks and is treated just like an normal update scheduled to be installed (i.e. it can be declined by the user if they have permissions to do so, a reboot may be required after the update is "installed", etc.). 

You are correct in that user group policies are updated upon user logon, but they are also automatically updated in the background every 60 to 180 minutes (one hour plus or minus thirty minutes). It bears mentioning that there is a group policy that will allow you to change the user group policy background refresh period: 

You probably have already checked this, but are you sure that the Windows Update service state has been set to automatic? (And not triggered or something else?) If the service state checks out okay, then you'll need to troubleshoot why the service is stopping in the first place. Have a look at c:\windows\WindowsUpdate.log. When the wuauserv service stops normally, there should be a line with "END" and an associated exit code. You can look up the exit code to see why the service is stopping. If the service has stopped and there is no line with "END" then the service is probably stopping abnormally. In any case, WindowsUpdate.log should give you some clues as to what is happening. 

My two cents is that a username system based on numeric ID's would be especially strong on aforementioned best practice points 2 and 3, but weak on point 4. However, I feel that this will not be a big deal if the number of user ID/password combinations that the user must memorize are kept to a minimum (e.g. each user is assigned a single universal numeric ID/PW pair that can be used for all systems including domain, email, etc.). If there are multiple independent systems that require separate logon credentials, I think that throwing in a numeric ID in addition to a name-based one would be burdensome to users. References: Best Practices in User ID Formation 

If you explicitly blocked the update in WSUS it shouldn't be downloaded from the WSUS server. In the WindowsUpdate.log log do you actually see that the client is connecting to you WSUS server (and not someplace entirely different, like the internet) and downloading the problem update? If the update is not being downloaded but still being installed, it is possible that the update is stuck in the update cache. Try clearing the cache with the following commands: 

I think that you are asking, why use OUs with GPOs when I can use security groups? I can think of a few reasons: 1) Clarity. If you create a logical OU structure (e.g. create "computer" and "user" base OUs, create "server" and "PC" child OUs under "computer", create "administrators" and "accounting" OUs under PC, etc.) and link GPOs to their appropriate OU without changing the security filter, you will be able to understand at a glance what GPOs are affecting what user or computer groups. If you use security group filtering only, you'll need to examine each GPO's security filter or use some other time-consuming method to see what is going on. If you only have a few GPOs and you are the only person managing the GPOs it may not really matter, but as the number of GPOs and the number of people managing GPOs increases the security group filtering only method becomes very confusing very quickly. 2) Efficiency and manageability. GPOs linked to higher level OUs apply to all subordinate OUs. Through a well designed OU structure, you can effectively apply group policies with pinpoint precision and minimal redundancy. For example, more generic computer policies that apply to both computers and servers should be linked to the computer OU (e.g. generic IE/Edge settings, generic security certificate deployment, powershell environment settings, etc.), policies to apply specifically to PCs (e.g. client only Windows firewall rules, MS Office related rules, client software deployment rules) should be linked to the PC OU, and custom rules should be linked at lower level OUs (e.g. specific file share mapping, special permissions, etc.). If all your GPOs are linked to the same OU, you'll need to remember every time to change the GPO priority order so that more important/specific policies take precedence over more generic policies (this is extremely easy to forget). I think you find that troubleshooting "GPOs not applying" problems becomes much easier if you have a logical OU structure with minimized security group filtering. (NOTE: some group policies, like the group policy loopback policy, can behave in unexpected ways if you use security group filtering). 3) Speed. GPOs that use security group filtering take slightly longer to process. GPOs that use WMI filtering take much longer. It may not matter with only a few GPOs, but when your GPOs start numbering in the hundreds you'll need to think about optimization. If you want to minimize GPO processing times OU-based GPO assignment is the way to go. 

As you probably know, it is now not possible to pick and choose specific updates to approve or decline in WSUS for older Windows operating systems. For servers, generally speaking there are now only two types: a roll up for the month's security updates, and a comprehensive rollup that includes all security and "quality" updates. For servers, I am only interested in evaluating and approving security updates, and I will decline all "quality" updates. However, quality and security updates seem to be lumped together under the same class and MSRC classification categories. The only way to distinguish between the two appears to be the the update title itself (i.e. whether or not the update title includes "quality" or not). Because the names of the quality and security updates are very similar, and there is no easy way that I can see to completely separate them each other in the WSUS view, I am afraid that eventually either I or somebody else will get careless and approve a quality update by mistake. The best way to alleviate the problem is to simply automatically decline all quality updates. Does anybody know how to do this? An alternative solution could be to find a view in WSUS that makes it easier to discern between quality and security updates, or not having server quality updates show up in WSUS in the first place. The WSUS server is Windows 2008 R2 and WSUS version is 3.2.7600.226. 

Is it possible to disable HTTP Strict Transport Security in IE 11? Example of why one would want to do this: A particular user group has filtered internet access through a proxy where only whitelisted domains and URLs are allowed. You want to allow access to $URL$ but because the website uses HTTP Strict Transport Security users are being redirected to $URL$ In this situation, you'd be forced to allow access to all of $URL$ 

If w32time is disabled the server will not time sync to the domain. The service should be set to automatic. All domain-joined servers/clients should time sync normally to the domain controller by default so no further configuration is necessarily required. If you want to maintain greater control over client time sync settings (e.g. sync using NTP) you can further customize using GPO: Computer Configuration\Administrative Templates\System\Windows Time Service\Time Providers 

NOTE: I write the above script with some help from Boe Prox's great WSUS powershell scripting tutorial. 

I think that this all boils down to whether or not the provider what will be administrating the VLANs is capable (i.e. they know what they are doing) and trustworthy. If the network architecture has been properly designed, and the VLANs have been set up and secured properly, then VLANs should adequately separate network traffic in your shared office environment. You still will be able to use VPNs for remote network access if you use VLANs. Rather than worry about the VLANs, I think that you should be more concerned about hardening security for local network. The following may seem like common sense for you but many people fail to cover the basics: for example, make sure that software firewalls are enabled on all your servers and clients and restrict service access only to sources that need it, keep anti-virus software up to date, and keep your servers/clients patched and up to date. A proxy server can help you authenticate users trying to access external networks and can perform simple web filtering. There are open source platforms that can help you detect unauthorized network access or analyze network traffic for intrusions or other anomalies. The point is, VLANs should work just fine for you. Just make sure that your provider is doing a good job, and keep them accountable by asking for lots of documentation and asking lots of questions. Then do your part by making your local network as secure and safe as possible. 

This powershell script can be used to automatically block all new quality updates in WSUS. It must be run directly on the WSUS server. As far as how the script works, first the script searches for non-approved installable updates with the word "quality" in the title. If any such updates are found they are listed, and user is given the option to proceed and block the updates, or not, via an input prompt. 

If I am understanding your situation correctly, you want to separate your guests from your non-guests and and control their internet and service access differently using shorewall. The easiest way to do this I think would be to separate these two groups out into different zones. The guests would be connected to a private bridge and the non-guests would be connected to the lan. I created some example config files below to illustrate my point. I don't know to what extent you want non-guests accessing the internet or services in the kvm network, so for the sake of simplicity I blocked internet access and allowed access to all services. interfaces 

It may be difficult for users to remember. If employee numbers are used, you must decide how contractors and temporary work staff will be treated. Also, what will happen if such staff become full-time employees. 

When I install a particular program on a computer it creates an overly lenient local firewall rule that allows inbound connections to port 1234 from any subnet. I want to create a more restrictive firewall rule set using group policy that only allows traffic inbound connections to port 1234 from a specific ip address only. However, currently in my environment Windows firewall rules that are set via domain group policy are configured to merge with locally set Windows firewall rules. The result is that the more lenient local firewall rule seems to take precedence over the firewall rule set using domain policy. If possible, I want to use group policy firewall settings to change, delete, or nulify the local firewall setting (and not use a startup script to delete the unwanted firewall rule). The simplest way I think to do this I think would be to specify some sort of firewall rule priority where the local rule is rendered inert by a more specific higher priority rule specified by the domain. But I am not sure that this is possible. Any suggestions? 

If you do not have administrative privileges you won't be able to stop/kill the windows update service or task. Even if you did have the appropriate permissions, interfering with windows update on a production server seems like a bad idea on a number of different levels. Rather than fiddle with windows updates, I think that there is probably a better approach. It sounds like your script runs for a long time. Are updates being pushed at a known time? Include logic in your script to have it stop running right before the the updates will be installed. Output your script progress to a file. After the server reboots you can configure the same script to run again automatically upon startup/logon or as a scheduled task. The script can read in the script status from your output file and pick up where it left off before the reboot. If you do not know the specific time when updates will be installed, you can include logic in your script to check periodically to see if the windows update client process is running (wuauclt). When the update process is detected, have your script stop running. The obvious problem with this approach is that a startup script requires administrative privileges. Maybe the only thing you can do is configure the script as a logon script so that it will be run the following day automatically when you log in to the server. 

As far as firewall settings, make sure that port 8530 is open from the DMZ server to the WSUS server. Also, if you are using internal DNS to resolve the WSUS server name, make sure that that port 53 is open between the DMZ server and the internal DNS server. 

Recently a user unplugged their company PC from the network and used USB tethering with their Android phone to bypass the company network entirely and access the internet. I don't think I need to explain why this is bad. What would be the best way, from a zero-cost (i.e. open source, using scripting and group policy, etc.) and technical standpoint (i.e. HR has already been notified, I don't think that this is a symptom of some sort of deeper underlying corporate culture problem, etc.), to detect and/or prevent something like this from happening again? It would be nice to have a system-wide solution (e.g. by using group policy), but if that is not possible then doing something specific to this person's PC could also be an answer. A few details: The PC is Windows 7 joined to an Active Directory domain, the user has ordinary user privileges (not administrator), there is no wireless capabilities on the PC, disabling USB ports is not an option NOTE: Thank you for the great comments. I added some additional details. I think that there are a lot of reasons why one would want to disallow tethering, but for my particular environment I can think of the following: (1) Anti-virus updates. We have a local anti-virus server that delivers updates to network connected computers. If you are not connected to the network you cannot receive the updates. (2) Software Updates. We have a WSUS server and review each update to approve/disallow. We also deliver updates to other commonly used software programs such as Adobe Reader and Flash via group policy. Computers cannot receive updates if they are not connected to the local network (updating from external update servers is not permitted). (3) Internet filtering. We filter out malicious and, uh, naughty(?) sites. By using a tether you can bypass the filter and access these sites and possibly compromise the security of your computer. More background information: HR was notified already. The person in question is a high level person so it is a little bit tricky. "Making an example" of this employee although tempting would not be a good idea. Our filtering is not severe, I'm guessing that the person may have been looking at naughty sites although there is no direct evidence (cache was cleared). He says he was just charging his his phone, but the PC was unplugged from the local network. I'm not looking to get this person in trouble, just possibly prevent something similar from happening again. 

If you want to decline quality updates automatically, run a slightly modified version of the above script as a windows task. 

Using group policy I created a windows task that any user can run manually but that runs under a specific domain user (e.g. DOMAIN\task_user) that has been assigned very limited access privileges. This policy/task worked fine with Windows 7 PCs; however, it does not seem to work with Windows 10 PCs (if I try to run the task even as an administrator I see an access denied error). I think that the reason for this is because Windows 10 does not seem to allow Windows tasks created via domain policy that run under a domain user where the password is saved. For example, within task scheduler if I export the problem task that was created on the local PC with group policy and then import it as new task (this involves manually re-entering the password for DOMAIN\task_user) and run it manually it works just fine. As a solution to this problem I see that some people suggest that the task be run as the SYSTEM user instead. The reason being, there is no need to save a password for the SYSTEM user at the group policy level so the Windows task should run normally. However, this seems like a bad idea from a security perspective, since the SYSTEM user has access permissions comparable to a local administrator. So my question is, how can I get around the password saving problem in group policy and create a task that anybody can run but that runs with very limited permissions? 

The ID contains no personal information (i.e. the name of the user). Users sometimes change their legal name (e.g. due to marriage, gender reassignment, etc.) and may insist that their username be updated accordingly. A numeric ID system would allow you to avoid this hassle. ID generation/assignment is simplified (i.e. you don't have to worry about instances where people share the same name). 

Also, user group policy can be forcefully updated for the user by entering the following at the command line: 

I don't think you should fiddle with the registry in this case. There are too many registry entries to think about and the possibility of making a mistake is relatively high. If I were you, I would use group policy instead. I have a server that is in a similar situation to yours--located in a DMZ, not connected to a domain, and receiving updates from an internal WSUS server. This server receiving updates just fine. I am using local group policy to configure the server's windows update settings, which I think is more desirable than changing registry settings directly. Open as an administrator on the command line. Navigate to Computer Change the following settings: