The right hand side of this image is using HDR. It makes more use of the range of colors, the darks are darker and the bright areas are brighter. In comparison the left hand side of the image looks a little flat. The basic steps are: 

Multiplying the vector by the matrix should give you the vectors orientation in world space. If this isn't the case then it could be that you are building the transformation matrix incorrectly. 

For every sound you'll have a buffer. Multiple sources can reference the same buffer. So for example you'd have a buffer that was loaded from 'archerShot.wav' and all the archers can reference this. In terms of design patterns there's a variety of solutions. One is the Publisher/subscriber pattern (wikipedia). The individual game objects can contain a sound enumeration variable (that can represent a variety of sounds) which would be picked up by the sound system and played after every frame. The advantage of doing it this way is that the sound system is not coupled to the entities - just like how you can separate the rendering of an entity from its logic. This link may be of use (a thread on gamedev.net forums). Hardware Limitations: This is very dependant on your target hardware and I don't think there is a general answer. The iPad and iPhone can only play one compressed buffer at a time. If you allow the users to play their music on the device this means you can't rely on being able to play any compressed sound buffers. 

I'd do that sort of thing using vector maths which is usually faster, something like this (pseudocode): 

PHP is still relevant and widely used. According to the TIOBE Programming Community PHP is the fifth most popular language. It was in fourth position last year. That decrease could simply be due to an increase in the amount of available technologies. I'm assuming there is some correlation between general programming language popularity and game programming language popularity. Rails, Django and Node.js are frameworks or libraries so comparing them with PHP won't work so well, instead you could compare them with PHP frameworks such as Symfony and CakePHP. If you're already confident with PHP and don't have experience with Ruby/Python it may be worth using one of these. Most of these frameworks offer model-view-controller architecture that could speed up development and keep your code cleaner and easier to maintain. 

$URL$ Second Reason: The second reason is that having vastly overpowered opponents/griefers (also known as killers in Bartle's taxonomy of player types) can lead to frustration, dissatisfaction and abandonment of the game. In the case of PVP MMOS this could happen as newer players are repeatedly and unavoidably killed by high level characters. In PVE MMOS this could happen as high level characters kill-steal lower level characters. Third Reason: Players can become tired of randomly generated content. I believe one reason for this is because it's hard to programmatically create differences in kind (extra credits video on youtube) or a longterm storyline/narrative to keep the player interested. 

I believe it's a common requirement of MMOs that processing for a single shard or realm can be done over several servers to ease the load. I'm curious as to how this can be done whilst maintaining a unified consistent world where all the players, and all the NPCs can interact. My question is how is load balancing achieved in MMOs? Any links, books or general information on how to improve my knowledge on this subject is also appreciated. 

When your sprite is in the center of the screen its position should be unchanged by zooming. This tells me that if sprite.x is 0.5 the resulting x should still be 0.5 after the equation assuming that the center of the screen is 0.5. This could achieve that: 

And the transition between states (the events / arrows between states) would be player inputs and reactions to the world, such as: 

I know quite well how to check for collisions, but I don't know how to handle the collision in a good way. Simplified, if two objects collide I use some calculations to change the velocity direction. If I don't move the two objects they will still overlap and if the velocity is not big enough they will still collide after next update. This can cause objects to get stuck in each other. But what if I try to move the two objects so they do not overlap. This sounds like a good idea but I have realised that if there is more than two objects this becomes very complicated. What if I move the two objects and one of them collides with other objects so I have to move them too and they may collide with walls etc. I have a top down 2D game in mind but I don't think that has much to do with it. How are collisions usually handled? This question is asked on behalf of Wooh 

It's a combination of full-screen effects. There are a few ways to render full-screen shader effects, the most common is to first render the scene (without effects) to texture. Then that texture and the effect shader is set and a fullscreen quad is rendered. The blurring in the corners could be done with a refraction effect. A refraction texture controls how much the light should be bent for each texel in the screen buffer. Here is an example of a Unity refraction shader. This tutorial (rastek) shows how to create glass and ice effects with DirectX 10/ HLSL. The cracks look like transparent textures to me. 

I set up a simple platformer prototype for iOS with both UDK and Unity from having zero experience with either. The tools for Unity are a lot more intuitive all around, and because of this I was a lot more productive. The existing classes for use in Unity and the overall component-based structure is a lot more consistent than UDKs, where it's very difficult to know the exact responsibilities each object has and which objects it communicates with, without doing research or digging through the code. The fact that I could make changes even while the Unity game was running was nice. UDK did have a iOS controller, where you could send inputs to your Windows PC from your iPhone or iPad - Unity did have this but it was mac only. I didn't use the same assets for both prototypes (I used assets that came with the development kits), but neither prototype was demonstrably better than the other, they were virtually identical. 

Math First calculate your ideal screen ratio: 480 / 800 = 0.6 Then calculate the ratio of your users screen. If the ratio is larger than 0.6 you know your game will have space to the left and right side of the game area. You would scale the game area by the users screen height/800. To calculate the horizontal position of the game area you'd do: (screen width/2) - (game area width/2) If the ratio is less than 0.6 the game will have space at the top and bottom of the game area. You would scale the game area by the users screen width/480. To calculate the vertical position of the game area you'd do: (screen height/2) - (game area height/2) Practical Example The Users screen resolution is 3000X1600. This gives a ratio of 1.875, which is greater than 0.6 so space will be to the left and right of the game area. The scaling factor will be 1600 / 800 = 2. The horizontal position of the game area will be: (3000/2) - (960 /2) = 1020 Android Specifics To position and scale the game area, you can apply a matrix to offset your drawing operations (Canvas.setMatrix). Another approach would be to draw your game screen into a 480x800 bitmap and then scale it afterwards, using Bitmap.createScaledBitmap or Canvas.drawBitmap. 

You could get the rotation of the monster and then pass it into RotateAroundPivot before drawing the text. Alternatively if it's an option you could use the world space UI in Unity 4.6 beta to child the text to the monsters transform. 

I agree with Maik - debugging will help you here. To do this you could walk to the top of the screen, then insert a breakpoint after: 

If you look at this graph (wolfram) you can see why this works. To move faster at the start and slower at the end: 

Unity web player (for windows) can use both DirectX and OpenGL in a window (however it abstracts your access to these APIs). Another approach would be to implement a DirectX plugin using ActiveX (for Internet Explorer), or NPAPI (for other browsers). If you use NPAPI, when your plugin starts up you'll receive a window handle where you can draw whatever you want (including a D3D window). If you go this route you're essentially running native code on the clients machines. 

There is no right answer for the question of how much experience an enemy should give, or how steep the experience curve should be. It may help to think about the playing time required to level up for each level and then base the experience required per level, and average experience rewarded per enemy on this. This article is a detailed breakdown of levelling mathematics in Lineage II. $URL$ 

Many aspects of Unlimited Details Unlimited Detail Technology seems dubious to me, even the introductory paragraph (because of the usage of the word unlimited): 

There are a variety of ways to run code written in other languages in Unity. Most of these are platform specific. iOS: Since xCode will also compile C++ code, you could add the C++ code to the plugins directory and it will be built when you build the iOS app. You'd then define the function prototypes in C# so they are accessible from Unity. Documentation is here. The official documentation for a variety of platforms is covered here. 

All the movements in the lunar lander game are multiplied by the elapsed time since the last frame. This comes from the formula velocity * time = distance. Because of this the motion will be constant no matter what the frame rate is. Instead of 

This will allow you to select a random element without having to step through the container. I have left a comment asking for more information, if more information is added I'll update this answer. 

The bottom line is there's no bullet-proof way to protect your HTML5/Javascript code. Obfuscation and minification will act as a deterrent. Closure Compiler is one such minifier. If you really want to prevent people from cheating, store the state of the game on the server and turn the web page into a presentation/input layer that communicates with the server. 

Testing I tested all combinations of start/end position in the map given above. For each combination it prints out the visited rooms. 

The formula you are using to convert from a 1d position to a 2d position is almost correct (and I'm sure the same method is used professionally) 

I'd suggest any container that has random access (wikipedia), for example a plain array, vector, or deque. 

Because the difference between y <= iRows; and r < iRows - 1 is two, but there should only be one more vertical vertex than there are rows.