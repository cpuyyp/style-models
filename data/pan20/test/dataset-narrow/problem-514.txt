This way the browser does the img caching not your server, so the network bottleneck is no longer an issue. There are a limited number of combinations that the browser needs to cache. I am making some big assumptions about your design here If you treat the tile as a div background, you can use plain html to render the coords over every tile if required. 

Other things you could do is to manage different "namespaces" (maybe not the best word to describe it) within a session. 

The advantages of the ini format style, as @MrLore said, you can give a file to someone (not a programmer) and they can do the translation for you. Another advantage is if you use multiple programming languages, the ini file is independent of those. You can also do more advanced stuff like including arguments into the strings 

Personally I find if it is a short function, that you do your validation and exit early, these are usually called "guard" clauses What you are doing here is more what I would call validation, than sanitizing. Eg. sanitizing would be escaping data before feeding it into and sql statement. 

Overall your code looks fine If you are having trouble with sessions, check the live server configuration, especially the cookie domain and path. I have put some inline comments in the code, the changes I have done will make it a bit easier to maintain (in my opinion) but are not essential. 

Doing that alone will remove 40-50 sqls from you total, then do the same for another repeated query. I do like using ORM's in code, but only for basic Browse Read Edit Add Delete operations. As soon as I get to complex reports I drop back to plain sql, as the ORMs don't perform as well on large datasets, and they can often end up performing more sql's then are required. 

I feel your code is way more complex then it needs to be. I am guessing in the end you just want to produce a random secret santa list. I have put some echo statements in the code, so you can easily follow how it works. This is not the most efficient way of doing this, but I have tried to keep the code as simple as possible. This list executed in less then 1sec for me, I am pretty sure it would work for at least a few hundred names without timeout 

Basic authentication is very basic. It is not really designed to allow responses, such as Wrong Username/Wrong Password. If a login attempt fails it will prompt you for the username/password again and again, (usually the browsers allow 3 attempts before failing) Once the login fails you get 1 error message. This could be caused by wrong username/password from cancel option. If you want to show bad username/password messages I suggest you implement your own authentication form (which is not difficult). It is also not a good idea to show wrong username, and wrong password explicitly as once I guess the correct username, I will be able to tell from your response saying bad password only. Then i can work on cracking your password knowing I have the username correct. I have altered your code substantially and tried to explain why in the comments If you are using apache websserver, all of what you have done can also be achieved using a a simple .htaccess and .htpasswd file Here is a website that can generate those files for you $URL$ 

I have done translation of one of my sites into English, French and German and what I found is that maintaining a class with getter's and setter's for a handful of phrases works, but anything more, just becomes hard work I like @MrLore parse_ini_file() approach. with a few differences For example instead of using made up constants like PAGE_TITLE, use the real string in your native language. So my en_nz.ini file looks like this 

First up, that's a pretty good effort for a couple days of experience, you have obviously done some reading yourself. To be honest it is, what I call spaghetti code, echo html statements in between logic. While it works fine (and is how most people learn), it becomes a pain to maintain in the long term. Rather then straighten out the spaghetti, I have made some minor comments, so that your code it still recognizable, and you can see the changes. I have put some inline comments describing the changes. 

Authenticate the data source. (Is it a legitimate source, username/password/etc) Sanitize the user data. 

There are no glaring security issues I can see in the original code, but I felt it could be improved. 

I had a look through the code, if it runs slow then it is most likely a network issue from what I can tell. I think you are caching the wrong thing. A better solution might be to change the design of the tiles and remove the coordinates from them. You have 6 types of tiles Sea, sTone, Mountain, sanD, Forest, Grass First up, pre-render all six tiles S.jpg T.jpg M.jpg D.jpg F.jpg G.jpg Next render all the possible combos and combos of tiles eg sea/sand etc, naming them in centre-north-east-south-west naming convention. SSDSS.jpg would be Sea surrounded by sea (north), sand (east), sea (south), sea (west) Next is the game loop 

There is quite a lot that can be done For a start use mysqli_ functions as mysql_ functions are deprecated on database queries, it is good practice to check for errors (like this) 

Code reuse, when I design stuff I only create a separate method if I can reuse the same code, or due to it's complexity/size of the function it is best to break it into smaller parts to make it more readable. 

The del function, I am unsure what you are trying to achieve by returning false, but returning nothing if it isn't set? Personally I wouldn't bother to check if it is set or not, just unset it, and return nothing. I would also call it delete, so it is painfully obvious to the use what it does 

I can't comment on security as I haven't had time to go through and understand the code, but I have written comments in regards to coding style, search for // ### to see my comments. I will have another look later if I get time 

Just some simple stuff, a common.php file for common code used by both files. DRY don't repeat yourself. Writing a script like you have is fine, the points i have noted will help you if you come back to maintain it in a year or so, and have forgotten how it works. The bulk of programming jobs are about maintaining a code base, not creating new stuff, so if you can learn how to make maintenance easier, it will be beneficial for you in the long run. (I wish i had learnt this stuff much earlier on) I have added inline comments explaining the changes i made 

It is not necessary to put quotes around variables unless you are concatenating them. By the way $username is not set in your script. 

Looking at your sql's you seem to be repeating the same queries in a loop. I will pick out one simple one for example, it doesn't take long to run on its own, but if you add them all up, the amount of roundtrips to the db grows. 

My personal preference is not to nest functions inside if/else statements as you have done with the copyRecursive($source, $destination) function. Put functions at the top level it will make your code easier to read. For code readability I would also move your email generation code into a separate function 

Here is a start I opened your code in php storm and it says Non-static method Database::getPdo() should not be called statically Where you have code like this 

This snippet of code is from Kohanaphp framework. I have found this the easiest and most flexible way to do what you want. It's not a lot less code then what you have, but at least you are not repeating the array key part. The name of the function get() isn't my preferred naming as I feel it is confused with $_GET, but it is part of the framework, so I have left as is. My preference would be to call it val() (a bit of jquery influence there) It is in it's own class here, but that is not essential. 

The way I have read the code, it looks like you can see 1 gallery at a time or the home links but not both. It's not much of a saving in code, but you could simplify it a little and assume that if artists-home is clicked that all galleries fade out. 

To be honest, I was able to pickup and read you code really easily and understand it, which is the end goal. So what you have already is fine if you want to stick with it. In saying that, there are a few things I try to do, when mixing html and php. 

Just refactored the one function. It is hard to tell what your intentions are in some places. Comments are inline, with reasons as to why I changed things 

Also why don't you just store the whole lot as jpg, why is it necessary to save them as different types 

PDO allows you to bind variables to the statement, and it will escape any dangerous data. This will help stop people from creating attacks as I have below. 

To me it is easier to see the looping logic without all the html in place You could then also look at templating engine if you are going to be doing lots of this sort of thing, there are various options available, smarty, twig, mustache, blades to name a few. 

It works and I can't see any side effects, but it is unusual to see code like this, and I am not sure of the point of creating all 3 user arrays at once. Do you intend to display all 3 user menu options at the same time, or can only 1 user be logged in at once? This is my preference for readability, also if you create a menu array and need items in a different order for different users, it would be difficult to achieve using the current code. 

I have included a test script below (DO NOT RUN AGAINST YOUR LIVE DATABASE) I have manufactured some bad json data so that it will execute a delete statement on the tracker table in your database. Obviously it won't work unless I get the table and column names correct, but as your code is now, if I try a dummy column name it will give me back an sql error message, which can help me to narrow it down. Log the error message instead of returning them. This is an API, all the client end needs to know is that it failed. Don't give the attacker any more information then necessary. 

I prefer to have a guard clause at the top, so you can easily see the outcome of the if/else without having to scroll to the end of the code 

I note you have preset values for your arrays, which contain no html, otherwise I would be wrapping those echo statements in htmlentities() or the likes. And lastly not sure if it is intended behaviour, but you use ->addDay(0), then addDay(1), then addDay(2), but when you get to 2, you will have actually added (1+2 = 3 days) to the date, and so on. 

you might want to look at autoloading, it's not very hard to do $URL$ In your templates you are doing 

Keep all the logic out of the html. This often involves building an array of pre-formatted values or structured data. I like the long form of foreach/endforeach, for/endfor etc. Just because I find them easier to spot in amongst the html, instead of looking for a } that could be part of a javascript, etc I prefer the short form of <?= instead of <?php echo