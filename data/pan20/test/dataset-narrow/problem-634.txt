To use, simply instantiate and echo output. Here, we do a regular state name, with no selected state: 

Okay, so I wrote this function yesterday for one of our websites here at the office, the site is responsive, but one of the banners wasn't behaving at a certain screen size (was getting chopped off when screen size was less than 1067px). Basically, this script checks for window size of 1067px (higher than 1068px, banner is fine) to 980px (lower than 981, banner is hidden) 

If you are creating a database wrapper, why not make a lib out of the wrapper and stick it into a directory that other modules/classes can import? So, your class would be in a directory structure like this: 

::EDIT:: In regards to the comment (not same as OPs code), turn the function into an iterator rather than returning a list. This will give you the speed boost of the prior code, and still give you all the places of occurrence: 

I would suggest using the system provided function over the custom memoization technique, so your code would look like 

I wrote a Player package in Go. It builds correctly, but I would love a review on what I did and did not do "the Go way". I'm new to coding in the language, although I've gotten about halfway through Ivo Balbaert's "The Way To Go". The code consists of a struct and a bunch of setters and getters for the struct. 

Give this a try and post the results - it integrates PHPBenchTime laps and get_memory_usage() with your script. 

After that, we continue with an if/else block which calls the function according to the user input. Our i/v/r/w should already be defined in the block above. One major change here is that we are no longer printing directly from here. Rather we are setting the output in an variable, which we later use to print. 

You can effectively get rid of the switch statement as well as the is_array check in the count ternary if you do the check in the beginning (and exit early at that - so not wasting any cycles). You can also get rid of 

As N.B. mentioned in their comment - why are you implementing a method if we already have lazy loading via autoloading? I've even written a class that you can simply attach and not have to worry about loading your classes. Now, there are better autoloaders out there - like Symphony's ClassLoader/autoload.php. Anyways, here's your code, with my LazyLoader class handling the loading of methods (untested code). /LazyLoader.php 

In the end, we're left with three functions. One which creates the key, iv_size and iv. One and one to encrypt and decrypt, as follows: 

I just put this together, so I haven't tested it or anything, there might be bugs and someone else PLEASE come along and improve upon it, but I think this might be a good starting point to answering this question: OOP version of OP's code: 

"Namely, I'm interested if it's OK to have a private variable mysqli populate inside the function openConnection() or should I have done that in the constructor?" 

Not quite a lot that can be done performance-wise...you have a lot of data to pour over ( and with the new data . You could possibly think of moving over to a faster database (Redis? Cassandra?). Anyways, I made a few minor changes to your code - added empty() checks rather than empty string checks, shortened a few if statements, etc. 

I would really really recommend you go through and clean the code up - refactor refactor refactor, use best practices and as @peterhil said - read through the links and keep the HTML presentation away from PHP and JS and CSS. 

, , etc. all implement and thus they should be encapsulated in blocks. Instead you tie to a singleton class, which is the opposite of that. Here's how they should be used: 

There are repeated uses of . What if you need to change the CultureInfo? Store this in a single place and reuse it. 

I'm a bit confused by this: if (account.EmailConfirmed) return View("ConfirmEmail"); //return page that will say the token has expired Your comment doesn't correspond with the actual code, especially when that same view is returned elsewhere. 

Instead of copy-pasting them, move them to a separate method and call that. The same is true for this: 

... can be solved far more elegantly by implementing MVVM and using commands, both of which you should be doing anyway. I'd write an example using your code, but you've not given us much to work with (and I don't have the time right now anyway). Also, is a really bad name for a method. 

But if I were you I'd rethink this entire logic. A is ugly and unwieldy; IMHO the nested dictionary should be a custom class. I also feel this code is odd and possible buggy: data is retrieved for an yet this parameter is completely absent in . The that is passed is assumed to be present as a key in , same for the . 

Moreover, , and are meaningless names that don't inform me what they are and what they contain. Give them proper names, e.g. instead of : or . 

I note that you keep the Excel file open and then parse one or more text files. Have you tried closing and opening the Excel file for each text file you parse? Also, have you considered other ways to open and edit Excel files besides Microsoft.Office.Interop, like OpenXml? 

Wouldn't it be far easier to use a function that capitalizes the first letter of a sentence instead of always having that conditional operator ()? 

At that point I'm not even halfway through and I have to give up. You need to seriously refactor this code. Each property you need to retrieve should have its own method, and in 99% of those cases there shouldn't be an empty block. WRT your question: consider converting countries to a , e.g. and then use . But please, first refactor your code. 

Also, the point of the class is to avoid a constructor with numerous parameters. Just have public properties and assign those, e.g. 

doesn't convey that it returns a . Name it . (Also, is looping through all coordinates in your grid efficient?) Same for . 

Most importantly though I'd urge you to separate your business logic from your display. IMHO assignments to e.g. should probably be encapsulated into a method; perhaps the business logic could be moved to a separate class even. Same for the iTextSharp code in (is that even a correct name for the functionality of that method?): move that to a separate class, along with the method. 

Your code is full of . This means there's a strong coupling between your "UI" (a console) and your actual code. Instead consider using a logging system like Serilog to handle all that. 

In addition to @user1118321's review, I would also suggest to rethink your conditions. You seem to tend to do "negative" checks, you're even combining two in this case: . I'd much rather have this logic: . To me this second version is easier to understand: if the is null or its is null or empty, then execute this simple bit of code that doesn't need the , otherwise execute this more complicated bit of code that requires the . This is IMHO even more important when using ternary operators. Parsing requires me to think a lot more than if you'd written . 

Great! Looking much better. Now, remember that your construct should be used to set variables or initialize functions that the object requires - NOT echoing something out (unless its an Exception, in which case you'd use ). So let's move the echo OUT of the class, initialize the variable: 

If you add a ternary concat to (at the expense of gaining 2 opcode calls over the if/else). This would be the function after cleaning it: 

As cbojar said, you need to separate your concerns. This is a blown out example of how your code should look like: The User class should not have any SQL interaction - it should delegate SQL interaction to a class built to handle just SQL interaction. 

Notice that your original answer does not catch nor raise an error when encountering a string val. I've reworked your code to this: 

There are a number of concerns - from code styling to error handling (echoing out an error is not good. Use Exceptions or a custom Error handler). 

Well - speed. The one liner mixture of , and is multiple times faster than the for-loop. Not to mention that it creates less work for the GC. I ran the two pieces of code above and this was the output: 

How about this? I moved the repeated code in to its own function. Also, +1 to Zathrus' review as well as mseancole's additions. Predefined json files might not be a bad idea. 

Again - the glaring issue is that SQL query...can easily be injected if you're not doing any checking in query() itself - and even if this is say, an intranet site, don't hedge on that for safety and laziness. Protect the database at all costs. Now for your questions: Can it be improved? Are there any glaring problems? See above notes about SQL Since $stateid is just an ID reference to the state, should I store the state name as part of the object? Is it better to compare stateid or state? Feel free to store it, or not. Doesn't matter either way. If you require it for your software, then keep it obviously. Do I need to store the $teamid? Again, you don't need to if your software doesn't require it, but down the line, it might become a reference in some piece of software or other. Is there a better way to handle the colorsX? These are just 2 hex code color strings. Perhaps an array - ie: ? Or you can leave them as is. EDIT Edited for idiom: 

After that, I changed how you output the block of text from a bunch of print statements, to 1 multiline print statement: 

After that, I added a call to on the call so that all input is shunted to an integer. After that, we initialize our class to an variable. Then, instead of having multiple definitions for , , , and - we ask if the choice is in a list, define i/r/v/w. This lessens the amount of duplicated code: 

Also, instead of perhaps consider using . Perhaps someone with more experience with Nginx confs will follow up with a way to store certain bits and pieces in variables or will offer a better solution than mine (I for one would love to know a better way of doing things) 

Another way to do it, if the generator consistently returns small sets of data, is to just use . This is especially true if, like aforementioned, the generator returns small sets of data and that data is not dependent on an action (ie, data is static) and that data is not kept in memory for a long time (such as in a child that is killed (and its memory freed) once its served its purpose). The way to do so, is: