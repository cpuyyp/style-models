You have to cast the GameContainer object, that is passed in the update method into AppGameContainer, then you can access setDisplayMode... I tested it right now, and it works. 

I used a web based version of sfxr to create some generic sounds (menu cursor move ,select, abort etc.). SFXR is a tool that creates simple 8bit like sound effects. You have multiple templates (shoot, coin ,item pickup etc) that create sounds based on some randomized values. You can change all the values, mutate a sound or randomize all parameters to get special results. AS3SFXR Just try it out, its flash/adobe air based, so you can use it in the browser. 

The idea is that you only render those tiles, that are visible on screen and skip those that are outside of the viewport. You don't have to recognize when a new tiles comes into the screen, as you recalculate the variables on every render call. Alternatively you could only update the position, if the viewport has changed since the last render pass. Note, if you want to add scaling functionality, you would also need to change the calculation of startX, startY, endX and endY, so the scaling is taken into account. For other objects, for example sprites, that can be positioned freely on a map, a better data structure is needed. You could implement a quad tree and use it to distribute the objects around cells. You then simply select only the visible cells and render the objects from those cells (after you sorted them on the y axis). But thats another topic. 

You can apply transition effects when changing a game state, just use the overloaded method: See Javadoc: enterState On this javadoc page you can see, what transitions are available: JavaDoc: Transition I have just tried it out in my current prototype and its pretty easy to do. Example of how I made a transition from my main menu state to the gameplay state (the main menu looks pretty ugly and isn't a menu at all, thats because I haven't implemented it yet ;) but I think it should suffice as example. $URL$ The code I used to produce this simple transition from the menu to white and then to the game state looks like this: 

Maybe you noticed that the class is marked abstract. This means, that this class is not meant to be instanciated, but other classes need to extend from it. It already implements a basic render methodThe method update is defined here in the base class without any implementation. So now lets look on how to implement another game object. One thing you will need is the player class and this could look something like this: 

But I think you need to use the dev branch of slick, as the "official" version from their page is pretty outdated, and if I'm not mistaken, the resizing capabilities are only supported in the dev branch (but I'm really not sure about this, as I have never used it before). Here is the wiki page explaining, how you can check out the latest dev version of slick from their repository: Keeping up with the Slick Development Branch Here is my test class. Should run out of the box. It opens a window in 640x480 resolution, if you press enter, the resolution is changed to 800x600. Here is my test class: 

There are multiple ways to do this. The simplest but also the least flexible way would be to render the character with every weapon with every move... As you want to change weapons, you would have to create stand, walk, run and jump animations for every weapon type. Another way is to split the character into multiple parts, that can be rendered seperately. You would still have to use multiple images for animation, but if you do it right, you can make it quiet modular. For example, you could have one sprite, that represents a human (2d, side view) without its arm. Instead of just drawing a weapon sprite, the weapon sprite also includes the arm (so the arm can be repositioned per weapon). You could also split it in three sprites, body, arm, weapon. Like that you could define multiple arm types (or arm layouts) and make sure that every weapon has one arm layout, it looks good. another often used way to animate 2d characters is to make the characters out of multiple parts and then create a skeleton, that is animated. A page showing a nice example of sprite vs skeleton: $URL$ Skeletal animation is also often used in 2d shoot em ups for bosses, that are large and have multiple parts. Also take a look at shank. As far as I know, it is done with a mix of skeletal and frame based animation. The parts of the humans are skeletal based, but if needed they also play an animation, or change the sprite of a body part etc. $URL$ Basically, frame based animation is much simpler, but with skeleton based animation you get much smoother visuals, if done right. 

Create the list with all the numbers, that your final list should contain Create a second empty list. Enter a loop. The loop continues, as long as the ordered list still has numbers in it. 

LWJGL is just used as a wrapper for graphics, input handling, audio etc. To extract the data from the roms, you need the specification of the ROM file format. The rom is a collection of data, that has been written by a certain rule set (the format specification). If you know this specification (by documentation or reverse engineering), you can open that file and extract the data. You could do this with java, c, c++, c# or whatever language you like, that supports reading files. You should find some information about the format on this page: $URL$ (look for the gba cartridges section). 

Keep in mind, it is not the ultimately best solution and I scribbled it down without any IDE, so no warranties that the code actually works ;) Sooo, I hope it isn't too much. As you can see, we try to capsule functionality to the respective actors. Also, like this you can implement very easily computer controlled characters, that also can use the same build mechanics (just instead of receiving its state from the keyboard input, an AI component would change the state). And also, you can add 10 objects, and you don't have to create all the boolean and position variables for all of them, but only an GameObject per object. 

If you want dynamic map loading you need a special data structure to store the level. Easiest way is to split the level into even sized chunks. For example you could make a chunk an area of 32x32 grid cells. Then you need another class, that takes care of loading and unloading chunks. Make sure that you have the visible chunks and the surrounding ones loaded, as it may take some time to load a chunk. You need some logic that manages the chunks, means checks if they are enough far away to be unloaded or if they are near enough to be loaded. Maybe it would be best to start with a fixed sized system to get the arrangement and rendering of the chunks right. If you've done that, you can extend the class so chunks can be dynamically loaded or unloaded. btw, minecraft uses a similar system of chunks (i think its something like a 16x16x256 cube). You find some information on the internet, how the chunk system in minecraft works. You could use it as inspiration, as you want to do basically the same thing, but in 2d space. => $URL$ 

If you're new to game development, I would recommend that you take a look at Tiled. Tiled is a free tile based level editor, that supports orthogonal and isometric map formats. Tiled Page Slick has a class, TiledMap, that can load the tmx format generated by Tiled. You can draw the background of the map simply with tiledmap and then render your units, building etc. on top of it. You can find the examples in the Slick2d wiki: Tiled WIKI Page 

I'm currently working on a terrain mapper, that should do exactly what you want. First of all i pregenerated all transitions between the tiles (so per 2 terrain types there would be 2 tiles for the plain terrain textures and around 12 tiles for the transitions). As the number of needed tiles would grow pretty high, when you have multiple terrains and want to support transitions between all the terrain, the tileset would grow pretty big. Now currently I'm working on another approach, that in theory (and in my prototype) worked pretty well. I still have to implement it, so the needed tilesets are created on the fly, but this is how I do it: I have a terrain definition, where all terrain types (for example water, grass, rocks, mountains, desert etc.) are stored. After that I establish an order. I'll explain later, why this order is needed. This order defines, how the different terrain types are related to each other. For example, water is lower than sand (beach), sand is lower than grass, grass is lower than mountains. Therefore you can also say, that water and sand are lower than mountains. Now I have a special alpha texture, that defines the possible transitions. Here is the tileset I used in my prototype: 

TLDR Version: Don't store position value and states of objects directly in the game / state class. Create classes for game objects and only store, update and render those objects. When you press you build key, simply remove the building material from the player and create a new game object on the respective position. Long Version: Ok, from looking at your code I think you have to learn a bit more about object oriented design and how to apply it for problems as yours. Maybe I drift a bit offtopic concerning your question. If so sorry about that, but I think you should get the idea, how this can help you. In your code, you have a variable that tracks, if you are building something. Now imagine, you want to have 10 other building options, then you would need 10 variables to track the state. Try to grasp the concept of classes and objects. So maybe start reading the concepts of OOP or read the Wikipedia article to get used to the subject. So, back to your question. First of all I would think of what classes you will have in your game. Assuming from your question I would start by implementing a class GameObject. This class holds some basic information, that are used for all game objects. I put a vector in the class, that represents the position of the object, and an image, that is the graphical representation of that object. 

It's maybe not the best suited solution but you could use Inkscape, a free vector based graphics editor. It's output is svg, which is basically xml. You can make layers in inkscape and draw your parts in the specific layer. You only need to define a basic rule set, on how to create the levels and what tools can be used and then parse the created svg files according to this ruleset, to generate your level objects. 

Basically its like Marthon said, that most engines simply redraw the whole scene on every render call and not only portions of the visible scene. What you are looking for is a way to limit the objects/tiles, that are actually rendered. If you have a 2d array of tiles, that are all same sized its pretty simple to find the start and the end index of the x and y loop. My render method for a tile layer looks something like this: 

With this, you would have the display functionality capsuled in the GameObject and extend that functionality in the PlayerObject class by updating the players position and rendering the building materials, if the player is currently in a building state. Now to the second part, building the object and leaving it there. To accomplish this, I would create another class StaticObject or something like that. 

I tried to list some puzzle games with editing environments. I would also take a look at some flash gaming sites. Theese sites often feature small puzzle games and those games sometimes come with an editor. Some casual/puzzle games with editors: 

Basically what you do is create a vector, that represents the direction in which the entity is moving. By using new Vector(1, 0), the ray of the vector is 1 "unit" long. During each update, you take this vector (I make a copy, so the initial value is not changed) and multiply it by delta and by speed. Now you can add this multiplied vector to the position vector. If you want to change the move speed, simple adjust the speed value (smaller values result in smaller speeds). EDIT: Just for clarification, as I don't know your knowledge with slick: Vector2d is a class, that holds a x and an y value. Vectors support some basic mathematical operations, like addition, subtraction, multiplication (scale). In addition, Vector2f has some nice helper methods, like setTheta and getTheta (keep the length of the vector the same, but change the angle) or normalise (keep the angle, but change the vector length to 1). If you have two vectors, vecA and vecB, consider this behavior identical: Multiplication: 

Pick a random index between 0 and list.Length Put this random number in the randomized list Remove the item at the index position from the ordered list. 

Change your actor body so the lower part is an arc. Like this it should be able to get over small steps and or walking up/down diagonal slopes. 

random.next(0, 10) returns a random number between 0 and 10. It can happen, that it returns the same number multiple times in a row and it is not guaranteed, that you get every number between 0 and 10 exactly one time, when you call it 10 times. What you want is a list of numbers, every number is unique, between 0 and 9 (or 1 and 10). A possible solution to this would be something like this: 

If you look at the method signature of enterState you see, that the overload will take the state id, a fade out and a fade in transition. I simply took two of the transitions and looked at the constructor of them. There you already see, what options are possible (color and duration in the case of the fade in/out). Just try out the classes, look at the methods and constructors and try to find out how they work, if to few documentation is provided. Edit: Make sure that your update and render methods work, even if init hasn't run yet. I think the transitions may cause the render method to be called before init. 

I don't know about unity but you mentioned visual studio. There you can usually exclude the bin and obj folders in the project folders (in some project types, the bin folder also stores assemblies from included projects, but I think this only applies for certain type of web projects). Also do not check in the ".csproj.user" and ".suo" files. Those two types include user settings. If you check those in, then all user settings will be reflected on the other machines, when you update the source. This is quite annoying, as those settings are not build or project relevant but more to configure the ui, editor etc for each developers individual needs. 

Now, when the player presses a key to build the object, you have to do 2 things. First set the players state back to MODE_NONE, because he completed the action. As second, you create a StaticObject with the building material and add it to your GameObject list. This object is now independent from your player and stays at its place, even if you move around. A short abstract, how (parts) of my Game or GameState class would look like, using the examples from above: 

If using slick2d, you can make use of the Vector2d class to do most stuff for you. Have a velocity variable (of the type vector2f) in your entity class. Then you can do something like this: 

If you just want to target desktop and android devices, you can use the same networking library, as long as the library supports android. Kryonet is a networking library, that works both on desktop and android, and it is very easy to use (just look at the example from the page). If you want to implement networking also for HTML5 games, you would most likely need a different solution. A way to go could be working only with byte streams/arrays and implement the protocol for both javascript and java. I think Node.js has networking functionality and enables sending and receiving byte streams. This would be a more low level approach to networking, in contrast to the kryonet solution.