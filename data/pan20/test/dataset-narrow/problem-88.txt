If the PC1 NIC is VLAN capable you need to configure it (or rather the virtual instances) exactly like its respective uplink port. Each VLAN is a distinct subnet and requires an IP address from that subnet. If you want VLANs 4 and 5 to be private for PC1+PC2 and PC1+PC3 you'd connect PC2 to a VLAN 4 untagged port, PC3 to a VLAN 5 untagged port and PC1 to a port with VLAN 1 untagged, VLAN 4 tagged, and VLAN 5 tagged. If the PC1 NIC isn't VLAN capable you can only connect it to a single subnet. You'll need to add NICs for the other VLANs subnets. 

Intially, the first twisted-pair Ethernet 10BASE-T (like its predecessor, StarLAN) was designed to re-use existing telephone cabling of the then commonly installed category 3. Existing cabling and patch cable contacts had 1:1 pinouts, so the required crossover between sender and receiver was incorporated into the devices: edge nodes (computer NICs, routers) should use the "MDI" pinout, while hub nodes (repeater hubs, later switches) should use the swapped "MDI-X" pinout. This worked out fine unless you had the requirement to connect two end nodes to each other or alternatively, two hub nodes - remember, LANs were very small back then and this was a somewhat rare problem. These like-to-like connections require to do the receiver/transmitter direction swap within the cable - a crossover cable. Today, this is mostly a thing of the past: with the Auto MDI-X mechanism, twisted pair connections are crossed automatically as required. Note that with fiber, it's exactly the other way around. Fiber didn't become popular until networks were well established. Fiber deployments and patch cables are generally crossed. In nearly any scenario you'd have an odd number of fiber segments (e.g. switch - patch - building - patch - switch, or switch - patch - building - patch - building - patch - switch) which results in the the desired crossover for sender and receiver to work. 

Use a new VLAN for IPv6 isn't necessary. IPv4 and IPv6 can coexist perfectly in a single L2 segment. On Ethernet, each uses its own Ethertype and mixing them up somehow is literally impossible. Introducing IPv6 may be a good occasion to review your network layout though. Security implented by ACLs will need a redesign anyway, so maybe a new VLAN may be a good idea after all. PS: With your -EDIT- the question changes substantially. It isn't really about IPv6 and VLANs but "Do we need VLANs at all when we have SDN?" It depends. Possibly, you don't software define your whole network at once and still need to run parts on VLANs. Additionally, implementing zoning by port groups alone may be complicated when you can't simply put a port into one zone or another. What it all adds up to depends on your SDN model and architecture, so I'd say there's no simple answer. 

Since this is still open: the 2510 doesn't support DHCP snooping nor ACLs that could be used in a similar way. can be used to prevent communication between client ports, seemingly stopping rogue DHCP servers - but this will only work on a single switch. Interconnecting 2510 switches through (obviously) unprotected ports opens the opportunity for rogue DHCP servers across this interconnect. You'll need an uplink/interconnecting switch with better filtering capabilities. 

The outer label is used for switching within the MPLS tunnel. The inner label is ignored while in the tunnel - currently, it's just payload to transport. Once the encapsulated payload reaches the destination network, the encapsulation is removed and the original frame continues on as before the tunnel. 

A broadcast frame is forwarded to all switch ports but the one it was received from. When several switches are connected to each other the broadcast will eventually reach all ports in this broadcast domain. That is unless you've got VLANs set up. VLANs separate the network into distinct broadcast domains that do not communicate with each other on layer 2 (very often your Ethernet network). You can communicate across VLANs through routers on layer 3. 

If you've got VLAN 99 "T"agged on Netgear port 28, you need to have it tagged on the SonicWall X2 as well - alternatively, "U"ntag it on port 28 and it'll most probably work. As it is, the VLAN 99 tagged frames are dropped on the SonicWall X2 port and the WiFi clients can't get to the router. 

I guess these aren't the answers you expected or hoped for, but with unspecific questions you can only get general answers mostly. 

Efficient in comparison to what else? The main point for PMTUD is to get rid of in-flight fragmentation which is costly on the routers. Routers need to be lean and efficient to keep up with the traffic demands. 

Usually, you build your network in a tree topology. You've got one or more central switches around which you group the access switches around which you group the distribution switches. With a single central switch it's the obvious root bridge. With two for redundancy I make one the root bridge, the other the fall-back root bridge. $URL$ 

I've done a bit of research/testing as I was trying to set up decent packet capturing: as documented, VGT (port group with VLAN ID 4095) forwards all VLANs from a vSwitch (and probably dSwitch as well) to the VM. However (poorly documented): in Windows, both VMXNET3 and E1000 will - by default - receive all frames from all VLANs but both will also remove all Q tags. Frames being sent out remain untagged, so they'll go to the untagged VLAN on the physical switch. When you configure a VLAN ID in Advanced Settings on the vNIC, the vNIC starts to filter, only receives frames for that VID (untagged), and tags all outbound frames with this VID. This is exactly the same for VMXNET3 and E1000. If you install the Intel PROSet utilities with the E1000 vNIC you can set up virtual vNIC instances inside the guest that each provide connectivity to a single VLAN (just like on a physical machine). Therefore, accessing the full trunk and seeing the 802.1Q tags in packet capture doesn't seem possible in any way in Windows. My impression is that this is a limitation of the virtual vNIC hardware/driver/OS and not of the vSwitch. Linux and FreeBSD on the other hand have native VLAN support, using subinterfaces for each VID. My guess is that with VGT you could actually access the VLAN trunk and see the tags in captured frames. I'll try this some time and keep you posted.