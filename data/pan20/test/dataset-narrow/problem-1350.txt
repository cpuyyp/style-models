I'm rendering model at the origin with a fixed camera looking at it positioned on the z axis. I want to be able to rotate the model up/down and left/right. Currently I have 2 variables, and . When calculating the world matrix I rotate about the Y axis by and about the X axis by . The variables are controlled by pressing up/down/left/right arrow keys. The problem I'm having is that the rotations are happening relative to the object. Lets say it's a model of the world. Pressing Up a bit would let me look at the north pole. Currently when i press right the earth spins infront of the camera on its axis; I'm still looking at the north pole. How can i get it so that no matter what rotations are currently applied i can always rotate my model relative to the camera/world axis? 

Your best bet is to ask on the App Hub forms. I'm speaking from what i know about releasing xbox games. You can release a paid app and set up the payout later. You'll get any amount earned so far in your first payout. Yes, physically mail the W-8 form. For any other things to know, search the forums at $URL$ 

You probably won't find documentation available that's as good or better than MSDN, any specific questions / problems, search here and elsewhere online and if you're still not sure post a question. That said, take a look at the Education Catalog at the App Hub. While not documentation, it provides many samples and lots of useful information. Also, take a look at Shawn Hargreves' blog, there are many interesting posts relating to XNA. There's also an index of older, useful posts. 

I'm making a multiplayer 2D game where each player has an entity that they can move in any direction. This will be local only, so split screen. Typically the player controlled entities will be in close proximity to each other. What I would like to do is have the screen get split only when players are far away - i.e. when it needs to. See around mid way through this YouTube clip of Mari0 for an example of what I mean. See this clip of Super Mario Bros X (sorry, it's a bit of a low FPS) for an example of horizontal & vertical splitting. There starts off being a single viewport (or maybe 2 rendered to look like one). Then, as the players separate, either vertically or horizontally it splits the screen giving each player is own viewport. How would I go about creating this effect? (managing the viewport merging/splitting etc) How about extending it to work for up to 4 players? (is that even possible?) 

Currently I'm using XNA's to load my content. For the unfamiliar the deserializes classes from disk and keeps a reference for future requests. I'm currently facing a problem with management, where for some resources I don't want to deserialize them repeatedly (e.g. a texture) but for others I do (e.g. destructible level geometry). As it is now when I replay a level I get back the original class with the player's changes. For this reason I decided to inherit from to provide some way of re-deserializing a resource to get a new copy (probably using the method). Now I'm thinking about how I should manage this. Ideally I want some way of saying you can re-use , but not (i.e. when a is requested it always deserializes a new instance). While I think about that I'd also like to create my custom with a view to get other niceties such as automatic unloading, on-demand or in advance loading of assets, pre-loaded place-holder assets etc. How is this sort of class typically designed and how can I overcome my immediate problem (reloading particular types and re-using instances of others)? 

Now we need to get from the content type, to the runtime type. First, lets create the class that writes the file at build time: 

I think each of my ideas have pros and cons and there are probably several other ways of approaching this general problem so I'm interested in finding out what solutions are out there. 

Although normally you'd have a 'Press Start' screen and only use that player's index. The code for that could look like the above. 

I'm using reflection to create a manifest of all assets, strongly typed. It's working fine for my own types: I get the type of the asset, if a processor is ran on it I get the output type. Then I check to see if there's a applied to the type. If so, then I get the value and do a to get the type back. The problem I have is if the type is (for example) as that doesn't have the . How can I go from a representing to a representing ? I know I can just check for as a last resort, but how to I get the namespace qualified type so I can get my object? 

You are creating a new object in your command, since that's not your original game object, calling on it does nothing. Usual practice would be to pass in your existing game object in the constructor of your class. I'd also avoid creating a new object every loop of . Create it once and re-use it. This particularly matters when developing on the xbox (i guess you are since you're using a gamepad, not keyboard) since the garbage collection engine isn't as good as the PC, so you want to reuse objects as much as possible. 

I have a pixel shader that calculates a mandelbrot fractal. It uses the standard formula: z = z2 + c I'd like to extend it so the power z is raised by varies. To do this i have the following function: 

I'm using component based design and am at the stage or re-factoring simple player input to be data driven. Currently i have a , which an entity has if it should be player controlled. Currently only a single entity has this. I have an that acts on entities with , and components. Below is the code that actually does the entity creation: 

The first thing, is to create a Content version of this class in a seperate project, that will references the project with the runtime type and will be referenced by the content project: 

I want to get to the stage where I can have an XML file that indicates some how that a given entity will create a new entity based on a given template and set initial values such as position, direction and velocity in the above example. I want to avoid having to change code and maybe add systems and components for each type of thing I want to spawn. For example, currently if I wanted to add the ability for an enemy to spawn a missile I'd need to define my missle entity template (fine), create a new component to mark the entity as being able to fire a missle, then create a system that uses that component (want to avoid), then create a system with code similar to the above (want to avoid). As another example, say I want to change the speed of the bullet, currently I do that in code, but I want to be able to do that in a data-driven way. How can I create and manage a way of creating an entity based on an event occuring, with properties based on the entity that created it? i.e. Player presses Fire, bullet spawned at ship location, moving away from ship. 

It's probably worth going to the Creators App Hub. Take a look at their samples for standard ways to lay code out. Particularly the Game State Management sample. 

If you want to avoid adding attributes to your classes (required for automatic reading/writing) then you'll want to implement a ContentTypeReader and ContentTypeWriter 

The problem i've got is the xbox does this really slowly compared to squaring a complex number. I'm thinking it's partly because of the increased number of instructions, but mainly it's using trig functions (cos, sin and atan2). I tested this by adding a single atan2 within the for loop and it's visibly jerky, whereas before it was getting a good FPS. Can i use texture lookup to speed up / replace the , and calls? If so, how? 

You could put your shared type in another project (game library) that is referenced by your content pipeline extension project and by your game project. You might like to create and classes, and have your content pipeline use those, with your game using your and class (that way there's no need for an extra project). It's what's done often for classes that use the graphics device in some way (Texture2D and Texture2DContent for example). 

You need to get a device first using StorageDevice.BeginShowSelector In the Async callback of that method, you can assign the device to your variable. Only then can you call methods on it. See Getting a StorageDevice Asyncronously (MSDN). 

Note the order we read things in. Also note that the first thing we read is the string that correspond to the property. As the runtime type in this case is , not I need to do some simple translation. Ideally you want any translations like this to be as minimal as possible, as unlike anything before, this will run when the game is loading. 

You could create an abstract class that represents a moveable pad, then your class would have a list of these s. The class could have an implemented draw method if that was common to both, and an abstract method. You'd derive your 2 concrete classes and from which would implement . 

I'm managing my game state by having a base class with a method. I then have (basically) a stack of s that I render. I render the bottom one first, as screens above might not completely cover the ones below. I now have a problem where one changes render targets while doing its rendering. Anything the previous screens have drawn to the backbuffer is lost (as XNA emulates what happens on the xbox). I don't want to just set the backbuffer to preserve its contents as I want this to work on the xbox as well as PC. 

The approach I would go for is to have 2 different structs (or classes). and . You could then add an as a property/field of your which is what gets placed in the player's inventory when the world item is picked up. You'd want a method somewhere (on the player class, or either item class) that handles adding an inventory item to the player's inventory, to deal with stacking like items. 

Check out how PixelJunk Shooter did it (including simulation) in this presentation (PDF) at GDC2010. 

Yes that will work, although if it's just simple XML->objects you probably don't need custom writers/readers at all. See: $URL$ See also: $URL$ 

See also: What Is Content? (MSDN) Using an XML File to Specify Content (MSDN) Shawn Hargreaves' Blog Index #Content Pipeline 

I would seriously consider sticking it out with the game state management example. It is a great framework for your first game. If you were designing one that can be re-used, with menu items etc. you'd probably end up with something similar. The basic idea is to have a stack of screens ( is the base screen class, The is the 'stack' manager in the sample i think). i.e. start with a title screen. Pressing a button pushes the main menu screen onto the stack. While any screen is transitioning on, render it as such (menu items can use the transition amount to decided where to render, so they appear to slide on-screen). Always direct input to only the top screen, even while transitioning on (so fast menu selectors can easily get into the game while the menus are transitioning on). Once the top screen is fully transitioned, only render that screen. So during gameplay you could end up with the following on the screen stack: TitleScreen, MainMenuScreen, GamePlayScreen, PauseMenuScreen. In that state, the pause menu gets rendered, and that's the screen the player controls. To 'exit' the screen, simply pop it off of the stack (or start it transitioning off), then it's the gameplay screen that gets input and is rendered.