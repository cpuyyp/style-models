Keep in mind that the Raspberry Pi is still a work-in-progress. The GUI doesn't fully take advantage of the graphics processor yet (it uses the CPU), plus many other little optimizations could be made (with soft-float and hard-float for example). The point is that lots of development is still being done, and if you one of the early owners of a Raspberry Pi (like I was), then you know lots of progress has been made since the initial launch of the Raspberry Pi. 

Now I can view a very slow video of my work in Git. Turning down the resolution helps with the speed. 

It sounds like you have electrical power stability problems. Having a stable power source for your RPi is very important. The USB power converter (or charger) should be capable of providing 2 to 2.5 amps. The rating should be printed on the device. Many phone chargers and inexpensive USB chargers provide only 1 amp or less. If you have a good quality USB power converter and are still having problems, then you may have a problem with your main power source (i.e. wall outlets). That will require a professional electrician to fix. Not supplying sufficient and stable power to the RPI can cause unpredictable and potentially damaging behavior. The SD cards are especially sensitive to power issues and can easily get corrupted. When this happens, you could lose a lot of data. That's why it's always a good idea to have a backup. 

Yes. It makes it easier if you know how to program in a lower level language such as C. To make the stress levels a bit easier to manage for the Raspberry Pi, I would make sure the camera you use is the one specifically made for the Raspberry Pi (it's design is optimal for robotics). 

This may be cheating, but you could use a Zigbee to communicate between Raspberry Pis. There is already a simple add-on for the Raspberry Pi! The well written documentation for communicating between the Pis are here. You can also find out a bit more about this topic on the Raspberry Pi forums. 

Yes. You need to turn on the direct capture mode in the VNC server on the RPi. To turn this feature on, open the VNC Server dialog (on the RPi), navigate to Menu > Options > Troubleshooting, and select Enable experimental direct capture mode. The link above gives more details. 

There is an excellent tutorial in the MagPi Magazine that explains how to Add an Off Switch to Power Down Your PI. You should be able to modify the instructions to make use of the unused button on pitft screen. 

Dimming the back light of an LCD is not as straight forward as dimming simple LEDs. A lot depends upon the specific LCD you are using and the specific circuitry it is attached to. Without the specifics of the LCD you are using, it is not possible to give a specific answer. Some LCDs have a pin that can be used to adjust the back light brightness. Typically this is done using a variable resister to control the voltage level applied to the back light LED. However, it can also be done by PWM, but typically requires a transistor and resister. The RPi is then used to control the transistor which adjusts the current flow to the LCD back light pin. This all assumes the circuitry for the LCD isn't hardwired to a set brightness level. Doing a simple web search on "Raspbery PI LCD dimmer" and the name of your LCD (i.e. 1602) should get you detailed options for your specific LCD. 

It is doubtful that the connections from a cell phone LCD screen would be optimal to use with your Raspberry Pi. That said, I'm positive it's possible. But, why even go to the trouble? With multiple LCDs made specifically for the Raspberry Pi today (some of them touchscreens!), it is more practical to buy an LCD than to salvage one from a phone and use it. Yes, they can be a bit pricey, but unless you are extremely determined to use this cell phone screen of yours, I would recommend to use one of those dedicated Raspberry Pi screens instead. If you aren't determined enough to reuse this cell phone screen of yours, you are going to get very frustrated. 

If the CR2032 button cells don't provide enough current, you could try 4 AAA batteries instead of AA batteries. That should reduce the weight some. 

Based on the information at the RPi pinout site, you connected a bunch of the GPIO pins to ground. The sense hat uses the I2C bus which was not connected correctly. It also uses a couple of the GPIO pins for interrupts and communicating with the Atmel chip(s). The potentially worst thing you did was to short the RPi's 5V pins to ground. So you are lucky you didn't ruin your RPi. Depending on what protection circuitry is in the sense hat, the board MAY be fine. I suspect you may have corrupted the EEPROM on the sense hat. The EEPROM is used to let the RPi know what board is attached and how to configure the hardware. The good news is you might be able to reprogram the EEPROM. Check out the Sense Hat documentation page for the details. 

With Raspbmc, exit XBMC from the shutdown menu (choose exit, not shutdown). At the blue screen press Esc and you will be greeted with a login prompt. The default username is "pi", the default password is "raspberry". I believe you can also press Esc during boot to access the console. Alternatively you could log in via SSH. This will not work on OpenELEC. 

From what I have heard they have a pretty large community. In my opinion it is the closest option to the Raspberry Pi community wise than any other similar device (at the time of posting this answer). 

A simpler solution would be to use . Then function a only has to determine if function b executed by checking the button's property. 

I recommend the Sense Hat. It has several sensors built in to include a magnetometer and IMU. It also has a very nice and we'll supported python library. The library gives you both high and low level access to the IMU data. The led array and buttons can come in useful for headless operations. 

Depending on your data sampling needs, you may want to consider an SPI bus solution. I2C is limited to 400 kHz, while SPI is only limited by the physical hardware and can get over 1 MHz. Yes there are commercially available boards that will do what you want. I recommend using the following search words: Raspberry, pi, analog to digital, hat. The keyword hat helps find boards that are "plug-n-play" ready for the RPi. 

Here is some C code for a server and client. All this server does is send the string "Hello, World!\n" out over a stream connection. All you need to do to test this server is run it in one window, and telnet to it from another with: 

That will force a mode even if the Pi thinks it is not supported. You should only use this if you are sure your monitor supports the requested mode. 

For a list of Raspberry Pi supported adapters, look at the Raspberry Pi wiki for verified USB wifi adapters. I would put the list in this answer, but it is too extensive. If you scan through them you can easily find a cheap one. 

The second line of your error message tells you that you need OpenSSL If it's already installed then set the environment variables as mentioned in the error message. Otherwise you need to install OpenSSL 

I would recommend checking out the rPython package. It will allow you to make calls to Python code and functions within R. Therefore, you should then be able to use one of the many Python GPIO libraries with your R code. 

As suggested in the comments above, I ran a simple test using two copies of the same data logging program and found that both programs are running fine side by side in the background. While I haven't tried the specific scenario posed in the question, the fact that two programs accessing the same set of sensors is not having problems, I suspect the originally posed scenario will also work equally well. UPDATE: I also tested a scenario where two separate programs attempted to output text to the LEDs. Both programs executed "normally". However, you could see the competition between the two programs as the LEDs flickered between the two messages.