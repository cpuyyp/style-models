First, I will describe my university's program, and then I will give my thoughts on its efficacy as a participant of this program. My university makes a distinction between the general "University Honors" program and specific "Honors in the Major" programs. Students are invited to the honors program based on particular GPA requirements, which then need to be maintained to remain in the program. You can complete University Honors without completing Honors in the Major (although the latter fulfills the second criterion for the former, which I will elaborate on below), but not the other way around. Honors in the Major has specific requirements for each particular major (although almost always means writing a thesis on some form of undergraduate research), whereas University Honors is standardized. The criteria for fulfilling University Honors are two-fold: First, the student must fulfill 12 semester hours of honors courses. This can be done in several ways: taking specific honors courses/seminars (which are intended to provide a broad, liberal arts education), courses in their major which have been designated as honors, or as you describe, contracting a course to count for honors credit. This entails approaching a professor and agreeing on an honors project to complete by the end of the semester. The other criteria that must be filled is what is called "experiential learning". This involves getting "12 semester hours" via doing things like participating in undergraduate research, getting internships, being a TA, etc. It's a fairly extensive list, with each particular experience counting for a different amount according to the duration/time commitment involved. In my experience, I think the latter portion of this program is much more effective than the first. It incentivizes students to apply themselves beyond immediate academic rewards, a trap that I have noticed many honors students fall into -- obsessing over their GPA at the expense of everything else. The first is relatively trivial -- the requirement can be fulfilled during a single semester, and often is -- and honors courses are not excessively difficult when compared to their regular counterparts at my university. I think the purpose of an honors program should be aligned more towards the second criterion if the intention is to create exceptional students. If the focus is mostly on courses, you risk trivializing the program (in my case) or burning out your students through excessive work (in your case). I think putting the emphasis on ensuring students apply themselves, rather than just taking more difficult courses, is a better model for developing students personally and professionally. 

Some background info I've studied CS and was briefly a TA. I had to submit exercises in Java written in pen on paper. I also saw the exercises submitted by other students. None had even a correct number of opening and closing brackets, let alone other typos. My other background is in printing and typography. Having worked for a while in a publishing house, I assure you that the number of mistakes in mathematical and programming-related books is astronomical when compared to regular prose. It is not humanly possible to verify handwritten formulas in reasonable time. Every single textbook I had on subjects like math and CS had dozens of mistakes that I was able to discover, and the denser the material, the more mistakes there were. There are prominent mathematicians like Vladimir Voevodsky who try to change this situation by developing better foundations for automating proofs. I believe that this is the way to go. 

I'm adding my answer to already huge list of answers, but I believe I'll add something novel, not listed above: C language semantics is a mess. It is not your students' problem. C is mostly an imperative language, but because the authors didn't care to stick to one paradigm, they introduced a cross-breed of incompatible paradigms (mixing in some declarative style). In a proper imperative languages like Forth the problem simply doesn't exist. Even remarkably poorly designed Basic and Matlab had solved this problem better: they use the same imperative style, and assign values to some variables. So that you are never tempted to write something like . You want to solve this problem? Use a better, more consistent language. I understand the need to learn C, as it is an industry standard today, but it would be also wise to invest into the future by educating the students about why this language shouldn't be the industry standard. 

Bottom line I strongly believe that public presentation is only warranted when the amount of work to be presented is so vast that a synopsis is indeed helpful. Subsequently, I don't believe in immediate feedback, and especially not one produced under peer pressure. Ideally, I'd have a seminar, where students present the results of their research / lab study, followed by an assignment of groups of students to study the results being presented, followed by another seminar where the "study groups" critique the works they were assigned to. 

Harvard's grading policy for CS50 is worth looking into. There are four components for the grade on problem sets (each of which involves submitting code). The overall grade is calculated as scope * (3 * correctness + 2 * design + 1 * style) Scope: to what extent does the code implement the features required by the specification? Correctness: to what extent is the code consistent with the specifications and free of bugs? This is done by the check50 autograder, and it's essentially unit testing. Style: to what extent is your code readable (i.e., commented and indented with variables aptly named)? there's a component for formatting: I think in Harvard's case these marks are awarded by teaching assistants, but basic static analysis or linting might suffice. Design: essentially, is this good code in terms of clarity, efficiency, logic, elegance - again, Harvard use TAs to award these grades, and it's hard to see a machine (or an inexperienced grader) being able to award these marks accurately any time soon. If you were determined to use automatic grading, I guess you could do something with run times for test data or the more sophisticated forms of static analysis. A compromise might be the use of peer-assessment and a detailed, criteria based rubric: peer assessment might have other benefits. 

We're introducing some aspects of parallel processing quite early on in Scratch. Each sprite has its own script which appears to execute in parallel with those of the others. Scratch has a broadcast and receive message protocol, and support for shared as well as private variables and lists. Children might encounter this in a maze game, perhaps programming a number of similar ghosts to chase the player's avatar. It's also useful for agent-based modelling, e.g. the spread of an epidemic through a population. Of course, it's not true multi-threading, as all of Scratch runs inside Flash, inside the browser, on just the one core, but I doubt those using Scratch will be aware of, or care about, the distinction. This does, though, lead to potential difficulties in 'graduating' from Scratch to a text-based language such as Python - young Scratchers who've been used to programming in parallel in Scratch can find it hard to adjust to doing just one thing at a time in introductory Python programming. 

Here's a personal story. It's about various art schools not CS, but the situation is similar, I believe. While in high-school, I also studied in art school. The teacher in the art school was a renowned professional, I believe he even had some awards from the ministry of education (we are talking about socialist style education). As part of our activities in the art school we were supposed to learn to talk about what we were drawing. (Artists are also expected to produce statements...) The unfortunate reality of the trade is that the bizarre blabbering of the artist about her work is what makes all the difference, not the quality of the said work. In an effort to teach us to do this, the teacher required us to start with something like bringing a stool in the middle of the classroom, standing on it and announcing own name and some other personal details, like hobbies etc. Some kids in the class seemed to enjoy the activity. I wholeheartedly hated it. I thought it was stupid and pointless. I also believed that people should judge artists' work on its own merits, and that using words to describe an art piece is by definition worthless, because would it be possible to use words to describe images, why go to such length as to create those images in the first place? This practice was novel and quite in contradiction to the education system which emphasized modesty and objectivity, thus seeing such attempts at entrepreneurship as outright evil. I went to college first in the post-socialist country, then in a country which had no such past, and was basically copying all of its education system from the States. Now commenting on peers' work was a requirement rather than some extravagant way to spend time in the classroom. However, what I also learned was that peer criticism was anything but objective. In fact, social dynamics in a classroom would distort the feedback so much, that it would be much worse than no feedback at all. Regardless of the quality of their work, prettier girls would get much better feedback than boys with unremarkable appearance. Students who previously received positive feedback from a peer would feel socially obligated to repay the favor. Some people learned to exploit this simple behavior more than others... Not to mention that typically, there were a handful of bright students per classroom, who would either deservedly steal the show from the rest, or would be in opposition, and thus get no (useful) feedback what so ever. For long time I believed that peer criticism was just a bad practice created by people who never cared to verify how well it actually works / the problems it creates. However, as an adult, I went to school once again, now to study CS. Here, the situation changed: the amount of work a student is supposed to produce and the difficulty of communicating the results of the research is such that it certainly justifies a brief oral introduction. It doesn't feel stupid and the social pressure, while still there, faded into background since it no longer has this strong influence on the reception of your work.