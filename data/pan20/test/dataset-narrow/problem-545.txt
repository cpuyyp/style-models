I don't do any Windows development, so I can't comment on the part being safe. The one thing I would say though is to ensure you are using the proper types for everything. For example, returns a (most likely a , the constructor also takes a , but that one isn't as big of a deal). It probably won't ever bite you, but it is something to be careful of to ensure you don't have any overflows in other code you may be writing. 

One thing I would personally do would be to move the string concatenation into its own function since I see you have repeated the same 2 lines multiple times: 

Looks fine. Don't worry too much and end up over-engineering a simple solution :) Edit: Actually, I would make the parameters to into const references. 

In most of the Python code I've ever seen, there is normally a main function defined that you call from the condition you put to establish the script was executed and not imported. I believe that's the standard way of doing things in Python, but I don't believe its actually a written rule anywhere, though that is how they do it in their docs as well. 

Just as an exercise in making the code easier to read, I'd recommend better variable names. I can figure out what "wild" and "mark" are, but it should be immediately apparent to me so I don't have to spend time trying to figure out what they are. Also, I'm assuming you are going to eventually handle URLs with "?" and such in them. You may want to consider checking for invalid characters in the URL so you know when you hit the end of the actual request path. 

You're saying something similar here: "give me a and I give you a ". It's better if you want to have a concept of a variable that you'll later pass around or reuse. 

Replace all by . When you're not using the second argument, you don't need to discard it explicitly. 

If you can't guess, try it; it's a good way to learn =) Anyway, you don't want that to happen. So you can do this several ways. Before I'm going into two idiomatic options, let's talk about your interface definitions: 

why not: log.Println("fetching from hacker news", fmt.Sprintf(newsUrl, i)) Using everywhere makes your code not very resilient. Maybe it's worth looking at "what can fail for transient reasons" (typically, database transactions…), and re-try the thing that failed a few times with exponential backoff. There's lots of whitespace in the "what stores the data" part, which isn't very idiomatic. Empty lines in functions aren't really frequent. 

I put zeroes outside the func, to avoid converting it over and over. You still have a few conversions & allocations, but there's no way around them. The other functions can be modified easily to accommodate the type change. 

(That said, I'm not convinced it matters — the compiler should probably optimize this anyway.) I tried it and was very surprised to see that the benchmarks were still very poor. Turns out, you called the wrong function in your benchmark :-) calls insead of . Retrying it with this fixed leads to the expected result: 

Yes, this is the way to do error handling in Go. By design, you can't let exceptions propagate to the callers "silently", you have to consider what makes sense at each step. I found that on large-scale projects, it makes it significantly easier to predict and test the error handling behavior of your code. It also forces you to put the error handling first, which (imho) results in more readable, less nested code. Truly global variables don't exist in Go — if a package exports a variable , other packages will have to call to access it. That being said, it pretty much never makes sense to do that. In the example you gave, cmd.go and project.go are in the same package, and all package-level variables are shared, so identifiers conflict. If you want this variable to be shared, it's more readable to put all functions that use it in the same file. When you want to mock some of your functions, it's the sign that there should probably be an associated interface. You can then "mock" an interface easily, by re-implementing your interface in your tests and making it do whatever you want. I find this more readable and idiomatic than using complex frameworks. 

All of these recommendations will result in much cleaner, easier-to-maintain, and more semantic markup. I hope you find some or all of them to be helpful! Much luck to you. 

Oh yeah, and you don't have to worry about it when the nav isn't collapsed, so you don't have to listen for the resize event or anything. 

Actually, there's sort of a built in way to do this. Just attach a click handler to the links in your .navbar-nav and call the collapse hide method on the navbar-collapse class: 

There are a couple of potential "gotchas" in your markup. These things will come back to haunt you (or someone else in the future) when you need to maintain and update the site. Let me explain a little about the Bootstrap grid so that you'll understand why I'm recommending the changes that I am. The grid works with 3 parts: a container, a row and column(s). You already know that, but take a closer look at how and why it works like that: The container, both in the .container and .container-fluid, has 15px of padding. The row negates the container padding with -15px of margin. Columns have 15px of padding, which pull the content away from the edges of the container and create a consistent 30px gutter. The purpose for adding 15px of padding that is only negated by the negative row margins seems silly, but it is essential to allow for nesting columns inside of other columns! Note in the diagram below how the nested columns indicated by the red outline fits neatly into the enclosing column without getting additional padding applied. 

It's very simple; what you're saying here is "give me a , I can give you n random values from it". Option 2: 

the line containing your query is long and not easily readable, maybe skip more lines you can write the skeleton to your query once, instead of using successive appends — this is also more efficient if you have many services the call to can be avoided using a simple condition in your template you can replace directly by its value, that you previously computed in your Go code and you can get rid of the variable that you pass to & , just do all the substitution logic in the go code. 

And, no, there's no easy way to have something more dynamic that , unless you have a specific use case in mind (and then, you would use an interface, but this is out of scope for this question). See this for a detailed discussion on why Go doesn't have generics for now. 

It doesn't seem that the library has a query builder or a specific type. So building a query in an idiomatic and readable way should be done as you would do for a normal string, and that is using the package. This will allow you to get rid of many code smells: 

In short: your method should be two lines long, your method should be three lines long, you shouldn't have more than 2 global variables, and all errors should be caught on . 

you could also write but it's not that important. Now, the rune/string/byte question is the interesting one. deals with only; and converting strings to bytes and back is expensive (new memory allocations each time). So I'd change your code to use instead of , and instead of . The function becomes faster: 

For this reason, in my mind, it makes more sense to add the additional padding to the body. Then both the container, and container-fluid class work as normal. Also, you can eliminate all of the extra unnecessary container-fluid divs on the page, only one is needed. This will make it a whole a lot easier later if someone else with Bootstrap knowledge needs to work on your site and it will keep the markup to a minimum. The next thing you can do to streamline your markup is remove all of the col-sm-12 classes from all of the places where you have both col-xs-12 and col-sm-12. This is unnecessary. Think of classes as additive. If you want your design to behave the same from one breakpoint to the next you don't need to add a col class for that breakpoint. While you're at it, you can remove some of the extra rows. The only purpose for the row is to break up the content where you need to ensure that the floats are cleared. So, in this case, you can use one row for your main content and just add the row class to your footer tag. In keeping with the some of the key recommendations as the previous post, you should also remove the invalid markup, use the proper semantic tags for headings and style the html selectors instead of adding unneeded classes. So now we're down to what to do about those images. Two things need to happen: 1. At all breakpoints images need to expand beyond the padding and touch the edges of the screen; and 2. If the images are set into columns that don't span the full width of the screen, the far left and far right images need to retain their inside gutter. To accomplish this you can wrap the images in a containing element and give it some negative margin, just like how rows work. In keeping with the mobile first approach, I created three classes: .col-img-full, .col-img-left, .col-img-right, all with margin: 0 -35px; applied. Then I added a media query, to remove the inside margin for just the right and left images with two rules where the left image gets margin-right: 0 and the right image gets margin-left: 0. This makes your design much more flexible! In the event your client/boss/whatever, wants to make a small change and add a third column to the design. No problem and no extra markup or css is needed, just drop your column in the middle with your image and everything still lines up nicely. Okay, finally, let's deal with the navigation. The container-fluid in the middle of your nav was making a mess of things. This is partly why you were getting the scrollbar at the bottom of the screen. Plus, the extra markup was potentially limiting your ability take advantage of some of the core Bootstrap nav features, such as adding navbar-right or navbar-left classes if you want to change up how the elements float. So, I brought everything back to basics and just styled the markup to match how your existing design looked on my screen. I didn't really understand what you meant by "centering the menu" because I see your codepen with the uncollapsed navigation floating left. I made two additional small adjustments to your css for the nav: 1. On my screen the arrows after the links were unaligned. A better way than trying to tweak the padding for those elements from the top and adjust for margins at different resolutions is just to position them absolutely from the bottom. 2. Also, I found that your navigation was breaking onto the next line at certain resolutions, so I added a media query to make sure it stayed put at all resolutions. Here's the final markup: