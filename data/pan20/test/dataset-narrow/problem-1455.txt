This is the question that I ask myself while I code, and it works for many students, but for students who really struggle to come up with good names, the question does not seem to grant much insight. This doesn't mean that I don't use the question, but it has become a last resort. Students who present poorly named variables often seem unable to cleanly articulate what a particular variable is accomplishing. If I'm honest, the fact that this question rarely helps strugglers makes little sense to me (and is rather disheartening), but I have come to accept it as a fact. Going back to my intuition that strong writers create clean code, there could be some language difficulty going on here, but that is only a hunch. For such strugglers, I might help them by having them describe the variable in broad terms, and writing what they say. I will then sit and progressively distill what they have written with them until we arrive at a good name together. Unfortunately, this practice is time intensive and does not scale well, but it works, and I haven't found any better solutions for my strugglers. 

I am particularly interested in experiences from those who have actually taught this in a classroom (though, as always, pedagogic thoughts from others are also welcome). What do you do to teach about the limitations, costs, and advantages of this loop structure? I will put my own answer below alongside the others. 

Or, doing the same thing by moving steps clockwise around the circle instead of moving step counterclockwise: 

1 - All I could find online were a few articles about single studies here and there. This is probably the best I can do for now. 

It sounds like your circumstances may preclude you from doing this sort of work if it causes a hit to your salary, so you may need to carefully monitor the effects of taking these changes, and communicate with your own administration to be sure that any temporary drops in your numbers will be understood correctly (eg. you won't lose your job). Good luck! 

I haven't seen a lot of resources in the US for that age group, though England seems to publish a great deal of high quality KS2 (Key Stage 2, ages 7-11) material. What's particularly nice is the focus on Computer Science concepts and computational thinking over simple programming exercise, even at this young age. Take a look at these BBC Resources from the "Bitesize" Series, which is a series of instructional videos appropriate to those ages). There are also collected resources here, which includes such regulars as Scratch, but also points to some lesser-known resources, such as Code Club, which has projects appropriate for the age in various languages, and Kids Ruby, which teaches kids to program in the Ruby language with guided tutorials. 

(Depending on your compiler and environment, you may have to muck around with the code a bit to get as your output for the second ) If your kids are like mine, they probably won't be able to figure this out. But once you compile it and execute, ask them to go back to their neighbor and try to figure out what in the world happened. At this point, several of the groups should be able to figure out that it has something to do with the ints being stored next to each other, and, if pressed just a bit, that the number was derived using the byte size of an . This gives you a perfect segue into arrays. Since you're taking all of this trouble to go into some depth (using references to get at arrays), I would try for a few takeaways from the lesson: 

One good example is to make permutations of all of the letters in a word of arbitrary length. It's quite tricky to do iteratively, since you essentially have to recreate the program stack to get it done. The recursive solution, however, is clean and clear. Let the students try to work in pairs on an iterative solution for just five minutes. The goal would not be to actually implement it, but just to think through an approach. Then show them the short and elegant recursive answer and help them to trace through it. 

Describe some small amount of code that could be written to the students (like, "imagine we are creating a recursive method that returns the number of even numbers in our linked list", or "create a method that will print the letters of a phrase scrambled by evens, and then odds, so "hello, world" would print "hlo olel,wrd". Ask them to come up with as many test cases as they can for the unwritten method in 120 seconds. (Test cases are hard!) Spend some time writing good student results on the board together. (Did they test for an empty string? A null list? A singleton string?, etc...) Then have them hand-code the method. Give them some tricky code, and have them do a thorough trace-through to see if they can understand what it is doing. 

Pose a challenge to the 8th graders to address a particular world problem. (You should choose the problem). It could be global hunger, or too much partisanship, or not enough kids with access to education. Tell them that their application should address this problem. Give them three research resources that they can use to explore the issue further. Make other projects possible only if they write a few paragraphs about why the problem they wish to address is important, and how they intend to address the problem. They must include a reference to 3 sources about the problem that they want to address. Get outsiders to come in for a culminating event and "judge" the final projects. (The outsiders can be other teachers from your building, your administrators, or true outsiders.) Let the kids prepare a short presentation about their project, science-fair style, and let the judges walk around with a rubric and talk to the students. Having people from the outside world come in is a powerful motivator (and will prevent a lot of the fart-joke responses). Similarly, contact your local newspaper and see if they can send someone in for a small write-up. Give a certificate to the winner, or even a small trophy. As they work, have each student (or group) create small milestones that they must meet. These are the core of the evaluation process. New milestones are created on the same day as the old ones are graded. They must be very specific, and you must agree to them. 

I can't find any indication that summative feedback undoes the good of formative feedback. Where did you see that study? In any case, there is a good summary of strong, replicated findings about summative testing here. The great good of formative assessment is that it provides an actionable point of reflection for students. They can see how they are doing, and they can see how to improve their performance going forward. The term reports you mention sound like a great tool for that first criterion. What is missing is something along the lines of and here's how the student can do [even] better going forward. If I could, I would add this little something to grow on into each Term Report. To be most effective, these items should be directly actionable, not merely general. (e.g. "Study for a make-up for ____ and do a very careful job on our upcoming project" instead of "Have a better attitude and respect fellow students".) 

(This answer is from ImaginationGeek on reddit. ImaginationGeek does not wish to post here, but did not mind if the answer that they provided was also posted here, which is being done in an attempt to add value to both communities:) The responses here seem well intentioned, but have a few faulty assumptions. 

What you have there is an excellent start, and is completely appropriate. I would go next into a puzzle to try to get them hooked. I would type the following code in front of them on your projector, and ask them to pair with a neighbor to try to figure out what will happen next: