Totally agree with Daniel Dib's response towards scalability and other good points. One of the main issues we experienced towards implementing a layered access ->distribution/core solution is spanning-tree. Lets say you implement an access-> distribution/core solution and you have many buildings/floors/departments with many access switches. What we have seen is when someone introduces (accidentally) a spanning-tree loop the cpu on your core goes through the roof (nearly). ALL of the users cannot use their computers, internet, file servers, etc... and the whole infrastructure suffers. To alleviate this issue, I would recommend to implement an access/distribution -> core solution for your zones/buildings. Keep your vlans and the spanning-tree root roles for these vlans on the distribution switches. Lets say you have 4 distribution switches connected to your core(s) and a routing protocol taking care of your internal routing between the distribution and the core switches, should one of the distribution switches suffer from a spanning tree loop, only that zone is affected and your other three zones/buildings continue to function unaffected. That makes troubleshooting somewhat easier :-) 

Now you're cooking with gas! Notice this command uses passwords. (Yes, you can, but shouldn't, use ). The part allows you to bypass user mode entirely. When you log in, you go straight to privileged mode: 

This is one of those things that tightens the sphincter of the security-conscious. Whether it's justified anxiety is again something you have to decide for yourself. On one hand, if you have sufficient access to see the configuration, you probably have sufficient access to change the configuration. On the other hand, if you happen to have carelessly revealed your configuration to someone who doesn't have the means themselves, then ... well, now they do have the means. Luckily, that first line in the snippet above, , is the key to changing that: 

Moving on... You probably already know that, by default, all your configured passwords show up as plain text: 

Ensure that you have provisioned the phone in CUCM for the correct model of phone. I've accidentally cloned a 7940 config when I actually had a 7942 phone and get the "Auth Fail" message because it's trying to pull the wrong firmware. 

$URL$ I followed Jeremy Stretch's post here a while back, moving our iSCSI SAN off a production switch onto a dedicated 3750G (stack of 2). While I can't speak specifically to the 2960S, the tweaks offered in that post seem to be doing well on the 3750G's. I've got a handful of OutDiscards (less than 100) but for 38 weeks of uptime, that seems pretty good for me. This is running 4 ESXi hosts connected to 4 JetStor 1Gbps SANs and all links are aggregated. I'll happily forward a "sh int counters" if you are interested. (Ha! Just noticed it was Jeremy who asked this...sorry for linking your own blog post!) 

This is marginally better than plain-text passwords, because the displayed string isn't memorable enough to shoulder-surf. However, it's trivial to decrypt -- and I use that term loosely here. You can literally paste that string above into one of a dozen JavaScript password crackers on the first Google results page, and get the original text back immediately. These so-called "7" passwords are commonly considered "obfuscated" rather than "encrypted" to highlight the fact that it is just barely better than nothing. As it turns out, however, all those commands are deprecated. (Or if they're not, they should be.) That's why you have the following two options: 

No, you don't -- technically. But whether you can enter enable mode without one depends on how you log in. Here's the instant gratification version: You can enter via the console without an enable password, but you will be stuck in user mode if you use a simple vty login password without an enable password set. Here's the long-winded StackExchange answerer version: Cisco authentication is kind of a mess for a beginner. There's a lot of legacy baggage there. Let me try to break this down in a real-world sense. Everyone that has any business logging into a router or switch pretty much goes directly to privileged (enable) mode. The user mode is basically a front lobby, and serves little more purpose than to keep the draft out. In large organizations where you have vast networks and equally vast pools of labor, it may be justifiable to have someone who can knock on the front door and make sure someone is still there. (That is, to log in and run the most trivial commands just to see that the device is, in fact, responding and not on fire.) But in every environment I've ever worked in, tier 1 had at least some ability to break things. As such, and particularly in a scenario like yours, knowing the enable password is obligatory to get anything done. You could say this is a second level of security -- one password to enter the device, another to escalate to administrative privilege -- but that seems a little bit silly to me. As already noted, you can (and many people do) use the same password, which doesn't help much if someone has gained unauthorized access via telnet/ssh. Having static, global passwords shared by everyone is arguably more of an issue than having just one token required to enter. Finally, most other systems (services, appliances, etc.) don't require a second layer of authentication, and are not generally considered insecure because of this. OK, that's my opinion on the topic. You'll have to decide for yourself whether it makes sense in light of your own security stance. Let's get down to business. Cisco (wisely) requires you to set a remote access password by default. When you get into line configuration mode... 

@NickG - The solutions can be varied but as Ron Trunk and Bobstro mentionned, a secured vpn will work. See this cisco centric link below for setting up a vpn. Note:- You could do it with harware from many other providers, even build your linux router to perform the same level of security/encryption :-) $URL$ 

Without much information to examine your setup, it sounds like a bad implementation of 802.1w. You'd want root 802.1d/w/s on your distribution switch (perhaps your juniper stack) and not your core or access switches. Spanning tree will protect your infrastructure from layer2 misconfigs but it has been known to have taken down the core/distribution/access switches due to some unexpected mishaps. Any connection from your distribution to your core switch could be a point-to-point layer 3, using a /30 if you like and run some l3 protocol like ospf if you have one or many distribution switches to your cores. If link-up speed and/or vendor protocol compatibility are issues, you could create L3 ospf point-to-point between your distribution to your access switches (dell 6348) and leave the access as spanning tree root. That may require some good planning and some capacity for expansion if you implement more servers later on. 

In this scenario, there's no need to use an enable password (or secret.) If you're not yet thinking, "wow... what a clusterfudge that was", bear in mind there's a whole other long-winded post still lurking behind the command , where you get to dive into things like external authentication servers (RADIUS, TACACS+, LDAP, etc.), authentication lists (which define the sources to use, and in which order), authorization levels, and user activity accounting. Save all that for a time when you feel like getting locked out of your router for a while. Hope that helps! 

...and promptly get hacked, but your attacker will end up in user mode. So if you have an enable password set, at least you have somewhat limited the damage that can be done. (Technically, you can't go any further without an enable password either. More on that in a moment...) Naturally, no one would do this in real life. Your minimum requirement, by default and by common sense, is to set a simple password: 

I wouldn't see any point in enabling STP in this situation. STP prevents loops between switches with multiple links. In this case you're using a trunk (in the HP parlance) which will be treated as a single link so STP would not be needed. 

Our current 802.11 setup has a large number of SSIDs to segregate traffic by subnet. This isn't ideal, and I've been attempting to consolidate to a single SSID but use dynamic VLANs instead. This is on a Ruckus Zonedirector 3000 and Microsoft NPS as the RADIUS server. My test clients connect to the SSID, and are prompted for credentials. I can see the credentials accepted on the NPS server, and wireshark confirms the Access-Accept message contains the Tunnel-Private-Group-ID value for the desired VLAN. At this point the client stalls trying to get a DHCP lease. The DHCP server is working, as these are existing scopes and subnets and I can connect a wired client into the switch on an access port for the same vlan and get a lease. Wireshark shows no DHCP broadcast request from the client at all. The switchport for the AP is a trunk, with the VLAN tagged and allowed. Any assistance would be greatly appreciated! Rob 

You should remove the 3750G (not much flash size for future IOS upgrades) as your core and replace it with two 3750X (or better) stacked together. Also implement stack-power should one of the power supplies fail. Make the core your spanning-tree root if not already. All of your distribution switches should directly dual-connect to the core 3750x stack to provide redundancy. Use etherchannels :-) Dual-connect your access switches to the two distribution switches (with etherchannels if you can), that way should one of the distribution switches fail and they do, the network will suffer from a very minimal outage while spanning tree recalculates. Your servers connectivity could be improved by connecting them to a dedicated datacentre switch. Some of the Dell powerconnect switches are very popular and more affordable in some instances. They should also be in their own private vlan. Don't forget to add a good network UPS to your individual switches and servers, should power fail, you would have time to save your data and perform graceful shutdowns if required. There are quite a few more suggestions to add to your design such as QoS for VoiP, etc , but I guess it is a starting point to provide redundancy and uptime to your clients :-) 

The secret version is hashed with a one-way algorithm, meaning the only way to get the original text back is by brute-force -- that is, trying every possible input string until you happen to generate the known hash. When you enter the password at the prompt, it goes through the same hashing algorithm, and should therefore end up generating the same hash, which is then compared to the one in the configuration file. If they match, your password is accepted. That way, the plain text isn't known to the router except during the brief moment when you are creating or entering the password. Note: There's always the chance some other input can generate the same hash, but statistically it's a very low (read: negligible) probability. If you were to use the above configuration yourself, the router will allow both the and lines to exist, but the secret wins from the password prompt. This is one of those Cisco-isms that doesn't make much sense, but it's the way it is. Furthermore, there's no equivalent command from line configuration mode, so you're stuck with obfuscated passwords there. Alright, so we now have a password that can't be recovered (easily) from the config file -- but there's still one problem. It's being transmitted in plain text when you log in via telnet. No good. We want SSH. SSH, being designed with more robust security in mind, requires a little extra work -- and an IOS image with a certain feature set. One big difference is that a simple password is no longer good enough. You need to graduate to user-based authentication. And while you're at it, set up an encryption key pair: 

Had a look at the cs200 switch from the documentation found at $URL$ It appears the CS200 switch doesn't support routing. You will have to create a trunk port from switch1 to the router while on the router connected to switch1, create what is known as router-on-a-stick. See $URL$ My 2 cents for your network implementation, wifi (currently half-duplex csma-ca) is a convenience that is great for mobile users. If you want reliability, stability and performance for your workers, you really should consider wired connectivity (full duplex) as primary. 

Your setup should not need STP but it is there and as the administrator, you must protect your network from the "morons" as Tom mentioned above. There are also some network attacks that will bring down your network... $URL$ Usually you would want to keep STP and it's modern variants (RSTP, MSTP) away from the core(s) and configure your distribution switches as your designated spanning-tree primary and secondary roots. Note:- Your distribution switches appear to be access switches and I don't think they would support an IGP routing protocol such as OSPF to connect to your core switch. This leaves your only core switch (spanning-tree root) subject to whatever nightmares your clients will bring to the network... and you don't want that phone call on a Friday afternoon telling you the network is down while you should be going fishing for the weekend!! There is a bit of work to do to protect your clients from themselves and you may have to do it in approved Change Management windows (ITSM) At the root trunks investigate "spanning-tree guard root" and other features such as UDLD. $URL$ On the access switches at the switchports, possibly plan to roll out port security and if required "IP DHCP Snooping" and possibly DAI $URL$ If not already, use a syslog server (some Linux virtual machine) to log what happens on your network for if you have to investigate/fix what caused a network outage, it will help.