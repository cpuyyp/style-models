I'm trying to implement zooming on my 2D game. Since it's using orthographic projection, I thought it would be easy to implement zooming. After looking around the internet, I found a bunch of explanations and samples on how to do this if (0,0) is the center of the screen with the orthographic projection. The problem is, my ortho projection has (0,0) at the top-left (similar to XNA/Monogame, and a couple others). I could not find any examples about how to implement zooming to the center of the screen when the center is not (0,0). And help/links/code examples would be greatly appreciated. 

The problem comes when I try to get the Blocks in the maps using a method called , where the last line is . This line returns a Block with completely random values like and such like that, found out through debugging. So my question is, is there something wrong with the blocks being declared as const obejcts, and then stored at pointers and accessed later on? The reason I cant store them as is because that makes a copy of the Block when it is entered, so the block wouldn't have any of the attributes that could be set afterwards in the constructor of any child class, so I think I need to store them as a pointer. Any help is greatly appreciated, as I don't fully understand pointers yet. Just ask if you need to see any other parts of the code. 

I'm trying to optimize my PC game but I can find the bottleneck since every time I run it through a profiler (gDEBugger) it runs smooths. When running outside gDEBugger I get these annoying hiccups. It's not just the graphics, the sound also gets choppy. The drops are inconsistent across runs, i.e, sometimes I run the same scenario and get no drops at all, sometimes I get a few drops, and others the game is consistently slow. The only constant is: when running through gDEBugger I ALWAYS get a smooth run. I'm suspecting something outside my game is interfering and causing these drops, but what in the hell does gDEBugger do that nullifies these drops? A higher process priority? Any ideas? Thanks in advance. 

[EDIT: FIXED - Calling setting texture max level fixed that] I'm optimizing my game and I've just implemented compressed (DXTn) texture loading in OpenGL. I've worked my way removing bugs but I can't figure out this one: objects w/ DXTn + mipmapped textures are not being rendered. It's not like they are appearing with a flat color, they just don't appear at all. DXTn textured objs render and mipmapped non-compressed textures render just fine. The texture in question is 256x256 I generate the mips all the way down 4x4, i.e 1 block. I've checked on gDebugger and it display all the levels (7) just fine. I'm using GL_LINEAR_MIPMAP_NEAREST for min filter and GL_LINEAR for mag one. The texture is being compressed and mipmaps being created offline with Paint.NET tool using super sampling method. (I also tried bilinear just in case) Source follow: [SNIPPET 1: Loading DDS into sys memory + Initializing Object] 

Image Here As you can see, the app.h/.cpp files are in the "\app" folder, but the includes are able to reference things from "\lib" without including "..\lib" to go up a folder, effectively treating all of the source files like they originate in the base folder. TL;DR: How does one include multiple folders from different places as filters, and how do you treat all source files like they originate from the same place. Any help is greatly appreciated, as this will help me organize my project better. Thanks. 

And finally, the maps that I'm using to store references of Blocks in relation to their names and ids are declared as such: 

Here is the code for block.h/.cpp, region.h/.cpp, and CVBObject.h/.cpp which controls VBOs and VAOs, in case you need it. If you need to see anything else just ask. EDIT: Also, I'd prefer not to have answers that are like "you should have used boost". I'm trying to do this without boost to get used to threads before moving onto other libraries. 

Since it points to the line where SOIL tries to access the OpenGL extensions, I think that for some reason SOIL is trying to load the texture before an OpenGL context is created. The problem is, I've gone through the entire solution, and there is only one place where SOIL has to load a texture, and it happens long after the OpenGL context is created. This is the part where it loads the texture... 

I'd like to slowdown music playback, say at half speed. I'm currently using SDLmixer. I assume I'd need to tell SDL that I have a 44KHz music and want to stream it at 22KHz, but when I pass in 22Khz it seems it re-samples my audio and plays at normal speed. Does anyone know how to do that, or any lib that supports it? I'm looking for free libs that allow me a commercial license (so no FMOD) Thanks in advance. 

Then you can see if you have unecessary assets and reduce size of others. You can also strip assemblies in the final build to reduce size. Go to Players Setting -> Other Settings under "Optimization" select .Net 2.0 subset and Stripping Level use micro mscorelib. 

Also I don't understand the "+3" in the block size computation but looking for a solution for my problema I've encountered people defining it as that. I guess it won't make a differente for POT textures but I put just in case. Thanks. 

You can see Editor build log to check which files contribute most to the size of your build. You can open it from within Unity by clicking on the list icon right abot the error icon on console view. (See image attached) 

Check this link for more info on ETC1 and alpha: $URL$ 2. Blending You'll also need to set blending. I don't know how to do that in Cocos2D, but in OpenGL it would be something like this: 

This seems a little too circular for me, and the main problem that I'm not sure will work or not happens if is called. If this method is called, it is placed on the stack and then calls , but this method deletes the calling object. I know objects can "commit suicide" but I dont know if that makes it so the calling object can be deleted before returns. Anybody who could confirm if this method works, or even give a more efficient solution (as I'm sure there is) would be greatly appreciated. 

I'm creating a game in C++ using OpenGL, and decided to go with the SOIL library for image loading, as I have used it in the past to great effect. The problem is, in my newest game, trying to load an image with SOIL throws the following runtime error: 

Where load() just loads all Regions at height "height". But that executes the threads one at a time (which makes sense, looking back), and that of course takes as long as generating all Regions in one loop. I then tried: 

The title may be a little wrong for what I am asking, but that was the closest I could think of. My problem is I am making a game that includes a class and a class. the class contains a in order to keep track of all objects that are in the world. On the flip side, the class has an as a unique ID, and a to the world that it is currently in. When it comes time for the object to be removed from the world and deleted, I made it so that can either be done by calling or . The problem is, I'm not entirely sure how to set up these methods so the object is removed from the map in , and the reference is removed from the object all in one fell swoop. I'm still relatively new to C++, so I'm not very sure how memory management works with deleting pointers and such, but this is what I was able to come up with my limited knowledge: WorldObject.cpp