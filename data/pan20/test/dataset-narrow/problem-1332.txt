I'm currently playing around with a base builder/manager-esque type of game similar to Evil Genius. To build a room I would like to have the following process: 1. Select room type 2. Click and hold the mouse. Drag to create a rectangle over the area. 3. On release, place entire room. I have already implemented this, but I find it inefficient and I would like to improve it. As of now the indicator rectangle is simply a sprite that is scaled and moved to fit. I would, however, like to have the indicator rectangle to be "adaptive". Meaning that if I drag a placement rectangle over an invalid area the indicator will be red at that point. To do this I figured I could go with some sort of loop. I.e. "A change in rectangle size noticed. Update all new indicator tiles with correct colour". I had all the pseudo code figured out, but then I realised instantiating a number of gameobjects would be kinda inefficient. If the player is making a large rectangle in a short amount of time, that would surely slow down the game? Is there any other way to solve my problem, or is this the most efficient solution? I should note that this build system is grid based. Each tile has a coordinate given by two integers and is saved in a 2D array. You can easily access the array and see what tile is at any given point or find the coordinate of any tile. 

(The image has Numbers with capital letters, my fail, ignore that, shouldn´t have the starting letter in capitals) For example, is an array that contains space for 10 ints (numbers). You can access values from the array ("list"): 

Assign each "piece" of cable an state (an integer, for example). You assign each of this states to two sides (Up and down, Up and left(For turns, for example), Left and Right...., all the combinations). (Edit: You can also do this with four booleans, , , , , This might be a lot easier) You then can run a loop checking this state in each piece of cable and determine if they are connected to the left, right, up or down. (They will be conected if there is cable in this position). Assuming (1) is implemented, you only need to check if one of those conected cables is a power source. (For example adding each piece of cable a boolean ) 

As people have said in comments section, A* or (AStar) is a viable algorithm for this, and a good waypoint. Here you have a generic AStar implementation in Java so you can start with something. Please, ask if you have any question. 

Music is probably the most effective way to express feelings. If you manage to use the appropiate song that tells "Danger, run!", that is better than any camera movement (If you combine music with those kind of effects, it gets even better, of course). Imagine playing Silent Hill with david guetta music, that would make Silent Hill a joke, you would laugh at every monster you see. Edit: As some other users have mentioned, a lot of people play mobile games without sound, music is still my favourite option, but the second one would be: 

This seems like a viable option without too much work for the modellers. I have however had some problems recognising the tiles where an cap should be placed. And for situations as shown on the right-hand room would require a near endless combination of caps and walls. A solution to discard the caps would be to make walls with a 45 degree cut on the end. This way there would be a lot more flexibility in placing the tiles and it would allow for special cases found in T-junctions. I believe the current pattern recognition algorithm would not suffice here. In order for it to work I think each tile had to check what kind of tile is around it, not only whether or not it's selected. I fear that this option would require too much computing power as the surrounding tiles may change recursively. Now, the question is what option should I go for? One of the two proposed, or an third option? 

On a tile based strategy game I'm working on the player may select an area in which a room is placed. To do so the player selects the tiles. Either by clicking on each individual tile or dragging from one point to another. An algorithm kicks in and decides how and where the pre-made tiles should be placed. My concern is getting this algorithm working for more complex shapes than a single rectangle. My first approach was to check whether or not the tiles around each selected tile is selected. Using this "signature" the algorithm chooses what tile matches that description and places it accordingly. With this setup I would need 7 models: 

Not as good as using a proper Profiler, but at least I can measure times on runtime, and identify bottlenecks. 

I ended up giving up on GLProfiler. I will keep the question open in case someone knows the answer. Here is how I did basic profiling without GLProfiler: 

I am not experienced in Cocos2D or JavaScript, but using color-patterns is very common on Java game development, and I am sure JavaScript will be almost the same. Here you have an example that does this: -Every static int on capital letters is a color. (Each element in the game is assigned a color) -loadBinary() reads levels.png and creates a new element depending on the pixel color it reads. 

I took this code from cuboc. The game is used as example for LibGDX, it is Open Source and available Here. I´m sorry I can´t provide JavaScript code, but I think this is pretty similar, and fits your needs really well. Ask if you have any questions, please. I hope this helps. (Sorry for any english mistakes, I am spanish, trying to improve my english every day, as well as my development skills). EDIT: Forgot to mention this method is valid, but VERY slow. You should use this to pre-load little levels, reading thousands of pixels on runtime would slow your game a lot. 

I am not sure what you mean with Sensor Listener, but In case you mean accelerometer and other mobile phone sensonrs. You can disable them with this code: