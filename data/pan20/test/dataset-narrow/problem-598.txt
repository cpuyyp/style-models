Consider throwing an error for an illegal slide index passed to , since this function is exposed publicly. 

I guess I am not really seeing what value this class adds above and beyond what and related classes give to you "out of the box". If you need a method or two to perhaps format a date in some specific way to be compatible with Amazon, then perhaps you could extend the base class with these methods. Even then, I still question the value of introducing a whole class to, in essence, do these sorts of trivial things: 

I think your main function name and signature is odd. As noted above, the "payload" is not JSON at all. Why pass one parameter as a JSON string and the other as an actual data structure? This seems to be an incongruous approach. I would probably just pass JSON for both parameters so caller doesn't need to decode one of the parameters beforehand. 

This makes complex queries much easier to read. Don't be afraid to write the query into a variable (rather use directly in ) if this makes your code more readable. And even be consistent in your formatting within query. Your field aliasing seems arbitrary. You sometimes use uppercase for and sometimes don't (I would actually recommend uppercase for everything in query except database objects, columns names, and aliases which you generally seem to be doing). 

Stylistically, I think you have gone overboard in your use of ternaries. It leads to long lines of code that are hard to read and jamed full of logic steps. You also have a lot of variable assignement going on that simple doesn't need to happen. You could REALLY simplify your code to something like: 

The nice side-benefit to this is that now your solution becomes scalable for any number of data elements. 

Why are you continuing to work with the raw JSON string here? You already have a meaningful data structure from the previous line of code. Concatenating JSON together DOES NOT WORK, as you will get an invalid JSON string. JSON is ONLY used for data transport, not as a mechanism to build a data structure. Focus on building an appropriate data structure and then serialize to JSON for delivery. 

You REALLY need to think twice before programmatically setting directory permissions to . Are you doing this because you don't understand how directory permissions work? 

Here you can leverage an index on batch_date for WHERE clause and ordering. You can also totally eliminate having multiple queries as you are getting records for the entire range of dates at once. If you wanted to go with the suggestion from other answer and aggregate information for each date with concatenated results, you could add GROUP BY and GROUP CONCAT to this query like follows: 

Consider using array notation for your data properties, as this will clean up your , , anti-pattern and a lot of your javascript code. I would always take a step back and revisit your solution when you find yourself naming variables, element id's, data properties, etc. in this manner. This is almost always an anti-pattern that suggests you should be using an array. That might make your option HTML look like this: 

I am not a fan of naming your class the same as your library. This class is not a library unto itself, so perhaps there is more specific/meaningful name , , , or similar might be more appropriate and descriptive than . Also, a very small stylistic thing - it is most common in camel-casing class/function names to drop case all but leading characters in acronyms (for example rather than ). This is so that it is clear where acronyms end and "new words" begin. and classes are common examples of this in PHP. 

I don't understand the need to iterate unless itself is an array (meaning in your is an array of arrays). This filtering function will be passed one array element from at a time. 

I would consider applying email format validation before you go through the trouble of making the (relatively) expensive database call. This can also help clean up your list. Consider something like: 

Glad to see you are using an adaptive encryption approach in PBKDF2. You might consider Argon2 library as a more specific use password encryption tool as Argon2 is now the OWASP-recommended password encryption algorithm for new implementations. 

You have a few cases where your lines of code are getting to be pretty long. You should strive to keep code under 80 characters per line, breaking up code across lines as necessary. This helps make your code easier to read. 

Be careful with applying database change logic on a single shared connection. In doing so, you probably need to add "change database" logic everywhere you use this class as you have now introduced uncertainty as to what the state (in terms of which database is in use) of this shared connection is at any point in your overall code execution. You have no way enforce that a particular database is used for a particular use case, without explicit selecting database for each case where this code is referenced. I typically like to go with the approach of spawning a whole new connection for each database that may be needed by an application (this of course assuming your application is architected in such a way that you don't need to absolutely minimize the number of DB connections). You would then inject the appropriate connection to the appropriate consuming code. 

Based on your comment that array entries could have multiple words, I would suggest using to build all array of all words across all entries that do not have have the needle character in them. 

And last but not least. I think you might strongly consider making these API calls in parallel, as that will be the fastest way for this script to operate (though it would consume more memory as a trade-off). Take a look at functions (or a library which can better handle your curl operations rather than you coding them manually). This relates back to earlier point of needing to store curl handle on the class such that each individual call to method (or the wrapper methods). To implement parallel calls you would likely need to store handle on the class, with each iteration of this loop adding a new curl handle to the multi-handle and returning data from each API call to be aggregated by calling method. I will link you to a lightweight class I had written at one point to manage multi_curl handles geared towards a RESTful use case. Feel free to use in your application or for inspiration. $URL$ 

A few final thoughts on style: - Your style is a little bit all over the place, which makes your code a littel hard to read. - Particularly variable naming is odd. PHP tends to use a mix of camelCase and snake_case in most code bases you will find (internal PHP functions mix both unfortunately). Your approach to variable syntax is very haphazard, sometimes oddly putting portions of variable names in upper case with apparent cohesive approach, sometimes first letter is uppercase, sometimes it is lower case, etc. - Your indentations are inconsistent. - You could be well-served by better use of spacing around flow control operators. A line of code like is extremely hard to read. - Consider familiarizing yourself with the PHP-FIG PHP standards, particularly PSR-1 and PSR-2 which deal with aspects of coding style. These are pretty much the de-facto industry standards.