If you download Milkshape, you can import the DirectX file and export it as a Collada, Fbx, or Obj, which can be imported into 3DS Max. 

This solution gives you a lot of long-term flexibility and scalability, it reduces (if not eliminates) wasted space, and is self-documenting (unlike "item_use_data"). It involves a little more setup on the developer's end, but, in my opinion, it is the most elegant solution available for situations where you need to use a relational database to store your data. Generally speaking, non-relational databases are much better for game development, as they are more flexible in how they model data, while being more performant than SQL-based databases - making them a "win-win" choice. Edit 1: Corrected an error with the potion_type_id field Edit 2: Added more detail on non-relational vs relational databases to provide additional perspective 

The ModDB & IndieDB forums have a Recruiting & Resumes section where you can look for designers, artists, and programmers alike. ModDB and IndieDB have the added benefit of allowing you to create a showcase page for your project, where you can attract fans and potential team members. 

Kongregate's "Shootorials" (shooting tutorials) are second to none! They walk you through the process of creating a side-scrolling space shooter from start to finish (they even provide all the assets!). The tutorials were originally written for AS2, but they do provide a link to the AS3 source code here, and a mobile version written in AS3 here. I found that going through the tutorials and looking at the AS3 source code was enough for me to understand what was going on, so I'm sure you'll be able to pick it up in no time. :) 

Understand that although these questions are fairly personal, they just scratch the surface of what any potential investor might ask. I'm not asking that you disclose your complete game idea, just the information necessary for people here to give you answers that are accurate for your situation. Below are some resources I think you may find useful: 

I know serious games have gained a lot of momentum over the past few years, with the growth of the simulation industry, and are beginning to gain more and more attention in the game industry, as serious game developers have started utilizing commercial game technologies. Do I think serious games have a place in today's world? Absolutely! Video games are an incredibly powerful medium, and I think that leveraging the medium to educate, train, and raise awareness of important topics is something we as a community should wholeheartedly embrace. That being said, I do believe there is still a lot of value to traditional education and learning, and that the best use of serious games is as a supplement to traditional education, not as a replacement. Are serious games new? Absolutely not! Although it wasn't too long ago, I remember playing a number of educational video games in my youth - and between you and me, I remember a couple of them being a lot more fun than some of today's supposed AAA games. :P Resources Here are some resources I think you may find useful in your quest for information on serious games: 

Lack of flexibility in the way you model data is a major drawback, because using a relational database forces you to model data to fit the needs of the database, rather than the database accommodating the needs of the model. For example, consider you're creating the model for how you'll store items in a game using a relational database and you decide on the following model: 

Would a noSQL database be suitable for a web-based game? Absolutely! Generally speaking, non-relational databases (such as MongoDB) are much better for games, as they are more flexible in how they model data, while being more performant than relational databases (such as SQL) - making them a "win-win" choice. What are the issues that might arise using a conventional RDBMS? There are two major drawbacks to using relational databases: 

Here is a video on how to export animated 3d meshes from 3DS Max to XNA, using kW X-port, which is a quick and easy way of exporting 3d meshes as DirectX .x model files and loading them into XNA using the SkinnedModelProcessor. 

Write the rules down on paper - Write the rules down in bullet format. This will get your brain thinking about the logic, and will provide you with a handy reference to use later on. Rewrite the rules to follow the programmatic flow - Keep the rules in bullet format, but reorder and indent them, so they form an outline of the programmatic flow. Write the pseudo-code - Using your outline as reference, write out the pseudo code. Create the classes - Make a list of classes you'll need, based on your pseudo code, and implement them. Replace your pseudo-code with code 

The minimum number of people required to make an MMO is one, as demonstrated by LOVE, a released MMO developed entirely by Eskil Steenberg. To see LOVE in action, check out this youtube video. 

Show What You Can Do When looking to start or join a team online, people are always interested in seeing what work you've produced beforehand. The work doesn't necessarily have to be done in a game, but it should showcase your ability to create game quality assets. Talk About What You Want To Do If you're looking to recruit people for a team, talk about the project you're wanting to work on. You don't have to have all the details fleshed out, but it is important that potential applicants understand the scale and scope of work you're wanting to accomplish. As an example, there is a big difference in the programming skill and amount of effort required to produce an Astroids clone and a Bullet Hell style game with online networking capabilities. Read and Follow The Rules A lot of communities that have job/recruitment boards have specific rules about posting in them. In many cases, they require you to fill out a template when posting, to help ensure you hit on all the major pitch points. Be sure to read the rules for each site before you post. Resources Here are links to a few communities you may find useful for recruiting game developer talent: 

For the type of game you are creating, I would say that some form of audio is a must! From a development perspective, I would go with synthetic speech, as the words and sentences are fairly simple, reducing the chances of your audio sounding "robotic". One thing you'll have to pay very close attention to is how the speech system pronounces each word. If it pronounces any word in a sentence incorrectly, you'll have to either "con" the system into pronouncing words the right way, or pick new words. With your target demographic being toddlers, you cannot afford to have mispronounced words in your game. 

My recommendation would be to check out Unity, as it is one of the simplest, yet deceptively powerful, engines I have run across. The engine is well documented, the community is very active and friendly, and there are a number of tutorials available to help you get up to speed. Update: Although Unity has a bit of a learning curve, I chose to recommend it over other engines for a couple of reasons: 

Certainly all these actions are doable, but you won't be the happiest person while you're doing them, and you'll probably wonder, "is there a better solution out there for what I want to do?," when you could design a much more flexible model in a non-relational database. Note: If you are unfamiliar with how document-based databases store information, please check out this link before continuing. The model presented below designed to use similar logic to what is presented in the aforementioned article. 

Without specific details about your game development background, your game, etc, it is difficult to answer your question. Could you please edit your question with details about the following: 

If you're interested in developing games using Lua, I'd highly recommend checking out LÖVE which is a framework for making 2D games in Lua. Checkout their wiki for lot of resources to get you started. :) 

In reality though, I tend to prototype the ideas that I'm most excited about, and more often then not, the idea I end up choosing is the prototype I'm working on when I look up at my clock and realize it's 4am...on a work day. 

Best of luck on your programming adventure! If you have any questions or something seems unclear, let me know. :) 

Members The next thing we need to do is look at our behaviors and think about what pieces of information they’ll need to share with each other. These pieces of information will be our class’s member variables. The members for our car are: 

Have you checked out ClanLib? It is open source, actively under development, and has a fair number of examples to get you started. It looks like portions of the documentation are still WIP, but with the examples and community help, you should be able to make good progress. 

I'd recommend taking a look at LÖVE "an awesome framework you can use to make 2D games in Lua. It's free, open-source, and works on Windows, Mac OS X and Linux." It's clearly not an alternative to the Cryengine, but should certainly demonstrate how to effectively utilize the potential of Lua for entity creation and game logic. Combine that knowledge with how Cryengine/other AAA engines utilize script backends, and you should have all the inspiration you need to create your own engine with robust scripting capabilities. :) I'd also recommend taking a gander at The Game Programming Wiki's table of game engines, which has a column for scripting that you might find useful for your research. 

The engine Zynga uses to build FarmVille is highly custom, but this website links to various isometric flash engines and frameworks you may want to look in to. 

I highly recommend checking out FlatRedBall, as the engine is pretty straightforward, frequently updated, and the development team offers great support. I worked with the A.R.E.S.: Extinction Agenda development team while they were using FRB, and they had nothing but high praise. Here are a few links to get you started: 

Unfortunately, situations like this are where relational databases (such as SQL) fall short, and non-relational databases (such as MongoDB) excel. That being said, it is not impossible to model the data in a relational database, and since it seems like your codebase is already reliant on SQL, here is the model I would go with: Instead of creating an item and uses table, create a table and "[item]_type" reference table for each item type. Here are a few examples: 

I'm not really sure what card game you're trying to create, but here are the general steps I would go through: