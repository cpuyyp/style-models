From doing this professionally for over 15 years, I would say - be very careful! Even if you have a contract in place before looking at the application, some companies are still quite litigious. The legalese I need in place before I touch an app is an annoying but necessary requirement. If your identification of the vulnerability is through entirely passive activities, ie before trying 'confirmation' then you may be in a relatively safe place from a legal standpoint (however I am not a lawyer). The more mature organisations do have reporting contacts where you can notify of issues, and some even offer a bounty (eg Google, Facebook etc) but the majority are nowhere near this level. If you have taken any active steps to confirm a vulnerability then from a target's perspective you look just like a real attacker and they are likely to be well within their rights to use law enforcement and the courts to prevent you doing anything further. From the perspective of gaining new work, it would also put you in a bad place with enterprise level organisations. You are likely to end up on their black list through not going through usual contractual and procurement procedures. 

We have a pretty canonical answer on this on Security Stack Exchange. So much so that it led to one of our top blog posts of all time: $URL$ That post includes a range of actions including degaussing, destruction, manual disassembly, disintegration, incineration, pulverizing, shredding, melting, Electrical scrambling and my favourite: Wanton Destruction In reality though, the simplest option with an SSD is to have the entire device as an encrypted volume and when you want it wiped just lose the key. At that point it is effectively random data. 

I would suggest that although '&' runs the command in background, when you exit your terminal it is still getting sent SIGHUP. You could use the disown command 

@Tzoukos - from your question you are not actually describing an IDS or IPS, but a deep inspection firewall. Snort can absolutely do all that you have described, and as mentioned has a wealth of signatures available for free...but if you are looking for other options, don't limit your search to just IDS/IPS solutions. There are many solutions at all price points from free to staggeringly expensive :-) 

The main one is service accounts, as previously mentioned, however another option is for accounts that may have a very low risk profile combined with an infrequent usage profile - for example an account which is logged into once a year that gives read only access to some non-critical data. If it had password expiry, the user would either write down the password or use the helpdesk for password reset every time. It isn't best practice, but if the risk is low it might just be the right thing to do in this example. 

I notice you haven't distinguished any networks/computer types by risk or by quality of service. I would have a think about what machines on any of your networks may contain sensitive data (medical/personal/financial) and create separate VLANs for them so you can manage and audit access. Universities tend to have a culture of open and free access, but you need to look at locking down access where necessary to prevent fraud, blackmail, data destruction etc. Also look at where your VOIP kit sits - if it is all on purely logical VLANs then make sure the QoS is set for it, otherwise when the networks are busy you will find VOIP unusable. Update on VOIP : VOIP is much more sensitive to latency, jitter and other issues which TCP/IP is mostly immune to. Data packets can arrive at odd times, or even out of order and the TCP/IP stack rebuild the information stream pretty well. With voice traffic you notice jitter or missing packets very easily, and above a really low threshold voice traffic becomes unsuable. You can improve the quality by adding latency (to allow buffering of more packets) but this also annoys users. What QoS (Quality of Service) lets you do at the router level is prioritise time sensitive traffic at the expense of data traffic. Your data will still get through, but as it is more immune to time issues it doesn't tend to matter. But my main comments would be - seriously, get a professional in; that is not a small network, and good luck with it, hope it goes well. 

As long as you provide your devices with individual IP addresses this is a standard setup. If by static IP you mean your public IP, then you need to use NAT to allow your internal devices to communicate (your ISP modem should offer NAT as standard) If you mean your server has a static IP internally, you also need to provide your other devices with IP addresses that do not conflict. Are you trying to use the same IP for server and router? 

A key is orders of magnitude longer, and is not displayed at any point so it avoids these three issues. 

Depending on the hardware, you shouldn't be able to get access to the private key (or for some devices you can through an administrative interface) That's the whole point. If an attacker could get the private key then the security is broken, so the private key will never be transmitted. Your pcap will not have it (or if it does, you'll want to go with different hardware as this isn't secure!) 

If you are manually assigning IP addresses for devices that are on the same network, it is up to you to ensure they do not conflict. The usual route is as @PersonalNexus says - DHCP - which can auto-assign them in such a way that you do not get conflicts. This is the simplest for a large network, in fact for very large networks it is the only practical solution. An alternative, which is very messy (and one I would not recommend), is to have each device on a separate network (and actually run networks to each patch point) - this, however, requires you to set up the router/switch to cope with multiple LANs or VLANs using the same network space so requiring every one to be NAT'ed. If you are haven't had experience managing network conflicts I would suggest configuring a switch to do this may be exceptionally difficult.