I have 2 XP machines sitting behind a router (and it's firewall). I want to share files between them. I've shared C:\ but found the XP firewall was blocking access. I enabled the File and Printer Sharing exception in the firewall and I can access my files. I realise the XP firewall doesn't block outbound connections and that it isn't really needed due to the firewall in the router, but my question is: By enabling the File and Printer Sharing exception, is the PC (doing the sharing) less secure (disregarding the router firewall) than it would be? If so, by how much? 

My Windows 7 install is a bit portly - using well over 6GB. I've tried my usual favourite CCleaner and that didn't come up with much at all. It removed only a couple of megabytes. Any ideas on what can be jettisoned? Any unnecessary files, directories, tools to clean up, apps that can be safely uninstalled or, ahem, optimised? Anything equivalent to nLite or vLite? EDIT: I'm using Windows 7 Home Premium. 

I split an .avi with VirtualDub (file->save segmented file) then turned these files into a DVD using DVD Flick. The result is a two second gap between each chapter. How can I stop this pause so the chapters run together seamlessly (and without the user noticing)? 

If none of the other answers work, you could try Microsoft's Malicious Software Removal Tool, ComboFix or Stinger - all of which deal with common viruses (which is what this sounds like). Google is your friend at times like this too! There's always someone out there who has experienced something similar. 

I've just come across the following Microsoft web page which sheds some light on the question: Command-line switches for Windows software update packages Under the heading, Overview of the installation process, it states: 

So, I didn't need to split the .avi file at all. Instead, just drag into DVD Flick, and edit the title (the .avi file) as directed in the guide before creating the DVD. 

Starting in a normal installation of Windows XP - is there some way to specify when the machine next restarts, it should boot from the CD (e.g. into BartPE)? And then the next restart, the machine boots into Windows as normal? I'm looking to do this remotely without anyone touching the machine or keyboard. 

With Windows, I'd say it'd be impossible to copy every piece of software given the different permutations of file locations, registry entries, registration and anti-piracy mechanisms. Ultimately, it would be too much work. So, I agree with @Zsub, just clone the hard disk. Even if the system isn't that similar, you haven't lost anything by trying it. I realise the following might not be much use now, but to save this work in future, you could use portable apps (e.g. PortableApps, The Portable Freeware Collection) where possible and install only the software that needs to be properly installed. Moving to another machine should be quicker and easier. This has saved me lots of time in the past. Quite a lot of software just works too when you copy it (albeit dumping registry entries etc.) You could take this one step further and place all the portable apps into DropBox too. 

For some reason FFmpeg doesn't support VP9 encoding on Intel's QuickSync hardware encoder, even though they support H.264 and HEVC. A search through the FFmpeg source code repository shows it's not even a matter of it being disabled, the feature just hasn't been implemented yet. But if it does become available at some point in the future, it should be usable in a manner similar to the other QuickSync encoders: a switch like instead of should do the job. FFmpeg command line usage is the same on all platforms, with the one notable exception I know of being Windows users having to use instead of for output during the first pass of a 2-pass encode. But since you're doing 1-pass and lossless this shouldn't affect you. If you want to speed up your encodes the most obvious thing you should try is setting an encoding speed value with the switch. Recommended values are numbers from 0 to 4, with 0 being really, really slow (think in x264 but worse) but high quality and 4 being fast while being lower quality. ffmpeg uses by default which is a good speed-for-quality tradeoff for lossy encoding. However, I just did a quick lossless encoding test with different speed values and noticed a 32% reduction in file size when going from to with lossless encoding. The encoding time tripled though, so whether using 0 is worth it is up to you. The file produced by was only 1.1% larger than the one produced by though, and it was encoded 43% faster. So I'd say that if you're doing lossless and is too slow you might as well use . Another important encoding performance increase is turning on multi-threading with the switch; libvpx doesn't automatically use multiple threads so this must be set manually by the user. You should also set the number of tile columns with the switch. This option makes libvpx divide the video into multiple tiles and encode these tiles in parallel for better multi-threading. You can find recommended numbers for the amount of tile columns and threads in the "Tiling and Threading Recommendations" section of Google's VP9 encoding guide. As you can see, the number of threads used goes up with the number of tiles, which means that depending on the number of CPU cores available your processor might not be fully saturated while encoding sub-HD-resolution video. If you mainly encode low-resolution videos you might want to consider encoding multiple files at the same time. However, there is yet another way to speed up VP9 encoding: multi-threading within a single column tile that can by turned on with . As of April 4 (2017, hello future people), it isn't part of a released version of libvpx but will most likely be in libvpx 1.6.2. If you want to try it out before the next release you need to compile recent git versions of libvpx and ffmpeg from source. Just follow FFmpeg's compilation guide for your distro of choice but instead of downloading and extracting a release tarball do instead. As for the preset, that's only used in x264 and x265. libvpx uses the switch and additionally the , , or options to define how much time the encoder is allowed to spend encoding a frame. The default is because is so slow it's unusable and is meant to be used for time-critical applications like video calls and livestreaming.