I note that there was a time, around 1980, I think, at which you could earn a Doctorate from Carnegie Mellon University in CS, but could not earn an undergraduate degree. The reasoning behind that was that "there was insufficient academic content" at the time in CS, in the faculty's judgement. The doctoral students were, of course, developing that content that could later filter down to a wider audience. 

A recent Blog post by Eugene Wallingford raises the issue that students often perform according to their perception of their abilities rather than their actual abilities. If a student performs better than their "natural abilities" suggest then all is well, of course. However some students do less well than they might simply because they think they aren't "smart enough" to do better. It is a well-known phenomenon, at least in the US, that some students do poorly in math because they have the belief that "I can't do math." Often enough, however it is just lack of exposure or poor teaching that got them to that belief. It might even be a single bad experience. The same is likely true in other technical subjects. For that matter, it may be true in most subjects, but it may also be that the problem is more likely to be overlooked in, say, History. The author of this believes that success comes from interest and hard work not natural ability, but that may not satisfy many students. In fact, saying "you just need to work harder" may increase their frustration, rather than their confidence. Of course a self-perceived lack of ability can easily lead to a lack of interest. The question, then, is: What can the instructor do to overcome feelings in the students that being a CS Superstar simply isn't in their future, and so help them not settle for less than they might achieve? Some ideas might be interesting ways to speak to them, but hopefully many of you have seen this and have creative ways (exercises, teams, ..., anything) that can get a student to live beyond their self-perceived limitations. 

You can write quite a lot of a program in a single statement. The final section needn't just increment or decrement things. Arbitrary complexity is possible. Probably not a good idea to encourage it, however. But students reading code of others may come across it, so should be aware. One use of this is to iterate over a two (or more) dimensional array in a single statement. Because of the complexity, it is probably best to show how it maps to a while statement as suggested in another answer here 

I use them whenever available. The collection knows its members. Just ask it to yield them up. It is a brilliant design. Programs in object-oriented languages like java should not have to all look like C programs, nor should the programmer have to always dip to the level of C to use them. C is a better assembler (for the pop-11). But few programs need that mind-set. My preference is to teach concepts from the top-down. Higher level thinking means (in part) "closer to the language of the problem". Then, when necessary go to a lower level - closer to the machine or closer to the level of the solution. In practice you seldom need to go down the scale very far for students to get it. And you never need to recapitulate the entire history of computing to have students understand how to work in modern languages, whatever the paradigm. 

My personal context is the United States where undergraduates take many courses in many fields with one chosen as a specialty. My examples are from the US of course. However, other places, in which students are much more specialized as undergraduates have, in my view, similar needs: foster a good learning environment for the best students who want to go beyond and can use faculty guidance. What would an "honors" program look like in such a situation? 

A follow up: While I believe that you need to work to teach every student in every interaction (i.e. each class period for this discussion) it is probably beyond our ability to give each student precisely what he or she needs most at that time. If I am Socrates, teaching one student at a time, or if I'm an Oxford Don, teaching 5 student tutorials, I can probably do that, but with twenty to two-hundred students in front of me all I can hope to do is to make sure that each student can learn something that will advance their learning. Even that is a difficult task with mass education, but it can be achieved. Some students will learn more, because they are primed to do so, and some less, due to factors of their own making or otherwise. Teaching everyone precisely the same thing is not an achievable goal unless the everyones are just robots. Help every student advance. Don't favor anyone arbitrarily. 

Actually (a) you don't need a doctorate to do research, (b) most university faculty don't do research in CSEducation, but in CS, (c) most conference committees don't care much about the formal credentials of those who submit papers to the conference. SIGCSE, for example, has quite a lot of work by people without doctorates. However, what you probably do need is contact and communication with like-minded people with an interest and some writing ability. I hope this doesn't become just a list of options, but there are quite a few. 

Much later, I helped design a doctoral program in computing that had many features of the above honors model. Three years, two of study and one of dissertation. The years were calendar years with no breaks and dissertation topics were expected to be ready to go by the beginning of the third year. 

As to the old Mac system, it was Virtual Memory and stuff stored on the disk had to be brought to RAM before being manipulated. It just wasn't a UNIX-like Paged Memory Management System, but a simpler thing. And even Paged systems still talk about swapping. It is pages that get swapped, though, rather than a full application data space. So, the two things aren't as different as you might think. The Mac under OS9 did actually run a bit better with some VM enabled. The only thing I find problematic with the "official" definition is that a student might conclude from it that data on the disk can be directly manipulated there. It doesn't actually say that, but a student might get confused. Be honest. Be complete. Warn about caveats and possible trickery, though I doubt trickery will occur.