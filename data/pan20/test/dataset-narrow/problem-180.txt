When those packets would make their way back to the Router, there would be no way for the Router to know which packet should have gone to Host B and which packet should have gone to Host C. Hence, it is crucial for the Dynamic PAT device to also re-write the source port to ensure the return traffic can be successfully returned to the original host. To learn more about Dynamic PAT's operation, check out the Dynamic PAT Article in the Network Address Translation article Series 

Yes. It is absolutely possible for a single domain to be hosted on two different IP addresses. For example, take google.com: 

Which leaves us to having to discuss DAD, and specifically, why DAD is completely independent from MLD. Before an IPv6 node intends to use an IP address, it must first check if the address in use. This check is done by sending a Neighbor Solicitation (NS) message to the Solicited Node Multicast (SNM) address of the target IP address. The SNM is a multicast address that anyone who would own the target IP address would be listening to. The Destination IP of the Neighbor Solicitation packet is (where is the last 24 bits of the target IPv6 address). And the Source IP is , the "unspecified" IPv6 address. It must use the Unspecified address, to prevent using the target address itself, since it might trigger a duplicate. At this time, the initial host doesn't know whether the address is unique or not. If another host on the network already owns the target IPv6 address, they would receive the Neighbor Solicitation message described above, and would respond by sending a Neighbor Advertisement (NA) indicating the IP is already in use. Here is the key: Since the initial NS was sent from the unspecified address (), the other host which owns the target IPv6 address will have no way of knowing who to send the responding NA to. As a result, it must send the result to , the "All Nodes" Multicast address. This is how DAD can still perform, if you are blocking all MLD messages. Because joining the All Nodes multicast group doesn't require a MLD transaction, all switches that understand IPv6 will automatically forward the "All Nodes" destined frames to all ports in the respective VLAN. DAD, does not require listening on a particular multicast group to receive notification of an address already in use. If no one claims the IPv6 address, DAD then determines the IPv6 address is unique, and allows the initiating Host to start using the address itself. This is what prompts the joining of the correlating SNM group for the target address with some MLD messages sent to the MLD multicast address of . (and according to the RFC above, this message is intended to be sent twice). The windows capture seems to use the Source IP before sending out the Neighbor Advertisement that claims the IP on the network which occurs at the end of DAD. I can't help but feel this is jumping the gun a little, since the NA is what marks the end of the DAD process, and the confirmation that the address is indeed unique on the network. The linux capture has MLD messages sent before the DAD NS, but these are sent from the unspecified address, so can't cause an IP conflict. If any MLD Sniffing switches on the network only need to correlate a MAC address to a joined MLD group, then this would work just fine (Disclaimer: I am not intimately familiar with the intricacies of MLD sniffing, and can not claim whether this is exactly how it works) The BSD capture doesn't include the NA, but the two MLD messages occur .15 seconds after the DAD NS is sent out. Which to me, seems a bit too short, since the DAD process calls for a wait of just shy of a second before considering an address unique (according to the captures and testing I've done). 

IKE is mean to encapsulate other communication. If that "other communication" requires all the L4 error correction that TCP offers, than the "other communication" should use TCP. In this way, IKE/IPsec are only responsible for creating a secure transport. Not a reliable one. Imagine transferring VOIP through an IPsec/IKE tunnel. VOIP largely (and intentionally) uses UDP, but if this VOIP traffic goes over an IPsec tunnel, and if the IPsec tunnel used TCP, your call may be delayed while IPsec is sorting out re-transmissions for dropped packets -- thereby negating the benefits of using UDP for VOIP. Putting it another way, it doesn't add any benefit to have two independent functions handling error correction. If your data stream cares about error correction, use TCP. If your data stream doesn't, or wants to manage error correction itself, use UDP. The transporting of these UDP or TCP packets should not interfere or cause conflict with what you chose for your data. And the only protocol that would add no additional error correction would be UDP. Another example: If both IPsec used TCP and the underlying data used TCP, should a packet be dropped in transit, both the IPsec function and the TCP function would each request a re-transmission. Which would not be ideal. 

Almost. The first part is the Feasible Distance (30720). The second part is the Reported Distance (28160). The EIGRP topology table will keep track of both of these values. And the Routing table will take only the Feasible Distance into consideration. 

SKEYID is the Seed value that will later be used to generate additional secret keys. The Pre-Shared-Key and both Nonce values (Ni_b is the Initiator's Nonce, and Nr_B is the Responder's Nonce) is combined by using a PRF, or Psuedo Random Function. A PRF is like a hashing algorithm, except that the result can be as many bits as you need. Now, if you were initially doing Main Mode, messages 3 and 4 share the Initiator's and Responder's (respectively) Diffie-Hellman public keys. They both use the these values to generate the Diffie-Hellman shared secret. If you were doing Aggressive mode, these DH Public values are also included in Message 1 and Message 2 (along with the Nonces). The Seed value is then combined with the DH Shared Secret (and a few other values) to create three Session Keys: a Derevative key, an Authentication key, and an Encryption key. The RFC states it as such: 

RIP is classful only in the sense of the command in the routing process. The command does not accept a mask, and automatically assumes the classful mask of the IP you enter. RIP does not advertise network masks. In fact, it only advertises network IDs. Moreover, RIP only advertises network IDs of networks it knows about that match the outgoing interface's subnet mask. A receiving router will take the received advertised Network ID and apply the subnet mask belonging to the receiving interface. I wrote about the specific workings on a reddit post. I'll add that here for additional details / context. Quoted from $URL$ 

My question: Why are some routing protocols considered Control Plane Host Subinterface, and others considered Control Plane CEF-Exception subinterface? Namely from the document above: iBGP and EIGRP are Host subinterface, and eBGP and OSPF are CEF-Exception subinterface. Despite iBGP and eBGP both using TCP/179 unicast as their transports. I'm trying to understand the different functions of all three categories/sub-interfaces, and the Routing Protocols being split across two of them confuses me. 

A Gratuitous ARP is an ARP Response that was not prompted by an ARP Request. The Gratuitous ARP is sent as a broadcast frame, as a way for a node to announce or update its IP to MAC mapping to the entire network. An ARP Packet contains an "Opcode" field which indicates whether the packet is a request or a response. In the Gratuitous ARP, the Opcode field is set to , which indicate a Response: 

There are additional examples and use cases in RFC 2018 Section 7. They are worth reading through to fully wrap your mind around it. 

If the traffic matches a Crypto ACL, the ASA will attempt to bring up Phase 2 (and Phase 1 if it isn't already up). If the build attempt fails, no traffic will make it to the outside interface. 

This way, when your Inside hosts are speaking to the Internet, it won't match the NAT Exemption and will be processed via your regular Static statements. But when your Inside hosts are trying to speak to your DMZ hosts, the NAT Exemption will take precedence over your Static statement, and let the traffic proceed without the need for NAT. A further note: NAT Exemption is bi-directional innately, so you do not need to apply an ACL entry for traffic in the other direction. *So long as you apply the ACL from the perspective of traffic initiated from the higher security level, as above. 

Sigh, rookie mistake. The command is available in interface configuration mode only, and is set specific to each interface. You can view the setting in : 

Again it seems the Source MAC in the Ethernet Header of the ARP Reply matches the Sender MAC Address in the ARP Reply, and also the Target MAC Address in the ARP Request. But there is one "other" type of ARP conversation we haven't looked at yet... ARP Probe and Announcement There is one place I did find it different though... that is in the ARP Probe and Announcement sequence. Specifically in the ARP Announcement 

Given the brief description of each Layer, you can then apply that knowledge to determine what layer a particular protocol operates at. For example... 

What were the old commands? What major difference where there between the old commands and what you get with the new commands? 

NAT Exemption is by definition bi-directional. If I have the following networks, with the following security-levels and IPs: 

In your inside capture, there are two packets going from the Server (10.1.102.19) to the Client (10.1.202.1), but they are coming from different MAC addresses. 

Simple enough, question is in the title. Was trying to find an official document or RFC which designated (or reserved) ffff.ffff.ffff as the Ethernet Broadcast MAC address. 

Notice for 10.4.5.0/24, I am seeing two different values displayed for Feasible Distance. The line with the arrow reports the FD as . The line just below it reports the FD as . I included the route for 10.3.4.0/24 as a comparison, In that route (as I expect it to be), the FD in the first line matches the FD in the second line (both ). Looking at the EIGRP route in more detail: 

This line is correct if you mean to map requests to the OUTSIDE interface's IP address on port 5000 to the IP address on port 3389. 

The internet is not far from becoming just like any other utility (water, power, etc) -- something you assume everyone needs and has a right to have. Net Neutrality would make it so the ISP (Internet Service Providers) can only provide you with a link to the Internet. Nothing more. Which is a GOOD thing. Just like your power and water company, they provide you with power and water. They don't care whether you use a refrigerator from Kenmore, or Sears, or GE, or Whirlpool, etc. The current bill would allow ISP to charge premiums for faster access to certain services/websites. Something like a faster download rate when browsing youtube, or watching videos on netflix, etc. The best comparison is to continue comparing the Internet to a utility service. What if your power company could charge you more to ensure a better power stream when you are using (for example) General Electric devices (your fridge, your toaster, etc). But, what if you own a Kenmore refrigerate, are you out of luck? Left to accept just the bare minimum your power company will give you in so far as power. People would be outraged if the Power Company all of a sudden imposed fees to power certain company's devices, while trying to avoid blame by stating that you always have the option to not pay the fees for a lesser service. Replace the "power company" with "your local ISP" and replace "a company's electronic devices" with various online businesses (ebay, netflix, youtube, amazon VoD, etc). The problem is, once they start "charging a premium for certain sites", its only a matter of time before all the remaining sites end up having terrible service. Which takes your choice away, as the consumer, because you will be forced to choose (and pay more for) the service that your ISP happens to support. 

If you are asking in a general sense, then the answer is most definitely "yes", any HTTP method (like POST) requires a TCP connection, and the only way to initiate a TCP connection is to use the three way handshake. IF, however, you are asking in a specific case, maybe if you are capturing your own traffic and don't see the 3 way handshake after you submit content to a website, then the answer is a little less simple. We'll have to discuss a few HTTP related concepts before we can properly answer it... 

In traditional HTTP1.0, to load this website into your browser would require three TCP connections (each with their own 3-way handshake, and 4-way closure). HTTP 1.0: 

will always be more than 1. It is impossible to accurately judge exactly how much more than 1, but here are some factors that will contribute to increasing the time between a Post request and an HTTP response: I'm going to do this from the perspective of a single Post and a single HTTP response compared to a single Echo Request and a single Echo Reply. The time increase between 1 ICMP Exchange and HTTP Exchange verses 3 ICMP/HTTP Exchanges would be linear. Each exchange would be affected by each of factor belows. 1. There are more packets sent/received in the HTTP Post/Response A ping 'sequence' is this: