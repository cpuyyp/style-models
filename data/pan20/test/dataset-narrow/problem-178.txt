Most nat implementations can't handle overlapping address ranges on the inside and outside. One workaround for this is to pass the traffic through two NATs. The first NAT converts the traffic to a subnet that doesn't overlap with anything and then the second NAT converts it to the new desired source. You can do this in one physical box by using multiple instances of the IP stack. Vendors of expensive routers call these "vrfs", linux calls them "network namespaces". 

It depends. Traditionally the NIC would only concern itself with Ethernet level stuff. So it would verify the "frame check sequence" and check the destination MAC address, but higher level checksums would be left to the OS. However modern NICs often have the option to at least partilly handle higher levels of the protocol stack to reduce load on the main CPU. 

I wonder if one of the "boxes" you saw was not actually a peice of active network equipment at all but instead was a patch panel for the outlets around the office. That would explain the large number of cables. 

The last type is particularly insidious because under light load it behaves like a restricted port cone but under heavy load the "symmetric" behaviour becomes apparent. Sadly it is one of the most common types. 

Ok, so as I understand your scenario you have two networks that you control both behind firewalls, one redhat based, one pfsense based. These firewalls are connected via the Internet. You want to allow servers on your two networks to be able to talk to each other more freely than they can talk to the Internet in general. Broadly speaking there are three approaches. 

The mecahnism works equally well for TCP and UDP. What is tricky though is setting up a connection where both devices are behind such a firewall/nat. There are tricks that can be used but they don't always work depending on the exact behaviour of the translation mechanism. 

The first thing you need to understand is that there are two very different classes of device reffered to by the name "router". They share in common that they forward at the IP layer but the similarity largely ends there. First off are the devices used by homes and small buisnesses to connect their networks to the internet. These typically connect two networks, reffered to as the "LAN side" and the "WAN side". On the WAN side there is typically a single port which may be Ethernet or it may be a port designed for a specific type of internet connection (DSL, CABLE, GPON etc). On the LAN side there is typically a built-in switch to provide multiple ports and a built-in wireless access point to provide wireless access. In addtion to the two-port router fuctionality these devices typically provide network address translation, basic firewalling and a DHCP server. Routing functionality on such devices is typically very minimal, if you are lucky they might support static routes, if you are unlucky all they will be able to do is the routing needed in the specific scenario they were designed for. Then there are the devices used for routing in large networks. The main function of these devices is to route between many IP networks. Typically routing protols will be used to distribute routes and one of the key features of such a router is how large a routing table it can handle. Such routers may or may not have features beyond that such as firewalling, network address translation or the ability to bridge multiple ports onto the same L2 network. Then to further complicate things there are "L3 switches". These are switches but that also have some IP routing functionality. Usually they do not support NAT. 

Just open up holes in the filters. This only works if the servers behind the firewalls have public IPs. It also leaves your traffic vulnerable to sniffing, hijacking and injection as it passes over the internet. Unencrypted tunneling. The packets are encapsulated so they can travel over the internet despite carrying private addresses but no encryption is used, so the packets are still vulnerable to sniffing hijacking and injection. Encyrpted tunneling. The packets are encrypted and authenticated as well as being encapsulated. So (provided the cryptography holds up) they are protected from sniffing hijacking and injection. 

IEEE 802.3af POE has two modes, mode A sends power on the "data pairs" while mode B sends power on the "spare pairs". However that is not very relevant as it doesn't sound like you are planning to use that. It sounds more like you are planning a "Ghetto POE" type setup. I wouldn't worry too much about mixing POTs and Ethernet on the same cable, especially if the POTs link is only local. I also wouldn't worry about CAT5 vs CAT5E on a link this short. The bigger problem would be current on the DC power lines. 35W at 12V is nearly 3A. Apparently the safe current limit on the conductors is 350ma so if you used one conductor for power and one for ground you would be running nearly 8 times the acceptable current on each conductor. Even if you used the whole cable for power and ground you would still be running at over double the acceptable current. 

First note that the names you see in traceroute come from a process called "reverse DNS", traceroute translates the IP into a special hostname and then asks the DNS system for a "ptr" record mapping that to an actual hostname. The hostname that is returned is chosen by whoever controls the reverse dns for the IP block, typically the ISP. For residential connections it will usually be set to something containing the ISPs name and part or all of the IP address. The fact that you get a reverse DNS response with your ISPs name in it does not mean the traffic actually went to your ISP. 

AIUI 1000BASE-T was originally designed to run on cat5. However it was later discovered that the CAT5 standard wasn't strict enough with regard to crosstalk with the result that while most cat5 cables would work with 1000BASE-T it was not gauranteed. As a result of this cat5e was introduced to give a cable that was definately suitable for 1000BASE-T. 

Yes, coaxial Ethernet cannot support full duplex mode. Only the twisted pair and fiber physical layers can. 

The reason many people gloss over this stuff is because if you actually look at the real details and not oversimplified models it's a massive rabbit hole. Firstly Ethernet is not just one type of interface but a whole family of them with the fastest variant being TEN THOUSAND times faster than the slowest. Secondly many moden interfaces don't fit nicely into either the tradtional paralell or serial model. Many moden interfaces use a multi-lane arrangement where multiple connections carry data in paralell but each "lane" has seperately managed bit timings and the receiver adds small delays to make up for timing skew and bring the data back into sync. 

I think you are being silly with your hardware choices, buying one expensive cisco switch and a bunch of totally unmanaged ones. Even something like a TP-Link "smart" (note: not "websmart/easysmart") switch would be better than an unmanaged switch. If money is tight I would much rather have some level of management on all my switches than one switch with great management and four with no management at all. In general managed/smart switches have the ability to monitor traffic on individual ports (either through the switches UI or through SNMP) but they typically don't offer higher level monitoring. So if you have some level of management on all your switches you can easily see which computer is the problem. If you don't then all you will see is which unmanaged switch the problem computer is on, with a handful of machines on one desk connected to an unmanaged switch that is tolerable but with 20 odd on one unmanaged switch it will be a massive PITA. Some routers are able to monitor on the basis of IP addresses but since you tell us nothing about your router we don't know if yours can. Furthermore even if monitoring on the router is possible it will tell you nothing about traffic that remains within a VLAN and never hits the router. 

Inspect every UDP packet for signs of teredo. Monitor for connections to teredo servers (which most likely will use the well-known port) and save the local ports. You can then monitor those local ports for teredo data traffic. 

They used to but the economics have shifted over the years. The digital electronics that form the core of a switch became dirt cheap so the cost advantages of hubs went away. 

There are lots of opportunities for things to get delayed both within the client and server machines and in the network. How much things actually get delayed will depend heavilly on system load. If load is light then delays are likely to be negligable. On the other hand if some resource (client CPU, server CPU, server storage, network bandwidth, server maxclients etc) is saturated then the delays may be much larger and more variable. You might want to redesign your client application so that instead of sending a request every 3 seconds it sends a request 3 seconds after the last request completed. This will help avoid piling additional load onto an already overloaded server.