Is everything done in a good way and manner? Where could my implementation been improved? Any ideas how to solve point 8? There I get finally stucked. Looking forward to read your comments and answers. 

Working Live-Demo Is it all done in a good way and manner? What would you do differently and why? Looking forward to reading your comments and answers. 

I should mention that I've tried to implement everything based upon what I've understood in the corresponding lecture. I avoided to lookup the internet. Instead figured out everything myself to become more confident with these data structures. I seems to work alright. But I'm sure there are flaws. Perhaps even errors. So therefore: All hints, comments and suggestions concerning improvements highly welcomed. 

What do you think about my solution? Is there a better way to accomplish the task? What would you have done differently? Looking forward to reading your comments and answers. 

Task description: Search the highest ID within a given JSON-structure: An array with objects as elements. Every object has a property "ID". Then increment the highest ID and return it as a result. For to become the next ID used. There can be gaps within the given data-structure (because of prior delete operations). This gaps aren't allowed to use. It shall always be: Highest ID plus 1. I have currently two different implementations for a solution. The first solution is a more functional approach: 

I've made this animation using JavaScript and Sass CSS. Relevant is the code inside the IIFE. Because that's what I like to keep and develop further. Perhaps use it for future projects. Everything else is just quick & dirty made demo and less important. My code with uncompiled Sass CSS: 

Is everything done in a good way? Or has the code flaws which should be improved? Okay. My ASCII-art skills have to be improved. I admit ... But seriously and important: Is my implementation of the MVC-pattern correct? An according answer would help me to feel more confident about the topic MVC. But other hints and recommendations are also welcomed. :) 

It works quite fine. I used it to insert and query data into / from a playground-database I've made. Here's my test-class: 

After learning a bit React in the last weeks I've decided to make a toDo-list. I've got the basic-functionalities (create, update, delete entries) finished. I'm going to enhance the app with a feature for to define priorities. Moreover should it be possible to change the order of entries. For the final-syling I'm going to use Foundation. But before going on I would appreciate to read the opinion of more experienced React-developer. So therefore: Any hints and recommendations concerning flaws and possible improvements welcomed. 

It seem to work alright. But frankly: With all the parameter-checking and taking different possibilities into account it has become a lot of code. If someone knows a possibility to write it more elegant then I would appreciate his or her answer. Any other hints welcomed too. Should mention: I can't use ES 6-syntax because we got only Internet Explorer 11 here and there won't be change in any nearer future. 

I would say it works. At least essentially. Nevertheless: There might be flaws even bugs in my program. And I guess one could improve it a lot. So therefore: Any hints, comments and recommendation by more experienced Assembly programmer very much appreciated. 

I have to implement a double linked list as an exercise for a further education. There are three interfaces which have to be implemented: IValueElement 

I've got to made a function which returns the checksum of an given integer. Source code of my implementation so far: 

Create a div-element and take control over it using a Vue-Instance. Print an array of hobbies into the div-element. Provide some default hobbies. Add a 'New Hobby' button and a text-input element. So that the user can add additional hobbies. When a hobby list-item is clicked, it shall be removed from the list. Add a "Hobby deleted"-paragraph which is only shown when a hobby-item has been deleted at least one time. Above the list of hobbies add a hobby-counter which shows the current count of hobby-items. Style the hobby-list depending on whether you have more or less then 3 hobbies in the list. Outsource your hobbies (the list-item elements) into a component (so that it becomes re-usable). 

Two general things: Avoid variable-names which consist of just one character. What I mean is: Even something like 'telValue' is better then 'd'. Still not pretty but at least one get an idea what is meant. You should care about name conflicts. It would do no harm to attach the functions on to a global object. Or to use a Immediately Invoked Function Expression. Examples here: $URL$ Concerning the redundancy issue: You could data-attributes and class-names. Then using iteration-functions in JavaScript. Example what I mean here: 

Two further questions I've put right into my code as comments. I think that way it is better understandable what I mean. All comments, recommendations and hints concerning my question (and my code in general) appreciated. 

I've made this animation using Sass and CSS-keyframes. I'm bit worried about my usage of position relative / absolute. Can one expect that it works in all browser reliable? Or to I have to expect things like a offsets? Moreover: Is there a way to improve it somehow? It doesn't run smoothly. Perhaps I've chosen the wrong tool with CSS-keyframes? Any hints and tipps to the points mentioned as well as everything else welcomed. 

After reading a bit about CSS3-text-shadows and seeing a few advanced examples I had the idea for a "neon light"-banner. Next idea was to animate it. Finally it has become a mixture between a Sass-mixins and a bit of JavaScript. One more thing I should mention: It's a fun-thing. I'm not intending to use it somewhere productive. So I didn't bother about namespace, globals etc. Here's the code ... 

Using reduce() was what came to my mind for solving the task. And the code has become already quite tight. Nevertheless: Is there a better solution? 

First of all: Very long lines are stressful for the eyes to follow. So using more line breaks would be nice. Second: You got an error in your code. Third: I would structure it different. Might not be the ideal way. It's just the way I would do it: 

Here's a working Live Demo. The complete project folder on GitHub. The recursion part is for to avoid weird looking delays which appear when the given string contains a sequence of more then one blank. What do you think about the validation part? Are there flaws with the validation? Is it exaggerated what I do there? And what do you think about my solution with the recursive function for to avoid a delay of the next character? Would appreciate your opinions as well as other hints, comments and recommendations. 

The code has passed the automated tests. But I would appreciate some real feedback. What do you think about my string-processing and the way I've done the type conversion? What would you have done different and why? All comments, hints and answers appreciated. 

I have written this function for creating complete HTML-elements including arbitrary attributes and inner HTML. I want to keep and reuse it. Therefore I have tried to document the usage well. I would be interested in hints concerning: 

For an FASM assembly course I've to do the following exercise: "Write a program that takes the number n as input. Then it prints all the numbers x below n that have exactly 2 different integral divisors (Besides 1 and x). For example: 15 is such a number. It is divisible by 1,3,5,15. (Here 3 and 5 are the two different divisiors, besides 1 and 15). However, 4 is not such a number. It is divisible by 1,2,4." Full description can be seen here: GitHub xorpd. Here's the code I've written: 

Task is to have a function which takes an array. Then removes elements from the array which are contained more then one time. Finally returns an array with only unique elements. Here's my solution: