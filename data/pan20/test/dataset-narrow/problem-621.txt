There's a lot about this method that makes it very difficult to follow... Let's start with the signature: 

Let's apply some of these on the change handler to store the focus field. Here's what we're starting with: 

I think your approach is wrong - or at least sub optimal. The consumer shouldn't need to explicitly rebuild the table. If that's what you want to do, then pair a and a class. The builder can have the , and methods and the can just have the . I don't think you need to do that, I think it's fairly straightforward to keep a dictionary of items with thier bounds. It's a bit wierd that if I call then you duplicate the string 1000 times in a list. Consider my alternative: 

Neither MD5 nor SHA256 should be used for password hashing. Use a proper algorithm. Especially not MD5. 

Having said that is a bad name, it's too similar to and doesn't even hint at the internal behaviour. You should be checking that and . Update: If you want to catch exceptions and rethrow them as an AggregateException, add them to a concurrent collection e.g. so you don't need to worry about synchronisation. 

I'm going to disagree with everyone else about your use of the Sku struct. Well done. It's exactly the sort of thing that should be encapsulated, it's an important domain entity in this line of business. In Domain Driven Design (and other books/blogs/authors) the concept of "primitive obsession" is often raised. Let's take email as an example: 

Do you see the problem? For every item you're doing a which will iterate over all of the items you've already processed. First iterating 0, then 1, then 2, then 3, then 4... all the way up to N-1 items on the last call. So we know that is going to get more expensive on each iteration of the list even when we schedule everything on the same resource. In the worst case, you need a new resource for every item. You're now doing one call to for every resource id that you've already created. However, you never search the last one as it is created on the last iteration. So just on your last iteration, you'll be doing (N-1)*(N-1) operations. Ouch! I'm sure the average case is creating quite few 'resources' but it is worth considering the absolute worst it could be. Just while I'm at it - you're also calling loads and loads of times. You already have one answer that improves this for you, I'll just throw another one at you. All you need to do is keep track of your 'resource id' and the date/time the current item ends. That fits nicely into a list: 

Now you don't need to look up the connection string - you can rely on the Enterprise library to get it for you: 

Notice that I've simplified the selector to just the Id. Now we can use our knowledge of jQuery to simplify the next bit of the function. 

There's a lot of good points in the other answers but I just want to add one thing. Don't throw exceptions from property getters It's in the official MS Guidelines for Property Design 

A quick comment for you. You can remove the null checking if you supply a default Func for your functions: 

Note that you had the 'i' and 'a' the wrong way round and given that it's a local variable it should begin with a lowercase letter. 

So firstly, read style guidelines and the naming guidelines. I'm not going to give any specific guidance here because I'll be here all day. Please read the guides. 

You'll notice that I've changed almost all of the names in your code because yours weren't very descriptive. ** Creating the instances of the T is the most difficult part. You could solve that by adding properties on the base class and a parameterless constructor so you could simply do: 

I think they were probably looking for you to split out the responsibilities into classes. You created your class to encapsulate the data but that's where you stopped. You stuffed everything to do with UI (writing/reading the console) and calculating the tax in the main class. You at least need a separate class for calculating tax: 

I recently reviewed some code implementing some heuristics which has piqued my interest in the A* graph searching algorithm. I'm going to do that in a bit but first I need a way to create a graph in order to work on... I could have used from , but I didn't want to include the whole assembly for the single struct. That's potentially a bad reason but here's my reinvented structure anyway: 

This may seem like a really minor point but try to avoid side effects wherever possible. You want your code to be really obvious to anyone reading it what the main purpose of the code is: 

Why is this better? The stack trace is more meaningful because the error is thrown closer to where the problem call is and you can supply your own context specific error message. Either that, or you can return an empty array for . 

1: This method is public - are you expecting to use it outside of your Data Access Layer? The method signature includes a ... Now all of your calling code has to know that you're using SQL underneath. 2: This code smells: 

Edit: As Peter Taylor pointed out in the comments, you can take the logic further to incrementing by 2520 each time because the final solution needs to be divisible by all the numbers 1-10. However, the main thrust of my answer was supposed to be that you don't need to brute force and you can compute the solution directly. 

Here's a working fiddle: $URL$ Have you considered a solution that starts with only 3 inputs and then creates extra inputs instead of showing ones that are already declared but hidden? 

An example of actually creating a map is (I only wrote this for CR so not really wanting it to be reviewed): 

First, is a great name, is also good. Now, I'd guess at phoneNumber but it could also be the name of the Primary Health Network if this was an Australian healthcare customer. - is really that much harder to type? is a great choice for the but is a terrible name and there's some extra whitespace which should be removed. Also, your fields shouldn't start with . They should aslo be . The old version of the guidelines stated this explicitly but the newer C# standards don't specify a convention for non public fields. Most people use in my experience. As a commenter has mentioned, you can use auto properties: 

Get a post-it note and write using a fat marker, “Can it be ?”. Stick that on the edge of your monitor. 

It appears as though the return type for wants to be , not . But you’re never checking the result anyway. 

Your should be called . And you can get it from so do you really need a separate entry for that, and if so, shouldn’t you generate it automatically too? Or, define the functions in terms of the nested rather than peppering the specialization with and etc. in all the identical places. Again, if you factor out , the rest of that just goes away and you don’t need any explicit specializations for . 

Note that I made a normal-named function and then defined to call it. That will be much better for people who read your code later, since carries certain expectations. 

And I ran it with critical test cases that check the edges to make sure the chart is being used as intended: 57 is a D- but 56 is an F. (Note that I added an A+ which is 100 or better). 

What if no character was read? The stream could be you know. Maybe you hit the end of the file, or the network glitched. 

Coming to C++ from most other languages, you should know that you shouldn’t be playing around with . The class is a bit of an odd duck because it was being developed “conventionally” by standardizing existing practice and experience with other languages, and then all of a sudden STL comes along. I was involved in implementing the string class from an early draft of the standards process around 1994, and it was even more conventional, using index positions and substrings everything. Once STL was made the foundation of the Standard Library, the class was thrown out and a simple one made that’s similar to a vector but with handy support for string literals. That didn’t fly. The compromise was what we have today, which is a fully proper STL Container, and has some support for traditional string operations, thus allowing people to easily adopt it by changing out their home-made string class with minimal fuss, as opposed to having to completely rewrite the code to use STL algorithms. 

Well, I wonder how it’s different from and related stuff. I assume there is something different about it so that’s a mental burden right there. 

(also, does the library require some special (and highly limited) construct? I notice you are bouncing through a static function . The (and before it) will work on member functions just as well as free functions. works just fine without help. So does the modern equivalent, a lambda expression. ) 

The Exception Class I won’t repeat what Edward noted, except to add that putting extra parens around the expression will bite you some day, so there is now (since C++17) a good reason other than style to not do that. 

You should just take the container, not separate begin/end. That not only makes passing easier, but makes the function easier too! 

Make this since it never changes. You may later move it to a parameter or elsewhere… that is the kind of way real-world code evolves. Then, check your requirements. 

Also, use . And pick a name for the symbol here that you know will never clash with anything else in the project including other third-party libraries. That is, use a UUID. 

Since you already wrapped these calls in your own helpers, it will only appear within those helpers, once. 

I see you are generally using up-to-date C++ library and language features. But, the handler should be a rather than a . That makes me wonder if this class is doing a lot of the heavy lifting that already does, including local buffer optimizations? Could your class be built around that instead? 

Did you know that vector elements are always initialized? And what will it use do you suppose? The default constructor of the element, of course! So just write: to add 10 default locations to the end. 

I hope that gives you food for thought! Your current algorithm is Order of n squared. By stopping the search early it will be order of n to the 1.5 power. Then reducing the number of tests to about the log of what you were doing will bring it down to n∙log(√n) which is better than n∙log(n). IOW, the difference will be spectacular. 

Hmm, so it wasn’t any harder after all; just replace the +1 with the proper length of the separator. That’s a good sign that the algorithm was structured well to match the way iterators and the standard algorithms work. 

The memcpy/memset use of makes me want to look closer at that. Could it be done in a properly typed manner? And since it’s a , you could use instead of memset. 

For the first point — casting from the base class for every use. really need that? In the last block of example code, you are creating a packet of a type you do in fact know in advance — you are asking for a ChatMessage so you can populate it. So, don’t use the factory here! Just create the object. Have the class provide a static member for that, so they are always created the right way (on the heap). 

more speed You can find videos of Stroustrup explaining why is so slow※. See Why you shouldn't use set (and what you should use instead) by Matt Austern. Use Boost.Container for flat_(multi)map which is a mature implementation based on Matt’s article, via Andrei Alexandrescu. As a drop-in replacement, see what that does for your speed! 

and here is where this will protect you from this very bug. You are not deleting the node in the case where your constructor throws an exception. In general, other things in your member-init list can throw, not just the function body! So always have owning semantics on resources, even if you don’t rely on that for normal usage. 

Sounds like quite an endeavor! I miss Sim City 2000. I even bought an Android version for $5 and then they took it away! Good luck on this project. 

The in the doesn’t make sense. It is non-throwing if what you do in the body will never throw. If this is a trick to get SFINAE tucked away, it will not work. Likewise, the does not belong in the body at all! You want this form of to only match overloading if the conversion is possible. That is, use , as an extra dummy template parameter. Meanwhile, it doesn’t make sense to assign an to a without any kind of conversion going on. You want to check conversion ability on the pointers, not on the types being pointed to! The style in C++ is to put the or with the type, not the identifier. This is called out specifically near the beginning of Stroustrup’s first book, and is an intentional difference from C style.