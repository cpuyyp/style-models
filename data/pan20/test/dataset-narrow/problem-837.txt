The ciphers from weakdh.org seem to be invalid for your system, so, yes, it's falling back to the defaults. The ones listed on weakdh.org may work on some other system that they tested on, or they just may be wrong entirely, I can't be completely sure, but what I do know is that they aren't on the list here, so they're probably not valid anywhere. To get a list of valid cipher suites for your system, from $URL$ 

needs setting to zero to prevent RpcHttpConfigurator from updating the Valid Ports key automatically. 

I would set up the Action of the task to "Start a Program" instead of "Send an e-mail". The program to start would be a Powershell script that does this: check the time of the last alert sent, and if the last alert was more than 15 minutes ago, send a new alert using Send-MailMessage and update the last alert time. You can store the last alert time in a helper file next to the script or somewhere else. Example script: 

Yes! (As long as you're using IIS 7.0+) You need to set the setting for the Application Pool Identity to true. The Application Pool Identity will now have a user profile under \Users\[Application Pool Name]. You can then edit this profile to have custom environment variables, etc. IIS 7 Tip # 3 You can now load the user profile of the application pool identity EDIT: I just tested this (in IIS 10), because of your comment, and it's definitely working here. 

I’ve tried installing and removing the updates, but the files and references are still there. I’m not entirely certain how to use the advice at $URL$ since my version numbers aren’t the same as the poster’s, and looking at $URL$ doesn’t help much either. I’m not sure how to proceed, I still haven’t cracked the WinSXS nut. 

Notepad doesn't launch with elevated permissions by default, so you have to run notepad as administrator and then open the file using the file open dialog before you can save changes back to the original file. 

Another solution is to maintain two separate root folders, each with their own web.config, but create links to the directories/files in the other root folder, so you only have to maintain the source in one location. Powershell goes something like this to create the links the first time: 

I'm using the Windows Update Agent to install WMF 4.0 on my Windows 7 workstations. I unpacked the MSU to get the cab files and install them using DISM online mode with the following commands (one for x86, one for x64 systems) 

The issue turned out to be driver related. (DOH! I forgot to try a different driver version when uninstalling and re-installing the drivers.) The OEM drivers caused the machine to have the "no internet access" symptom, and using a driver straight from Intel resulted in the system functioning correctly. The system is a Dell M6600 with an Intel 6200 WiFi card. The issue returned after I installed the WiFi driver from Dell, and I had to do a system restore to get the issue to revert, then install the driver from Intel, and the WiFi worked, as well as everything else. Thank you everyone for the excellent suggestions! 

Caveats: This will also require you to either dig into the inner workings of WSUS or use a third party tool/script/solution to give you what you're looking for. Added benefits: The flexibility this provides may amaze you: you can have reporting that answers the questions you ask of WSUS instead of settling for what's offered in the reporting package. 

Creative solution time: have users log in to a webpage that adds the ip of their device to the list of firewall exceptions temporarily before using RDP. Any users that don't first log in to this won't be able to access RDP from the outside. Maybe even include a pick your own TTL option for users that know how long they'll need the connection. You can include logging to be able to include a method for removing all the exceptions created by X, in case that's ever needed. You can even require client certificates for authentication to the server, and distribute keys to each user to add to their devices, for added security. 

The reason I had to do a page load is because I forgot to change the from to . When I created another Application Pool with set to , the user profile was created when I assigned a web site to the Application Pool and restarted the website. More useful information on Application Pool Identities: Application Pool Identities 

Your DISM command isn't finding the required resources because it's checking for the source "online". Windows 6.2+ will (by default) check only with the update source server for component install/repair if an update source is specified for the Windows Update Service. If you don't want to set up your update source (usually WSUS) server as the source for repairing/installing components, then you can enable the following Group Policy: 

No, ESXi is specifically headless. You could install an OS that has support for acting as a type I hypervisor such as Windows 8/Server 2012+, linux with KVM or XenServer, or run software on top of the base OS to act as a type II hypervisor, such as VMware Workstation or VirtualBox. If you do use VMware Workstation, you can connect to the virtual machines it's hosting via VSphere on another computer, if that's a requirement. 

It's expected behavior that computers will automatically contact the public Windows Server Update Service, even when there's a specified intranet update location, unless the computer policy "Do not connect to any Windows Update Internet Locations" located at Computer Configuration\Administrative Templates\Windows Components\Windows Update is set to enabled. Please read the documentation to see if that's appropriate for your environment, especially since this can break the Windows Store. (Sorry, there's no for the section of interest, so you'll have to either scroll down or use ctrl+f.) It's also expected behavior that Windows 6+ machines will automatically contact to update their certificate revocation lists. See An automatic updater of revoked certificates is available for Windows Vista, Windows Server 2008, Windows 7, and Windows Server 2008 R2. So, if you aren't managing the updates of the CRLs on your machines by some other method, I'd highly recommend removing the block to from your webfilter. Lastly, unless you set the user policy "Remove access to use all Windows Update features" located at User Configuration\Administrative Templates\Windows Components\Windows Update, then users will still be able to manually access the public Windows Server Update Service. Again, please read the documentation to see if that's appropriate for your environment. 

You need to provide the entire certificate chain in order for it to show up as trusted. Here's the link I got for comodo's instructions on installing the cert chain in apache: $URL$ I got this from $URL$ which flagged your cert as not being trusted in all browsers because of an incomplete chain. 

Put the server in drain mode using the web management interface. That provides the exact functionality you're looking for. 

The you originally wrote is matching the prefix of the url with the first string and replacing it with the second, so each time, it's adding another at the end of any instance of , then the rule gets triggered again when the redirect goes through, thus all the adds. Using RedirectMatch, you can specify the end of the string using the , so will match , but won't match . Aside: How does this lead to a maintenance increase? 

So, I was just reviewing my workstations for software they're not supposed to have, and came across traces of MSXML 4.0 still being on some of my machines. These are all Windows 7 machines, they had MSXML 4.0 installed on them and I issued the following commands to remove it: Uninstall MSXML 4.0 SP2 (KB954430) 4.20.9870.0: