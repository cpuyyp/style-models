It was a sql permissioning error, we have an auditing system turned on. For some reason the user running the query triggered the auditing system. THis auditing system ran a trigger that the user didnt have rights to. I had to grant this user rights to the trigger. 

We are running SQL SERVER 2008, I have a webpage that is executing a stored procedure. This stored procedures runs various updates to a several tables which have triggers. The error I am receiving when the web site runs is below 

Restarting iis admin service forced a restart of ftp publishing service. But it didn't bring the ftp publishing service back up. Bringing it backup fixed my problem. Apparently whenever you modify the IP accept list you need to restart IIS. Thank you everyone for your help 

We have server 2008 service pack 2 and IIS 7, currently we have an application that saves images to a folder and then transmits these images via http request. Occasionaly the network service account (account application is running under) will be unable to write to the folder. Even though the folder still indicates the the network service account has all neccessary permissions to do so. The only fix so far is to blow away the whole folder, re-make the folder and re-do the permissions. When I say redo the permissions i mean re-grant the network service full control. Any ideas as to why this is would be very helpful. Thank you very much 

looking for spikes is an interesting problem in general. is your data noisy? Try using the TREND modifier like this 

for more flexible control, use the foxyproxy plugin which supports whitelists and other advanced pattern matching to decide when and which proxies to use. 

Not saying I know specifically how tomcat performs shutdowns... I would expect a pidfile associated with the process, or a control port that tells the application to shutdown. Barring those, however, it's common for scripts to 'hunt-and-kill' by looking at 'ps -ef' output (or similar). In these cases, it's easy for the kill scripts to be too aggressive and kill off all matching pids (or just the parents of those pids). Cant tell you how many times I've been editing a script in 'vi' only to be killed off by an aggressive 'stop' command someplace. 

Caveat! Every single time I think I understand the rules for how authentication works, I have to futz with the config repeatedly until I get some nuance correct. Use this only as a starting point. Re-read the apache documentation on mod_auth and mod_access in particular, paying special attention to the Order directive. Therein lies your answer. Hope this helps, and please post your working example if it doesn't match this one, as this is a pretty good recipe to have in an apache cookbook. --edit-- Testing the above shows that restricted area is forbidden to all except for those from the IP address, who must provide authentication. It is not clear from your question if users from other IPs need unfettered access to this 'restricted area' or if they are simply forbidden? 

When the app pool crashes it should create an entry in the windows event viewer typically 1009. I would recommend IIS 6 (just because i personally know it better than IIS 7) But I am sure IIS7 will be a better piece of software. 

There is a current debate between co-workers about the INETPUB folder. There are several people whom want not to deploy web apps into the inetpub folder but create a virtual directory instead and have the apps live in a different folder. And, there are some that want to use the inetpub folder and not have to create the virtual directories. I was wondering are there any pros or cons for not putting apps in the inetpub folder and just reference them through a virtual directory? 

But there seems to be a syntax error in my sql generated script. While searching I found that Microsoft decided not to allow GRANT EXECUTE to function. Is this an accurate statement in regards to my problem. What I cant seem to find out is how to get the user permission to run the Assembly. 

We have a windows server 2003 with IIS(6). This is setup as our ftp server. We have the directory security setup to reject all ips except ones listed below. We have another server with ip xx.xx.xxx.xx, which is on the list for accepted ips. Yet the ftp server will not accept any incoming connections from this server. Thank you in advance for helping. 

Its a USB drive? Have you tried to safely remove it and unplug it and restart the computer? Then reconnect it and try to share it again? Sometimes these little things help on windows. You could also try the advance sharing rather than the normal sharing - or the other way around. Put the permissions on groups rather than on single users. Thats what I would try first. 

Thats not the default one, however it is in the allowed range. The UDP port range is the default since it is not advised to change them. I tried to change the "networkprofile" from 100mbits/1gbits and custom. I am running a 1gbit network with CAT6 cables and 1gbit netgear switch 5 ports. Everything is configured to use 1gbit. The WDS is authorised for the DHCP server. My ISA 2006 configuration: For the internal networking i have configured the following policy array: Allow protocols on internal network including the w2k3 host: 

Alright. The problem is solved. Here is what I did: I switched off my ESX. I started it again: DHCP started I tried the PXE install, got the 4011 error. Double-checked if my WDS is running: WDS failed to start. Why? Because port 67 wass already used. I opened WDS and then set the "Do not use port 67" option and thats it. Everything worked. So at the end it was just a simple restart to recognise, that I need to start the DHCP first so it gets assigned the port 67 for sure and that WDS does not care about that. 

wiki's tend to have revision control built-in, and many are file-based (vs stored in a database), so rsync should work perfectly fine. I know folks who do this for 'TWiki' for replicating their installations to mulitple servers. Perhaps you only have 'ftp' access to your wiki files? you might consider 'wget' to pull from ftp (rather than the http interface) with the recursive (-r) and timestamping (-N) flags set so that it only transfers file that are 'newer' (which isn't exactly a diff). Once you have a 'copy' of what is out on the ftp server, you'd mark the update time somehow (often with just a 'touch' of a specific marker file). You would then edit normally via your local installation of the same wiki, then use 'find $dir --newer touchmarkerfile' to identify the updates for ftp and transfer them over via a script around an ftp delivery tool. I have used such a solution before (though I had the advantage of sucking the changes back to the main server via 'wget', so just used the recursive timestamping approach again. In hindsight, if I had 'ssh' access (I didn't), I would have simply used 'rsync -globtru[n]cv' to simply pull (or push) the files in each direction. 

You might consider using `date +%w' as part of your tarfile, so you have a tar file for each of the last 7 days and dont have to worry about purging old copies.