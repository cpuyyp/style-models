logOut() Oh, so, it requires that you run this function to store the last login date? What if I close my tab/browser and walk away, like how many users do since ever? This will be storing defective information. To combat this, you can create a field with the old value of the login, before you login. This way, the value will be always present. And that is the value you use to display. And please, use local variables! 

Disclaimer: Seeing that this action of bypassing XignCode may be against the Terms and Conditions of the game, I've asked about it on Are we allowed to post questions that allow you to do something that may be against the Terms and Conditions of another software? (to which 13 upvoted the only answer, 1 downvoted). This script does not allow you to get the files in any way, shape or form: it only does all the extracting and copying. If you want the files, you have to get them by yourself. I do not want to make it any easier to get the needed files. Batch is a language I'm not familiar with, requiring me to learn a lot from all the websites and links available in comments. 

Your method seems kinda shady, and your class does way too many things: connect to the database, deal with articles, suppliers and whatnot. And if I do anything, a new PDO is created? Instead of: 

You start by giving the value of . Why don't you start the loop at 1? You reduce 1 iteration! Like this: 

First of all, the indentation is next to inexisting. The code is badly formatted. Are you scared of tabs? There's no excuse for a wall of unformatted SQL. There are online tools to fix it for you! 

Currently, there is a small bug on . The method is prepared to remove all event listeners. It does so by having no value on the 2nd parameter. To remove a single event listener, just pass the function. An example: 

So, no matter what you do, it will toggle the class? Why have this whole condition? Eliminating most of the code: 

Please, don't do that! Don't set anything on the variable! The points to the object. You can use it by itself or using the dot notation. That variable is the only way to access the current on a . Please, leave it unset. Use or something. 

And you have another problem: You throw away all the other arguments. If you want a function to accept 2 arguments, you're throwing it away. This is how I would write that bit: 

SirPython already gave a really nice review. But there are some nitpicky points left behind. Just small stuff. You have the following line: 

We know those are , so, why repeat in every single property? Using just and is enough. And you don't even use the anywhere! So, just drop it! And just to have there to say it is , you can remove it and just use an array. The whole object can be something like this: 

While looking at the code, the first thing that poped on me was the indentation. It is too strict, too inflexible, context-less, width-less... It isn't a good indentation. Right in the middle of your code, you have this: 

The code is hard to read, in my opinion. You have stuff everywhere: Same line, next line, mixed up... Now, let's review the code: 

This is so easy to extract from your memory, with something like CheatEngine. I would try to do something like this: 

You have the functions and . They have giant names. And the code is almost the same. I suggest the following: 

At least I find it easier to read. Way easier! Other than that, it seems pretty much day and night, comparing to the old code. 

This goes a step further and also deletes any tab or any other whitespace after and before a newline. An input like: 

Looking very quickly, it seems like a frail code. Still, it works as expected. But I saw a few things to improve: 

Why? Why you close a to just repeat yourself, in a different way, on the next line? Move the content to the first handler, and you are set. Repeated properties. You have the following properties: 

You should have all keywords in capitals. Why is that? Well, it's an old convention that comes from times where there was no syntax highlighting. Nowadays, they are everywhere! Heck, even I made one! But still, capitals help to read it. And as such, your table should be all in lowercase. 

I had this idea of trying to re-implement the function in a way that could potentially be faster than the native function. With some testing, I've doodled the following function in less than 1 hour: 

Your function is really easy to read and follow. I, personally, hate the double-space indentation, but that's a preference. But there are a few things that you can improve: 

Remember that event handlers must do what they have to do as quick as possible! If you can shave off 1ms, shave it! 

Sometimes, I need to change the color of elements in an email. The only achieveable way is by using CSS. But not every email client supports CSS. Most clients delete separated stylesheets. And some even delete stylesheets altogether! With a lot of trial, I came up with the following: 

You don't give space for your variables to breath. You crammed everything up and that makes it harder to read. An example: 

Your code overall is quite easy to read and understand. It's so easy that even I could read it! You know what that means? A+ on readability! But here's a very scary thing: 

One thing that makes me cringe is the indentation. It really is off. I had to look 20 times to that stray brace to realize it isn't closing that . 

After testing myself, I concluded this: It's bugged!!! The expected result is different that the provided result. I really don't get the reasoning to do . Here's a test code I've build, based on yours: 

To ressemble a little more a console, the animation is only applyed when there's no typing. With minor changes, it is possible to make it work with keypresses on the keyboard. And with a write queue. But that's left as an exercise for the O.P. 

This, again, is a very simple code. This is my 2nd polyglot question and this time I've tried to do something that I miss sometimes in Javascript. PHP has the function, but Javascript has no direct equivalent. So, I decided to make one that works with both languages! Here is the code: 

As my first point, and already mentioned in a comment, all variable names should be written in English. This makes it possible for non-Portuguese speakers to understand the code. The code should be self-explainatory. 

This filter takes 1 parameter, to indicate if there's or not caching, and returns the minified CSS when applicable. An example of it's usage: 

You can use the amazing function. It does everything you need. But you are using different delimiters for pairs. If you change those to and , you can do like this: 

Closures are a really nice feature that came with PHP5.3, and they weren't being used to their full potential. Closures have the method , which generates a new Closure binded to that object. This allows to use the variable inside the Closure. It helps the fellow programmers that decide to use this to write in a more natural way. The best part is that there are no kludges needed! The method will look like this: 

As it stands, your code is pretty much unreadable. It is easier to read the minified version of jQuery than that. Yes, it's a mish-mash of super-clunky almost-minified unreadable code. I will review the little I can understand: 

Note: There are a few edge cases, such as (very rarely) substrings like and going untouched. I am aware of those and I have no idea how to avoid it. 

You re-use the in there, and store the text on a variable. Your priorities are swapped! The slowest thing in that code is repeated, but you have to store a string in a new variable. This is how I would write it: 

Pick one and stick with it. Inline styles While not entirelly bad, you are repeating them. You could just write a tag with the CSS styles. Or add it to your CSS file. Imagine that you want to change that padding to . As-is, you have to replace manually. With CSS, you don't have to worry. Inconsistent positioning of your s. You have them in a newline and right after an element. You should choose one. My preference is keeping them in a newline. It helps a lot to read the code. 

This part of the review is focused on the Javascript aspect of the answer I will be really light on this review. I will try to make it short and quick. 

Overall, your code looks good. A+ for readability! Probably a missing spot somewhere, but no biggy. Still, your code is easy to read and follow. 

Your casing is inconsistent. You have and . Pease, use only. Same goes for , , and . Pick one style and use it! 

There's not much to say on this one. Using the handler, you can take advantage of it by picking a common parent node. Then you set the 2nd argument to have a selector. Like this: 

I'm actually happy with the results, but the comment highlighting is concerning me. Is there anything I can do to improve the highlight syntax? What can I do to improve the performance? Am I handling comments correctly or should I try a different way? 

On part of a project, I have some CSS being read using twig's function. But sending a huge chunk of CSS is not optimal. To reduce the size of the HTML, I've written this twig filter. However, I've noticed that some big files would take a bit more to be minimified. To reduce the time to re-minify the CSS, I've added a crude caching system. Assuming that you have the following: 

You shouldn't have the same salt for everything. Salts are meant to be unique per encryption. They don't need to be secret, just unique. 

With the maximum compression, you can reduce the number of colors up to 60%. Sadly, the images are all heavy-weight PNG files, and from level 5 onwards, they start to look funky. Still, it is an interesting concept, in my opinion. 

Also, one cool thing you can try is to use a random timeout, to create a varying effect on the writting, to simulate real typing! You can even add an extra interval to special characters, to be more human-like: 

Huh? The function is preparing to type the text? And only works for this example? Well, let me re-write this for you. 

Usability is really easy: Simply pass multiple s as arguments. In PHP, it is required to be an with only numeric keys. This is due to the limitations of Javascript. Example of usage: 

Now you ask: Why? And the answer is because of shortcut evaluation. If is , it won't evaluate , because we know that it will be false as well. This won't save much, but you shave some comparisons. Which is really good! 

I hope you can understand everything and hope it is clear enough for you. And hope it really helps you. 

Just for the fun of it, I was looking of ways to make true-color GIFs. I've started to write the code, and it clicked me: this won't work for that, but it does make a nice color-reduction method. Basically, it works like this: 

It all makes sense, except for the class, which I will explain later on. And please, use the HTML entities, to avoid problems with file encodings. Also, don't use for this, since it will have problems when the animation is stopped. The best would be to move the to the HTML and ignore that line. 

Still beating on that same , you should always have brackets around your statements. Remember the Apple SSL bug? Well, it may happen with you. Try this instead: 

Wow, some fine German Overengeneering going on there! You can pass it a string or an array of strings, and a 'screen', where the message will be added. 

Oh no! You are creating duplicated s! They MUST be unique! Or that will be invalid HTML. Use a instead. Also, don't be afraid of using the id . No one will die over 2 bytes. And it is way more clean. Since I've suggested to change the structure of your object, you have to use a different loop. Applying the changes above explained, and fixing the quotes: