Presuming your is the default used on Raspbian, that cannot have been left, e.g., from a previous crash. If you look back through the logs and determine this is consistently the root of the problem, you need to do something about it. Possibly this could be done with a one of the network scripts, or you could ditch those and arrange something yourself. 

Unlikely to happen at all in the first place, unless the system is extremely busy constantly -- think, enterprise internet server. That's not the case here. Incredibly unlikely to result in a problem that leaves the system unbootable; I've never actually seen nor heard of such a case (although there are plenty of people who seem to think this happens to them, a meme which is very pernicious online WRT the pi and SD cards). Beyond that, using the mentioned earlier will deal with this possibility. 

To get just the modem. That's based on the bus and ID specs from your question. You could compare that to the output in the thread, which includes more than one variant. The last one is "not what this thread is about", lol, but on the bright side, the person in the know there mentions that that device probably has a generic driver which already works. Check . If nothing shows, try and check again. If that shows, it is probably a good sign. I would try moving on to see if the modem already works. Also, edit the output into your question. You should also have a look at the usage instructions from the developer of usb modeswitch (part of the same site as that forum). 

I know this is an old question but I had this problem with apt-get. If the segmentation fault only occurs when running apt-get this might help: 

If I understand your problem you want to get to raspi-config. Open a LX-Terminal and type . This will bring you to the configuration menu. Otherwise, see below. If you are talking about the "asplashscreen" try this. Navigate here: and look for the function. Then insert as the first line in the function: . Possibly, you could change these to fix your problem in config.txt. 

Try this command: This will give you all the gifs on the system. I doubt there will be that many and you can find which one is the animation for the boot screen. 

I have started using chromium-browser which is the one the Foundation supports now. I believe the issue is hardware acceleration. Audio and video work fine in chromium. One might be able to install h264ify addon in firefox to fix this issue but I have not tried it and cannot verify if it works. 

@Steve Robillard is right in that I cannot answer your question specifically without a lot more information, but here are some pointers that should help: On a Pi 2, using a minimal version of Raspbian called Minibian I have a boot time of less than 10 seconds(although it feels even less than that). I achieved this in this way: In /boot/cmdline.txt 

In short, yes. Code from the other Pi models will also work on the Pi 2. However, the long answer is, in some cases code such as will not run on the pi 2, as is, because the GPIO addresses are different. See COMMENT Obviously C code compiled on b+ into an executable will not run on the Pi 2 because it is a different architecture. It must be recompiled on the Pi 2. Python scripts and some other languages that use interpreters however will work regardless as long as the interpreter is installed on the computer you are running the script on. 

Library packages on linux are pre-built binaries for use by other pre-built packages. "Build/building/built" and "compile/compiling/compiled" are synonymous in this context. A binary (synonym: executable, or "binary executable") is compiled from source code but it is not the same thing as the source code and the source code is not included in the binary. This is also how other popular desktop OS's (windows, mac) work. The software is compiled from source code by somebody somewhere and they package it, then you install the binary executable package. Sometimes, however, a piece of software has not been pre-built for use on a particular system (eg, raspbian). In this case you must build the software from the source code, which is what you are trying to do with lightspark. In order to do this, you need some source code "glue" for any libraries that this software makes use of (FYI: not all the source code, just a few small bits, called the header files or "includes" used as a plural noun, meaning, "things you include"). That glue is not included in the basic library package, because it is not normally needed. It is only needed for compiling code. So, even though you may have the lzma library installed, you may not have the glue code required to build things with it. Most likely, that is what the makefile is looking for. For raspbian, that glue will be in a package. The dev package does not replace the library. It just installs a few extra bits that, again, are not normally needed. Look: 

XBMC isn't in the raspbian repos, but someone does maintain a binary package for it. I'm not sure what you mean by installing "on top of". It's just an application, so this is much like saying, "I'd like to install firefox on top of raspbian". What's it going to be on top of? 

You could use and . I have never done much with bluetooth but I don't believe you need much more to get a basic connection. To get this running at boot, put the line with the path to the script in with a & to fork it to the background, e.g 

Because Android is so under-developed on the Raspberry Pi I would definitely go with Raspbian. There is much more support and more packages available and there are already smart mirrors that have been made with Raspbian as the OS to guide you. Android would be nice if it worked on the Pi but there are still thousands of bugs and right now its more at a proof of concept stage than an actual working platform for developing. 

Although I haven't found the reason for this problem, a work around which works well is setting the brightness file to 0 like so: 

You can use ssh to connect to the Pi. I believe this works with noobs and I guarantee it works with Raspbian. Plug the Pi into your modem via an ethernet cable and connect your laptop to the modem also. Open a terminal on the Ubuntu machine and type ssh pi@ipaddress where ipaddress is the address of the Pi(You can find it in the connected device section on your modem). Then, enter pi and raspberry and you are connected. 

Apparently this can only be run on a Pi Zero because of a certain feature that is only on that board: 

To turn the backlight off through software you could follow this tutorial by adding (see tutorial for full setup). This would be put in the if clause above right after . This would make the screen turn off at the same time that it blanks out. To turn it back on you would put the line in the function above in the file right after . 

Okay, I had a look at the instructions you are following. First, an observation: the assertion that not using a passphrase for an ssh-key is "not such good security" is generally false, as long as the private part of the key is safe (note the private half is never transmitted anywhere, due to the magic of public/private key pairs; it is just used by the local ssh process). Using a passphrase does not increase the security of the exchange at all, a key-pair with a passphrase is 100% exactly the same as one without, in terms of the ssh connection. The passphrase just makes the private key harder to use, should someone acquire it (eg, if they have physical access to your box, or have hacked into it somehow). In the context of a number of pi's physically linked together, anyone who gains access to one will gain access to the others, so IMO in this context using a passphrase for keys used to log from one to the other is a tad silly. Nuff said. My point is don't be too concerned at this point about whether or not you are using a passphrase, you can change this later. Also (this may simplify your life at some point), if you are using a passphrase, you can use something called ssh-agent such that you do not have to enter it all the time locally if you keep logging in and out of somewhere with the same key. Anywho, stepping thru the superpi instructions: you've added your key to the other one as per #33. Then, as per #34 you have verified the key is there. There might be a complication here since you said you re-generated the key multiple times, and will add to authorized_keys everytime. This is sort of ok, except it makes it hard to tell if the last key you added, actually got added (which once you've added one it will be prompting you for a passphrase from an existing key if you use that method to add another -- which make it sort of not ok). If at all possible, I recommend you: 

Surprisingly, it works to turn it on and off and so far hasn't stopped working. This is interesting because it seems like it would leave the screen in its original state because the commands appear to cancel each other out. However, running it once turns the screen off and again turns it back on again. EDIT 3 The above stopped working suddenly and would not work without a reboot. EDIT 4 I ran and and it still is not working so I know it is not an issue of using an old kernel. EDIT 5 I found a solution although I still am not sure why the above doesn't work. Instead of echoing 0 or 1 to the bl_power file I echo 0 or 255 to the brightness file which does the same thing. This has worked for over 4 hours now. It might be a hardware problem like the comment below this question. 

I found the answer by mistake when I was getting a bash file to run at boot! Solution To fix this problem: 

Quoting from the site linked above, "You have to pass with echo (with option -e) the commands you want to execute. Every command you have to terminate it with a new line (\n). When I do connect I use the tab (\t) so that I do not need to update the script with the MAC of my keyboard." The options for are: 

In the latest version of Raspbian (kernel 4.4), any file I stream through to or using the 3.5mm headphone jack works perfectly. However, in Firefox when I go to any site, it will play the video fine but the only sound you get is a loud static hissing sound regardless of whether you use the 3.5mm or HDMI audio output. This happens on sites that use like Youtube and sites that don't like Putlocker which uses . How can I fix this? EDIT: If I stream media through this issue disappears. However, I believe uses . EDIT2: I installed chromium-browser and it works perfectly on youtube and other sites with the audio and the video, I believe its a firefox issue but I am still unsure what is causing it.