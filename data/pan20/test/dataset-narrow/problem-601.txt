Of course, you'll need to play around with the sizes of the grid to match what you want. However you'll find that this method is much faster. 

IIFE: In your IIFE, you give it the name , however in an IIFE that function name has no meaning, the function itself is discarded in favour of its result, meaning the name is redundant. 

So, I've written FizzBuzz for a dialect of JavaScript called Dogescript. It has the same functionality as JavaScript, it simply changes some of the syntax points: 

: Like I said above, I would place limitations on the variable that means it cannot be decremented, only incremented. Otherwise a simple interval hack is possible. 

(I'm not personally familiar with , so I can't give too much of a review on your usage of the function.) 

Your code could use more explaining as to what everything does, whether line-by-line explanation or per function. The comma thing and whitespace is probably the thing I can see the most that could be improved. Other than that, your code looks really nice and tidy, good work! 

But, I just wanted to make a point on these: ing: Triggering the inner lines, as well as the lines terminate the function, so the loop cannot be executed without returning. Meaning the usage of in these situations is entirely extraneous. Additionally, when you encounter duplicate code like that, try and make it more dynamic and able to accept both conditions (As Barry's version shows) 

Note: This code DOES not map multiple, I am not asking how you can map multiple, I am asking for suggestions on my working code. 

All of your cases were testing if 's value was 4 more than the array position, so in that case, you could just minus four from and use that as an index position. 

: is a bit weird and can cause issues as it iterates over prototypes as well. Considering you're testing that the properties are array items anyway, you can just use instead. 

Your code is generally clean, you have accurate comments & variable naming is mostly consistent. and use two different types of naming. It's best if you choose one style, and stick with it. With and , you don't have a consistent use of brackets, it's best to stick to one. 

As shown in the example above, you should put whitespace between your operators, for the purpose of improving readability. Also, during mass assignment like in the example above, you should space out all the operators & variables, so that they're vertically aligned. Whoops, this isn't entirely correct, PEP8, the official style guide for Python says you should have whitespace before and after Binary operators, but not keyword arguments. See here for more information. 

I wrote an implementation of the Karp-Rabin string matching algorithm in Java 7, based on the discussion in Section 32.2 of Introduction to Algorithms (CLRS). Clearly, I need more experience with numeric programming, because I spent two days wrestling with overflow issues and floating point error, but I believe it works now. Of course, anything goes, but I'm especially looking for feedback on the following points: 

First off, I'm going to have to complain about your taste in function names, which will probably be unproductive and just lead to hurt feelings on both sides. Yes, it's that function . I don't mind so much if small inner functions defined with have names like , but to my eye, something declared at the top level of namespace—private or no—should have a more descriptive name. I would probably not define as a top-level function at all; see below for more on that. It's also confusing that you call the top-level function , then also call the function passed as a parameter to by the name and then go ahead and pass as the parameter in . I kind of don't like that you expect the output of to be a vector of vectors, but you depend on the function passed as a parameter to to return a vector instead of putting that logic inside . If I had a top-level private function that's only used once and seems too specific to ever be useful again, like , I would consider making it an anonymous function that gets passed in the one time it's used. So I would probably rewrite like this: 

which is duplicated in the second arm of your statement, but with player 1 and player 2 reversed. I would change your function to return a list or tuple of the new player states, instead of modifying them by side effect and then reassigning them into the list. Something like: 

and instead of a sequence of vectors, we'd get back a sequence of maps with keys , , and . This usage is totally unrelated to your original intention for this code, but it shows how generally useful the function is—so why make it private and hide it where no one can access it? Let it out and see what uses people can find for it. Finally, for such a small program it probably doesn't matter, but one of my favorite features of Clojure is docstrings. I would write one for any function I was publicly exposing: 

You should avoid having to manually update that, instead, by fetching the keys from the object. Something like this would work: 

If you want to make your site builder really dynamic, you shouldn't keep the page variables inside the constructor, use an like function and keep them as external options. should not be an object, you should use the functions in a mould, for example: 

The character shouldn't be in a URL, but can be. You don't really need to add to the beginning and end of your regex every time. I see a lot of people do when they could really just do with a case nsensitive search. Becomes: 

You don't need all this extraneous stuff around the PHP. If you at the top of your code, the rest of the HTML would build by itself. 

Additionally, instead of direct string concatenation, I'd recommend using instead, this can give you better control in more advanced situations: 

Reviewing your current structure: your could be improved: it should / could be inside the statement as a case. 

That's not really how you're supposed to use internals and variables. Consider using the chain instead. 

I'm a bit confused by that, grammatically. is a more complex function (in my mind, at least) than , but it has no documentation. 

I would consider other forms of animation tracking than , as assigning lots and lots of time based function callbacks would seriously kill performance. 

I've written a simple script, that takes a , style co-ordinate input, following the pattern of: $$0 \le n \le 9$$ Tacked onto the end of the output program, is a simple script that runs through all iterations of , - , . Below is a gif of that. 

Hacked Version 2 You updated your code on the website (although it still applies to the code above), so I figured I'd give it a second go: 

You can set breakpoints in the relevant debugger on your browser, usually labelled Developer Options, or something similar. 

Structure: So, as and follow the same style, as well as and following the same style, so you can substitute those out. Additionally, the and functions can be taken out, leaving: 

You ask for input like , but there's no reason to abbreviate, it could really just be: . Same things applies to the other two. 

Also, you should seperate the new-line characters into new strings and just concatenate them in. This makes for much clearer readability: