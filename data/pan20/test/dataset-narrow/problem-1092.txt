I have just been thinking about the simulated binary crossover (SBX) operator used in the NSGA-II algorithm and other real-valued genetic algorithms; and i am wondering if there is any reason that there always needs to be a crossover from both parents to both children? do both children need to be the "opposite" of each other in order to preserve diversity? or is it something that is just assumed? As far as i can tell, the SBX operator seems to basically work by flipping a coin for each indexed element along a pair of strings to decide if the operator is called, and if the coin flip is successful, it generates a pair of values that are close to the original parent values in accordance with some probability distribution, and either swaps them between the children (p1_i->c2_i | p2_i->c1_i), or inserts them into their respective children (p1_i->c1_i | p2_i->c2_i).. but the key being, that the two offspring are always the "inverse" of eachother.. eg: p1 = [4 6 2 0 3] p2 = [7 1 9 8 5] c1 = [4 1 9 0 3] c2 = [7 6 2 8 5] (to make my point easier to explain, i have omitted the fact that the child values are usually perturbed slightly from their original parent values when using SBX - ie. I am taking a child value of 2.2 to mean the same as a parent value of 2) You can see, in this way, c1 is the "inverse" of c2. Is there any reason why both children can't take on the characteristics of the same parent (p1_i->c1_i | p1_i->c2_i)? eg: p1 = [4 6 2 0 3] p2 = [7 1 9 8 5] c1' = [4 6 9 0 5] c2' = [4 1 2 0 5] I think I understand why this isn't the case with standard binary crossover, as you are dealing with blocks of values, but with real valued crossover you are taking each individual element in the string separately, so why can't both children take on the same value with a certain probability? The only reason that I can think of is that it might be in order to maintain a higher diversity among the child solutions; and if a solution such as c2' was required, then it must come from a different crossover event in the future. Is my thinking on the right track? or is there another reason? EDIT: I suppose the solution to this would be to generate two potential child values per crossover but only one child, which tosses a coin to see which of the potential values it gets; however this would require twice the number of crossover operations. 

The only other thing I would add to what has been said is, if you haven't already, do a course in linear algebra. It will help you understand things like what $R^n$ means and concepts like that. Sometimes courses on a topic will give you a brief background in the linear algebra concepts and ideas specific to the material at hand, but they are never very deep; and I always find that it is a lot easier to comprehend and absorb an idea if you have a good understanding of the underlying mechanics. I would suggest the coursera course Coding the Matrix: Linear Algebra Through Computer Science Applications from Brown University. 

Suppose, there is an algorithm for enumerating minimum clique edge cover. Is it always possible to convert the algorithm to enumerate clique vertex cover ? 

Does there always exist such a rearrangements? why ? What is the official name of this problem in the literature ? 

Is it possible to construct a unit interval graph with $n$ vertices and clique number $k$ such that any other unit interval graph with same number of vertices and clique number is a sub-graph of that graph or isomorphic to a sub-graph of that graph? My construction for k=3 is, 

For a chordal graph $G$ there is a clique tree such that its vertices corresponds to maximal cliques of $G$ and there is a edge between two vertices iff the intersection of the corresponding cliques are also their minimal vertex separator and for each vertex in the graph the cliques containing it, induces a subtree. Now my questions are:- 

It remains NP complete even if the properties are hereditary. Now clearly a solution of the above problem for a graph also provides solution for the induced subgraphs. But upon taking union of graphs of same family as G might not be solved using that solution. For example partitioning general graphs in disjoint unit interval graphs is NP complete but upon taking union of all possible edges (making the graph complete) solves the problem trivially. 

Edit: In the clique intersection graph $C(G)$ of a graph $G$, the nodes are maximal cliques of $G$ and there is an edge whenever they share a vertex. Note: This is different from the definition of clique-separator graph for chordal graphs (Which is a tree). 

I want to learn graph minor theory. Now i have read the very basic things and the overview from the book of R.Diestel but proceeding further is getting difficult. Currently, I am also following the video lectures by Jim Geelan on graph minor theory. Please suggest more books/monographs/lecture notes on graph minor theory. In case there is none, please suggest a systematic way to learn the concepts. I posted the same question here, but not sure if it reached the right community. 

Suppose there is a set of convex polygons ($\mathbb{P}$) on the plane. For each convex polygon $P_i$ there is one "facility" $f_i$ placed on the boundary of $P_i$. The distance between a point $p \in \mathbb{R}^2\setminus \mathbb{P}$ and a facility $f_i$ is the distance of the shortest path between $p$ and $f_i$ avoiding interiors of the convex polygons. My question is: Is there a known algorithm to compute the voronoi diagram ($\mathbb{V}$) in such settings ? I found something similar in Aronov's paper which deals with geodesic voronoi diagrams inside a simple polygon. Since, the paper does not considers holes inside the polygon it does not solve my problem. Edit: The problem I stated can also be formulated as follows: Consider a large rectangle ($R$) containing $\mathbb{P}$ as convex holes inside it. The point sites are placed on the boundary of the holes. Now the geodesic voronoi diagram would be same as $\mathbb{V}$ bounded by $R$. 

I know that it is possible to calculate the minimum vertex cover of a bipartite graph, However, i want that the minimum vertex cover which contains vertices from only one partite set, which will be given as input, Any ideas how to design the algorithm ? Note that the answer to the above question might contain more vertex than the minimum vertex cover but all those sets would contain vertices from both partite ! 

Since the Hilbert Curve iterations converge uniformly, that uniform limit is a continuous path that solves the maze in the analytic sense. It's as if you were able to do the following recursively defined infinite set of moves $P$: $P = APA^{-1}BPB^{-1}CPC^{-1}DPD^{-1}$ Now you might argue that this is not in the spirit of fractal mazes since the Hilbert curve fills the entire square and therefore you could just draw a straight line segment from the start to the finish. This objection is easily overridden though - simply use the hilbert curve diagram embedding directly, as shown here: 

This too contains a sequence of uniformly convergent continuous paths going from the start to the finish, by the same argument used to show the uniform convergence of the Hilbert curve. However it is a true "fractal maze" in the sense that it does not fill the whole space. Thus we have a fractal maze that is solvable by the analytic definition, but unsolvable by the graph theoretic definition..!? Anyways, I'm pretty sure my logic is correct, but it seems counterintuitive so if anyone can shed some light on this I would appreciate it. 

A fractal maze is a maze which contains copies of itself. Eg, the following one by Mark J. P. Wolf from this article: 

This is not an "answer" to my question, but rather an extended comment that people here might find interesting. I claim that there is a natural "analysis-type" definition of a maze and a solution, and it differs from the computer-science/graph-theoretic definition we've used here. In particular, you can have a fractal maze that has a "solution" under the analysis definition, but would be declared unsolvable by Marizio De Biasi's algorithm and Peter Shor's pushdown automata technique. Definition: A maze $M$ is a compact subset of the plane $M \subset \mathbb{R}^2$ containing a start point and an endpoint $s,e \in M$, respectively. A solution is a continuous function $f:[0,T] \rightarrow M$ such that $f(0)=s$ and $f(T)=e$. Now consider the the Hilbert Curve: 

Several state of the art approximate nearest neighbor methods in high dimensions are based on reducing the dimension of the space through randomized techniques. The main idea is that you can exploit concentration of measure to greatly reduce the dimension of the space while preserving distances up to tolerance $\epsilon$. In particular, following from the Johnson-Lindenstrauss lemma (upper bound) and a result of Noga Alon (lower bound), there exists a subspace of reduced dimension $$C_1 \frac{\log(N)}{\epsilon^2 \log(1/\epsilon)} \le \text{reduced dimension} \le C_2\frac{\log(N)}{\epsilon^2}$$ such that for any two points $u,v$ in your collection, their projections $\tilde{u}, \tilde{v}$ onto the reduced dimensional space satisfy $$(1-\epsilon)||u-v||^2 \le ||\tilde{u} - \tilde{v}||^2 \le (1+\epsilon)||u-v||^2.$$ Indeed, such subspaces are "typical" in a sense, and you can find such a subspace with high probability by simply projecting your points onto a completely random hyperplane (and in the unlikely event that such a hyperplane is not good enough, just pick another random one and project again). Now you have a nearest neighbor problem on a much much lower dimensional space. A key paper is, 

If a solution exists, breadth-first-search should find a solution. However, suppose there is no solution to the maze - then our search program would run forever going deeper and deeper. My question is: given a fractal maze, how can we determine if it has a solution or not? Or alternatively, for a fractal maze of a given size (number of inputs/outputs per copy), is there a bound on the length of the shortest solution? (if there was such a bound, we could exaustively search only that deep) 

There is a $O(n \log \log n)$ time algorithm to solve the longest increasing subsequence problem. You may find this and the paper by Sergei Bespamyatnikh , Michael Segal helpful. 

It is a well known fact that if $H$ is a graph of maximum degree 3, then $H$ is a minor of a graph $G$ if and only if $H$ is a topological minor of $G$. Moreover, a graph $G$ has one of $K_{3,3}$ or $K_5$ as minor if and only if it has one of $K_{3,3}$ or $K_5$ as topological minor. Furthermore, in a writeup by Bruce Reed i saw the following theorem. Theorem: For any graph $H$, there is a finite set $\mathcal{Z}(H)$ of graphs such that $G$ has $H$ as a minor if and only if $G$ contains a subdivision of some element of $\mathcal{Z}(H)$. So, my question is under what condition $\mathcal{Z}(H)=\{H\}$ or in other words, what properties must $H$ have so that $\mathcal{Z}(H)=\{H\}$ ? 

Take arbitary points on plane. Can we always find a line such that the number of points above and below the line is same? If yes, how ? Take a point set on plane. How can we find the minimum number of points that should be added to the point set such that it contains 4 points forming a square? 

Any reference to surveys in this area is welcome. I welcome any reference relating the graphs with bounded degree and to the chromatic number of its clique intersection graph. Let the independent neighborhood of a vertex $v$ in a graph is the maximum independent set with every vertex having a common neighbor as $v$. Let for a graph family $F$, we have a constant $C(F)$, such that for any graph in the family $F$, the size of independent neighborhood of a vertex $v$ in the graph is bounded by $C(F)$. Are there any studies which relate the chromatic number of the clique intersection graph family of $F$ with the above notion. 

I think only those vertices corresponding to triangles sharing an edge with boundary or holes of the polygon will be of degree less than 3. Now the number of triangles in the triangulation is fixed. So you can always get the exact ratio of the number of degree 3 vertices for a polygon. If the polygon has $k$ vertices and $l$ holes vertices and the number of triangles in the total triangulation is $N$ then the upper bound should be $(N-K-l)/N$. 

In general, The chromatic number of the clique intersection graph a graph can again be arbitrarily high. For example, take $n$ maximal cliques of size $n$ such that every pair of maximal cliques has a vertex in common. So, for which non-trivial graphs the clique intersection graphs has bounded chromatic number even if the graph can have arbitrarily high chromatic number? 

You can use the following idea. Maintain a graph,say $G^{'}$ similar to the graph that you are constructing,(say $G$) but the edges being reveresed and an extra dummy root node with a directed edge from that to last inserted node. Now when a new node comes,say $f$ in do a Breadth first search from the dummy root on $G^{'}$. Whenever a search node, say $v$ is found during BFS on which $f$ is dependent create an edge in $G$ and update $G^{'}$ accordingly. The idea is similar to you but if implemented properly runs in linear time( in number of nodes). Hope it helps.