Have you noticed a degradation in performance since doing the upgrade? If not, the issue could be that you have been experiencing the issue all along but your previous IOS version wasn't reporting the errors. let's say you are experiencing a degradation in performance though. As you're seeing output drops this typically means that the links are experiencing congestion. As you might already know, traffic is not equally split across all links in a port channel. For example, port channeling 4 x 1Gb links does not guarantee you 4Gb of throughput. The traffic is split across the links depending on what hashing algorithm you're using. Given this, it actually possible for one link to be maxed out while the other links remain dormant. While we're on the topic of load balancing algorithms, the issue your experiencing could be related to CEF polarization. 

Window sizes are used by the receiver to let the sender know how much memory (buffer) it has for that particular TCP connection. The size will keep dropping until the receiver sends am ACK to the sender which acknowledges it has received the traffic the sender has sent. At this point in time the window size is increased to accommodate the size of the traffic which had been acknowledged. For example, if 8KB of data was sent, the window size would drop by 8KB. If then 3KB is acknowledged, it will be increased by 3KB at that point in time. If the sender does not send an ACK, the window size will eventually drop to 0 and the sender will stop sending new traffic to the receiver until it receives an ACK (it will resend old data if it doesn't receive an ACK within a reasonable amount of time (this is called a retransmission)). In regards to the maximum window size, this can be increased using the window scaling option. This option is used to allow more data to be sent before the sender has to wait for an ACK. This is to ensure that high latency links can still fully utilise their links (see Long Fat Networks and Bandwidth Delay Product for more information). Also, please see this link for more information on both TCP windows and scaling. 

Definitely spread hosts across stacks where possible. This eliminates the switch from being a single point of failure. As stacked switches have dual rings they avoid being a single point of failure (provided that all hosts are connected to a minimum of two switches in the stack.) 

No, it is not possible to receive part of a segment. This is because the checksum calculation will be incorrect. As described in this blog post: 

The answer above hits the nail on the head perfectly. However, when I first started out, it took me a few different examples from a couple of sources for it to really hit home. Therefore, if you're interested in other examples, I wrote a few blog posts on the subject - $URL$ Admins, if this post is considered spam, please feel free to delete it. Edit: As per YLearn's suggestion, I'll try to grab the relevant parts from Part 1 of my series, without pasting the whole entry here. Let's use 195.70.16.159/30 as an example. As it is a /30, we know the host portion is going to be in the fourth octet. Let's convert that to binary: 

Form the BGP neighborship loopback interface. As per this thread: The use of a loopback interface ensures that the neighbor stays up and is not affected by malfunctioning hardware, the main benefit from using loopbacks is that it will not bring down the BGP session when there are multiple paths between the BGP peers, which would otherwise result in tearing down the BGP session if the physical interface used for establishing the session goes down. In addition to that, it also allows the routers running BGP with multiple links between them to load balance over the available paths. 

The issue appears to be that you've configured the default route in the Management VRF but you're pinging from outside of the Management VRF. Therefore, you're pings are failing. If you want to set up a default route for VLANs100 & 200, you'll need to configure the default route in the main routing table. e.g: 

Yes, you can. As per the information in your post, n0's IP address is 10.1.5.2. Therefore to alter the return path you will need to change the route for 10.1.5.0 on n4. Currently it looks like this: 

The easiest way would be to set up a VM and then run iperf on your PC as well as the VM. Doing this ensures you have two hosts with different MAC addresses. 

In regards to how the metric is calculated, I wrote a detailed blog post about it a little while back. The short of it is that the metric is calculated by using this formula: 256*[(10000000/)+(/10)] When we run the figures you provided (Vector metric: Minimum bandwidth is 100000 Kbit Total delay is 200 microseconds) through this formula, we get the correct metric: 10000000 / 100000 = 100 200 / 10 = 20 100 + 20 = 120 256 * 120 = 30720 

Perhaps the default information originate command is incompatible with IP SLA. You've probably already seen this, but this Cisco forum post talks about using a bogus static route (the same method you used to get it to work). $URL$ Using this method means that the default information originate command is not interfacing with IP SLA directly. 

On a Cisco Layer 3 switch (also known as a multilayer switch), the term is inter-vlan routing. As Tolga pointed out, if you're talking about a router it's called Rotuer on a Stick. Although two different terms are used, they do exactly the same thing but they're done on different devices (switches and routers) and are connected in slightly different ways. 

In other words, the subnet mask determines how many bits are network bits. Because the subnet mask takes the two most significant bits from the fourth octet (128 + 64), we get a subnet mask with its fourth octet set to 192. As the host address uses the two least significant bits (1 + 2), we get 3. When that 3 is added to the last octet of the network address (128 + 3), we get 131. By the way, in case you're interested I've written quite a few blog posts on subnetting. EDITING to respond to your comment - "You basically told me how to calculate subnet mask (128 + 64) = 192, but the question was why 131 is a host address?" The host address is found simply by adding the host bits to the subnet bits when the two are in the same octet. Let's take another look at the example you gave: 

No. This is called router on a stick and was popular before L3 switches were widely available. However, now that they are widely available, you should use the router to connect to the WAN and use the L3 switch to handle inter-vlan traffic on the LAN. Doing this means that if the router fails your inter-vlan traffic will still work. Also, if you add additional routers to the topology at a later date, the switch will be able to use both of them for outbound traffic as opposed to only using your current one. 

The reason being that your current route (10.1.5.0/24 via 10.1.6.2 dev eth2) points to n2, whereas "10.1.1.2 dev eth4" points to n3 as per your diagram. Therefore my suggested change above says "traffic which hits n4 and has a destination IP address of 10.1.5.0/24 can reach its destination by going through eth4." In other words, this will result in traffic flowing in the following manner: n5 - n4 - n3 - n1 - n0. In other words, traffic from n5 to n0 will go via n3. In order for traffic in the opposite direction to take the other route (n0 - n1 - n2 - n4 - n5, in other words, traffic from n0 to n5 will go via n2) you will need to do the following: Remove this from n1: 

The above means we'd have two subnets with two usable host addresses each. Or to word it a little differently, we'd have four usable addresses spread across two subnets. 

I wouldn't disable STP in your topology. There's no need to. STP is used to ensure a loop free topology. If they haven't been already, you should bundle your Dell ports into a single port channel. As your EXs are stacked they appear as one logical switch and therefore will be able to form port channels on their end too. This results in you having a logical star topology with no loop, therefore STP will not block any ports. If you're concerned about Chassis 3 being the root bridge you should reduce EX stack's priority to ensure that it becomes the root bridge. FYI though, if you implement port channels as I've suggested above there are no redundant paths for STP to block, therefore it doesn't matter which switch is the root bridge. (To cover off future issues though you should make your core switch the root bridge as suggested above). STP should never be disbaled unless you have an extremely good reason to do so. If you're wanting to reduce the amount of time it takes for an access port to come up, you should configure it as an edge port instead of disabling STP. 

Unfortunately you cannot traverse subnets without an IP address. arping will do exactly what you want, except only on a single subnet/VLAN. If you'd like to scan the next network, you'll need to change the VLAN your "scanning" PC is on then re-run arping. If you have a large amount of VLANs and the above solution would be too time consuming, you could either: 

As the ISPs router has a leg in both networks you should be able to route between them the networks using that router. You wouldn't need to purchase any additional equipment or use an additional network card. A good way to test this theory is to ping from a PC in one network to the backup server in the other network. If this works then your backups will work too. 

This is incorrect. Broadcasts are sent by a host to all other hosts on the same subnet (PCs, phones, routers, switches, etc) at the same time. The destination MAC for a broadcast is FF:FF:FF:FF:FF:FF. If the packet was to be sent to a router or switch the destination MAC would be that of the router or switch and it would be a unicast packet as opposed to a broadcast packet. Now having said the above, in order for a broadcast packet to reach the other devices it will need to go through at least one switch. When the switch sees the destination MAC of FF:FF:FF:FF:FF:FF it usually sends the packet out all of its interfaces which are in the same VLAN, except for the interface the packet was received on. However, when Dynamic ARP inspection is enabled the switch is able to drop the packet instead of sending it out all interfaces if it deems it to be a malicious ARP packet. See this page for more information. 

I've posted about this on my blog a few times. The short of it is that you bind your PC's network card to a cloud object in GNS3. This connects your virtual (GNS3) network to your physical network. If your PC is connected to a switch, everything on that switch will have connectivity to the virtual network and vice versa. If you're still having connectivity issues, switch off your PC's firewall and try again. 

Ping uses ICMP whereas web browsing uses HTTP (TCP port 80) and HTTPS (TCP port 443). It sounds like the two TCP ports have been blocked but ICMP has not. 

Don't trust GNS3 for throughput tests. As soon as you use a router in your topology you are likely only to get 5mb/sec tops, regardless of whether you use a serial, ethernet or fast ethernet interface and regardless of how powerful your PC is. (Note that the performance hit won't be seen if you use a GNS3 switch instead of a router, however, the switches are extremely limited in what they can do). A few years ago GNS3's website used to say something along the lines of don't use GNS3 for production workloads as GNS3 routers perform more than 1,000 times slower than the real thing. I know you're only labbing, but the reason why I mention this is that the devs themselves say its performance is not even close to what you will get from real equipment. Finally, just an FYI - A little while back I did a few iperf tests through a couple of VMs connected to GNS3 on my i7 with 32GB of RAM (see this page for specs, though at the time of writing I only had 16GB of RAM). If I recall correctly I only got about 3mb/sec. However, when I rejigged the lab to include a couple of Riverbed Steelheads I saw a massive improvements, but that's a whole other story :) To sum up the above - GNS3 is great for testing protocols, configs, etc but is pretty much useless when testing throughput. 

As you've only got one router you simply can't have redundancy at the router level. If you want redundancy at the router level you'll need to purchase another router. In regards to switch redundancy, as I mentioned above you can attain this by implementing HSRP between the switches. 

A PC automatically acquires a 169.254.x.x/16 address if it does not receive an IP address from a DHCP server. If you disable the DHCP server on your home or lab network and issue the "ipconfig/release" and "ipconfig/renew" commands, your PC will receive a 169.254.x.x address. As per this article: