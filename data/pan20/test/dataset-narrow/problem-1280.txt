1) Isn't much of a problem for me - everything entity related lives in its own entity namespace. 3) Isn't much of a problem either, since a null result can be considered an error, its just that I don't get any more additional data out of it. 2) is the biggest problem, but I think defining codes to differentiate entities is a problem that every sort of entity system faces (and is also the point of the original question as well) so its kind of a moot point. 

Assuming your setup code remains unchanged, and after checking the source code for Assimp .NET, try this: 

I'm creating a basic scene/level editor using XNA/Winforms using the base classes from $URL$ Everything works fine and gets drawn to my custom graphics device control - grid, axis, random testcube. However, I'm loading textures using Texture2D.FromStream, and then applying alpha pre-multiplication to mimic the content pipelines behaviour. This involves rendering the texture to a RenderTarget2D, overwriting the existing texture data, and then restoring the default back buffer with SetRenderTarget(null). Afterwards, the control doesn't render anything. It clears the screen with the default color, but nothing shows - no grid, no axis, no random test cube. Curiously, if I use the same texture loading method in my XNA game, everything works as expected. Textures gets loaded and everything shows up ingame. Things I've tried: - Disabling the alpha pre-multiplication function (everything shows up, nothing shows if its enabled) - Calling reset on the graphics device and its service to see if that fixes it (it doesn't) - Changing the color used to clear the screen when I've loaded a texture (screen color changes and everything vanishes) - Recreating my grid, axis and test box (nothing shows) - Fixing the projection/view so it looks at (0,0,0) (everything still disappears) Anyone know what the underlying issue is here, or anything else I could try? Render code 

I'm a bit late to the party, but here is my solution from my games EntityManager. It avoids static maps and switch statements. I've commented the code to help explain what it does. 

For whatever reason, this seems to be causing nothing to be rendered out. How and why I don't know, since this is the only time I'm using a SpriteBatch (currently) in my code, and all my other draw calls are using DrawPrimitives and DrawIndexedPrimitives. [EDIT 2] I've managed to narrow it down further. The issue seems to be with the line in the tantalizer. Why this only causes a problem in WinForms and not XNA stumps me. Its all using the same code underneath. 

The ContentManager loads all your textures into memory, your modules just have a pointer which references the loaded texture. There isn't duplicates unless you load 2 identical but differently named files. Yep. Its easier to just have your modules load there own textures, not to mention its tidier and your modules don't have to rely on something else loading its textures - it has control when it comes to loading. Yep. What you current have is not the best way to do it in my opinion. You can do it what way, but I feel there are better ways. In the end it boils down to what you're comfortable using, and what you feel is best. 

Right mouse click on the Content Project Select 'Add' then 'Existing Item...' Navigate to the folder containing your content, change the filetype from the drop down box if needed, select your content file, then click on 'Add'. Use your content. 

I would imagine a custom pixel Shader for the SpriteBatch would be the fastest method here. Using something like this: 

The .NET version of Chromium Embedded Framework (CEFSharp) does have a version for offscreen rendering, however you need to handle converting the rendered screen into another image format to use with your framework of choice (in this case Unity). There also does seem to be a recent discussion about integrating it into Unity. As for alternatives, there is Awesomium, however I don't recommend it as it is still running on Chromium 18 (with no plans to update in sight, apparently they are really busy improving the API for the next big version), virtually no CSS3 support and the engine takes a good few seconds to start up in a parallel thread, meaning the actual screen will be blank until it finishes its start up. However it does have good JS bindings compared to CEFSharp (you bind individual methods instead of entire classes), and it has a much more user friendly API, which means its easier to pass mouse and key events compared to CEFSharp. CEFSharp, on the other hand is a lot rougher around the edges in regards to its API, but a lot faster on startup and is fairly up to date (it was running Chromium 43 or 44 when I tried it out a month ago). You'll also need to pass mouse and key events to the browser instance as well, but you'll need to do some digging to find the correct handlers, as they are buried rather deep in parent objects (took me 2 days to find the correct functions). Only issues I had with it was that it took a while to shut down and the API wasn't as user friendly as Awesomium, which made it a bit awkward to work with, and its JS binding didn't seem to like existing class instances to bind to. Coherent UI is probably the best option around, and is supposed to have Unity bindings, but is rather expensive. Googling reveals that the Unity Asset Store has a few cheaper options available. If you don't want to use any of those, it is probably possible to implement the offscreen versions of CEFSharp or Awesomium into your Unity game. I don't know how difficult it would be, but provided you could get mouse/keyboard input and render a 2D texture over the entire screen, it is probably doable. I integrated both of them into XNA/MonoGame, and I still have the code referencing the functions to be called to pass input/get the rendered screen to a texture lying around somewhere if you want to try and implement it. 

Since this is a top down shooter, and you have the basic shooting done, here is a 5 minute piece of (untested) incomplete code that allows for the creation of bullets at different angles. 

It is possible to just pass the Content Manager to your modules, and have them load their own textures/data. Its also tidier, as the Module is responsible for loading its own textures, and doesn't have to depend on its resources being loaded elsewhere. I do something similar - my data objects have a string specifying a texture/model, and my rendering code uses that string to load the corresponding texture/model via the ContentManager when an object is being drawn. Essentially, my rendering class uses the textures/models, so its responsible for loading them. The data objects just tell it what ones to load. Also, Texture2D is a class, which means its passed by reference by default. Only the ContentManager actually holds the Texture2D itself, and your modules hold a pointer which refers to the memory location the Texture2D has been loaded into. So despite having 15 pointers across your unit classes, there is only one instance of each texture through your program (unless you have 2 identical textures which different filenames loaded individually). The ContentManager also caches all content files it loads, so trying to load an already loaded file returns the one it loaded earlier. Sadly, there is no way to remove individual textures from the ContentManager - you unload all content, or none. The above summarized & answering your questions: 

In any sort of design related field, its not 'stealing' unless it is a blatantly obvious copy. Rather more, its typically 'inspired by'. As for coming up with your own numbers for weapon damage and attack speed, its not that hard. You don't even need to 'steal', or be 'inspired by' the numbers, although you can be 'inspired by' the range of valid values. To come up with your own numbers, envision the type and typical use of the weapon, and assign stats accordingly. I'm going to give a few examples using various weapons. 

Can someone shed some light on this please, and maybe provide a parameter sample or two so I can better understand? (I'm one of those people that can spend 2 hours trying to understand a theory and make absolutely no progress, and get it in about 5 minutes after a few examples [or half dozen for more complex stuff]) 

For my current game I'm working on I've decided to implement a custom model class to store my models in. Reasons being is that I want to make adding new models as painless as possible for the rest of the team without needing to go through the XNA/Monogame content pipeline (Them having VS + Dev framework installed just to compile a few models, or passing them onto me to compile every time a change is made would just get tedious further on, not to mention different timezones when testing slowing things down) To this end I've been looking at the model structure of different frameworks, XNA/Monogame, SharpDX and AssImp.NET being the main ones. The structure for XNA/MG and SharpDX is Model->MeshCollection->MeshPartCollection, whereas Assimp only has Scene->MeshCollection. From previous experience in XNA, MeshParts seem kinda redundant. None of my meshes ever had more than one, and a lot of the XNA examples I've seen only ever had one mesh part per mesh. From everything I've experienced and seen, MeshParts seem redundant, surplus to requirements and just makes for an extra level of complexity (Should I use a loop, or just hardcode it to use the first element in the collection?). Is there some useful aspect of them that I am not aware of, or a particular use case or scenario where they are actually useful? 

Identify the target. Identify what ports are open by pinging them (22 for SSH, 80 for HTTP, etc). Identify what resources are being run (port 80, so we're looking for webservers, port 22, so we're looking for unsecured ssh ports). Try and exploit known vulnerabilities that exist in common software used by the attack target to get in. Gain access, and then configure the system to do what you want. Email server? Set up a spam bot. Company server? Steal user/company information. Joe Bloggs personal computer? Install rootkit/cryptolocker and then have him pay you to 'restore' his computer. Security system? Take control of cameras and electronic door locks. Also, change passwords/keys or wipe them to prevent people from getting in and stopping you.