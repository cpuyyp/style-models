Instead, you should create method for this component. All this method has to do is just return the initial state in object form. So, it'd look like this: 

User-supplied length What if the code using this function doesn't want to have the entire string reversed? What if they only want the first part of the string reversed? To allow for this, you function should accept the amount of characters to reverse: 

Normally, itself can be slow. However, this jQuery function is even slower because, not only does it have to traverse the DOM in search for a single element, but it also has to wrap it sugar another object for access to more methods/properties. It'd be better to reduce your calls to this function. Instead, store the return from a single call in a variable and use that: 

Note: The indent before the local label is simply my preference; you might not like the indent. It doesn't matter Be careful, now, when you are doing your jumps() to make sure to put the '.' before the label name. 

To change octaves, you use 'z' to go up one octave and 'x' to down one octave. The code virtual_piano.asm 

Versatility Right now, this function will only copy elements to the space before all the elements in an array that would be returned from an array-inducing selector (such as ) if the second argument is a string. But what if I, the code using your library, has already gotten the elements with ? Now I can't use your function because it only accepts single elements in when it is not of type string. To make your code more versatile, you should expect that is an array if not a string, and then to loop through the array appending the element like you do in the part with the string, like this: 

If the expression evaluates to , it will return . If it evaluates to , it will return . Note: I omitted the because JavaScript automatically checks for something to equal . 

If you are going to use a coordinate system for your board, then I recommend that you prompt the user for both the numbers at once, perhaps delimited by a comma. An example of user input would be: 

Note how this code looks almost identical to the first code snippet in this answer. The only difference here is that you are preparing the system resources ahead of time; just like regexes. This will provide a speed boost in your code if used correctly. 

Yeah, it doesn't look that much different, it just follows practice in a better way. Other than that, you code looks very Object Oriented - which is a good thing. Speed Like I said before, this code is very Object Oriented, so there isn't much to change in terms of speed and efficiency. But if you want to, instead of storing instances of classes in variables, you can just use the instance of the class for what you need right there. For example, in the first part of the first conditional of your DragonCurve class, you could change: 

Use... ALL THE S! In your and functions, you are using a lot of calls. Generally, you want to keep IO function calls to a minimum because they can be expensive. Instead of having a bunch of calls, you should just use one call. This will help speed up your code. 

However, you should be catching the type of error that would come out of that line. I'm not sure which error will come out, but I think it is either a or an . Either way, you'd change your to something like this: 

I'm not sure how much performance is to be gained from this (not much, I don't think, but I'm not sure), but yes; this can be simplified. Both of the functions that you have presented share the same scope, so there is no need for an animation parameter since you are always passing in that variable. Basically, all you need to do is remove that parameter. 

Now to talk about your HTML. The tags inside the tags should be indented. Some are, some aren't, and that is even worse than not having them indented at all. You should try running your code through an HTML validator. 

Right now, to keep track of what picture you are on, you are setting the current element's to "next". Instead of interacting with the DOM to keep track of which element, try this: 

I apologize for not giving a more in-depth review. As mentioned, I had trouble understanding the math and why it was being done. 

Also, from the code that I've seen that iterates through the characters of a string, this way (as I have shown) is more common. 

Then, when you come to the conditionals, you only have to check if the user entered a lowercase 'r', 'p', or 's'. Also, I noticed that you tend to split up your messages a bit. By that, I mean that you split up your s and your s. Since the function takes an argument that it logs to the console, why don't you just put whatever you would've initially printed as that argument? For example, these lines: 

where is a function that takes two integers as arguments and returns a single integer. Then, when setting up these operations, you can use the new class: 

Note: and are bad variable names. I used these because I was unsure of their original use in the code. You should think of better ones. Great, we have a dictionary, but that still doesn't help us not have to repeat code. That means it's time to create more parameters! This parameter will be one of the keys of the dictionary so the function knows which random number to grab. 

There is no point in having a loop where the condition being checked is ; if it were just a normal loop, it would run atleast once anyway. I recommend that you change your to just a as loops are much more common. 

A few other changes I made: - Stored the $('...') elements in a variable (faster) - Also store the 'top' values in variables (cleaner) Now, your code is simpler since you don't have two functions that look almost the same, yet are doing opposite tasks. Now, in the , you have: 

Now let's look at the class. The first thing I notice is that giant for-loop. Again, every single case of the for-loop looks almost identical, except for the button being acted upon. Therefore, I would normally recommend that you create a for-loop for this. However, because a user can only click those buttons on your calculator, I'd say that any sort of for-loop is completely irrational; you already have the button that was clicked in . Therefore, why don't you use that? Now the code becomes really simple: 

This completely eliminates the need for any conditionals and function calls, thus speeding up your code by a lot. 

Indentation You have none! Which, in my opinion, is better than having bad indentation. Luckily for you there is a handy-dandy tool that you probably already know about: JSFiddle. At the very top of the page is a button labeled "TidyUp". 

Built-ins Your function is mimicking exactly. Use the built-in instead. This also means you won't need now. 

Time to fix the bad practice mentioned above. Instead of modifying the very structure of the parent object every time is called, you should instead push the new object into an array. This will keep all the added objects in one, easy to access place. This all removes all bad practices. 

Functions At the very last line of your code, you call a function. Since there are no conditionals surround that call, why do you have it out there? There is really a point in putting all of your code into a function if you are just going to call the function on the next line. And, since this function is the only part of the code (at least that's my impression of it), you can just remove it and when your code runs, it will run as if it will run the same way. 

I don't believe that the call at the end of your code will actually run. This may not be necessary, as the socket may close automatically, but I would set up a signal handler to close the socket when someone tries to exit the program. You can use the library. I came up with something like this: