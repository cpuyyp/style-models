I think in this situation you should add the extents of the moving AABB1 to that of the static AABB2 and then perform a Segment<>AABB test. In this case the segment starts at the position of the moving AABB1 and ends at position of AABB1 plus its velocity. The result of the Segment<>AABB test will give you normal, thus the side. Assuming the segment intersects the AABB, you can then calculate the penetration, if needed, or just the actual 'just touching' position of AABB1. This test works for any aspect ratio AABB, at any velocity. I think the best example I saw of this was here: $URL$ 

I've been using ECS for a while, at the moment I'm using my own, but it's pretty standard. Components are data only, Entities pretty much just a Map with some additional metadata and Systems that match combinations of components and contain the logic. You have combinations of components that result in the more general functionality. For example Position + Graphics gives me some nice static background image. Position + Graphics + Physics gives me a entity that can move around etc etc This question is about the various options for implementing more specific game logic. But say I want to implement a Door. It has Position, Graphics and a Collidable Hull but it needs 2 states, open and closed. When its open it has texture A and its Collidable Hull is disabled, and when its closed it has texture B and its Collidable Hull is enabled. Lets say the state change should be triggered across some internal channel in the engine. What are the options for implementing this state change? Option 1 is to create Door component, with say 2 variables, door state and state change channel. I'd also need a door system that handled the logic to manipulate the components when it receive the open/close message. Option 2 would be to create a FSM. The FSM is probably also a component with a corresponding FSM System. Logic and state would need to reside somewhere, possibly by sub-classing the FSM or having a generic property map in the FSM and static logic functions for the Door defined elsewhere. There are more exotic alternatives to FSM's i.e. Actions Lists or Behaviour trees, but they are similar to option 2. What considerations are there for choosing a full component/system over an more generic FSM type solution? What if I had 100 different game objects with different behaviours? Would you really expect 100 component/system pairs for each one or would you try and create a more generalized solution? Are there any other options? 

I am trying to make a pixel shader that achieves an effect similar to this video $URL$ My basic idea is render the scene to a temp render target then Render the previously rendered image with a slight fade on to another temp render target Draw the current scene on top of that Draw the results on to a render target that persists between draws Draw the results on to the screen But I am having problems with the fading portion. If I have my pixel shader return a color with its A component set to 0, shouldn't that basically amount to drawing nothing? (Assuming that sprite batch blend mode is set to AlphaBlend) To test this I have my pixel shader return a transparent red color. Instead of nothing being drawn, it draws a partially transparent red box. I hope that my question makes sense, but if it doesnt please ask me to clarify Here is the drawing code 

How can I access the nth element in a texture2d from a pixel shader? For example if I wanted to get the 5th vector4 from 10 x 10 texture2d 

You shouldn't be checking every block stored in collisionMap. it is many times more faster only detecting blocks around the player by indexing the original tile map. To check if you are standing on a tile: 

Edit: Try the following, flip the y by map height which you say is 21, given it starts at 0 and not 1, then its 20-row and not 21-row 

You were using rectangle.Center.X for both x, y You were using the center of the player rectangle as your top, left when creating potentialNewPosition rectangle. 

This >> means rotate the bits X number of times. 32 is a power of 2 number, i.e. it is a bit in binary, for this reason, rather than doing divide by 32, you can do >> 5 instead. The advantage of doing this is the rotating bits is far faster at machine level than doing a divide and you also do not have to worry about rounding. 32 in binary is 00010000 So, if you 000010000 >> 5 Becomes 00000001 which is the same as 32 / 32 = 1 If you want to learn more, search for bitwise rotation 

If I call tex1d from my pixel shader on a texture that has been initialized as a texture2d will it treat the data as a one dimensional array and then just take the element at whichever position you specify? For instance if you have a 10 x 10 texture(that would be a one dimensional array 100 elements in length) and you call tex1d(mySampler, 0.95) will it give you back element 95? 

It seems to be related to the pixel shaders that I am using to animate the particle. In a nutshell, I have a texture2d in vector4 format that holds particle positions, and another one for velocities. Here is a snippet from that area: 

What I comment out the code that calls the particle animation pixel shaders the bloom component runs fine. Is there some state that I need to reset to make the bloom work? 

I have simple app that renders some particles and now I am trying to apply the bloom shader from the xna samplers ( $URL$ ) to it, but I am running into this exception: "XNA Framework HiDef profile requires TextureFilter to be Point when using texture format Vector4." When the BloomComponent tries to end the sprite batch in the DrawFullscreenQuad method: 

You get the player X,Y co-ordinate Add the player height to Y. Divide this X, Y by tile width, height Index the original map data and get the tile check if tile == "n" to determine if are standing on anything or not. 

The % part is modulus which ensure that the grid X,Y are wrapped round without using if statements to check edge boundaries. If that doesn't quite work try exchanging the parameters around to: 

You do this twice, once for the bottom left hand side of the player and once on the bottom right hand side of the player. Code is rough and some variables are just made up but names give clue to what is what: 

row would make more sense if you used newPos.y and not newPos.x, so try swapping them round like I have done below 

I guess it safe to assume it is never negative, given that doing so would be reading outside the confine of the array. If that the case, simply rotate the bits 6 times which gives the same results but is far faster than using the int divide counterpart. 

Lets say I have my XNA app window that is sized at 640 x 480 pixels. Now lets say I have a cube model with its poly's facing in to make a room. This cube is sized 640 units wide by 480 units high by 480 units deep. Lets say the camera is somewhere in front of the box looking at it. How can I set up the view and projection matrices such that the front edge of the box lines up exactly with the edges of the application window? It seems like this should probably involve the Matrix.CreatePerspectiveOffCenter method, but I don't fully understand how the parameters translate on to the screen. For reference, the end result will be something like Johhny Lee's wii head tracking demo: $URL$ P.S. I realize that his source code is available, but I am afraid I haven't been able to make heads or tails out of it. 

I have particle system, and I want to the individual particles to take the shape of a star. Which should be faster: Drawing the 10 polygons using a flat shader, or 2 polygons (a square) with a partially transparent texture?