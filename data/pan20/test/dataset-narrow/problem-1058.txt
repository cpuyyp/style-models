I am not sure what color problems you were having that caused you to try to switch to inside tmux, but you should probably try making sure you refer to a color-supporting terminfo entry in your TERM values both “inside” and “outside” tmux: e.g. configure your terminal emulator to set TERM to , , , or as appropriate; and use in your tmux configuration (or ). 

iTunes will automatically launch if it was not already running, then it will start playing the playlist. Paste the code into an empty AppleScript Editor (Script Editor prior to 10.6) document. 

It maps \Control-A ( defaults to \, see ) to run the usual Control-A the number of times specified in the register. You could even use this to rebind the default Control-A (leave out ), but that seems like it could lead to confusion later if you ever forget about the mapping. When the register contains , it works like this (switched to double-quote notation since it is impossible to represent Control-A in a single-quoted string literal): The and functions are evaluated, resulting in this Ex command: 

It sounds like it is working this way for you (you said that your window named changed to when you were in that directory). If you want to disable this automatic renaming, you can can disable it completely by setting the DISABLE_AUTO_TITLE shell parameter to in your : 

Spell Check via Keyboard There are standard shortcuts for the built-in spell checking. Not all applications may have these menu items. 

The default binding for Prefixs was changed from to the new command (i.e. choose from the tree of sessions and windows). To revert to the old behavior, simply rebind to (e.g. in your ): 

Or, depending on your needs, you might like to use . The man page has a list of other format variables. For example, when run inside a pane, this command 

Command Placement As noted in each of the above suggestions, the placement of the commands is important. They should each work correctly if you put them in . But some of the commands can also be effective in other contexts. The biggest influence on the effectiveness of the menu commands is their position with respect to the sourcing of . This file contains the commands that build the menus. It is automatically sourced between and , but it can also be source manually (e.g. see ). Most of the commands in this file are protected by an if statement so that they are only ever run once. This means that you could source it manually and then redefine some of the menu items in your so that you could use the changed menu items in both the console and GUI modes. Placement of , … The commands from the “Redefine the Menu Item” solution can be effective in your if you put before them. If you do not source first, then your definitions will be overwritten if/when it is sourced later (i.e. later in ; automatically, when switching on syntax highlighting; automatically, before for GUI-based instances of Vim; or manually, at a prompt). Most GUI instances of Vim use for the menu item, but MacVim inserts an submenu in the hierarchy to match the usual Mac OS X arrangement, so the commands should be protected by (so that they do not cause errors if you ever use your startup file with a non-MacVim build of Vim). Placement of The command is only effective at startup time. You can type it in at a prompt, but it does not actually change any setting if you use it that way. This is mentioned in , but I missed it the first several times I skimmed the documentation: 

If you want to install it for all users on the system, then try one of the later directories in the list (one of which is the version specific value that is also in Vim's variable). 

To use vim more effectively, I would concentrate on learning more of the specialized movement commands (parens to move by sentence, braces to move by paragraphs). They can be combined with the editing commands (delete, change, etc.) once you are familiar with them. Also, learn the ‘a’ and ‘i’ combinations for selecting (and applying commands to) objects around the cursor (e.g. to delete the sentence that the cursor is in: compare to , which has three Shift toggles). Learn to apply counts for larger movements (e.g. to change the next two words, to delete the sentence the cursor is in and the next one). Use marks to jump to frequently used spots. I forgot one of my favorite movement commands: /// move forward or backwards (lowercase or uppercase, respectively) to the next or just before the next (f or t, respectively) character you type: moves to to the next to the right, moves just to the right of the next open parenthesis to the left (swap left and right for right-to-left configurations). Making big changes For repetitive edits, use the macro recording function to record and to playback sequences of the same commands. Use registers instead of copy and paste, it will save a round-trip (since macros are stored in registers, you can use the register store/retrieve commands to fixup errors in the macro without re-recording). Use the command to make global replacements/deletions. 

There are three distinct classes of options: server, session, and window. These classes are exclusive: each option belongs to only one of the classes. There is never any inheritance between the option classes. There is only one level of server options, so there is no inheritance there (although you can have multiple, independent servers using the or command line flags). The session and window options each use a two-level hierarchy: the global session (window) options provide default values for session (window) options that are unset. Session and window options are all initially unset, so new sessions/windows will automatically use the global session/window option values. When a session option is set (), the newly set value will override the global value for that session. To go back to using the global value, unset the option (). Changes to the global session option values will affect all sessions in which that option is currently unset. The same idea applies to the window options (except setting a window option overrides the value for an individual window instead of an individual session). 

It looks like there might be a small bug in the tmux code that parses the layout strings. Try prepending a space or a zero so that there are four characters before the first comma. 

Start FastScripts. Activate Entourage (make it the frontmost application). Click FastScripts > Create Entourage Scripts Folder from FastScript’s menu icon on the right-hand side of the menu bar (its icon looks like a black scroll with the ends curled over and under and a lightening bolt on the smooth section). The part of the menu item label might be different, use the only menu item that labeld like “Create appname Scripts Folder” (do it while Entourage is frontmost though). This will open a new Finder window for the new folder. Leave it open and off to one side for now. Activate AppleScript Editor. If an empty document did not come up automatically, use File > New (⌘N) to get an new, empty document. Use File > Save As… (⇧⌘S) to save the empty AppleScript program. Click and hold, then drag the icon from the title bar of the Finder window to anywhere in the Save As “dialog” in AppleScript Editor. This will “move” the dialog into that folder. Or, you could use the controls in the “Save As” panel to navigate to the directory manually. For “File Format”, be sure “Script” is selected. Type in a name for the script (e.g. ). Click “Save”. Click FastScripts > Preferences… from FastScript’s menu icon on the right-hand side of the menu bar. Choose the Script Shortcuts “tab”. Click the right-pointing disclosure triangles in the list of scripts until you find your new script (start with , then , finally ). Double click the “(none)” in the Shortcut column next to your saved script. Type Command-Enter (⌘↩) to enter the shortcut. Activate Entourage and get to a point where you can use Command-Enter (⌘↩) (compose an email to yourself?). Try the keystoke. Hopefully, it should now “do nothing” (FastScript should “eat” it and run the script that does nothing instead of letting the keystroke get to Entourage). 

Not quite an answer to your Carbonite problem, but while researching online backup systems recently, I found Backblaze. They will backup external disks (though not network-based storage). Besides switching services, upgrading your internal drive (or adding another one, if you have an extra bay) seems like the best way forward. “Disks are cheap”, right? 

If you mean that you want to uninstall all the versions (non-active and active) of (e.g.) the port, then try this: 

Hooks are (currently) exclusively configured per-repository, so there can be no active hooks before a repository is created. If you just want to initialize some repository specific settings identically for all new repositories you might be able to use the repository template mechanism. By using your own template you can 

Multiply linked tracked files will not cause Git’s object store to grow much since each link will be represented by the exact same blob object. Your working tree, however, might end up growing due to broken links. Git does not track whether tracked, working tree files are hard links to the same file. Git will leave multiply linked, tracked, working tree files alone if you do not ask it to do anything that would involve modifying the content at those pathnames or deleting the pathnames’ directory entries. But, if you were to (e.g.) checkout an old commit or branch and then switch back to your normal, most recent branch/commit, then Git will end up “breaking” the hard links (replacing the affected pathnames with new (but identical) files instead of recreating your multiply linked situation). To recover your multiply linked status you could write a program to scan for identical files and relink them to any one of the files. Such a “relink” operation may be more complicated if all the links are not in the working tree itself or, at least, not in some easily identifiable “external” location (i.e. it will probably be difficult to recover the links if you are linking “random” files from all over your home directory into a “backup” repository and using Git to modify the working tree). The idea has come up on the Git mailing list: 

Command line editing is a function of your shell, not of Terminal. Probably your shell is bash and probably its command line editing style is set to “emacs”. Here are a few of the Emacs-style key combinations that you might find handy: 

Your was failing because the single quote was starting a quoted string (the error message is not so helpful here). Also, there is no standard control character or sequence for Control-', so tmux would have complained () even if you had double quoted it to get it past the initial parsing stage; there are only a handful of non-alphabetic control characters: . 

Put in your .vimrc, or some other file (and run :source /path/to/file). Or paste it directly into a Vim session. To use it: 

(the in the middle is the default format) You might also want to adjust if you want to know when an inactive window’s panes are synchronized. 

However, your use of “check out” implies (to me) that you want to have a functional Git work tree with only some of the files present. One can accomplish this with the “sparse checkout” functionality introduced in Git 1.7.0. Enable this functionality by 

The limit you are encountering seems like the tty type-ahead buffer. It is “hard coded” in the Mac OS X kernel. 

In Mail's help, I found the following under “Backing up your email” (first result when searching for “mbox”): 

Start your temporary machine with the Leopard DVD (hold down C while booting or hold down Option and choose the DVD from the menu). Start your new MacBook Pro in FireWire Target Disk Mode (hold down T while booting, or click the “Target Disk Mode…” button in the Startup Disk preference pane of System Preferences). Connect your MacBook Pro to the temporary machine with a FireWire cable. Install from the DVD onto the partition on your MacBook Pro.