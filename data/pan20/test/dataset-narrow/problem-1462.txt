I don't have criteria with evidence that are indicators of success, but I have some I use that can indicate the lack thereof. At my school, although we are not allowed to specify prerequisites for our courses, the other programming teacher and I "vet" prospective programming students using data from students' literacy and math history (the two of us combined teach VB.NET, C#, SAS, and AP CS A). The literacy and math scores come from the prior year's end-of-course tests. This data is made available in an interface provided by, I believe, Pearson Education. For each student we can see something like the following: 

I have done both percentages and points in my career, the latter being the most recent and preferred. Percentages: The only advantage I can see is that, especially in high school, this seems to be the dominant way of grading, so students and teachers are accustomed to it. Disadvantages are that students can have a difficult time tracking their progress, or knowing, for example, how well they must do on a test to keep their grade above a certain percentage. In my experience, it also takes more time as a teacher - determining how many questions to put on a test or quiz so that percentages can be more easily calculated, for example. As relates to programming specifically, I always struggled with the fact that I wanted programming exercises to count heavily but had a hard time making that happen with percentages. Students, parents, and administrators expect tests to be worth more than anything else, so if I gave tests the normal 40% weight, then that left programming exercises, quizzes, and classwork (study guides or worksheets) to split the remaining 60%, and I could just never get it "right", meaning feeling comfortable with the distribution. Points: The major advantage of points the OP has already noted - students, parents, and teachers alike can instantly look at assignments and ascertain which assignments are worth more (I'm assuming all are using electronic gradebook of some kind), and students who want to remain at a minimum certain level find that easier to do. Going to points solved the problem for me of knowing how much to weight each type of assignment - all assignments are weighted the same, and if I feel the assignment is worth more, I give it more points. So I can look at how many programming exercises I assign in one semester (depending on the course, 80 to 100), determine points for those (say 10 points each), and base the points for everything else on that total. If I determine a certain test is going to be worth 112 points because it has 56 questions, then the students see it as a large chunk, so they don't blow it off, but it is also not going to sink them if they fail it. Rework: By extension, rework is made easier with a grading by points system. I've also found that "extra credit" makes much more sense for students in the points system, and they are more motivated to attempt it, because they can more readily see how the extra points are going to impact their grade. 

My school district does not buy textbooks any more. That has been policy for at least the last five years. I do have a very old set of books for Programming I that I will refer to myself, and that I will check out to students who request one, but they rarely ask for one. I would guess that this move to a "textbook-less" world will accelerate. School districts will suppose they are saving money by not buying books. They will reason that with everything online these days, why do you need a book? But we still need teaching materials. The teaching materials provided by my state are typically Powerpoints of varying degrees of quality and effectiveness created by a contractor (sometimes a teacher) who may or may not have known the content. I often find myself revising and correcting them, or throwing them out completely and starting over. I also have to create exercises, study guides, and tests for my courses as those are not provided. The down side to all this creating is that I spend an inordinate amount of time working on course materials outside of class. The upside is that I know my materials very well since I made them. Another positive with the Powerpoint method is that it is very easy to "chunk" lessons into manageable pieces. I find that many chapters in programming text books are extremely long and cover way too much material. By the time I get to the end of the chapter I've forgotten what we even started out discussing. Whether you are using a book or not, it is important to assign reading material from other sources to be accessed outside of class. I often include links to charts, tables, or articles in my lessons labeled as "recommended reading". And I tell my students "it is recommended you read this because you will see something from it on a test". Underhanded, yes, but many of them will be motivated to look at the assigned material just for that reason. I also give my students a list of recommended books to consider for purchase but make it clear they are not required. Even so, you'd be surprised how many actually end up buying one or more. I miss having a book because I love books. But are they cost effective? Do students really understand the gravity and importance of what and why they are studying? Do they use and cherish books? I'd say at the high school level most don't. 

First day of class I have this conversation with my students. I ask them if they want to be successful - notice I don't say have a job, or make money. They all respond "of course". Then I go around the room and ask each of them to describe something at which they have become successful and how they achieved success. They all mention hard work, practice, time, effort. Then I tell them they have to do the same thing in my class to be successful, to learn. They will pretty much agree with that. Then of course some of them will say, well I don't want to learn THIS, I don't want to be successful at THIS. Then I respond, OK, I understand that you don't want to learn THIS, but guess what? By being in my class and learning THIS, something you don't really want to learn, you are PRACTICING learning for the things you DO want to learn. You are learning how to learn. And they will usually agree with that also, reluctantly. Then as the semester goes on, when I hear them say things like "why do I have to learn this", or "I don't want to do this", I remind them, I ask them, "you may not want to learn this, but remember, by doing this, you are learning how to ____________". And they fill in the blank. "I am learning how to learn." That sounds simplistic...but maybe I get through to a few. Edit: I was thinking more before bed, and I reread the other answers, and I want to cast my vote with the responses about relationships. Sometimes the only thing we can achieve with certain students is a relationship. The only thing they may learn in our classes is that we value them and believe in them. That may not motivate them TODAY, but it may motivate them another day in another situation.