Like Jonathn Hobbs mentioned, some of your questions have been answered. As far as finding an artist to collaborate with as a beginner, here are a few tips: Nobody knows you are a beginner, you are only as good as your current project. Unless you have colleagues you worked with in the past, no one knows your level of skill. What matters is your current game project, some artists will not want to work on certain game projects regardless of your skill level, you could be John Carmack and still some people would refuse to work on certain game projects, especially when there is no funding involved and they are devoting their time and energy freely. Sometimes all it takes is a beginner to write an interesting and fun game. Programming skills do not equate game 'funness' levels. You can be a great programmer and no good game maker if you simply don't have a knack for it. Relying heavily on testers could help, sometimes it is not enough. My best advice would be to start making a game with no graphics, use 'programmer art' instead of relying on an artist. Programmer art is placeholder graphics used while you are still concentrating your energy on gameplay, game logic and bug fixes. $URL$ After the game is playable, if it is any good, a lot of people would be glad to help, some skilled beginners might help for a symbolic fee of 10$ or so, or for free. If the game is not good, concentrate on making it good, who cares about art, gameplay is your responsibility as a game designer and it should come first in your mind. Once it is good, it does not matter if you are a professor of Computer Science or a seven year old using some free game developer tools, people would be interested in helping with art and sound. You also asked where you could find a composer, well there is a large database of music in $URL$ and you can ask the artists there for help with music, some of them are offering it freely. You can make placeholder sounds at first using bfxr or sfxr. Good luck! 

According to your comments the question is: how to implement some form of score board cheat prevention in an offline game with an online score board. Obviously, if the game is played offline, the least of your concerns is that players modify the game elements to throw off the balance, use that to win and post an unwarranted high-score. Your main concern would be that they simply send a couple of packets that say "Hey Mr. Server I got a really great score" and the server will reply "OK, I'm just going to stupidly accept this ... because you claim this to be true, it must be so" and done. They have any score they want with their name on it. What the server should say is "Pics or it didn't happen!". In order to have some minimal control over the correctness of the scores I would suggest you make the game's behavior deterministic (in this sense): 

In the new Flash Pro CS6 there is an option to generate spriteheet from a symbol. I used these tutorials: $URL$ $URL$ And it works really well! An artist I'm working with created a bunch of assets for a game. One of them is a walking person as seen from a top-down view. You can find the .fla here: $URL$ (If this does not work let me know, it is the first time I used Google Drive to share files) 1 .When I press ctrl+enter I can see it is moving. When I look for the animation, I do not seem to find it. When I select to create a spritesheet, flash suggest creating a spritesheet with one frame in the base pose and no other (animation) frames. What is causing this and how do I correct it? 2 .I want to convert it to a sprite sheet for 32 angles of movement. Is there any magical easy way to get this done? Is there a workaround without using Flash CS6 to do the same thing? 

I personally think these values are best stored inside a text file in plain text. There is nothing easier to read an edit. Each class (game character class like Fighter, Mage and so) could have it's own text file and every monster as well. It keeps things manageable and accessible to none programmers. JSON is great until a confused none programmer erases a by accident or misses a that is needed for a string. A plain text with comments like this: 

We aren't talking about regular lists. These lists's node elements each contain a time record of the last (discrete) time it was changed. This is normally the frames index. We'll call it a time stamp. When you add an object to a cell's list, you first look at the list's items. If the first node has has an outdated time record, you can discard it or overwrite it at this time. If the existing nodes time stamp is current then you need to check for collision against that node's object and then move to the next node on the list. If the next node is current, go to (3), else go to (2). 

This is no replacement for legal advice. In this case where you choose to avoid professional legal advice it may suffice to draft a contract like this yourself. That is your responsibility. 

You could implement Multiplayer by itself and allow a player to run a solo server locally. The "server" class accepts input from the Player class instances. Extend the player base class to implement AI controlled players (with different levels of difficulty). Remember that in online gaming (multiplayer or not), you need to compensate for the lag. You can still use the same code when gaming locally and latency free. Compensating for lag is a question in its own merit. The general idea is to consider when the actual input occurred and re-positioning the pong paddle in retrospective. 

Rectangles are not infinitesimally small. Rect sizes aren't discrete multiplication of the smallest rect size. i.e. if the smallest rect is 3 square unit than larger rects are not constrained to be 6, 9, 12 and so forth square units and instead could be 3.2 or 4.7 for that matter). The algorithm runs in polynomial time (needs to compute fast). 

Again, all you need to do is randomize a value for and compute the new position. Remember that ought to keep it small enough so the new platform is within the screen. Old Answer: The general idea is checking how much distance you can cover on -axis before reaching a certain altitude (on the way down) that is too low for the platform you want to jump onto. First, anything within the , bounds of the platform the player is standing on is reachable if it is bellow maximal jump height. If you are using gravity as a simple acceleration downwards then the time it takes a player to reach the peak of his jump is: 

In order to create a randomly procedurally generated level, you need a random moving unit AI that behaves like the player. The computer controlled unit needs all the moves (actions) the player would have at this point in the game and it will need to refrain from heading back (I'll explain why and how next). You need to mark each platform and each empty or empty the carving character moves through to ensure they are not modified after they are generated. If they are modified it could break the desired flow and movement in the level. Lets take a "basic" example where the player unit can only walk, jump and fall. The computer controlling AI begins sending the player a random stream of input and state (similar to keyboard input from a real live player + state Boolean). Lets say the AI player starts in an entrance. Now the computer begins to pick moves randomly with a specified expectancy. Each time the unit moves left or right , a platform is generated underneath it's new position. The unit is disallowed from moving backwards to platfroms it already visited (we specified how before). The player can also jump. When the player jumps, she will begin to fall down once she reaches her jump . When she begins to fall, the computer will decide when to turn the back on. This needs to be done before the player reaches a point lower than the point from which the character cannot jumped back unless you want the reverse route to be inaccessible (you need to write a method that test for jump-back-ability, there are instructions on the site). Sometimes you may wish to randomly turn off the and let the character fall through a hole in the ground. Again the character is disallowed from falling longer than her jump when the route needs to be bidirectional. In order to add forks in the route, simply create a new random player moving player at the point where you want the path to fork, this player will have to jump because it is disallowed from moving on existing ground and after jumping it will need to land on a newly created platform because like we said, empty or empty are not modifiable after a character moved through them. Last notes: