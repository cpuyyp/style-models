My raspberry pi 2 had a problem sort of like this. I used an 8GB kingston card. I think that you should either and rewrite the image to it or buy a new SD card that is used in car cameras. These support high read/write speeds. 

First you want to add a folder to /mnt . It needs to be called usb Next, make a new file with leafpad and type inside it: 

Thanks for all the help. I found out a way. All you have to do is DONT EDIT the /etc/fstab folder, make a new text editor file, and write mount -a (location point). Then save it as mount.sh and put it in your desktop. Then in terminal type Sudo nano chmod -x mount.sh Then type Sudo nano /etc/rc.local At the bottom before exit code 0 type /home/pi/mount.sh Save it, then reboot. The USB drive if present should automatically be mounted if plugged in before booting. If you forget to place your USB drive before booting, insert the USB drive and double click on the mount.sh file and click run in terminal. Very simple easy way. 

At the bottom of the file before exit 0, type: /home/pi/Desktop/Mount.sh Reboot and the USB drive inserted will be mounted at /mnt/usb This only works for one USB drive inserted. This also dosn't work if you have not rebooted with your drive plugged in. To see if your drive has been mounted or not, goto /mnt/usb. Any data on the USB will be there. There are many ways to mount a USB. Other ways require the USB to be in the raspberry pi at all times. For my method, if a USB is not found, a line before boot will say Failed. 

SD card needs to be formatted as FAT32 Use Etcher if you aren't already doing so. Download Raspbian Desktop ZIP file from Raspberry Pi Foundations Download website Don't open ZIP file. Burn to SD card with etcher. Make sure you are using a correct power supply. RPi2: 2 Amps, 5 volts. RPi3: 2.5 Amps, 5 volts. Plug HDMI, Keyboard and mouse into RPi. Turn on monitor and boot RPi. Setup. Want to use NOOBS? Tell me in comments. 

Have you tried the Raspbian UnAttended NetInstaller? Without any customization it would install a very bare-bones system, but you can customize it in a number of ways, see $URL$ for details about that. The most interesting part for your use case seems to be to script your customizations in . While it has a extension, it is sourced from the main installation script and thus executed as script and you're free to (ab)use that fact. And this is not some dirty hack. 

If you want to know what's responsible for boot time with systemd, run or and then decide whether there are things you can live without and/or research the items which you think may be sped up. 

In scenario 2 everything may look fine right now, but there's a reasonable chance that things go wrong when you plug in extra devices, like a wifi adapter or 'more dangerous' an external drive which takes the power from the USB bus. There is a variation to scenario 2 and that's when you use (or for the Pi 1) as kernel and have DeviceTree enabled. See $URL$ and (upstream report) $URL$ In that case there may be nothing wrong but the red power led is still not on. This applies to the Pi 1B+ and Pi 2B, but not the Pi 1B. 

Your staging driver does not support MAC80211 and that's what wpa_supplicant defaults to. It probably works if you start wpasupplicant like this: 

Feel free to take a look at my qemu enabled kernel: $URL$ In the commit messages you can find detailed descriptions on what and how things were changed. Most of it was based on this article: $URL$ 

There are a couple of things I'd do differently and it's a combination of a fuller version of Octopus' comment, a modified version of the answer by rob and my own thing. By default, CRON's output is send to the Mail Transport Agent or MTA and on Debian the default is and you can read the mail messages with for example. And with your entry it would send both stdout (your statements) and stderr (errors) to it. If you don't have and/or don't want an MTA, rob's variant works good too, but you'll miss any errors that would occur (see my next point for that). You can have both stdout and stderr if you change it to this: 

Very simple way. All you have to do, is download the noobs software from the raspberry pi foundations website, unzip it open the noobs file then copy everything there (not the noobs file the stuff inside it) and paste it in your sd card. 

the topic technically says everything, I will be using Openmediavaults image on the raspberry pi. I will be using it as a home media server(Cause I have a spare Rpi2 doing nothing.) People are saying that the SD card in raspberry pi has a limited life... Now, with Openmediavault, the SD card only holds the data of installs, and boot files and it's sort of like a new raspberry pi with raspbian but not too much data on it. I will be using a 8GB and 2*16GB thumb drives. Can thumb drives easily be corrupted? 

Is the image a desktop image? If so connect your Pi to your router and find the IP address of it on the routers webpage. Then ssh into it. Enable VNC in raspi-config. Download tight vnc onto your computer and use it to connect to wifi. 

I accidently did this before as well. I had used the lite version of raspbian rather than the full version with desktop mode. As you said you have a 2GB micro SD card, I would personally think it would be wise to get one with 8GB or higher and burn the desktop image to that SD card. 

This usually happens with me. It's basically trial and error. First off, you need to turn off Bluetooth (if you have it on). Then turn on the Bluetooth speaker, and turn on Bluetooth on the RPi. At the top right corner, right click and choose your Bluetooth device. It should connect. Try playing some sound. What you basically have to do is always turn on Bluetooth on the speaker first, then the RPi. 

Here is how automatically mount a USB drive on boot. This way only works for one USB unless others are specified. 

I have downloaded recordmydesktop on my Pi and when I record I get a slightly red screen when watching the video. Is there a way to stop this from happening? 

For some reason disabling power management at compile time and at runtime, through still does not result in the same behavior. In you can find the following code block: 

According to WikiDevi you need the rtl8192cu driver, which is now part of the mainline kernel. So just updating your system should fix it. If not the output of after you plug in your device will help solve the issue. Also provide the info of in that case. 

Installing the package should fix that. Make sure you have in your file, otherwise it won't find it. 

It's not an image which you can run directly, but an installer, but it does have an ssh server running by default: $URL$ It is quite minimal though (no X etc), so you'll have to install all the packages you want yourself. 

This will send stderr (fd 2) to stdout (fd 1) and therefor ends up in your custom log file. Note that is cleared on reboot and you'd thus lose any files stored there, but in this case that may not be an issue. The last suggestion I have is to use FULL paths in your commands. While developing I'd add so that your is send to stdout and that makes it easy to spot errors or wrong assumptions in your code. , and are in and that was not in the of the 'cron'-user. Adding a at the beginning of the script fixed that. But I actually prefer to just use the full paths in my code and would thus have used , and . 

And now you're ready to compile a kernel module. Step 4: Compiling the kernel module You're lucky as someone has posted the source file and a Makefile to compile the module. To compile it, go back to your home directory, clone the git repository and make/install the driver: 

Add and to the respective stanzas. tells the system to react when a specific event occurs, like plugging in your adapter. tells the system to automatically bring up the interface on boot. Hence you need the part added to your 

Plug the raspberry pi into your router with an Ethernet cable. Fire the pi up and the lights on the Ethernet module should start blinking. Then goto your routers webpage and insert you username and password. Find connected devices, then use the IP address for your raspberry pi in putty. Another option is to see if the green lights blink for some time after you power up the pi. If they don't make sure you are using a suitable adapter for the micro usb cable. 5V 2.5A for a pi3 If this dosen't work still, then check that your SD card has the image properly installed. I use etcher to burn zip images to SD cards. 

The power bank shoudn't get hot. The raspberry pis core is a pretty small square. As you said there is no ventilation. If possible, place the power bank on top of the older box and feed the cable into the box. 

i have tried downloading quake 3 from various tutorials. The ones I have tried are from a post in 2012. Doesn't work for me probably outdated. Tried one from 2014. Was gonna take 1 and a half hours to download a 51.7MB zip file. My wifi is not bad (Max 50mbps, server of download must be really slow.). It stopped downloading 75% of the way for no reason. Anyone can tell me how to download Quake 3 for my RPi3, Raspbian stretch? 

switch off bluetooth on pi turn on bluetooth on headphones to make it discoverable turn on bluetooth on pi and connect to headphones Thats it! watch your vids/music. 

I have zram up and running. Did you remember to chmod the file? Did you remember to add the command to /etc/rc.local? I can see that my swap is working because i have a utility called conky. 

Downloaded etcher. Downloaded zip file of raspbian (you are using Ubuntu, not sure if it will work this way) Plugged in my SD card and burned the zip file to the SD card with etcher. Add a empty file called ssh, make sure there is no extension such as .txt Insert SD card into pi, connect Ethernet cable and micro USB cable. power up the pi, and find your pis IP address on your router page. Open terminal and type: ssh pi@YourIpaddress Change YourIpaddress in the last step to your raspberry pis up address Your done! 

This will download more then 1GB of data and then process it, which will take a while. To prepare the sources for kernel module compilation there are some other steps to do. First you need to checkout the kernel code at the exact kernel-commit-id you found earlier. I always do my 'work' in a separate branch instead of in 'master' as that makes it easier to start over in case things go wrong and it is considered best practice. Then you clean everything up (), load the default configuration for the Pi 2 () and prepare the sources for module compilation (): 

Set in . It's a security risk and therefor I recommend you not to do it and that's exactly why the default was changed. But, it's your system. 

And then to load it, do . As the USB ID is part of the driver code, when you plug the device in it should detect it automatically and load the driver. 

If an adapter doesn't show up in that usually means that it needs firmware file(s) and your dmesg output proves that: 

For the Pi 1 you should replace with . Now copy the file you downloaded earlier into the kernel tree and rename it to : (for the Pi 1, just copy the into the kernel tree). Step 3: Set up your system for kernel module compilation When you're compiling a kernel module, the build system looks in the directory for the kernel headers/sources. So make the link from that directory to our current directory: When you now do you should get the following: 

Important: Follow these instructions meticulously Note: The OP is using Wheezy and the latest kernel version from then is , while on jessie that version is and that's a critical difference! If you're going to apply these steps to your own situation, adjust the values accordingly. Step 1: Get the git_hash from the firmware Get the firmware-commit-id: which returns or for short. On $URL$ you look for that firmware-commit-id ( on 23 Sep 2015 (the date is only as extra helper, the only relevant thing is the firmware-commit-id)) and click on Browse the repository at this point in the history and switch to the directory. When you're there, download and save it in your home directory (for the Pi 1, you'd download ). In the directory you'll also find a file which you should open and write down the id () you see there. This is the kernel-commit-id. Step 2: Prepare the kernel for module compilation Get the kernel sources and put them into the folder: