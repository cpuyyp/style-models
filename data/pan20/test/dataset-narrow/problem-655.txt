While the following issues aren't necessarily style-related, they're still good things to consider for writing clean quality code. 

The best way to do this would probably be to use generator expressions, and encapsulate it into a function, like this: 

I'd personally go with the function parameter, as it's a pain to go and change a constant variable to a different value each time you need it to have a different value, but if is always going to be equal to , then it should probably just look like this: 

Properly opening files Just using , and assigning the return of it to a variable like this is not something you should get into the habit of doing: 

Not using curly braces can lead to some not so great mistakes happening. A famous example of this is the Apple SSL bug. This is what happened: 

First off, the way you've named your functions is wrong, according to PEP8. Functions and variables should be in , and classes should be in . Secondly, rather than creating a static attribute on your classes, , you could just do the following: . Finally, there are no comments here. At the minimum, you should add some docstrings to you functions and classes. Even if the code is fairly clear, you should at least add some docstrings. For example: 

It's hard to write function definitions with that many arguments in Python, and as far as I can tell, there's no real "correct" way of writing these. I usually just write them out like this: 

The loop should already repeat the code contained in it, so the call to would only add more recursion-related issues into the mix. The call to here is redundant: 

First off, if you want reusability, turn this into a function. The function should have it's respective arguments. Secondly, instead of allocating a variable to store all of the JSON data to write, I'd recommend directly writing the contents of each of the files directly to the merged file. This will help prevent issues with memory. Finally, I just have a few nitpicky tips on your variable naming. Preferably, should have a name more along the lines of , and you shouldn't be using as an iterator variable. Something like would be better. 

Nitpicks Why do you keep calling ? As far as I can tell, it only pauses execution and isn't needed here. It's rather annoying to have to wait when the code executes. You should also add some blanks lines into this code, as well as some comments. By adding blank lines and comments you can improve the clarity, and readability of your code. I'm also noticing a few inconsistencies with your calls. For example, in many places, you use quotes, , to a message, like this: 

Next, why is the method ? If it's already attached to the object modeling a phone (), then it should be non-static, and not take any parameters, like this: 

This is obviously not quite complete, and it's very monolithic code, but any suggestions are welcome. 

Docstrings You should also be using docstrings. This means that a comment above a function, like this: 

These imports should be separated onto separate lines, as per PEP8, Python's official style guide. These comments at the very top of your file: 

The function in your class should be changed to a magic method, in this case, . Here's how you could do that: 

Proper string formatting There are many places in your code where you are concatenating values together into strings, like this: 

Rather than bothering with the loop, you could analyze it and determine that it simply just puts the number four in the second cell. Therefore, you could simplify it to this: 

I'd like some suggestions for improvement. I especially don't like how I have to allocate a private variable as well, so if there are any suggestions for improvement there, I'd like some. 

You also seem to have a lack of blank lines between your rules as well. I'd highly recommend including at least one blank line between each rule, and a comment, if necessary: 

I don't recommend this though, as chances are, you can use a built-in error, rather than needing to define your own. 

Naming Many of your variable names are so cryptic that it's understand what they're doing, even in the context of other code. Here's a small list of some of your bad variable names. 

Finally, you could use some better names for your variables. For example, naming a variable name is completely useless because I already know that the variable is a hash. It should have a better name. Same goes for , , and others. 

Finally, your other loop can be shortened to a generator expression as well. For more on generator expressions, see PEP0289. 

The reasoning being that someone reading your code will be able to understand it more clearly, and see what the value is being used for. The above loop would become this: 

Input sanitizing and validation As it stands, whenever you try to get input from the user, and check it against and statement, it looks something like this: 

The include is simply my own custom OpenGL function loader, which is too long to include in this question. It can be found here. I'd (preferably) like to know a few things: 

There's a lot of code here, (258 lines), so I'm not going to give a full review, but rather, a few suggestions on what you can improve in general. 

As the classic Stop Writing Classes puts it, one characteristic of a class that should be a function is if the class has only two methods, , and another. This means that your class would become one method, like this: 

That's about all I see that should be improved! If there's anything else you want me to cover, mention it in the comments, and I'll see what I can do! Hope this helps! 

To me, they just seem a little unnecessary. In fact, writing out the expression or takes the exact same amount of keystrokes as writing or . Next, I'd highly recommend that you get into the habit of using Match Expressions rather than plain old statements, as it's more functional, and will give you more benefits, like Pattern matching, over statements. This means that this small chunk of statements: 

You're right - there is a better way. Python s have a default built-in function named . For example, if I wanted to count the number of times the string occurred in a list, I could just do this: 

Proper input validation There are also many places where you get user input, and then validate it, like this: 

Style First off Python has an official style guide, PEP8. Here's a small list of a few of your style violations: 

The error types that you're raising don't make much sense. For example, instead of an , it might make more sense to raise an . 

While in theory, this works if the user writes perfect code, and doesn't have extra spaces on a blank line, it could still fail if the user doesn't write perfect code, or accidentally includes extra spaces on a line. Here's an example of valid input, that wouldn't be properly matched. es are spaces and s are beeline continuation characters: 

This is really nicely written code! I do have a few small tips, and then I'll try to answer some of your small questions. 

Is there a reason you need to assign these values like this? If you assign them separately and in a more readable manner, as I did below, the behaviour of your code should remain the same. 

If you really think that the extra clarity is needed, you can always drop a few inline comments () above them. 

Default class access modifier Unless otherwise specified, classes in C# are internal by default. This means that you can remove the access modifier in places like these: 

Auto-Implemented Properties If you're using any C# 3.0 or higher, you can use an Auto-Implemented Property, rather than manually declaring private property variables and the getters and setters. If you use Auto-Implemented Properties, then this chunk of code: 

Finally, if you plan to do more advanced stuff with command line arguments like this, I'd recommend looking into the library, which comes as a default Python package. 

But that's not all we can do, we can also remove the empty constructor, as it doesn't make much sense to have it. Our class then becomes this: 

I'm mostly wondering what I can improve in the areas of performance and design, but any other criticisms are welcome. Interop.cs 

To use this function, you supply a list of positions in the format . For example, in order to render the dots on the 6-dot side of a die, you'd do this: 

This is ultimately better than generating a list of counts corresponding to each value as well, since it's less memory-intensive and much easier to work with. In addition, if you want to take advantage of the powerful module, you should add this to the top of your code: 

But, we can get better than a chain of statements. We can either use a JavaScript object or a list. In this case, I'm going to use a list. To do this, you'd first create a list that looks like this: 

First off, the line should be changed to . Secondly, using isn't very portable. A more portable method would be . If you want re-usability, you can also put this into a function, like this: