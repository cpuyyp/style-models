Next, if you can make it past all the hissing and snarling, I would suggest that you take advantage of C99's flexible array member feature, otherwise known as the trailing array hack. Specifically, declare a struct that contains your bookkeeping information at the "front" of the struct, and a trailing array of (or whatever your stored type will be)[hereafter, "(OWYSTWB)"]. Then, allocate the struct plus (OWYSTWB), compute the address of the start of the trailing array/flexible array member, and return that value to the user, and expect it in all user-facing function calls. It will have the effect of presenting to the end user as a pointer-to-int (OWYSTWB), which means you can use it like a ... dynamic array: 

Simplify and Subclass Once you've got the nodes inside the tree class, split them off. Python does duck-typing, so they don't need to share a common ancestor (although they might, if you find enough behavior to inherit). 

Normally I would write a lot more on the points and so forth but I think just doing methods will keep you busy for a long time. 

However passing in an integer to the sort method is not very clear. What I mean is that, without looking at your code can you tell me what number is needed to sort by for each property in ? Nor would I want to. Even if you were to put a good comment that described very clearly what each number represented, it's still not clean. No instead make take in a Then your code could look like one of two options. 

as you see I have 2 dialogs now. One was yours, the other is simply a folder browser. Judging by the code you provided I would say the FolderBrowser is the actual control you want and not the other. Either way you only need one. But they do the same thing. Once you've selected a Folder you then go to check the files in the folder. tells us the state your openFileDialog is in, not what the method does. We want all our methods to tell us what they do. Hence, Lets gander at that method now. Notice how each level gets more and more detailed, but we still aren't doing any nitty gritty work. It's just easy to read right now. 

(Please note: there are lots of ways to do ownership. There are owned pointers, shared pointers, reference counting pointers, weak pointers, garbage collected memory, and probably a dozen other ways. I'm giving you this suggestion to help you solve this one problem at this particular time. Nothing more.) Enumerating Objects Several of the extra credit items require or would benefit from having a number associated with the rooms and/or objects in the game. The load/save assignment practically requires it. There is no requirement to support deleting rooms or objects that I can see. It seems reasonable then to attach an integer id to each object, and let the class manage them. Similarly, it seems reasonable to have the class maintain the master lists of objects (mentioned above). The only time you would delete objects would be during the shutdown process. It's worth pointing out that the index of an object in the master list is not likely to be a good id, since objects can be dropped in different rooms. Better to track the highest id assigned, and then give new objects an id that's one higher. User class Once you start adding support for picking up and dropping objects, you might as well just create a User class. I think you'll find that much of the code you write for User winds up moving into the class mentioned in the assignment, and then User is a subclass of . Or perhaps they both share a common parent class, since the user won't be loaded or saved (I think?). 

Making classes is a good thing to help encapsulate specific work on an object is a good habbit. Having nested classes is not so good, use in very rare situations. That said It would be better if you would move your nested classes outside and into a seperate file. I think I see why you had it the way you do because you want to change some of the fields in your java classes. Classes are passed by reference. To show you in code and with a test consider the following code 

but even here I have some duplicate code. And it looks like it does the same thing as well. If the user is valid (if he's brand new or existing) then we redirect that valid user back to the homepage. ok so make a method called that 

that probably is not the exact code I would end up at, but it is the first step. I use the Repository code to connect to something (in your case MySql) parse through all the information and give me the important parts. If there is an error somehow while getting those fields I can easily just return or show a notification or something. All of that bit of code is easily seen as the try/catch is around very little code. (another tip). since I instantiated the fields to be an empty array if something did go wrong the wouldn't cause any sort of problems for me as it wouldn't execute any code inside of it. Small Try Catches I like the phrase I heard on here the other day about Pokemon catching. We don't want to just blanket all our code with a generalized Try/Catch. It tell us nothing, and just adds a larger level of nesting. Typically you only want a try/catch around the small bits of code that you expect to throw an exception now and then. This is the reason why I have fields instantiated outside of the fetching of all the fields, and program against knowing that potentially there are no fields. Ending notes there are a few other things, but I have to get going, so I will end on this note. If you use C# or Vb.Net design patterns in your code will help you encapsulate things in such a way that is easy to understand both now, and later when you have to change the code. Look into a few (such as the flyweight, or the builder pattern) as they could help encapsulate a different portions of your code into much more manageable sizes. 

I'll go one step farther than @AndrewAu's suggestion. You dedicate a lot of code and time to iterating rows, columns, and squares. Since these are "fixed" for a cell, why not build some shared data structures and link to them from each cell? That is, in the cell object, create: 

I actually prefer to , but and aren't super clear. and are better in that regard. Parameter Types Your parameters are pointers, an array size, and a memory size. You got correct as the base type of the pointers ( because no changes). The array size and memory size should be . The numeric parameters, and the compare-function return type, do not need to be declared . Declaring them const is a promise not to change them - but they're function arguments (& a return value)! Who cares if you change them, it's not like you're going to give them back! Get rid of those const declarations, since they provide no value to the caller. Return Type The function returns a pointer, rather than an index. Why? Because it just found a pointer, and it's easier and faster to return the result that it has, instead of doing any math to maintain both a pointer and an index, or doing math to convert from pointer to index. Also, because the likely next operation for the user who calls a search function will be to use the result of the call, which will require computing a pointer. If you choose not to use a pointer, you will need a signed integral type that is adequate to store any array index. That would be , since it is signed and can express any value of the form (&a[i] - a). So should be replaced, either by or by . Note that the return type of is declared as rather than . Why? Because the data being searched is probably not constant, and that's the "most compatible" type - you can assign it to pretty much anything with less required casting than other options (char *, const void *, etc.). 

What I want to improve: Basically, everything. This whole thing feels like a really makeshift house of cards. In particular, I don't like that the page has to update once per second, particularly because the Windows mouse icon changes to loading and not loading cursors very fast. If the user knows the system and knows what's going on, then yeah big deal I guess, we can just deal with it because we know what's going on. But I think to the average user, the behavior is jarring, it feels like something might be wrong or something. Hopefully I've made it clear what I'm trying to achieve overall, so I'm open to other ideas about how to go about it. 

First off, let me say that this article pretty much changed how I program, for the better. Until I read this article, I was a spaghetti programming master --- if there were awards for crappiest, least organized, and impossible to read programming, I would have been world champion. But that article taught me to utilize classes (mind-blowing, I know), rather than just copy/paste the same logic around to the necessary pages. With that in mind, I modeled my application (described below) on the examples found in that article. I highly recommend that article for anyone else who's looking to make the jump from newb coding via facerolling on the keyboard to newb coding with some thought behind it. I've been simultaneously building upon and maintaining this web application for a year now, and I feel that while the layered approach has helped me to stay more organized, I'm not utilizing very much (if any) extra power from having layers. In my web application Project, I have a folder I created called Classes. The structure looks like this: 

it would be debatable in my opinion to make the concrete builders return the answer in English or to just return the numbers and let others format it. The way I see it it would be trivial to switch back and forth because on I would think you'd save the number internally on that class then in the you would either return the number or the formatted string. Other concerns 

WHY?!? Why would you catch a index out of bounds exception. There is no one but to blame but the programmer if that is thrown. which leads me to my next tops for discussion. Using unit tests. When you have something this "complex" having unit tests in place is a must. There are scores of papers and blogs and books out there as to why and how so I'm not going to elaborate on that. I will however show a few examples. A tip I've learned about unit tests is that they should be neat, small, and fast. To know what to write a test for take a step back and analyze what you want to write. Can it be pulled out into a class easily so it can be tested in isolation. In this case yes! However because of how this is written pulling out things into a proper class can be tricky. (because it was so tricky I moved on to something a little easier to show what I mean) NumberDisplay (and by extension TimeDisplay) is a good example of a class that does too much and can easily delegate its work to something else. What's more you can take that work and put it in a unit test. NumberDisplay does a lot of math to just display 3 numbers, to what is essentially just a number format. We can use that to our advantage thinking of it like that. Make a NumberDisplayDigitFormatter that extends NumberFormat it will have a matching test in the test folder. NumberDisplayDigitFormatter 

Once again, very abbreviated here. I am aware of auto-implemented properties in C#, I just chose to manually implement them. Upon Object instantiation, I set everything to null. It is easier to check for null than to check for "empty" or "zero" values, in my opinion. This way when it comes time to validate an object before saving it to a database, it's very black and white --- if any field that does not allow nulls in the database is found to be null, throw an error, else continue on to save. Next up, here's what a Manager (Logic) class looks like: 

As you can see, my web application is broken up into different layers which makes organization a breeze. But, I feel that currently I'm not utilizing the power of layers --- the logic layer does nothing at all but just forward the calls to the DB layer. I think part of my problem is that I simply don't know what I CAN do that is useful. Currently my system works and my goals are achieved. Some people might say, "then what's the problem?" And while that makes me happy (it means I've done my job with some degree of success, horray), I want to know more advanced techniques. In the article I originally linked to above, it uses the example of checking roles in the logic layer. In my case, I don't need to do that. We're checking roles pretty much on every action the user takes at the page level. If I can't figure out something else useful to do at the logic layer, I am thinking about cutting out the logic layer all together, since all it does is forward calls anyway. This would eliminate some .cs files and make it even easier to navigate/maintain. Ideas, thoughts? What can I do better? What has worked for you? Are there any things related to layered web applications that you know now that you wish you knew when you first started? 

The 3rd way is the safest, as it presents to the user a way to change levels with barely any reason to change. If you take that concept and make methods on your player or your stats that change the data according to game play rules that will limit reasons for your code to change. This is called the open-closed principle: Code should be open for extension, but closed for change. The less you have to change your code the less ways there are for you to introduce new bugs, and it will be easier to extend your code to do new cool things, which is always a win. To point out an area in your code that is close, the armor methodology is almost on the right track. But again take a step back. Why does anyone need to know what armor Conan wearing? Is it for when taking damage? Is it for showing the name of the armor on the screen? The first can be easily fixed by making the Player class "Accept" damage. If a Vanir raider hits Conan for 100 hit-points your player class can then use its knowledge of the armor to adjust how much damage was taken to the player. Speaking of extensibility you could then use that same method to let Conan drink a potion of health to regain his hit points with no change to your code! That is what I'm getting at. It is common to see people blindly put up getters and setters without thinking about a more OO approach. 

The .aspx portion is very simple. DatabaseChecker.aspx simply has a button to begin the process, and it has Processing embedded as an iframe. The result looks like this: 

Now this is something I've looked into, and while I have a "working" solution, I don't like it. Background: Through our intranet website, we want to run a process that copies a file from another machine, unzips it, and then analyzes the content. As the file is large, this takes some time (usually around 5-6 minutes). Rather than have the user just hit a Button and pray that they get a success message in 5-6 minutes, we want to show the progress via updates to a TextBox. What I've learned so far: This isn't as simple as putting everything into an UpdatePanel and updating it at various steps in the process. Seems like it would be, but it's not. I looked into threading as well, but I couldn't get it working. That is to say, I got the process to run on a separate thread, but while it was running, the interface wouldn't update. It would queue up everything, and then display it all at once, once the process finished. As I'm still relatively new, the possibility that I was just doing something wrong is high. What I have (which works, I guess...): Two .aspx pages, DatabaseChecker.aspx and Processing.aspx DatabaseChecker.aspx: 

writing unit tests is getting to be very important. Employeers are looking for people who can write tests and use them. The above can be run in about 400ms. (and even if I add more tests it will still take about that long because the majority of that time was getting the JRE up and running) You may think that writing tests will slow you down, and at first you will be right. However once you get the hang of it and start doing it well you'll ask your self, how can i test this class BEFORE you even started writing it. The whole topic of tests is large, and there are some very vocal proponents of it offering the world. I believe it to be very worth while. 

My definition of monkey testing is basically playing with a program in as if I was a monkey (press every button, unplug things, go in the wrong order..etc etc) So I made a rather simple SmartCard library that when I "enable" it it just polls the smart card reader for a card, and reports back information. see code