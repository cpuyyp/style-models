Use the same value in the query param as the ID of element in the HTML so it can be directly used as selector If you don't want to change the query param value and ID of checkbox, create a mapping of param value and the selector 

Lodash Do you really need a library for this functionality? The Same functionality can be done without Lodash or any other library. If Lodash is only used for this functionality, it can be removed. Missing Semi-colons Although, a small thing Automatic Semicolon Insertion can lead to unexpected behavior. The usage of the semi-colon is not consistent. I'll recommend using JSLint/JSHint. Alternative I'll recommend the use of and String methods to make the first character uppercase. 

This means that the hashcode is not as effective as it can be. Effective Java, item 9 (which I believe applies to C# as well) recommends to multiply each part of the hashcode with a prime number, and add together, such as: 

I would suggest moving these things to fields in the class or perhaps preferably, methods of the class: 

I tried to find an edge-case for what happened if the was longer than , but it seemed to work correctly (or I just haven't tested enough). 

There are some abstractions that can be done here. I will try to walk you through it a bit. Extracting methods This pattern is something you do a lot: 

There is no need of wrapping the code in for binding events on . Use ternary operator Use with second parameter to add/remove class based on a condition. 

loops: loops is used three times in the code. Nested loops should be avoided. There are very few cases when nested loops are required. Always try to avoid nested loops wherever possible. In the first loop, the keys of the object are joined using tab character. 

UPDATE: After editing by OP. Both the approach will work for the other functionality too. So, the answer will cover those cases too without updating it. OP just needs to write similar code for other functionality. 

Additionally, I have to question a little bit the usage for a "Everything in One Line" library. If the code that you are writing is trivial one-liners, it might be easier for other programmers to quickly re-write the actual code than to use your library. Most of the times I could use a function, I would probably write the actual code in-line, without using an additional function for it at all. However, writing a "Everything in One Line"-library can of course be an educating experience for yourself. 

Edit: Scratch that. I think palacsint is absolutely right. By doing nothing here, you're breaking the contract of the interface (which you implement, whether you know it or not - by extending an ExecutorService). The Javadoc for the execute(Runnable command) method says: 

The advantage of this method is that you can use any selector. For example, if you want to use class selector for one of the checkboxes, just use as the selector in mappings and it will work. 

Using with value accepts second parameter which will be converted to Boolean internally and depending on the value, the action will be taken. So, the and statements in the question can be combined as 

can be moved to CSS. This will be better UX and user will not see any flickr on the screen if page take long time to load and thus hide the element by JavaScript. 

An important trick here is that you can calculate the and positions of your buttons with a bit of math. By using and . Your method (which should be named ) is a bit ugly. It can be improved like this: 

I agree with the others answers but wanted to explain a bit about how you could do it with generics and what that would mean, so that you can decide on whether or not you want it. Rolfl says: 

Efficiency The best performance gain I can recommend would be to consider caching the value that is calculated in the first loop, as I have a feeling that value will not change very often (if it will change at all). Choose Treasure Item - skewed randomness Now that you have a class, you can return the directly, instead of returning its key. Also, your is wrong. Imagine that you have the weights which adds up to 9, then you are randomizing a number from 0 to 9 (inclusive), and then iterating and adding to again and comparing with , now let's see the distribution: 

This has better effect as compared to jQuery counterpart as it will not show flicker when CSS is included in . And the can be written as below using pseudo-class and Adjacent Sibling Selector 

Less DOM interactions. Using this code, there is only one DOM dive to get and set the updated innerHTML. Single regex to replace multiple strings has better performance than multiple replaces with single string Shorter code 

This means, if is falsy, selector will be . So, there will be no case when the will be empty and error will be thrown. That means, there is no need to handle that error. And, I'll also suggest to use as default parameter. This will select all the elements having attribute. 

You should get a compiler warning here that DataField is a raw type. You should make it . And as your DataField is stored non-generically in a map, I wonder how much use you have for the generics part of it. 

I'm not entirely sure about the efficiency of this, but there is a mathematical way of looking at this. Create a n x n matrix of your systems, for example 

Violà. An entirely different approach As mentioned in the comments to your question, you can also use Regular Expressions to verify input and parse it. Here is a brief example of how to use Regular Expressions to input this. I will let you work on the details for it (such as making sure and are in the proper ranges). And you probably also want it inside some kind of loop (either or ) to make sure that the user enters acceptable values. 

Naming Conventions The variable doesn't tell what it contains. does reflect what it contains. , , , - huh? , the name of the function has nothing to do with filtering. It is iterating over some data and calling provided callback for each property. Global Variables is global variable. Global variables is bad practice. Please see Why are global variables considered bad practice? and I've Heard Global Variables Are Bad, What Alternative Solution Should I Use?. Using Proper Methods is used to update each element in collection. Here, is used just to iterate over the elements. You can use , , , etc. in such case. Diving into DOM In callback, you're diving into DOM three times to get the same element. The element can be cached and reused. Method Chaining in can be chained. Unnecessary code is not required as only returns properties in an object. can be safely removed and flag on the next regex can be used. Also, HTML is case insensitive. No transformation is needed when changing attribute. 

As you can see, whenever a new minimum value has been found, it swaps the current index value with that new minimum value. At the third flip for example, the 2 is moved to the end of the array, even though it should (and will, eventually) end up at index 1. Therefore, pretty much all elements will sooner or later be at the last index, so they are moved back and forth quite a bit, hence I am calling it "ping-pong sort". Class Name 

What you are doing here is that you are doing something that is the responsibility of the activity. But you are handling it inside the fragment. This is a bad practice. If anything, this is what I would have rejected you for. 

Number of functions You're creating two functions per image one to handle mouseenter event and other to handle mouseout event. If you look at the mouseenter handler of all the images, you'll notice that they are all same. A quick improvement will be to use a single function to handle mouse enter event of all the images. This will reduce the number of functions from to where is the number of images. Is there any way to reduce this to a single function? Event binding Don't use inline event handlers. Use jQuery method to bind event. See onclick=“” vs event handler Naming Using numbers as the suffix to variables/functions means you're repeating same/similar code. Also, the names are not clear. Does refer to the function which should be called when hovering second time? Useless code The body of is completely useless. It is just setting the attribute value of the image to the same value which is provided in HTML. This can be removed. Alternative: You can use to bind mouseenter and mouseleave events on images. On mouseenter, change the image to the desired image and when mouseleave revert it back to the original. Also, add a common class to all the images and use this to bind event on them.