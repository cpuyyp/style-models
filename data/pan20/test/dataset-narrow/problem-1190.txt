C coloring of D regular graphs have a series of Discrete transitions, not particularly phased, unless you stretch. Here is a table of coloring results, that I will be submitting to SAT17. Note that 3 coloring of 6 regular graphs is impossible except for a few examples. Likewise 4 coloring of tenth degree graphs... C3D5N180 graphs are mildly difficult. The C4D9 Golden Point is only tentatively at C4D9N180; C4D9 graphs are the hardest 4cnfs by size that I have encountered, so C4D9 qualifies as a "Hard Spot". The C5D16 Golden point is conjectured to exist, but would be in the hard spot region from 5 coloring to 6 coloring. 

Almost all regular graphs with degree $k^2$ are $k+1$ colorable. The near absence (finitude) of adjacent small cycles in random regular graphs as $N$ (the size of the graph) grows may help imply the truth, but any proof looks far away. The conjecture is empirically true for $k=3$ (i.e. Almost all 9-regular graphs are 4 colorable). Does this conjecture have a name, or better yet, is it true? 

Toda's theorem - Vyalyi shows that one query to a $\sharp P$ oracle is enough for a "$P$ machine" to simulate $PH$. The inclusion $QMA \subseteq PP$ proved by Kitaev and Watrous. Vyalyi proves that $QMA$ is also in $A_0PP$, a class that is contained in $PP$. 

Frederic Green, An oracle separating $\oplus P$ from $PP^{PH}$, Information Processing Letters, '91 James Aspnes, Richard Beigel, Merrick Furst, and Steven Rudich, The expressive power of voting polynomials, STOC '91 Adam Klivans, On the Derandomization of Constant Depth Circuits, RANDOM '01 

From what I understand, this can be proved by showing that "small" $AC^{0}$ circuits with a MAJORITY gate at the root fail to compute the PARITY function even on a (1/2+small)-fraction of inputs. I found such claim in Theorem 6 of [3]. Does this reasoning make sense? Am I interpreting Klivans' theorem in the right way? I wrote "largest" class in the title, because I am also interested in classes that have this same property and that are uncomparable with $PP^{PH}$. 

Something that has not been mentioned so far (as far as I can see) and that holds in the unrelativized world is the following: $$PH \subseteq PP \quad\mbox{ if }\quad QMA = PP.$$ This was observed by Vyalyi in this paper and comes from the strengthening of two theorems: 

Coloring formulas have lgC variables per vertex, for a total of lgC*N variables; edges have C coloring clauses, for a total of C*M clauses. There are a few additional clauses per vertex to rule out extra colors. The Golden Points are the smallest N such that: C colorability on degree D graphs with N vertices is almost always satisfiable, with probability close to 1. For High Probability, N random instances were satisfiable. For Very High, N*N were satisfiable. For Super High, N*N*N random instances were satisfiable. The High Probability (1 - 1/N) golden coloring points are: C3D5N180 C4D6N18 C4D7N35 C4D8N60 C4D9N180? C5D10N25 C5D11N42 C5D12N72 The Very High Probability (1 - 1/(N*N)) golden coloring points are: C3D5N230? C4D6N18 C4D7N36 C4D8N68 C4D9N??? C5D10N32 C5D11N50 C5D12N78 The Super High Probability (1 - 1/(N*N*N)) golden coloring points are: C3D5N??? C4D6N22 C4D7N58 C4D8N72? C4D9N??? C5D10N38 C5D11N58 C5D12N?? All random instances in the study were satisfiable. The linear probability points checked hundreds of satisfiable formulas. The quadratic probability points checked tens of thousands of satisfiable formulas. The cubic probability points checked hundreds of thousands of satisfiable formulas. The C4D9 and C5D13 points are difficult. The C5D16 point is conjectured to exist. One five colorable sixteenth degree random instance would prove the conjecture. 

There isn't a one word answer to your question, but you can have a look at Xiaotong Ni's master thesis, where commuting circuits with several restrictions are considered and compared to classical classes. There you can also find the definition of the class IQP, which is a subclass of polynomial size commuting Pauli circuits. 

Green [1] showed that $PP^{PH}$ is properly contained in $PSPACE$ relative to some oracle. Around the same time, in the famous "voting polynomials" paper [2], it was shown that $PP$ is properly contained in $PSPACE$ for a random oracle. Question 

A lot of progress has been made on this question in 2015. First, in arXiv:1506.04719 [cs.CC], the authors have improved on the quadratic separation by showing a total function $f$ with $$ Q(f) = \widetilde{O}(D(f)^{1/4}). $$ On the other hand, in arXiv:1512.04016 [quant-ph], it was shown that the quadratic relationship between quantum and deterministic query complexity holds when the domain of the function is very small. 

M. G. Parker and V. Rijmen have studied the quantum entanglement of binary and bipolar sequences in arXiv:quant-ph/0107106. I remember reading their paper long ago. They use a lot of terminology from coding theory, so now by just skimming through, I can't understand exactly what their result is, but you can have a deeper look. Notice also that graph states are a special case of your states. In particular, $\psi$ is a graph state if and only if the sequence $x$ is generated by a quadratic polynomial in GF(2). 

I am coming to this question even later, but I am equally fascinated by it. Why the theory of imperative programming is considered less settled than that of functional programming evades me. It probably started to get serious with Scott and de Bakker in 1969 with their analysis of the meaning of recursion in a simple imperative language [1]. When the imperative language gains features, the story gets a bit messier but that is just the price to pay for being closer to the metal. To name one of the more comprehensive efforts, in 1980, de Bakker, de Bruin, and Zucker wrote a monograph on the subject [2]. Others were mentioned above. These references of course pre-date separation logic but [2] nevertheless tackles arrays and mutually recursive procedures. [1]: unpublished in 1969 but appeared as Jaco W. de Bakker and Dana S. Scott. A Theory of Programs, pages 1-30. In Klop et al. J. W. de Bakker, 25 jaar semantiek. CWI, Amsterdam, 1989. Liber Amoricum. [2]: Jacobus W. de Bakker, Arie de Bruin, Jeffrey Zucker: Mathematical theory of program correctness. Prentice Hall 1980. 

You may be interested in SAT formulas with small (logarythmic) "bandwidth" or "treewidth". These formulas are recursively partitionable in such a way that the communication boundary between partitions is small, and therefore an enumerative dynamic programming approach can be used to solve them. The topic was popular in the nineties. I once counted exactly the number of hamiltonian cycles in a small treewidth graph of 24,000 vertices, so #P problems with small treewidth are solvable too. Bodlaender is a major reference. 

25 years of study, and where are the current ideas: +++ idea 1: In my experience at satisfiability solving, I have found in practice that adding a valid k-clause to a formula that we are trying to solve is similar to deciding an (n-k) variable qbf. That would seem to be an approach to showing current sat solving methods for NP are pspace-hard! +++ idea 2: Another idea is that the AllQBFs problem is a real problem in the boolean hierarchy. The AllQBFs problem is: Produce a boolean expression Q that decides all 2^n qbfs of a formula R. AllQBFs is easy when the original formula R is monotone or 2-cnf. AllQBFs seems like a plausible road to showing QBF is Exp, because Q is often exponential, so evaluating an assignment of Q (a quantification of the original formula R) is exponential. So the road to proving NP is Exp at least has a couple bricks in it. +++ idea 3: Regular k-cnfs Btw, all the phase transition studies have missed Regular k-cnfs, where the number of occurrences of a variable (in either direction) is fixed, similar to degree regular graphs... Regular k-cnfs get much harder than the standard model, because all variables look identical in terms of constraints on them. Twenty five years ago, just after reading cheeseman, I focussed on degree regular graph coloring, because all the variables look the same. So I will abuse my answer privilege here, and present twentyfive years of results on regular graphs! +++ idea 4: Golden Points for satisfiability benchmark studies I have studied C coloring of D regular N vertex graphs quite extensively. The following table summarizes the Golden Point results for regular graph coloring. For High Probability, N random instances were satisfiable. For Very High, N^2 were satisfiable. For Super High, N^3 random instances were satisfiable. The High Probability (1 - 1/N) golden coloring points are: C3D5N180 C4D6N18 C4D7N35 C4D8N60 C4D9N180? C5D10N25 C5D11N42 C5D12N72 The Very High Probability (1 - 1/(N^2)) golden coloring points are: C3D5N230? C4D6N18 C4D7N36 C4D8N68 C4D9N??? C5D10N32 C5D11N50 C5D12N78 The Super High Probability (1 - 1/(N^3)) golden coloring points are: C3D5N??? C4D6N22 C4D7N58 C4D8N72? C4D9N??? C5D10N38 C5D11N58 C5D12N?? The C4D9 entry denotes four coloring of ninth degree graphs. These are the hardest random 4cnfs I have encountered in 25 years of sat solving. I recently colored a 172 vertex ninth degree graph after ten days of cpu time. +++ Idea 5: The C5D16N???? Golden Point is mildly conjectured to exist. Thanks, Daniel Pehoushek 

store $x$ and $y$ initialize counter $c$ to $0$ for each of your $n^{2n} 2^n$ DFAs a. simulate it on both words (this step is $\mathcal{O}(|xy|)$) b. increment $c$ if both simulation runs are accepting output $c$ 

Short answer: yes. Long answer: Using process algebra as a witness to the claimed existential is certainly admissible, but the way the question is phrased might warrant are more direct answer. If TMs are used as mathematical model for sequential computation, we can surely come up with a concurrent version, and show that it is no more powerful than the good old sequential ones. There are many ways to do so. We could aim for modelling shared variables as a tape shared by a family of TMs, we could add message passing steps to TMs, we could allow TMs to fork off child TMs with their own little tape, or we could invent TM equivalents of starting and ending a supposedly atomic transaction. Every single one of these extensions is easily shown wo be simulatable by an ordinary good old TM. If you're prepared to elaborate where you see a difficulty, the community may be able to help, even if I'm concerned that none of this qualifies as a research-level question. 

This doesn't directly answer your question about a definition of a complexity class that represents the model you describe. Still, the notion of quantum oracle has relevance in complexity theory: in their paper Aaronson and Kuperberg use a quantum oracle to give a separation between QMA and QCMA. 

Something you might be interested in is the notion of quantum oracle introduced by Aaronson and Kuperberg in arXiv:quant-ph/0604056. Quoting from their paper: 

This paper came up on the arXiv today and it improves on the upper bound on $bs(f)$ in terms of $s(f)$. They prove the following bound: $$ bs(f) \leq 2^{s(f)-1}s(f). $$ This along with the connection that Marcos mentioned in his comment should give better bounds than previously known. 

First of all, there is a formal definition of "quantum-NC", see QNC on the zoo. GCD is indeed a good candidate for a problem that could be shown to be in QNC, but it's not known to be in NC. However, finding a QNC algorithm for GCD is still an open problem. The feeling for which this is believed to be true comes from the fact that the Quantum Fourier Transform can be done in QNC. Reference: Conclusion section of "R. Cleve and J. Watrous, Fast parallel circuits for the quantum Fourier transform", arXiv:quant-ph/0006004 

As you already noted, a single example or any finite number of words in $L$ is not going to be the right notion. So why not look beyond? A somewhat famous paper did so in 1967 and revealed what happens when you try to learn in the limit. An alternative interpretation of your question leads to the field of descriptive complexity theory where one looks for a minimal representation $\langle M,w\rangle$ of a string in terms of a TM $M$ and an input word $w$ to it. Asking whether a single word had been (better?) generated by a CFG or a DFA is indeed ill-posed: either one would be a special case of such a pair $\langle M,w\rangle$. Finally, given $w\in\Sigma^*$, asking for the smallest DFA $A$ and CFG $G$ with $w\in L(A)$ and $w\in L(G)$ is going to disappoint. The simplest DFA (with just one state) and the simplest CFG (with one non-terminal) will do because the universal language $\Sigma^*$ is blatantly regular. To make this intersting you'd need some negative instances, which brings you back to reading said famous article. I recommend it.