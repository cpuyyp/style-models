From the given error message, one of the views in your database has a column that no longer exists. This can easily happen if you drop a table or a column from a table that is referenced in the view. Please look over all your views and make sure you can SELECT from all of them. CORRECTIVE ACTION You may have to recreate the mysqldump after you fix the VIEW in the source database. If you cannot recreate the mysqldump due to the size, you may have edit the mysqldump to ignore the VIEW definition altogether. 

Great, no complaints from mysqld. Of course, I arbitrarily chose 5 minutes. You can choose whatever schedule you prefer. Give it a Try !!! UPDATE 2011-08-25 11:22 EDT For everybody using release of MySQL prior to 5.1, I have a worthwhile suggestion: Write a perl script that keeps an open connection, making it heartbeat itself by retrieving something (i.e., uptime, aborted_connects, etc) and every 10 minutes kicking out FLUSH HOSTS. Whatever user you connect as, make sure it has RELOAD privilege. For example: run this command: 

The reason this is better to do is that does not protect MyISAM from changing during the dump. Before launching the mysqldump, make sure binary logging is enabled on the master. If it is not, do the following: Step 01) Add this to /etc/my.cnf on the master 

WARNING In the event of a crash, the crash recovery phase of the mysql startup may produce inconsistent data or lost data. If you are using Linux, you can counteract that threat by setting up Percona XtraDB Cluster (PXC) with two or more nodes. If your main node crashes, then you can manually failover to one of the other nodes. Make sure all nodes in PXC has the double write buffer disabled. GIVE IT A TRY !!! 

Give this view of my experiment, a username with all uppercase or mixed case can be equal to an all lowercase UNLESS YOU USE operator with the comparison I do not think can be applied to . However, you could something like this: To delete all usernames that are lowercase only, try running one of the following: 

This could allow you to query using x and z, while retrieving all ids to have a quick reference back to the row: 

-------- General Statistics -------------------------------------------------- [--] Skipped version check for MySQLTuner script [OK] Currently running supported MySQL version 5.0.51a-community-log [!!] Switch to 64-bit OS - MySQL cannot currently use all of your RAM -------- Storage Engine Statistics ------------------------------------------- [--] Status: +Archive -BDB +Federated +InnoDB -ISAM -NDBCluster [--] Data in MyISAM tables: 319M (Tables: 108) [--] Data in InnoDB tables: 2M (Tables: 5) [!!] Total fragmented tables: 22 -------- Performance Metrics ------------------------------------------------- [--] Up for: 52d 23h 15m 57s (72M q [15.875 qps], 241K conn, TX: 2B, RX: 1B) [--] Reads / Writes: 59% / 41% [--] Total buffers: 34.0M global + 2.7M per thread (1050 max threads) [!!] Allocating > 2GB RAM on 32-bit systems can cause system instability [!!] Maximum possible memory usage: 2.8G (72% of installed RAM) [OK] Slow queries: 0% (54/72M) [OK] Highest usage of available connections: 6% (65/1050) [OK] Key buffer size / total MyISAM indexes: 8.0M/82.1M [OK] Key buffer hit rate: 100.0% (4B cached / 1M reads) [!!] Query cache is disabled [OK] Sorts requiring temporary tables: 0% (0 temp sorts / 948K sorts) [OK] Temporary tables created on disk: 3% (11K on disk / 380K total) [!!] Thread cache is disabled [!!] Table cache hit rate: 0% (64 open / 32K opened) [OK] Open file limit used: 2% (125/5K) [OK] Table locks acquired immediately: 99% (30M immediate / 30M locks) [OK] InnoDB data size / buffer pool: 2.7M/8.0M -------- Recommendations ----------------------------------------------------- General recommendations: Run OPTIMIZE TABLE to defragment tables for better performance Enable the slow query log to troubleshoot bad queries Set thread_cache_size to 4 as a starting value Increase table_cache gradually to avoid file descriptor limits Variables to adjust: query_cache_size (>= 8M) thread_cache_size (start at 4) table_cache (> 64) Please notice under performance metrics [--] Total buffers: 34.0M global + 2.7M per thread (1050 max threads) that MySQL can allocate up to 72% of installed RAM based on the settings in /etc/my.cnf. The 34M is based on innodb_buffer_pool_size and key_buffer_size combined The 2.7M per thread was based on read_buffer_size + read_rnd_buffer_size + sort_buffer_size + join_buffer_size. Multiples of the 2.7M are based on max_connections. Therefore, you must tweek these parameters until the Performance metrics report says you have under 100% (preferrably under 80%) of installed RAM. 

Step 04 : There is no Step 04. That's it !!! No stored procedure needed. CAVEAT : I cannot make any promises on the running time or query processing. Give it a Try !!! 

Since you have so little indexes for MyISAM. You could set the key_buffer_size to 64M. You do not need to restart mysql for that. Just run 

The fact that you embedded into the dump manually shows that neither option was called when the mysqldump was first created. Thus, upon reload, this error reared its ugly head. 

and restarting mysql does not work either, you will have to start up mysql with something like this: 

What this shows is that your log_throttle_queries_not_using_indexes is set so that SQL text is suppressed. You can verify this with 

This will produce all user grants as SQL, which is far more portable than standard mysql techniques. Simply reload the SQL script and the GRANTS are executed. Of course, such reloading is only forward compatible, never backward. 

Try bumping up max_connect_errors (default is 10) to some obnoxiously high number, like 999999999 (about 1 billion), in /etc/my.cnf as follows: 

Create a perl script the opens a DB Connection on the master, and then in an infinite loop performs this on the master: 

I will leave it to you to compare the PrefCount to your liking. I will also leave it to you to build the subquery for the Preferences you want. Give it a Try !!! 

Observation If binlogs are not flushed to Disk in a timely, predictable manner, any binlog events the Slave needs could easily be bypassed. This could cause data simply not exist on the Slave. Depending on the data recorded or not recorded, Replication's SQL Thread could break because of missing data or data that should be missing. EPILOGUE Not every Slave can be affected this way. Masters keep a list of all Slave I/O Threads and transmits binlog events to the Slave in order by ProcessID on the Master. I can see later slaves being victimized first. If sync_binlog is indeed an issue, perhaps all Slaves have data drift and we just don't know of it yet. The only way to tell is to download one of the following 

UPDATE 2013-06-27 07:15 EDT When it comes to retrieving the date and time for a file, ls has the option: 

You evidently have connections still coming in from somewhere who can no longer authenticate. Maybe you could try using netstat and watch port 3306. If your have removed certain user@host values from mysql.user, then there is no need for real concern in terms of the process ID established and used. You may want to run this query now and then... 

I believe from my Data Structures and Algorithms classes in College, this is called something like preorder/prefix tree traversal. Here is the code: 

Any small spike in DB Connections will raise RAM past the 62.5% threshold you see for InnoDB. MyISAM (Side Note) What catches my eye is 

RECOMMENDATION Try raising the max_allowed_packet to a much larger number, since the default is 1M. I would suggest about 10 times the largest TEXT or BLOB field you have in your current dataset. You can add it to /etc/my.cnf or my.ini 

Each of those versions have limits in terms of RAM and CPU. It is worth exploring the possibility that the amount of data currently stored has simply outgrown the capabilities of the version of MSSQL 2000 due to queries needing more RAM to fulfuill queries/subqueries or inadequate CPU utilization. You may require upgrading the binary version to the MSSQL 2000 Entrprise version (probably a long shot becasue of how old your version of MSSQL is) or the best version your budget can afford. You may even want to get out of MSSQL 2000 since 2008 is the latest and has current support available. Again, this could be a budget issue. If you are already using Enterprise, or your budget cannot allow for any major upgrade, now you can explore DB Statistics or DB Design. Disclaimer : I'm not a SQL Server DBA 

UPDATE 2012-07-31 18:29 EDT As for the Windows service stopping, you will have to look into the MySQL error log. It will reveal what kind of shutdown (or crash scenario) was executed. In the Linux version of mysql, the mysqld process is controlled by a startup script called mysqld_safe. It has an infinite loop that does this: 

This index might get selected and never have to touch the table because all columns (, , ) are in the index. GIVE IT A TRY !!! 

That looks like that should have fixed it because it removed the corrupt relay log. Then, you got a PK error 1062. Why ? There is an outstanding bug ($URL$ that still active in MySQL 5.5 Although the bug relates to using mysql --single-transaction --flush-logs, a related quirk exists. I have seen that quirk on some EC2 servers running as Slaves for a client just last week in MySQL 5.5.15 On the Master, there was a weird multiple row extended INSERT where each tuple being inserted was a SELECT. What happened was that the LAST_INSERT_ID in the relay log, which forms the next auto increment to assign, was already in use on the Slave because of multiple-row inserts beforehand. The serialized INSERT in the relay log looked like 

The server_id of the Master is recorded in its binary logs along with each query it executed to completion. To see those server_id values in the binary log, you run mysqlbinlog against any binary log. Since Master -> Slave_A works fine, here is what you can do to clean things up between Slave_A and Slave_B: On Slave_A, run the following in mysql: 

This will definitely make sure your client's session is using SUGGESTION #2 Start mysql client with the character set on the command line Test it with this 

You need to make SQL join to . There are two ways to approach this: APPROACH #1 In SQL mode, add the table to the FROM clause 

From there, replication was off and running. This has happened to my boss once and to me once. Of course, I reloaded the data from the Master in full to get the Slave sync'd (Good thing the database was less than 100MB). If this crazy scenario was possible from a MySQL 5.5.30 Master to MySQL 5.6.21 Slave, (as I have shown happen and two maintenance cycles to correct), then the reverse is far more likely (the reverse being a new Master and an older Slave). For the sake of your sanity and your database topology, please upgrade. 

and see if any new users were added by a hacker. If you see any remote users that should not be there, you can remove them with: 

Notice that InnoDB has DEFAULT in the Support Column. There are four possible values for the Support column: 

If you see two files, then you may have two DB setups. You would just have to point datadir in my.cnf back to the old setup. Please find out and let me know ... 

HOORAY !!! This is how you can copy a function from one database to another. FINAL QUESTION : Is this all worth it ??? SUMMARY Here is the original SQL to generate function creation 

Instead of calling , which shows the current binary log, you should use . It will show all binary logs currently on disk. Here is an idea: run this every six(6) hours 

Excuse the mess I am about to create, but here it goes ... STEP 01 Create a file called which contains this 

You should see the mysql and performance_schema databases as Linux folders. Thus, they are physically there. The problem is just the rights you have after user authentication. The only way to fix it is to create the user with all the rights needed. I am going to show you how to create the MySQL user in the Linux server Step 01) Create a script to create user If root had a password (such as ), run this 

There are several things you can do THING #1 Expand all to in all Stored Procedures. This will accommodate longer Family Tree Listings. This is vital because can grow longer and longer if you have a lopsided tree structure. It also possible that when queue_children was 1024 in length and did not delimit properly, it probably went into some infinite loop trying to terminate properly and never reached the condition when the would be 0. THING #2 GROUP_CONCAT()'s maximum length is limited by group_concat_max_len (default is 1024). Try expanding group_concat_max_len to something ridiculously large (5000000000). THING #3 Increase your thread_stack, perhaps 512K or 1M. This is needed for Stored Procedures with either recursive operations or, in this case, longer local variables to make room for. 

This will set incoming connections to a blank sql_mode This will not change the sql_mode of currently established connections. Restarting mysqld will guarantee the all incoming connections will have it blank. If you cannot restart mysqld, you must restart your app/web servers and make them disconnect. Then,m restart your app/web servers to establish connections. Please try this and let us the results. 

Give the presence of that is growing, it must be a temp table used to determine how row data is compressed and then cached to disk. (ARCHIVE does not cache data in memory). At this point, your problem is at the compression layer of the storage engine. WHAT TO DO NEXT Run and copy the , , and to another server that has the same OS server. Do not copy from Linux to Windows. Try running there. If you still cannot read the data, you may have to do some deeper diving. You could try downloading archive_reader.c (from Twitter), compile it and try to read your data. Godspeed, Spiderman !!! (My Disclaimer). ONCE YOU HAVE RECOVERED YOUR DATA SUGGESTION #1 Do not use the REPLACE command against an ARCHIVE table. Why ??? 

The second function is what you want to give privileges to. In your particular case, my guess is that does not exist and you would need to run one of the following: 

There is no TOP n PERCENT syntax in MySQL. You will have to emulate it as follows First here is a sample table 

It will show the table structure and associated indexes In phpmyadmin, there is a Tab to view the Table Columns To run the commands I mentioned above, try executing them in the SQL or Query Tab. If phpmyadmin does not like my command line versions of the commands, then run them in the SQL or Query Tab with semicolons: 

The CHANGE MASTER TO command with the log file and log position will be located on line 23. Please keep one thing in mind: You cannot run any DDL against InnoDB tables during the mysqldump or else the tables being dumped after that DDL will no longer be point-in-time copies. BTW there will be no downtime. Just make sure the binary log in the dump is still in existence on the Master when you load the Slave and setup replication.