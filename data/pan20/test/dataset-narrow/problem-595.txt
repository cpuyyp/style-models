You should never throw an instance of the class. Instead use apropriate built-in class or design your own exception. So instead of 

Just some notes about the code. Read this: Why is lock(this) {…} bad?. Also why do you use so many spaces? :) looks strange, it is far from common practice. 99.9% of C# programmers will write it like 

Node Properties should always have PascalCased names. So have to be changed to . You don't need to initialize properties in constructor. Starting with C# 6 you can initialize them in declaring statemenet: 

You are concerned about initialization of all characters in the method. I suggest to put all objects of the same type (bandit, knight, etc.) in arrays and then just iterate over them to do game logic: 

I don't understand how can be a subclass of . Authority is an attribute of user and not user itself. The same applies to . In my opinion it is bad to keep users related to specific group inside the group. You should take a look at databases developing where there is the first normal form according to which you need separate objects that will connect and . And I see you have the class for this – . So proceed completely with it removing list of users from the . The previous point in fact is even more important since groups contains related users and users contain related groups... In my opinion it not just can be reorganized, it have to be. 

And that's all. You need to eliminate all the view related stuff from the view model in such way. It is how MVVM have to be implemented. 

I don't see any reason the variable should have type. You use it within integer calculations so there is no point in . Declare it as and remove casting to in the loop. 

I suggest to use array of 's as internal storage for result instead of a string. In my opinion and represent the state of a cell (alive or dead) more clearly. You can even use array of enum values like: 

Are you sure you need setters for observable collection properties in the ? I believe no. So remove setters from the , , and properties. Starting with C# 6 you even don't need private fields: 

It will simplify all your methods. Also if you will return instead of they can be even more simpler. For example, will be 

I believe it is not good to pass builder to constructor as an argument. I recommend to read Constructor Design guidelines from Microsoft. If you have any non-simple calculation in constructor it will be better to move it to a static method. In your case I would firstly create model and then pass the built one to the constructor. Unfortunately I don't see where and how a builder is created so maybe your solution keeps a good balance between complexity, flexibility and beauty. It seems that here 

Also please place each property of a control on separate line in XAML because it is very difficult to read the code where lines go far to the right. 

Just small note about combining path parts. You should never combine them manually with backslashes. There is the method and you should always use it. Instead of 

I recommend also to use different naming for private fields, for example, . It helps to easily distinguish fields from parameters and local variables. 

two times that can cause slowing down if some method in this chain is not lazy and executes heavy code even for . 

which cause many memory reallocations. Since during one game grid size is a constant number you can save it at the constructor, and then just create array for result and set its elements by index. 

Such methods specifically designed to return . It is the main job they do. If a method should perform some actions and during its execution an exception can be occured I would not return bool to indicate a failure. An exception is the right choice for these cases. Exceptions is a native conception of .NET so don't be afraid of them :) Also with good XML comment on methods you always know what exceptions the method can throw: 

You don't use WPF as you have to. In WPF you don't need to perform clear/draw sequence. The right way is to use MVVM and update coordinates of the snake's blocks in view-model. In XAML you will have with as its panel. should be bound to collection of blocks and each item should have bindings for and . In fact each item will be wrapped to where there is no your bindings to coordinates, so you can consider to write your custom -based panel which will search for coordinates in each child. I'm just describing the right way you should work with WPF, there are variants how you'll implement all this stuff. 

But it's just another way. is not a problem in your case since there are only 4 possible directions and this situation will not be changed in the future. 

I recommend to swap naming convention: use underscore for private fields and remove them in constructor's parameters. It is common practice that allows you to easily distinguish local variables from fields. 

I recommend you always write access modifiers for class members and for classes itself. It will make code more clear and understandable. So instead of 

you don't need extra and . They make code a bit noisy. Also in this method I recommend to check for and throw if it is. I also recommend to use separate methods for and callback of . The code will be cleaner. At now in-place event handler and callback add extra indention levels and make the constructor too big. This causes code of the constructor is hard to read. This 

As it is WPF code you should use MVVM and shouldn't populate through code-behind. Use of 'es with binding in XAML. 

Idea of method is to check whether parsing was successfull or not without an exception. You are ignoring result checking on non-zero, but zero is a valid number that will be returned if parsing was failed. Also inside the you are parsing the same string again. Correct code is: 

If you read about Random.Next on MSDN, you'll see that it returns value that is greater than or equal to minValue and less than maxValue which means you'll never get . 

You have a lot of code duplication. As a first step, your code should be rewritten somehow like that: 

should be rewritten with use of style. You can define either explicit style (with specified ) or implicit one (that will be applied automatically to all controls of the specified type): 

is bad name for this method because from the name I expect it just returns bool indicating whether the hero dead or alive. But in fact it doesn't return anything and prints some text. Choose another name for the method, for example, because it what actually happens - you exit the program since game is over. I recommend to move checking of hero health out of the method. Then you code will be: 

you don't need setter since is set via constructor and is not supposed to be changed. Small note: don't use extra spaces in generics :) will look better as . 

I recommend to change return type of the from to and return if there are no more chars. Then everywhere compare result with rather than with or . In my opinion expresses end of input more explicitly than some char defined as termination symbol. is normal symbol, is not. 

This is the same as or if you really want to capture first symbol: . This means digit or... (suddenly) digit. So this group can be simplified to . The pattern ends with which means an input string can have more chars after five digits and will be matched. Add end-of-string anchor () to the end of the pattern. So final pattern will be