In my case I maintain the state of the keyboard by listening for the and events in the client. When one of these events is fired the client sends a message to the server and then updates its own state. This allows the client to employ client-side prediction (see this article for more details) and gives the server the minimal amount of information it needs to execute the move. When the server receives one of these events it updates its own internal state and then rebroadcasts the event to all other clients so they can handle it as well. To keep everything in sync the server will periodically (every 10 ticks of the engine in my case) send a "sync state" message to all of the clients giving them the exact positions of all players. You never want to sync the state of a client to the server as that opens up all sorts of cheating opportunities. EDIT To be clear, state syncing should only ever go from the server to the client, never the other way around. END EDIT I found Maple.js to be quite useful as a reference for a concrete implementation in Javascript. 

Im making a topdown 2d game, and I've made a decent entity system so far. But I want to do the following with it: I want to have drawing depth, so if a , for instance, tree is above another tree then it should be drawn underneath the other tree. Here is baisicly a picture of what I mean. This is what Im trying to avoid: 

What is better way of setting up a map for a java 2D topdown game? Would it be having an ArrayList of tiles, a simple 2D array, a HashMap? (Note: the tiles/blocks or whatever are squared) 

My question: How do I make it move all the way to the wall, never leaving a gap inbetween the player and the wall? 

Write a script to parse the JSON format you have into the Cocos 2D format you need. Recreate the tps file so you can easily export whatever format you may need in the future. This assumes you have the source sprites that are packed into your atlas. 

A potential optimization is to use distance squared values rather than distance as is relatively costly to call each tick. 

These are just a few questions to ask yourself and your team. You can probably come up with plenty more. Whatever you do you definitely want to be exporting bitmaps for use in your game. If you're interested in skeletal animation you should check out Spriter. Looks like there is at least one Cocos2d implementation of the Spriter format on Github. 

I'd be happy if I get some suggestions on how could I add half a heart "mechanic", like if I have 30 max health and 15 hearts (allthought rightnow I have 200 hp, I wanna work with bigger numbers :P) that would mean that If I had 15 health it should draw 7 full hearts and 1 half heart. I don't exactly know how to do that. If you can please do help :D. Thank you 

Im making a game and Im working on the collision. First Ill tell you what I want (Ill put in pictures), then Ill leave the code. What I want: I want the player to stop exactly before its collision box (a rectangle) intersects with a wall collision box. Right now this only happens sometimes, sometimes it doesnt go all the way to the wall, that is probably because the velocity is too big I guess. Here are the pictures: 

Just support different aspect ratios and don't worry about it. Pick a specific aspect ratio (say 16:9) and do a best fit on all other aspects (i.e., letterbox or pillarbox) 

Using a plain ole sprite sheet and animating frame-by-frame works just fine. The same goes for doing skeletal animation. It's really going to come down to your specific needs, for instance: 

That's certainly a legitimate approach, how successful it will be is another matter. This article is about an iOS game called Gasketball that took a similar approach and how that worked out for them (spoiler: not so great). Based on this article I don't think players are enraged by the idea of getting a free-to-play game then paying some amount of money to unlock the full game. 

If you want to learn basic networking I sugest you watch this tutorial series , (episodes 38 - 59 are about networking). He explains how servers work and such. You can then bend the code towards your needs. 

(4 being stone and 3 being the stick item) Each slot has its own item variable. So how can I access all of them at the same time? Or even if there is a simpler way to do this. Thank you 

Ive made this 'game' where you can fire an aibility (a fire ball for instance) from the player towards the mouse (to the point where the mouse was at the time of casting/fireing/shooting the ball), now Id like to know how I could implement it so that if it reaches its destination that it stops, and also how I could make it travel in the direction of the mouse but for a ciurtant distance only. Here's the code for the fire ball thing: 

Are there any particular technical contraints that make one option more attractive than the other? Frame-by-frame animations will tend to use more memory than skeletal ones. Skeletal animations will require more complex code to implement. Are there any design constraints that make one option more attractive than the other? Do you want your character to bounce around like a rag doll when he dies? Do you need to be able to change the animation at runtime? These things will be easier to do with skeletal animation. What tools does your artist prefer? What workflow does your programmer like? 

That is setting the size of the screen Flixel will draw onto. If you want a zoom level of 2 you should have . You should check out the source for Mode to see how to create a world larger than the screen. What happens in Mode is that the world size is set to 640x640 and the player, blocks and enemies are added in that world space. The create() and generateLevel() methods are where most of this happens. 

I've made a button class that can be drawn and clicked on. How can I write the text of that button (using the slick drawing API, g.drawString()) with a Centered alingment (so that the text is exactly centered in a rect with defined x,y,widht and height). Thanks 

So Im making a topdown 2d rpg in slick2d and lwjgl 2, and I wanna make a map, but not just random map, something like this: 

Left: it works good, it goes all the way to the wall (btw the red square is the collision box). Right: The player only goes down that much and leaves a gap inbetween it and the wall (the circle shows the gap) and you can not go down to go all the way to the wall. The movment code: 

I've used A Bitwise Method For Applying Tilemaps and found it to be a very elegant solution. The article provides a concrete example and discusses how to extend the algorithm to handle multiple terrain types. 

In your collision processing you need to get a list of all rectangles that your player is definitely colliding with. As you loop through this list you need to test the intersection of the player and each rectangle. This intersection will give you and values. Compare and . Whichever value is smaller is the axis you want to resolve along. That is, if , adjust your player's position along the x axis. If , adjust the player along the y axis. Loop until done. 

so I've made a basic game in java w/ LWJGL 2 and Slick. Right now Im working on the hud and health system. I'm kindof trying to get a minecraft like health system, 15 hearts for health,but I want the health to change from level to level. Right now Ive got this: 

Im making an rpg game and right now I'm working on crafting. I've made a crafting slot class, and an arrayList of that class. I've got 10 of those slots in total, 9 placed in a 3x3 'order' and 1 below (like the minecraft inventory). I want to check if the 9 slots contain some items in a particular way, and if they do to put a item in the 10th slot. I can figure out how to craft stuff, but I don't know how to read all those 9 slots at the same time (btw Im using an enhanced for loop to update and render all of 'em). I figured I would check if the slots contain items in this order 

Since you're using XNA you can check out the Platformer Code Sample on App Hub. I believe the relevant code is in the method in the class. This is a working example of what I outlined above. Metanet also has two really great tutorials on 2D collisions. 

Using the latest SFML from github (2.1 should also work but I didn't test with it) you can listen for the and events as described in the SFML Events Tutorial. I've tested the events and they are both fired on Mac and Windows. A sample program to test this would look like: 

Texture Packer won't convert it's exported data from one format to another. To export in different formats you need to have the Texture Packer (tps) file used to create your JSON atlas. If you have the tps file, just select the exporter you need from the "Data Format" drop down list in the left-hand pane. The TP home page has a graphic that explains the process succinctly. If you don't have the tps file you have two options: