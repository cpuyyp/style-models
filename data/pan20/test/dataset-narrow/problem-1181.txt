Another quick way to prove the Metatheorem 2c (PSPACE-hardness when the doors are controlled by two plates) is to use the Nondeterministic Constraint Logic framework (R.A. Hearn and E.D. Demaine, The Nondeterministic Constraint Logic Model of Computation: Reductions and Applications). In this case it is sufficient to use an horizontal series of vertical corridors-pairs. The state of each pair of corridors represents the direction (inward/outward) of an edge in the original constraint graph. It is sufficient to simulate the AND gadget and OR gadget, like sketched in the figure below. 

What about the standard Hough transform method that is used for line detection in image processing: $URL$ ? If you want to gain some speed then you can use the randomized version of HT. 

As noted by domotorp an interesting consequence is that the following problem is NP-complete: Given a graph $G$ and an Hamiltonian path in it, does $G$ have an Hamiltonian cycle? 

According to: Leo Bachmair, Harald Ganzinger, Uwe Waldmann: Set Constraints are the Monadic Class. LICS 1993: 75-83 the problem of checking if a formula of the Monadic Predicate Calculus is satisfiable is NEXPTIME-complete. So your problem (formula validity) is coNEXPTIME-complete. As cited in the paper, the $NTIME(c^{n / \log n })$ upper and lower bounds (using different $c > 0$ constants) for the Monadic Predicate Calculus satisfiablility were established in: Harry R. Lewis: Complexity Results for Classes of Quantificational Formulas. J. Comput. Syst. Sci. 21(3): 317-353 (1980) [pdf download] 

From the comment above: Perhaps a nice (old) result is the (polynomial-time) equivalence between counting the number of isomorphisms between two graphs and deciding whether two graphs are isomorphic: Rudolf Mathon, A note on the graph isomorphism counting problem, Information Processing Letters, Volume 8, Issue 3, 15 March 1979, Pages 131-136. Note that this is an "evidence" to the conjecture that GI is not NP-complete: Abstract: The objective of this note is to show that the problem of recognizing whether or not two graphs are isomorphic and the problem of counting all isomorphisms between the graphs are polynomial-time equivalent. Since no NP-complete problem is known for which checking and counting are polynomial-time reducible to each other this result lends evidence to the conjecture that graph isomorphism is not NP-complete. ... 

The #P-completeness proof of counting simple s-t paths in both undirected and directed graphs can be found in: Leslie G. Valiant: The Complexity of Enumeration and Reliability Problems. SIAM J. Comput. 8(3): 410-421 (1979) From the paper: ... 4. Some #P-complete problems ... 14. S-T PATHS (i.e. SELF AVOIDING WALKS) (directed or undirected) Input: $G; s,t \in V$ Output: Number of (directed) paths from $s$ to $t$ that visit every node at most once. ... 

The $n \times 1$ grid $G$ can be properly colored if and only if the original 3-PARTITION problem has a solution. This is an example: given the 3-PARTITION instance: $A = \{ 3,3,2,2,2,2 \}\; (B=7, q=2)$ We can use $2B + 2$ distinct colors and build a coloring game instance on a $2B + 2 + 1 = 17 \times 1$ grid like in the figure. 

LAST EDIT: just a refinement of the previous answer. Suppose you have $n$ numbers, the digits must sum to $k$. First enumerate the permutations of the digits that sum to $k$, merged with the combinations of non-empty 0 subsequences; for example, if $k=5$: 

For example $\varphi = (x_1 \lor x_2) \land -x_3$ is written as: $s_{\varphi} = +1 \lor +10 \land -11 \in S$ (the $\lor$ operator has the precedence over $\land$). Suppose that $L = \{ s_{\varphi} \in S \, \mid $ s.t. the corresponding formula $\varphi$ is satisfiable $\}$ is CF . If we intersect it with the regular language: $R = \{ +1^a \land -1^b \land -1^c \mid a,b,c > 0 \}$ we still get a CF language. We can also apply the homomorphism: $h(+) = \epsilon$, $h(-) = \epsilon$ and the language remains CF. But the language we obtain is: $L' = \{ 1^a \land 1^b \land 1^c \mid a \neq b, a \neq c\}$, because if $a=b$ then "source" formula is $+x_a \land -x_a \land -x_b$ which is unsatisfiable (similarly if $a=c$). But $L'$ is a well known non CF language $\Rightarrow$ contradiction. 

When you must search for an item (an ordered set) $(n_1,n_2,...,n_{15})$, you can perform the union of the sets associated to the keys $(n_1,pos0), ..., (n_{15},pos14)$, keeping track of the number of hits for each set. From the union you can finally extract the set (or sets) with 10 or more hits. If this is a real problem with thousands of entries, a good RDBMS (such as MySQL) will handle the data (and searches) efficiently. If you need to keep everything in memory, you can use an hash table to store the key,values $(n_i,pos_j) \rightarrow \{set_1,...,set_k\}$ Addendum: your problem resembles the classical problem of efficiently storing and searching word co-occurrences using inverted indexes (Information Retrieval area) 

If a cell $i,j$ of the initial board of binary puzzle is empty then you set $M_{ij} = \Sigma$ If a cell $i,j$ of the initial board of binary puzzle is a forced $1$ then you set $M_{ij} = \{ 1** \}$ (100,101,110,111) If a cell $i,j$ of the initial board of binary puzzle is a forced $0$ then you set $M_{ij} = \{ 0** \}$ (000,001,010,011) The horizontal rules are: 

and the informal proposition: $P \equiv \text{ M doesn't halt in less than 90 steps}$ $P$ can be converted to a formula $\varphi$ in PA; and this $\varphi$ must "embed" a symbolic representation of M and some kind of operational semantic. But can the conversion be done efficiently (polynomial time and space)? Furthermore there is a trivial "informal" short proof of $P$, but does the corresponding formal proof in PA ($\mathcal F \vdash \varphi$) have a polynomial length size with respect to $|\varphi|$? Edit: as noted by Kaveh the "informal" term above is confusing. I could restate the two questions above in this way: if $P$ is a true mathematical statement that is expressible both in ZFC (as $\varphi'$) and PA (as $\varphi$). Is it always true that $| \varphi | \in O(|\varphi'|^k)$ for some fixed $k$ independent of $P$? What about the size of the corresponding proofs in the two axiomatizations (assuming that $\varphi'$ is provable in ZFC and $\varphi$ is provable in PA)? But this lead to another question: 

Just to continue the joke ... ... we can simplify the spaghetti sort if we consider a 2D section of the kitchen (spaghetti are a bunch of $N$ segments, the table is a segment of length $W$, the hand is a segment, the kitchen is a $W \times W$ square box, $W \gg N$ ... and it is supposed to be large enough to contain the longest spaghetto). We start with an empty kitchen and we end with an ordered sequence of spaghetti ... the system evolves in this manner: 

$M_{const}$ always halts and is correct; if $M_{const}( M_{paradox} ) = Yes$ then $M_{const} \notin O(1)$ by construction; so we have a contradiction; so $M_{const}(M_{paradox}) = No $; and we can have: 

Perhaps a fairly natural game is the following: Player 1 is placed in the middle of a maze and must reach the exit in order to win. Player 2 is in the same maze and must collect a set of "components" to build a radio controller that lets him close the exit (and win). Deciding the next move from a winning position is easy for Player 1: just follow the shortest path from his current position and the exit; but can be very hard for Player 2. Indeed if the (remaining) components of the radio controller are on the vertices of a grid graph of $n$ nodes (suppose that Player 2 is himself on an adjacent vertex) and the distance between Player 1 and the exit is exactly $n$, then he must find an Hamiltonian path in order to move. To make the game more "interactive", we can also add some extra actions to Player 2 that can only cause a polynomial slowdown in the calculation of the next move for Player 1; for example allowing him to block a fixed numbers of corridors of the maze. 

The CONFIGURATION REACHABILITY PROBLEM: Given a cellular automaton and a pair of configurations $\langle X,Y \rangle$; does exist an instant $t \geq 0$ such that starting from configuration $X$, the cellular automaton reaches configuration $Y$ after $t$ iterations? is PSPACE-complete. If you drop $t$ from the input then you can achieve any r.e. degree of unsolvability: Theorem 3.1: For any recursively enumerable degree $d$ there is a one-dimensional celullar automaton whose Reachability Problem for finite configurations is of degree $d$ See K. Sutner, Cellular Automata and Intermediate Reachability Problems I'm not an expert, but I think there are a lot of work on restricted classes of CAs, too; for example: Andrea Clementi and Russell Impagliazzo, The Reachability problem for finite cellular automata Abstract: We investigate the complexity of the Configuration REachability Problem (CREP) for two classes of finite weakly predictable cellular automata: the invertible and the additive ones. In both cases we prove that CREP belongs to the "Arthur-Merlin" class CoAM. EDIT If you give the full spacetime history then the problem seems easy. Given a full spacetime history $X_1,X_2,...,X_t$ you want to find a CA having $k$-neighbourhood, $k \in \{ 1,\ldots,max\{|X_i|\}\}$ that reproduces it (with $k$ as little as possible). The minimum number of colors $c$ needed are obviously the number of colors that appear in the history (because there are no missing iterations). You start with $k=1$ (1-neighbourhood) and with an empty ruleset $R$. You examine each iteration from left to right and add to $R$ the required rules. For example if we have $c=2$ and during the scan of the $X_1\rightarrow X_2$ iteration you find: 

I think that "Trilateration" should solve your problem. In geometry, trilateration is the process of determinating absolute or relative locations of points by measurement of distances, using the geometry of circles, spheres or triangles. In addition to its interest as a geometric problem, trilateration does have practical applications in surveying and navigation, including global positioning systems (GPS). In contrast to triangulation it does not involve the measurement of angles. ... 

read $s$ and branch to one of the two different horizontal areas representing STATE A and STATE B; read $b2, b1, b0$ and branch to a row representing one of the eight symbols; write the next symbol, move the head to the "macro cell" on the left or right, and store on it the next state; in the figure below these operations (that can be done on a sequence of cells using the actions move left/right and write) are called "MW"; finally transfer the control to the upper row that with a single left jump will bring the control back to step 1. 

As a (probably) "solved case" I can bring my experience related to the Rolling a Die over a Labeled Board problem. A few years ago it was unknown if fully labeled boards can contain two distinct Hamiltonain cycles (uniquely-rollable conjecture was settled for all boards with side lengths at most 8). Domotor P. (user domotorp here) and I (independently) proved that such boards exist and the conjecture is false (... note that Joseph O'Rourke hasn't updated his page yet :-). Then using that fact I was able to prove that rolling a die on fully labeled board with holes is NP-complete (the without holes case is still open); though this is an unpublished result. 

I extend my comment adding an image produced with an (old) piece of software I made to automatically fill a figure with a colored gel. 

we have a "working computer"! :-) For the definition of "weakly" and "efficient", and for other examples of simple universal Turing machines look at: Turlough Neary, Damien Woods; The complexity of small universal Turing machines: a survey. Another puzzling example is the Turing completeness of the FRACTRAN "programming language": 

If $MPA_x$ halts in $4^{|x|}$ steps then TM $M$ outputs the opposite (if it doesn't halt $M$ outputs 0). For large enough $x > x_0$, the $4^{|x|}$ simulation steps are greater than $2^{|x|+2} |x| \log |x|$ which is greater than the length of a complete configuration description of $MPA_x$; in this way if the $MPA_x$ doesn't halt in $4^{|x|}$ steps then we are sure that it will loop forever. Suppose that there is an $MPA_y$ that decides the same language $L$ of $M$, then it always halts and you can build a "bigger" $MPA_{y'}$ that decides the same language, with $y'>x_0$ (just add dum states). By construction we have, $MPA_{y'}(y') = 1 - M(y') = 1 - MPA_{y'}(y')$ which is a contradiction. 

Copy of my comment above (I suppose that the question can be accepted/closed): I think that the question is not research level, however perhaps this can help you: $URL$ (README: $URL$ You can also take a look at Chapter 13 of the book "Planning algorithms". 

... uhm ... I'm trying to figure out a polynomial algorithm ... still working on it ... but I think the problem should be better reformulated, because there are cases where it is impossible to win (at least if F is the family of all subsets) For example: 

see Yijia Chen, Jörg Flum and Martin Grohe. An Analysis of the W*-Hierarchy. The Journal of Symbolic Logic, Vol. 72, No. 2 (Jun., 2007), pp. 513-534 

If $t$ is a time constructible function then we can define the time-bounded Kolmogorov complexity of a string $x$ as: $C^t(x)$ = the size of the smallest program p that generates $x$ in $t(|x|)$ steps We can also extend the incompressibility notion: a string $x$ is incompressible if $C^t(x) \ge |x|$ (otherwise $x$ is compressible). Now we can define the function: $f^t(n) = | \{ x \text{ : } |x|=n \text{ and } x \text{ is compressible with respect to } C^t \} |$ ( $f^t(n)$ is the total number of compressible strings of length n ). 

Eric Goles and Ivan Rapaport in "Complexity of tile rotation problems" prove that a similar problem is NP-complete but they use 5 tiles (we can assume that the Net game uses 4 tiles, because we can replace the central unit with a T-connector without changing the game structure), and in their proof loops are not forbidden. 

While thinking about possible answers I came up with this simple numeric strongly NP-complete problem: SQUARE FREE SUBSET PRODUCT: Given $3N$ integers, find $N$ of them whose product is square free. Proof sketch: starting from a an Exact Cover by 3 sets (X3C) instance (strongly NPC) label each element of the universe with a distinct prime (you can generate $3|X|$ of them in polynomial time); then convert every triple $(x,y,z)$ of the subsets to $xyz$. I didn't find it anywhere, so it can be somewhat "original". It obviously resembles the better known SUBSET PRODUCT (which is not strongly NPC due to the presence of the target product $B$, see David S. Johnson: The NP-Completeness Column: An Ongoing Guide. 393-405). It can also be hacked a little bit to get other variants, like: