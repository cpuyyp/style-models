Yes, just copying the XML file and the virtual disk images is sufficient, but this obviously precludes a "live" migration. The VM must be shut off during this procedure. Once copied to the destination, must be reloaded or restarted to recognize the new XML file. 

Note that SELinux itself is not namespaced, so you can't have separate SELinux policies within containers, as if they were independent OS installations. This also doesn't appear to be as well-developed (yet) as SELinux for containers managed by libvirt. But in general it shouldn't be something you need to worry much about. 

You named your server , the naked domain name. Thus many programs (sendmail included) take you at your word, and consider that the local server does everything related to that domain name. To resolve the problem, rename the host. For this and a variety of other reasons, no server should ever be named with only its naked domain name. 

I suggest you update the package on the affected system. (And while you're at it, update the rest of the system too. We're on 6.5 now...) If this doesn't resolve the problem, report a bug upstream. 

You've specified both the wrong distribution and the wrong architecture in your third party repository configuration. 

If you need 2.6.39 you can use Oracle Linux, which is an RHEL clone that provides its own kernel (which just happens to be 2.6.39). I've used it in a couple of places to get driver support that wasn't present in 2.6.32. 

Set either or in your XML to benchmark each of these. Second is which caching mechanism to use. You can set , or you can turn it off with , which you actually may find works best. 

Your VPS provider will control the reverse DNS for your server, and so you will need to contact them to make any changes to it. 

The repeated occurrence of "cron" indicates that this session was started by a cron job. It is not indicative of a compromise. 

Your email is being sent from "apache2@prod.xxx.com", and the domain prod.xxx.com is not the one for which you set up an SPF record. You can do one of two things: 

Your https server block should not redirect anything to http, as you don't need that in this situation. Your http server block should redirect everything, except the URL in question: 

You can control address selection with . The configuration file is well documented, and already contains the defaults, so you can just begin tweaking. The interesting defaults here are: 

HP does indeed offer a vulnerability scanning service as part of its Enterprise Security Services. Their whitepaper seems to imply that it's required. Unfortunately, HP's web site is in a persistent state of disarray, (and has been for years) and information is rather hard to find. But it seems that they do indeed offer (and mandate) this service. 

In the CloudFlare DNS settings, make sure that you have a "gray" cloud for the A record, in order for connections to that host to bypass CloudFlare and go to your mail server directly. CloudFlare does not proxy SMTP traffic. An example of a working domain: 

Anyway, to figure it out for sure, run and scroll through the output until you find the entry matching your current IP address. A running example from my workstation: 

The option will cause dnsmasq to ignore any address responses which are in private IP address space. 

Run the update on a separate, identical system and then compare the two to see what has changed. Though, this probably isn't going to help you answer your real question. This probably is the answer: Yum keeps a complete history of everything it does, with a full rollback capability. To roll back a change, first run: 

This is the problem that Sender Policy Framework solves (if it's implemented correctly). The catch is, the sender has to set it up. 

To resolve the issue you will need to select a local port range that is not otherwise going to be used on your system and reconfigure this sysctl to use it. For example: 

To avoid all this trouble, in the next iteration (i.e. next year) I plan to offer to install the server certificate directly from the captive portal, so that users (mostly Windows users) won't have an issue logging into the secure network. 

Your last edit makes it clear that a local process on your system is generating the mail. The process is running as uid 500, which is most likely your account. So it looks like you've been compromised. Nuke it from orbit; it's the only way to be sure. 

which don't necessarily lead non-technical users to check . If at all possible, and these are meant to be turnkey systems, configure your servers with default entries such as those provided by Google Public DNS: 

Overall you need stability in your base system, but web apps change much more rapidly than, say, line of business software, and your server will need to keep up. Thus I've chosen targeted points where upgrading packages will gain clear benefits with little additional administrative overhead (a.k.a. work). 

Likely you only have these open in your IPv4 firewall and not in your IPv6 firewall. How you fix this depends on your operating system, what web control panels you use, if any, etc. If you're just using CentOS without any control panels you can use the command line tool to configure your firewall and it will correctly open the ports for IPv4 and IPv6. 

One reason that it is "a bad idea" to block all ICMP is that you are also blocking things like Fragmentation Needed responses, which are required for Path MTU discovery to work. And if that doesn't work, then you get hanging web pages, downloads that stall out, etc. To resolve the problem, you should remove exactly what the comment says. 

Use to get information about the installed BMC, which is part of the RMM4. (You may also need to first.) If it returns no information, then such a hardware module is not installed. 

This doesn't sound like an nginx issue. This sounds like phpMyAdmin wasn't installed correctly and thinks that it is at instead of . Check your phpMyAdmin configuration. 

This is redundant and conflicts with the earlier defined in . It should be disabled or removed. Second: 

Congratulations, you've found an Internet tutorial with bad advice. The problem with using a single keypair for multiple computers occurs when any one of the computers is compromised. Then you have no choice but to revoke the keypair everywhere and rekey every single computer which was using that keypair. You should always use unique keypairs per machine and per user, to limit the damage that a compromised key can do. As for that tutorial, it's amazingly bad advice to generate the keypair on the server and copy the private key to the client. This is entirely backward. Instead, the keypair should be generated on the client and the public key copied to the server. There is even a helper script which does exactly this, and along the way makes sure all permissions are correct, the client gets the server's host key, etc. There may indeed be situations where you want to centrally manage users' identity keys, e.g. for automated scripts, but in this case you really should do this from a third host, or ideally from a configuration management system such as puppet. 

It appears you've installed incompatible RPM packages for MySQL from a third party source. Probably these came from mysql.org. Unfortunately they aren't well integrated and cause problems like this. Currently the best integrated current MySQL RPM packages that I'm aware of are those provided in the remi repository. Using these packages will prevent problems like this in future. 

You're using an OpenVZ based VPS. As with all container-based virtualization, you are limited to the kernel modules provided by the host. Your options are: 

IIS has to be aware that it should answer requests for the name . Otherwise it routes requests to the Default Website. You can fix this by either creating the binding, or by creating/editing your Website to answer for . 

Probably you ran out of inotify watches. By default it's an absurdly low 8192. Check your current value by: 

Create a file on the master, containing the domain names of the hosts for which you want certificates signed automatically. Example: 

This pretty much covers all the scenarios in which one might have wanted NAT and offers solutions for implementing them in IPv6 without NAT. Some of the technologies you will use are: 

You can't just go and change the configuration of someone else's server. So unless MailChimp decides to start gzipping these files, there's nothing you can do but complain to them until they do. 

is not allowed inside as you have it here. It's only allowed in , or . So you will need to have blocks for each of these. 

As has been noted by others, when you use and don't provide a network mask or CIDR range, is assumed, and so no routes are created for the subnet. To resolve the issue, you add the CIDR range as well: 

is not the name of the process listening on port 9001. It's the name of the IANA-registered service for that port number. 

The canonical answer to "how to deal with brute force attacks" like these is to use fail2ban. If you're using some sort of web hosting control panel, you may find options related to fail2ban already there. 

This means that it's a page which has been generated by PHP, and this means that your PHP application may have also generated the . If this is the case, a search for through its source code may reveal the offending code. 

means that you don't have an IPv6 address with a sufficiently large scope to reach the destination. In particular, you have only a link-local address, so you can only reach IPv6 addresses on that layer 2 link. In this case, that means you can only reach the other end of the tunnel. In order to reach the Internet, you need global scope IPv6 addresses, and you need them routed to (and from) you. You obtain these addresses from your Internet service provider, university, datacenter, etc. 

This is the best you can do with , but knowing the uid originating the traffic may be helpful in narrowing down its source. 

Note in particular that, despite what you will read in outdated Internet guides, you should not use for the second IP address. This form is deprecated and has been for years (which means it is likely to be removed from Linux at any time). 

You can install a syslog daemon such as rsyslog (the default on Red Hat derived systems). This will log all journal entries in a more backward compatible manner, and of course you can specify a custom log for whatever you wish. If you don't need logs exported in real time, you can use as some people have mentioned. You can run it daily at midnight with the time specifier to get exactly 24 hours of logs. 

is part of the package. You can't install this package because you installed PHP binaries from a third party repository which were built against MySQL 5.5. At the moment the only solution is to rebuild the php package yourself. No third party repos that I'm aware of provide PHP 5.4 built against MySQL 5.6. 

Also remember that if you are using nginx and php-fpm, that php is not restricted by SELinux until CentOS 6.6 and 7. 

Note that it actually opened . But your nginx configuration and systemd unit specify to open , which is a different path. My first thought is that you probably changed the path in the systemd unit, but haven't run . Any changes in your systemd units won't take effect until you run this (or reboot). Therefore, I would have systemd reload and then try restarting gunicorn. 

You used a CNAME for your zone apex, thus all other records for the domain are being ignored. If you actually want to place other records in the zone, you cannot use a CNAME at the apex. 

You're using an OpenVZ-based VPS, and on this VPS your root filesystem isn't really a filesystem, but a directory on the host. That directory on the host has run out of disk space. This is a strong sign that your provider has significantly overcommitted resources and isn't monitoring them well, or at all. The replacement for simfs, known as ploop, is more difficult to overcommit, has a stronger guarantee of disk space, and performs better. I would strongly advise you to find another provider as soon as possible. This is very unlikely to be the last problem you will have with your current one. (And, of course, one not based on OpenVZ.) 

Edit your php-fpm pool configuration to specify an alternate path to log to. An example: You can edit and add something like: 

Yes, just use the target instead of . You can also specify a reject reason, though the default is usually fine. The possible reasons are in the man page. 

You have at least two obvious problems here. First, you didn't define a in your block. You instead misplaced it in one of the blocks. This is one of the most common nginx misconfigurations. Second, you have a typo in one of your statements. should be . 

The difference is that is meant to hold packages installed as part of the system. Packages you get from the Debian/Ubuntu repositories, PPAs, etc., go here. While is meant for unbundled third party applications that are not distributed through the distribution's package distribution process. If you distribute .deb or .rpm packages, with an eye toward eventually getting your software included in the official repositories, you should install to . Otherwise install to . In either case, your application should be able to be compiled to run in any arbitrary location (e.g. with the help of the GNU autotools). 

No. You can't be reasonably sure your outgoing email will be delivered, as many destinations simply blacklist, firewall, or even null route all major cloud providers' IP blocks due to the heavy abuse seen from those ranges - not just from email but via other services as well. And even if your mail is delivered today, that's no guarantee it will continue to be delivered in future. You really do need a mail server outside of Azure (or EC2 or whatever) to process your outgoing mail, though it does not necessarily need to be a third party mail server. If you have the expertise, you could do it yourself. When I put a service on EC2 which had to deliver to a mailing list, I found from testing that almost 3/4 of the list addresses would not accept mail from there. I ended up sending everything to a smarthost located outside EC2. Interestingly, this also improved performance... Having incoming mail on Azure would be no problem, as the above issues don't apply. 

That tutorial is completely wrong. (And that's one of the sites for which this seems to be very frequently true.) In EPEL, the unison package names include a version number, such as and . This is because, for whatever reason, the various versions of unison are not compatible with each other, so the version must be the same on all systems to be synchronized. On EPEL 7, only is available, and at present it's in the EPEL testing repo and hasn't yet moved to stable. So that is the base name of the packages you will install (e.g. , and/or ). 

Delete the first directive as redundant. The second directive will cover both IPv4 and IPv6 connections via IPv4-mapped IPv6. The only down side to this is that your logs will show IPv4 addresses in mapped form, e.g. . Add to the second directive.