TCP uses IP as network layer. The IP header contains the information where the packet is coming from (Source IP) and where the packet is going to (Destination IP). IP delivers the packets to the destination and does not care about circuits or anything else. It's a purely packet-based protocol. TCP itself is a connection-oriented protocol. It's not a virtual-circuit either. (It does not reservere bandwidth and neither does it provide or promise a constant bit rate or latency.) UDP is a connection-less protocol. It's fire-and-forget. The application has to make sure the data arrives. (if it does care about that at all). 

The packet size depends on how the application and/or the OS buffers and sends network data. If the application and/or the OS decides to send the data after 1080 bytes are in the buffer then the packet will be 1080 bytes (plus headers). There could be many reasons for it to do that. In your case you would have to look in the webserver source code and/or the OS network stack. 

There are many reasons for a lot of withdrawals. All you can guess from such an event is: "Somewhere upstream an event caused some change in the BGP routing." Could be a peer disconnecting/dropping a BGP session, an IXP (Internet Exchange Point) going down, or a lot of other things. Don't forget that BGP is spanning the whole globe. 500 withdrawals are not such a big thing compared to the whole internet. If you want to know what happened you would have to look at the individual withdrawals and look for patterns (all from the same origin AS, all coming over the same upstream/IXP, etc.). Even then the exact reason(s) might still be unclear. 

Then your script can count them. The cli command shows you all interfaces. The interfaces that are "up" are in the state. The shows only the lines of the output that contain the word "connected". Newer Cisco IOS contain a parameter that can count lines which match a regex. This is not available on all IOS versions. 

CAM specifies a special type of memory (you can address it by using the "thing" you're looking for as an address), so a FIB could be implemented in CAM (but doesn't have to). "CAM table" and "FIB" can mean multiple things or the same thing, depending on vendor and/or hardware. Nowadays CAM is more and more replaced by faster memory with "normal" addressing. For example on Juniper gear you have your routing tables (RIB) and MAC tables, both get combined in a forwarding table which holds both L3 and L2 "routes". This is pushed to the linecards where it is programmed into hardware memory. 

TCP "keepalive" is a feature that is not present on all operating systems. It is not in the TCP standard itself and it's not reliable. RC1122 specifes it, but explicitly states: 

Well the first difference would be that blocks unknown unicast and blocks multicast packets. The difference between and is exactly what you want to exclude in your question. You can pick any percent value for . It will block traffic of the specified type which exceeds this percentage of bandwidth on the port. is a simple yes/no. It blocks everything when activated. Update: As ytti mentioned, on some low-end boxes when is exceeded all traffic will get filtered. In that case is dangerous and useless. Also on high-bandwidth interfaces (1/10GE) please remember that even a small percentage of the bandwidth can kill a box that punts the packets to the CPU. If possible use CoPP to protect the control plane. Also always use pps instead of bps for CoPP if possible. 

Juniper EX switches automatically categorize a port as an spanning-tree "edge" (there should only be one device behind the port) or "non-edge" (another switch) port. You can force this mode for a port by configuring 

Now you have a bridged VLAN 200 on these two ports. Untagged / Access Interfaces If you have an untagged "access" port that you want to bridge, you can do that too by using this syntax: 

Nothing prevents you from using OSPF to connect two separate networks. When companies merge this happens quite often. Is it a good idea? Probably not. Why? 

Is there any way to make this work by changing some parameter on either the Juniper or Cisco device? IOS Version: JunOS Version: 

The way eBGP works is that it will always set the next-hop to the directly connected address of the sending router (except for multihop sessions or when the original next-hop is in the same subnet). As you can see in your output the router is sending the route with , not with the nexthop you have configured. You can find the decision tree for next-hop generation in the BGP RFC4271 As a workaround you could change the session to use eBGP multihop, which has a option: 

That should complete your setup. It's a bit more complex than the "normal" VLAN concept found on other switches/devices but it's also way more flexible. For example you could have another two ports that also have VLAN-ID 200 configured and they could have their own bridge, completely separated from the first bridge you just configured. For a lot more information about the MX platform, including great examples, I recommend the MX Series book from O'Reilly/Douglas Hanks: $URL$ 

The 802.1Q (dot1q, VLAN) tag contains a VLAN-ID and other things explained in the 802.1Q Standard. The first 16 bits contain the "Tag Protocol Identifier" (TPID) which is 8100. This also doubles as the EtherType 0x8100 for devices that don't understand VLANs. So a "tagged" packet contains the VLAN information in the Ethernet frame while an "untagged" packet doesn't. A typical use case would be if you have one port from a router to a switch which multiple customers are attached to: 

As I understand this (and I find it a bit unclear), if I use , and/or in the same term it would be evaluated with a longest-match OR between all of them, which makes this approach unusable. What I came up with is this the following filter. The term diverts all prefixes shorter than /32 to the next policy. After that the term matches if the /32 is in the range of the customer, matches his as-path and has the blackhole community set: 

Only accept the customers own prefixes from a prefix-list Only accept /32 prefixes Only prefixes with the blackhole community Set the next-hop to the RTBH next-hop (192.0.2.1) 

IPv4: It will "flap". On the sending host (another host or the gateway/router) there will be an ARP entry for the IP pointing to the MAC address of one of the hosts. Packets will go to one of the hosts, wherever the ARP entry currently points. This will effectively disrupt connectivity for both hosts. IPv6: The neighbor discovery protocol will do a Duplicate Address Detection (DAD) before configuring/activating a new address. When it detects that the new tentative address is already in use it will not activate the address so the "first" host will continue to have connectivity. 

First things first: Network Classes (A-E) are obsolete since 1993. Please stop using them. Your formula is wrong, if you want to know how many /24 networks fit into a /12 you use: 2^(24-12) = 4096 A /12 has 12 fixed bits: 

It depends on the hardware involved. Juniper for example will drop the LLDP packets when there is no native VLAN configured (a VLAN in which all untagged traffic will be forwarded in). Cisco for example will always send the LLDP tagged in VLAN 1. Juniper itself sends the LLDP untagged. So it highly depends on your gear. 

The least significant bit (LSB) in the MAC-Address is the Individual/Group type specification. IEEE 802.3 specifies the MAC-Address like this (with LSB first): 

The distinction between "Layer3 Switch" and "Router" is muddy and not defined. Vendors use whatever term they think is best for PR (sometimes switching between both terms). L3 Switch and router can be substituted almost any time. You must look at the feature list to see if the device has all the features you need for your branch office. 

You don't say which hardware you're using but in general BGP will only choose one best path. The one you're seeing is what BGP on the respective router has chosen as the best path. If this path becomes unavailable the router will choose another path. For example if the link between R2 and R4 fails R2 will choose the path via R3->R6 and so on. On Cisco devices you can see all available paths for a prefix by using . Also if the router receives a better path from another iBGP peer then it will not send its suboptimal path to that router. This would explain why you only see one path at all. If you want to always announce the best external/eBGP path to other iBGP routers, you can (on Cisco) use the command. Mind you, all this assumes that you have standard iBGP setup with BGP sessions over loopback IPs and all BGP next-hops are reachable (directly or via some sort if IGP). Also Cisco has a good description of the BGP path selection process that might help you understand further why the routers chose this path. Your Example You establish the BGP Session between R2 and R3. What happens now? R2 receives the following path information from R3: 

If you configure an IP address on an interface the router will use the corresponding DHCP pool to answer DHCP requests. In your case you would do something like this: 

As you can see we have a separate term for each VLAN we want to count and a term at the end. This is important as without that last term traffic for other VLANs would be dropped. The keyword tells the switch to generate separate counters for each interface. You can apply this filter to your interfaces: 

Juniper has two kinds of Copper SFPs. One (SFP-1GE-T) only does Gigabit. The other one (SFP-1GE-FE-E-T) can also run at 100M and 10M respectively. The problem is, in the chassis inventory both are identified as SFP-T: 

The thing is, Cisco is kind of notorious for wrong counters, be it interfaces or other stuff, especially "virtual" interfaces like LAGs. Maybe you're hitting a bug. You could try another IOS version or look for a Cisco bug report for this. You could also open a TAC case to have them look at it. Also try looking at the counters for the physical member interfaces of the LAG. See if they in sum are correct / divert from the LAG counter. 

Another way to update a packet in the forwarding-table is to use the classification-override feature: Overriding the Input Classification 

Using eBGP multihop has other drawbacks like no fast external failover. Normally you would just leave the next-hop unchanged and set a BGP community. The receiver would then set the correct next-hop by matching the community. That's how remote triggered blackholing (RTBH) works between eBGP peers. 

If your program does not understand the encoded form of the OID you can translate it to the numeric form with the snmptranslate utility: 

There are many switches / routers that have a "helper" feature that will forward UDP packets. On Juniper EX switches for example you have statement which is able to forward broadcast packets to other addresses. Still, you have only one address to forward when not doing bootp/dhcp. Cisco has something like this with the feature but the last time I saw that it was limited to bootp/dhcp. There are probably other Vendors which have gear that has similar features. If you find a good reseller/partner they might let you try it out before buying. 

It seems the destination IP address (172.20.13.122) is not answering the ARP requests. The source IP (172.20.0.31) is trying to reach that address for some reason and thus is continuing sending ARP requests until it gets an answer or it gives up on reaching the host. The reason could be that the destination host is offline or unreachable, or that the source host has a wrong subnet mask so that it is sending ARP requests instead of sending the packets to the gateway. 

The Cisco 5696Q supports this according to the Cisco datasheet. There are instructions on how to configure it. These 4 ports will behave like individual ports but be aware that they are the same QSFP (and the same cable until the breakout happens). If it breaks all four of them break. This may sound silly but I've seen people expecting redundancy when connecting all ports of a system to one QSFP. 

Is there any way to configure a trunk port to be a isolated port in a PVLAN? Background: A host has a NIC with multiple VLANs configured. On the switch this is a trunk port accordingly. I want the switchport to be an isolated port in the private VLAN. 

Scalability: OSPF needs a lot more resources (by design) than BGP. Every router needs a full OSPF database (ignoring features like stubby areas) and the SPF calculations need lots of CPU time. Filtering: You will get every route from your neighbour if you want to or not. You can't filter (again by design) because OSPF needs a full database on every router to make routing decisions. This is why you don't want to speak OSPF with your customers as well. If they send you more specifics for your networks you're screwed. If they send you 100k routes, you're screwed. Traffic engineering: With BGP you have much more possibilities to influence where your traffic is going. In OSPF you're rather limited to path costs and route types for external routes. 

Gratuitous ARP is a sort of "advance notification", it updates the ARP cache of other systems before they ask for it (no ARP request) or to update outdated information. When talking about gratuitous ARP, the packets are actually special ARP request packets, not ARP reply packets as one would perhaps expect. Some reasons for this are explained in RFC 5227. The gratuitous ARP packet has the following characteristics: 

So it seems the way to go is to use a logical tunnel interface on MX. Just put one end of the lt Interface in the VPLS instance and the other end in the L2VPN instance: 

Last but not least the SNMP part. The packet and byte counters displayed above are visible in SNMP under the and tree. For example: 

The shows all routes received from the neighbor before routing policies are applied (and as such doesn't show best-path information). To see which routes are accepted and possibly installed use the command. Also the command is only available if is configured for the neighbor. 

This will save all packets with "X-Metadata" in them in the file. Mind you, if there is some other way to identify packets with metadata, might be able to do that. There are many filters/extensions. 

but except for that I know no way to distinguish these two. And after two years these logs are probably gone and noone knows the type anymore. So, is there another way? 

The destination UDP port in the outer UDP header is specified in the VXLAN specification (Port 4789). This means it is a well-known service. So an UDP packet that arrives on Port 4789 is expected to be a VXLAN packet¹ in the same way that a TCP packet that arrives on Port 80 is expected to be a HTTP packet¹. The draft you linked to is outdated and is missing this port number (although it mentions that the port number is to be obtained from IANA). ¹) When I talk about VXLAN/HTTP packets I mean of course the respective UDP/TCP packets with VXLAN/HTTP header/protocol inside. 

It is important to configure all interface-relevant information on the Port-Channel (except stuff that only works on physical interfaces like ). 

Subnets (L3) and VLANs (L2) are on different layers. The terms should not be used interchangeably. A VLAN can contain one or more L3 prefixes ("Subnets"). For a layman this could cause confusion. Often people don't understand that these two are connected but not the same. People might say The host located in our server subnet or The server located in the DMZ VLAN and mean the same thing. 

I'm trying to grasp the private VLAN configuration on Juniper EX switches. As I understand it right now: 

The interface IP on Fa0/0 is inside the network for DHCP pool 0 and the IP on Fa0/1 is inside pool 1. So hosts on Fa0/0 will get addresses from pool 0 and hosts on Fa0/1 will get addresses from pool 1. 

There is another caveat: Depending on platform, the switch will punt all link-local multicast to the CPU. This includes for example OSPF traffic. I noticed this on Ciscos Catalyst 4500 which will send all 224.0.0.x traffic to the CPU. When the CPU is busy it will drop the packets, including your OSPF packets. Have fun debugging why your OSPF session(s) drop. Also turning off igmp snooping on the platform does not help. At some time Cisco noticed that this is probably not the best idea and introduced the command: