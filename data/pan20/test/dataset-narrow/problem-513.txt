Do didn't ask about performance, but you can speed up for sparse bitmaps by first looking at a byte at a time. If looking for a 1, you can skip bytes that are 0x00, and if looking for a 0, you can skip bytes that are 0xFF. After that, you can scan the bits on the next byte or use a look-up table on it. As far as the API goes, you might add 

so the client doesn't have to worry about how many bytes to allocate. And/or provide a macro to help with allocations. A macro instead of a function if you want it to appear in array allocations. 

Profiling is always good to locate bottlenecks. If quadtree construction is a bottleneck, it might help to use multiple passes. A first pass might only store the x/y values which are all that is needed to determine the structure of the quadtree. For a second pass, the buckets can be pre-allocated to the correct size (most less than ) and each point goes directly to the right bucket. For the resulting quadtree, do you really need to store the point values (multiple times, at that)? Maybe just the summary info is enough (min/max z, min/max intensity). Or if you need the points only rarely, store an index to each point and do a more expensive look-up to find the point specifics when needed. Lastly, if your coordinates are used at display resolution, you can store them with floats instead of doubles. 

PHP-tags are closed It is not recommend to close the PHP-tag. It can happen that you have an empty space after the closed PHP-tag which leads to error. Not closing them reduces headaches :) 

As others mentioned the code is not completly OOP. A real OOP application does not contain functions but classes and methods. Well, except of the file that includes the class that initialize the application and the autoloader function - AFAIK function expects a function only. The autoloading part is missing as well which is part of dependency injection. I recommend to get into it. In the constructor of class User you do not validate the email etc. that are stored in the session. They should be a) passed as arguments to the constructor and b) validated. E.g. in the method. Another point is the php closing. To avoid errors never close php. It's hard to figure out a space or another character after php-closing. 

Another thing you could consider, is to catch the if split is called in something else but a string. Of course you could also check for , but catching the attribute error fits the rest of the code better. With the information about your focus on 'recent dates' in the comments, you could also introduce an additional constraint that at least one of the parts (supposedly the year), should have four digits (keep this in mind if you plan to deploy your program beyond the year 9999). 

A major step towards better readability of your code would be to introduce docstrings (for an "official" guideline see PEP257) or at least some comments where you explain your intension. Your check where the user inputs his class will fail if the second input of the user is still invalid. 

As none of the three following if-clauses applies to say , the program will exit silently without tellig the user something went wrong. Looking further, there seems to be a whole lot of redundant code in your class-specific checks ( and so on). It is good practice to put such code into a function and pass e.g. the filename as argument. I will leave that as an exercise to you, but I'm willing to help if you face serious troubles doing that. The variable should be all lowercase as well. You may have a look at PEP8 for Python's naming recommendations. To easily check for such common mistakes, I personally would recommend to have a look at Pylint which will do such basic checks for you automatically. But it is not perfect and may lead to confusion if you are a real beginner. Please consider replacing the calls to open the csv-files () with -statements too. The example section in the -module shows you exactly how to do it. 

Variable definition You sometimes define variables in camelCase and sometimes with underscores. I recommend to use one spelling type only. PHP If function is not part of a class consider developing a database class that handles it. Another option is to add a function to each of your Model classes. This makes your code easier to read. For more details check mvc pattern. In the function you establish a new database connection with each call. You can avoid it by promoting the function to a proper class and define a global attribute holding your database connection. JS In your javascript you have html code. I recommend to either load it with rest of the dom and hide it by default or load it using ajax. I personally compare it with inline css. HTML In html form you have an attribute . It should be in a javascript file. I compare it with inline css as well. "QUOTES" Also see CodeX answer. As tim mentioned and other variables not provided by yourself have to be validated and parsed by htmlspecialchars e.g. to avoid XSS. A bit about security I've added this section due to mentioned XSS. Security is a very complex topic and must not be underestimated. There are a lot of options to implement and grant security. What kind of options you choose depends on your time/budget but also kind of project and data that are going to be stored in your database. I kindly ask you to think wise about the data that will be saved in the database and make researches about proper security measures. There are a lot of PHP Frameworks. I recommend to take a look into some of them as those provide security standards. 

No space around keyword arguments, e.g. should be Variable and class member names are supposed to be . The same stands for function names, as opposed by and in . You should wrap the part where you start TK's main loop into a function and call that function in a block like so: 

Common sense and general appearance From a common sense perspective, the code does not look very messy at all. The structure looks relatively well-aranged. My main point of criticism would be that there are no class and/or method/function docstrings (PEP257 at your service here). The class should also have a more descriptive name, that tells more what it is really doing. E.g. could be a good alternative to consider. Style and code conventions If one wants to be nit-picky in the sense of Python code conventions (for a full reading, see PEP8), there are a some aspects that might need a little attention. 

Script is terminated in the constructor The script should not be terminated in a random class but by an . The type of the exception decides wether the script has to be terminated. Commonly a leads to a termination. Possible Route class 

Classes are included manually Instead of including classes manually it is recommended to make usage of the autoloader function ($URL$ The advantage is that you don't have to worry about including a class. 

There are global attributes with the access modifier An object is responsible for its valditity. As of that its attributes has to be setted via setters always and the attributes has to have as access modifier either or . 

You include an autoloader in the test class. From UnitTests I am aware of a bootstrap file. If such a class exists/can be registered for functional tests as well you should move it to a respective file. 

There are multiple returns in one method This makes the code less maintainable. Having more than one return means there are multiple scenarios when the method can be stopped. In case of a bug one need to debug through the whole method to figure out the return-point.