Depending on the SMTP server you are using it may support the use of the . This is a way to provide aliases for sending addresses. The standard configuration for includes this functionality. This can often be accomplished by your MUA (Mail User Agent). Thuderbird allows you do configure a different source address than the user id used to connect. Make sure your server is allowed to use you chosen address or your email may be classified as spam. Using an authenticated connection to relay your email via the domain of your address should help in this case. 

Firewall zones help document what is happening. The standard groups have standard restrictions. It is much easy to identify the fault in this rule. 

The preferred option is to bounce immediately at the Internet gateway. This results in a failure for the server (most likely a spambot) that you are rejecting. However, it is simpler to use this to check for the existence of an email address. Accept and bounce is simpler for the Internet gateway, but generates back scatter spam. In effect, you make your server assist in distributing spam. This is because it is easy to forge the addresses used to route the bounce message. This approach can make it more difficult to determine if an address is valid as you need to use a valid email address as the sender. The VRFY option was originally intended to be used to verify the existence of an address. It worked well when the system administrators more or less knew each other. Now that almost anyone can setup a mail server, the required trust no longer exists. Various techniques can be used deal with this. Some of these are: 

Depending on the configuration, LDAP does not require a shadow database. There are two common options: 

You can also define Java system properties by adding a string '-Dmy.special.variable=some_valuesetenv.sh` you would add a line like: 

You may want to try Signing the Return Path Address. My implementation assumes local domains, but I have seen similar approaches used for forwarded addresses. Handling bounce messages is a little more difficult as you will need to reconstruct the destination address from the signed address. If you are forwarding for an external address, you may want to add a sender or resent-from header. This may resolve issues where the recipient system verifies the sender address. I am using the Ubuntu heavy build of Exim, and in some cases it will add some resent headers. 

Having the logs separated by server may make tracing conditions across servers difficult. The log messages typically include the originating server, so it is easy to retrieve messages for a particular server with , or any other pattern matching tool. Scaling out that many log files may also be difficult, and you may hit resource limits. Typically log rotation is handled by a program like . This allows you to control the frequency of log rotations for particular files, and to control the number of versions you keep. It's action could be used to split out date from the just rotated files into the desired form. This may scale better. 

Start with top. It should list all or most of the run queue in the first page. Also 'ps r -A' will list all processes in the run queue. 

Native domain keys support is available in Exim since version 4.70. See my notes on Implementing DKIM with Exim If you want to use a filter you may want to review the Exim Documentation for filters. It includes instructions on how to test your filters. 

In your case, the ProxyServer would be your Debian server. I have setup clients using keys to open tunnels with PuTTY. It wasn't that difficult. 

If this is a user key (as it appears it is), then it will be located in the file for userids that the user had access to. You will need to search the .ssh subdirectory of the home directories. (If you have automounted home directories, you only need to search the directory on one server; otherwise you need to search all servers they might have had access to.) The problem will be finding the first copy of the old key. The user's home directory on commonly accessed systems will be a good place to start. Once you have the key you can grep for it on other systems and userids. Searching for the key value rather than the comment will be more likely to find all the keys. 

DavMail may meet your needs. I used it to connect the Thuderbird mail client to an Exchange server when I working on a project. In addition to providing and SMTP interface, it can also provide IMAP and POP connections. It can be configured for an individual client, or for enterprise usage. 

I have used mtr (linux screen based traceroute) with a slow ping rate (1 to 2) per minute to monitor response to the end point. If one or more switches are getting congested they show dropped pings or slow responses. This may be a result of duplex issues. Under some conditions I have seen Cisco routers appear to run half-duplex on links hard-coded to full-duplex. Duplex issues can be tested by transfering a large file both ways. It will be much slower in one direction than the other. This has made package installations over the network impossible. Dumping error counters on all the interfaces (host and router) along the way can be helpful. Error counters should be 0 or low values and not increasing at a noticable rate. 

Use a property to configure which backend server to use. Configure tomcat on your laptop to use the development backend. You can either provide a default property value with the production backend, or set the appropriate backend on your production server. This gives you great flexibility to configure staging and performance test environments. If you have multiple backend services consider using a property per service. This provides the ability to deploy use one service for multiple environments while deploying other services differently. It also allows scaling services, in cases where the load on a service requires one or more dedicated servers. 

Use a rewrite rule to direct all authenticated pages to https:. This will happen before the authentication request happens. Also require ssl for all authenticated pages. EDIT: You can use rewrite rules to force http: requests to https: requests. This happens for all requests that match the pattern you are matching on. This would normally happen before the page requiring authentication happens. This can be be inside a location or directory definition. The rest of the site will be on http, unless accessed using https. Rewrite conditions are quite flexible as th what is matched, and what it gets rewriten to. 

To setup masquerading quickly (and add firewalling) install the package. Use the two-interface configuration from to get started. It expects the Internet to be on the eth0 interface. Your DHCP server should be handling eth1. The Shorewall site has lots of documentation. You can install the package to get a local copy of the documentation. 

You should be able to authenticate using a second dovecot running as a director. This is the service you created the listener for. Is the Exim second server a new MX? I would consider making this the primary MX server and offload most of the incoming email traffic to it. This should reduce the traffic the current server which can remain your submission server. It would even be possible to remove the current server as an MX so that it has more capacity to handle MDA and Submission traffic.