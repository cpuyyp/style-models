I was trying to configure BGP peers on sample topologies, Now considering that BGP is the protocol that routes the internet it must not be possible to establish thousands of EBGP peers by such manual configuration using CLI commands. So I was wondering is there a way to automate this process and how to do it? On a related topic, BGP I read that BGP exchanges RIB information and updates once the peer group is established. Can someone point out what exactly are the contents of that RIB and how is policy implemented through them.? 

The process is pretty straight forward. 1. identify the devices that need isolation- each VLAN per such device. 2. Remember VLANS are set up at the switch interface. 3. the switch interface links that have been configured with non native vlans (other than default) have to be trunk - VTP, ISL , etc 4. For communication between two devices in different VLAN's - if needed you will need a layer 3 device - router or SVI. 5, Router have no concept of VLANS, they operate at layer 3. thus there is no configuration involved at the router. For a more conceptual understanding about VLANS you may want to read about VLAN tags, switch forwarding table and switch virtual interfaces. 

I have been reading about CGN. Though similar to NAT it is used by service providers to route traffic without the need for the a public IP address. But when the packet leaves the ISP to the public internet, it does need a public IP address. So how exactly does CGN help save IP addresses. Or what are the other advantages of CGN. For without CGN (but NAT + PAT) the packet cycle is: customer device -> router (NAT - private to public) -> public internet -> server (maybe a DNAT here) with CGN this changes to customer device -> router (NAT - private to public) -> ISP router (CGN here) -> packet travels through the ISP -> NAT (CGN address -> public ) -> public internet -> server So how is having an additional layer of NATing helping the case ? 

If a web site is hosted on a public network it can directly be accessed using it IP. If it is hosted on a private network it can still be accesses if the NAT device conducts a port forwarding of some sort. If there are multiple instances of the web server than the NAT router can perform load balancing. However what if there are 2 or more un related servers being hosted on a single private space. How can the traffic be identified as to which server it is destined for in this case. On any cloud hosting platform, eg AWS. There may be several different servers but just 1 public IP which is used by all incoming traffic (ofcourse AWS has many public IP's). But in general if the number oif servers exceed the number of public IP's such hat port forwarding cannot be used. Than how can traffic reach its correct destination. One method I thought was deep packet inspection at the router such that it read the URL in the application header 

Software Defined networks do not have a device explicitly named as router. The Network is generally made of switches and controllers. However, can sdn networks achieve functionality of routing ? Definitely! Sdn uses controllers. In a very broad sense controllers work on the principle of match criteria and corresponding action . The controller uses the match criteria to instruct the switch what it should do with the packet. Hence switches in sdn are sometimes referred as dumb switches. The match criteria can be destination mac - so it behaves as a switch - L2. It can be destination IP . so it acts as a router. It can be source MAC or source IP . which is a part of policy based routing . Or it can be any header field from l2-l5. It can even determine the action by using the application layer data Hence a controller in sdn can be a router but it's capable of much more than that . But you wont find the word router used much in the context of sdn Hope it helps To answer the second question . Sdn gives you the control of packets forwarding. So using controller APIs you can implement practically any algorithm which may be the exact routing algorithm we use now like ospf , a modification of them or a new concept altogether that suits your Network. 

Can the devices want to send data at the same time? . Will the devices send the data at the same time ? . the idea is simple. Be it high speed or LTE or any type of communication If the technology is using packet switched network- Ethernet the transmission link has a maximum bandwidth. This dictates how much data can traverse through the data per instance of time. Thus if more than a certain amout of data is transmitted then it results in collission, retransmissions and this reduces the performance of the system. Can the devices send at different frequencies. For that, first of all the cable should support different frequencies of data through the channel (which is not the case for eg. You cannot send any frequency on an optical fiber) which is generally used in high speed communications But asssuming that it does, the switches need to be equipped with to listen at different frequencies and allow band gaps to prevent disturbance. Secondly the hosts need to be smart enough to listen and understand which frequency is currently unused and transmit at a different frequency. This involves significantly higher processing and takes away the fundamental requirement that a network must be simple. And as Ron pointed out it wouldnt be Ethernet 

These routes are however not visible in the routers FIB table. when I specifically check for static they are shown as 

If you are familiar with the concept of forwarding table in conventional networking. 'Flows' has a similar role in software defined networks. The switch under use appears to be OVS. OVS is a software switch with SDN capabilities. Thus you can instruct the switch what action to perform in a given situation. For instance: 

I read somewhere that a fragmented ip packet can further be fragmented depending on the changes in the network. Now how is the packet reassembled at the router. Because the identification bit can be used for one set of packets. Can someone give an example Secondly, is the identification number randomly chosen or does it have some specific algorithm behind it. And finally, what is the significance of the reserved bit used in the IP flag 

This will be a really long answer, So here it goes. First things first the rate at which TCP will send the data is dependent on 3 things- application generating data, receive window, congestion window. The effective rate will be determined by the minimum these three. Now for this question let us assume there is no flow and congestion control required and the application always has data to send. Now as you pointed out, TCP uses buffers to send data. the buffer size decides the maximum of packets TCP can sent without waiting for an ack. Now when TCP sends the any data, the packet will travel at link speed ie 100% link utilization and reach the sender. The sender will reply with an ack that again travels with link speed to reach the sender. Thus time elapsed during this activity is equal to RTT. Note that the amount of traffic sent by the TCP during this RTT time is equal to buffer size. The average utilization is given by total data set in the given time. Thus utilization is :- window size / RTT. Now if we want to send data where average utilization equal to bandwidth then