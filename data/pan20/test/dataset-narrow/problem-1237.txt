A proof that uses closure properties: DCF languages are not closed under union, so take, $L_1, L_2 \in DCF$ s.t. $L = L_1 \cup L_2 \notin DCF$ Add three new symbols $\{\alpha, \beta, \#\}$ to the original alphabet $\Sigma$ and build the languages: $L'_1 = \{ \alpha \# w \mid w \in L_1\}$ $L'_2 = \{ \beta \# w \mid w \in L_1\}$ We have $L'_1, L'_2$, but also $L' = L'_1 \cup L'_2 \in DCF$ (it is enough to add a starting state that leads to the recognition of $\#L_1$ after reading a leading symbol $\alpha$ or the recognition of $\#L_2$ after reading a leading symbol $\beta$). Now suppose that $Outf(L') \in DCF$; we know that DCFs are closed under intersection with regular languages, so: $$Outf(L') \cap \{ \#w \mid w\in \Sigma^*\} = \{ \#w \mid w\in L_1 \lor w \in L_2 \} \in DCF$$ too. But given a DPDA for $Outf(L') \cap \{ \#w \mid w\in \Sigma^*\}$ it is immediate to build a DPDA for $\{ w \mid w \in L_1 \lor w \in L_2\} = L$ (just skip the recognition of the first leading symbol $\#$), so $L \in DCF$ contradicting the hypothesis. 

there are no "special rules" (exept for some common meta-rules), but there is a mix of elements involved (the list above can probably be further extended); there is a a clear connection between the (underlaying) computational complexity and the addictiviness/fun of a game; 

Just an extended comment; in Allan Scott, Ulrike Stege, Iris van Rooij, Minesweeper May Not Be NP-Complete but Is Hard Nonetheless the authors face the problem I mentioned in my comment above. From the abstract: In volume 22 of The Mathematical Intelligencer, Richard Kaye published an article entitled "Minesweeper is NP-Complete." We point out an oversight in Kaye's analysis of this well-known game. As a consequence, his NP-completeness proof does not prove the game to be hard. We present here an improved model of the game, which we use to show that the game is indeed a hard problem; in fact, we show that it is co-NP-complete. ....In this article, we investigate the complexity of the deterministic part of playing Minesweeper. In our analysis, we assume that the player is given a consistent Minesweeper board configuration. That is, when completely revealed, the board presented has in each square either a mine or a numeber corresponding to the correct number of neighboring mines. Further, we assume an ideal player who makes no mistakes in reasoning. Note that these assumptions imply that the player can only lose (try to open a square containing a mine) when forced to guess. Therefore, our optimal player who follows the strategy described previously will avoid guessing whenever possible. However, to do so he must be able to decide whether it is possible to make progress on the board without guessing. This problem is what we call the Minesweeper Inference problem. ... There is also a recent paper on arXiv that seems relevant (I just found it now): Michiel de Bondt, The computational complexity of Minesweeper Abstract: We show that the Minesweeper game is PP-hard, when the object is to locate all mines with the highest probability. When the probability of locating all mines may be infinitesimal, the Minesweeper game is even PSPACE-complete. In our construction, the player can reveal a boolean circuit in polynomial time, after guessing an initial square with no surrounding mines, a guess that has 99 percent probability of success. Subsequently, the mines must be located with a maximum probability of success. Furthermore, we show that determining the solvability of a partially uncovered Minesweeper board is NP-complete with hexagonal and triangular grids as well as a square grid, extending a similar result for square grids only by R. Kaye. Actually finding the mines with a maximum probability of success is again PP-hard or PSPACE-complete respectively. Our constructions are in such a way that the number of mines can be computed in polynomial time and hence a possible mine counter does not provide additional information. The results are obtained by replacing the dyadic gates in [3] by two primitives which makes life more easy in this context. 

Note: at step 3, if you allow repeated variables in a clause, then there is non need for the extra variable and the final $k$ SAT formula of the example can be: $(x_1 \vee x_2 \vee -x_3) \wedge (-x_1 \vee -x_2 \vee -x2)$ $\wedge (-x_1 \vee x_3 \vee x3)$ $\wedge (-x_2 \vee x_3 \vee x3)$ 

A rather recent result not included in the Schaefer and Umans paper is 2-CLIQUE COLOURING OF PERFECT GRAPHS. See David Defossez, Complexity of clique-coloring odd-hole-free graphs. J. Graph Theory 62, 2 (October 2009), 139-156, and some recent improvements (2013): Hélio B. Macêdo Filho, Raphael C. S. Machado, Celina M. H. de Figueiredo, Hierarchical complexity of 2-clique-colouring weakly chordal graphs and perfect graphs having cliques of size at least 3 (the problem is still $\Sigma_2^p$-complete for weakly chordal graphs, and for perfect graphs having cliques of size at least 3). 

$G = \{ b_1=B,b_2=a_1+1,b_3=a_1+2,...,b_m=a_1+(m−1)\}$. In both cases the problem remains solvable in pseudo-polynomial time. For what regards point 2) you can find some information related to the density analysis for the ("simpler") SUBSET-SUM problem (it is usually defined in terms of $n/m$ where $n$ is the number of elements of the input set and $m$ is its maximum); e.g.: O'Neil, Thomas E. "On Clustering in the Subset Sum Problem." Proceedings of the 44th Midwest Instruction and Computing Symposium (Duluth, MN, 2011). 

A standard RDBMS should be enough; this is a sketch of how it can be done in a RDBMS even without BEGIN TRANSACTION capabilities (a mix of SQL/pseudocode): Create two tables with the following columns: 

Clearly the TSP instance $T$ has a simple cycle that visits all nodes which corresponds to the satisfying assignment of $\varphi'$ in which $t = true$ (and this tour can be easily constructed in polynomial time), but it has total weight $|V'|+1$ (because it uses the edge that correspond to the assignment $t = true$ that has weight 2). $T$ has another simple cycle that visits all nodes with a lower total weight $|V'|$ if and only if the edge of weight $2$ that corresponds to the assignment $t = true$ is not used; or equivalently if and only if there is another satisfying assignment of $\varphi'$ in which $t = false$ ; but this can be true if and only if the original formula $\varphi$ is satisfiable. I'll think more about it, and I'll write a formal proof (if it doesn't turn out to be wrong :-). Let me know if you need further details about one or more of the above passages.