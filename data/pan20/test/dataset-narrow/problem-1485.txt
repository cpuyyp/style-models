I think this is pretty hard to do in a single term and I don't think it is possible early in the curriculum. However, a two term sequence, even if not consecutive, might work out. However, I'm not sure exactly what you mean by "design" here. But here are some possibilities. 

It depends on your goals: If you want to just "get by", take the easiest one. That is probably the one you already know the most about already. Safe. Boring. If you want to "become as smart as possible", take the hardest one. Unsafe. Live on the edge. If you want to just get employed in the future, take the most practical one. Hmmm. Looks good on the resume. If you yearn for (yet) higher education, take the most theoretical one. The admissions committee will love it. If they all seem about the same, roll a die. If you want to get lost in the crowd, take the most popular one. No one will notice me. If you want some individual attention and a relationship with the faculty, take the least popular one. The prof will be able to help me understand things. 

I agree that SO has its uses, but anything that makes it seem like a panacea is problematic. It is useful to experts who need to produce something external to themselves and need to get past the hard bits efficiently. It can be harmful to students who need to produce a change in their own brains, which can only come from working through the hard bits. Efficiency is not a major goal of education. Efficiency will come, but it comes only from practice. 

But let me add something about the two ideas themselves. Bitcoin has no intrinsic value. It's imputed value comes only from its scarcity and the expense (in cpu power) of creating new ones. On the other hand, blockchain, is a distributed ledger that can keep track of anything using an anonymous and distributed system of agreement. It doesn't depend in any way on the difficulty or expense of creating a block, though it needs a scheme to prevent forging blocks. To be true to the idea the anti-forging scheme needs to be independent of any central authority. For grades, neither of these, independently, seems to be very desirable (or necessary), unless we are in a post apocalyptic world (Road Warrior movie for example) in which there are no central authorities, having all been destroyed, and no centralized way to verify historical records. 

Eric Roberts wrote a great little book: Thinking Recursively. Hard to do better than that. He's a master. Whoa. Not cheap. Disclaimer - I'm not him and he doesn't give me kickbacks. I'll try to add something free, but you, the prof, should get a copy. $URL$ may be all you need, actually. 

However, a few words about bitcoin and similar things as they have worked out in the real world are in order. Since it has become difficult to generate new bitcoin, two things have happened. Mining rigs are using up a significant amount of energy - and likely generating a significant amount of carbon dioxide. One estimate of the energy used is approximately that of the nation of Ireland. The other is that these rigs and the energy are expensive, so many internet attacks are now done to install bitcoin miners on other people's systems so that they can bear the cost without benefit. The bitcoin market has also proven to be very volatile. Fortunes have been made (by the early investors/miners) and lost (those who believe the hype). That makes it remarkably similar to a Ponzi Scheme. 

This process is actually closer to the truth than you might expect, but it has at least one (maybe two) serious flaw. After describing the process to students (even relative beginners), ask for their help in identifying the flaw(s). This can lead to a deeper understanding of recursion than a simple (flawless) example. 

Authenticity Bias is a common phenomenon in recently promoted professionals who have new responsibilities. It is the sense of being a fraud in their new position. "This isn't me, I'm playing a role." Often the role demands behavior different from what they are comfortable with. Many, however, have found that not accepting the new role is a path to failure. Falling back on old habits, "the real me" simply fails in the new role. On the other hand, playing the new role consciously for a while can lead to a "new me", overcoming the Authenticity Bias. 

On the Macintosh, at least, the QuickTimePlayer, which is a standard application, has a function to capture the screen as a video, including sound. Having captured one or more videos, you can use any video editing software, which MacOS also provides, to create your lesson. The results can be distributed as you like. I assume that such solutions exist within other (windows, linux) ecosystems, possibly as standard distribution applications. The results depend on the sophistication of the video editing software, of course. I assume, however, that if you want something polished, you will need to put significant effort in to it. Quick-and-dirty probably won't have much, if any, educational value. And, beware of copyright law if you want to include things you don't clearly own, such as music. 

I'm not sure how you teach these things, but you may have a misconception about learning that is getting in the way. This seems to be common with newer teachers who don't yet show the scars of many student engagements. I suspect that you see the relationship between theory and practice fairly clearly. So you explain something to students (possibly at a fairly high, conceptual level) and think that they will be able to make the same connections that you do. But they likely won't, since they don't have your background and experience. In this particular case, I'd suggest that you give them lots of sample CSS that they can emulate and also (a smaller set) of poor examples and show them the consequences when change is needed. Do this as part of your introduction to creating HTML docs, not as an after-the-action correction. Integrate it into your teaching. Some of the students will be able to make the leap immediately without this, of course, but many need to learn by example, not by inference. You need to reach all of the students in any teaching situation and all of them learn differently (learning "modalities"). I once wrote a book on a topic important to me, but did so soon after becoming thoroughly familiar with it. It was important to me, in that book, to be able to connect with the beginner's mindset before I forgot how hard it was for me to get started with the topic. Teacher's too often forget how hard their own path was and expect others to have an easier time. New teachers also often don't yet realize that their students aren't like themselves, with different motivations and different ways of thinking. In general, you need to repeat yourself when teaching, but not in the same words and not with the same tools. Each explanation will, one hopes, reach a large fraction of the students. Each re-teaching (explanation, demonstration, exercise, ...) will likely reach more. Ultimately you want to reach them all, but no one thing will reach more than a fraction. As a young teacher I once thought that my explanations were so clear and brilliant that no-one could possibly misinterpret them, and that deep ideas (in this case in Statistics) would become immediately clear to all. In actually, I probably got through to about 5% of them. Luckily I learned not to do that anymore. 

Unfortunately most scheme books are dead tree only and many are out of print, though available in the used book market. The classic is Structure and Interpretation of Computer Programs by Abelson and Susan. It is probably your best option and is still in print. There is also an online version of SICP at $URL$ One of the advantages of Scheme, being so different from what your students already likely know, is that you don't have the problem of finding a good book for "scheme as a second language" as you would switching from one language to a similar one. A book that assumes the students don't know a lot is fine for a paradigm switch situation. There are other books though. Scheme and the Art of Programming by Springer and Friedman is pretty good. Friedman also published The Little Schemer, which is probably too simple for your uses. But combined with his follow on The Seasoned Schemer you might do ok. But Abelson and Sussman is the gold standard. Haskell, on the other hand, being more modern, would offer the possibility of e-books better than Scheme would, if that is all-important. 

Let me mention, at least, another dimension to this. There are various functional languages and some of them are closer to what your students may have in their backgrounds. A language with dynamic scope and abstract syntax is a very different beast from one with lexical scope and a rich syntax. The only functional language that I really worked at was ML and I got quite good at it. But I learned that I really want the concrete syntax that it offers as an aid in my thinking. The underlying concepts are the same, of course, but I'm pretty worthless in Scheme. But then, I didn't learn Emacs from my mother as many schemers seem to have done. So, if you want to level the playing field then I will guess that you want something as unlike their previous experience as possible. Say Scheme, rather than Haskell. However, some students will pick up the new ideas faster than others no matter what you do, so it is good, in my view, to take advantage of that. And of course, if you are going to do something very non-standard, make sure that you have the necessary expertise first. That isn't a situation for staying one chapter ahead in the book as some instructors are forced by circumstances to do.