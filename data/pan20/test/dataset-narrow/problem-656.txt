I like it! I did however find some inefficiencies - see the section below labeled Excess Looping. Suggestions Cache DOM elements on load DOM lookups aren't cheap, so it is generally best to store references to them in constants. For your application, the select lists and the elements with class name could be stored in constants, and then those constants could be used in place of the current DOM lookups Use instead of querySelectorAll(), instead of In most browsers it would generally be quicker to fetch the elements with class name using , but that would return a live collection (refer to this SO answer for an explanation). It may be best to use the spread operator to put that collection in an array (or else use Array.from()) to allow use of array methods like forEach: 

Yes, in addition to the code sample above, you could also utilize one of many libraries that abstract the XMLHttpRequest functionality into wrappers (A.K.A. AJAX wrappers). Many of those wrappers utilize promises. The XMLHttpRequest code could be abstracted into a wrapper using Promises (see this example). For a comparison of many popular libraries, look at this page. One example is the fetch API. Be aware though browser compatibility could be an issue (e.g. if support for older browsers like IE is needed). 

Classes Since you are using keywords like and arrow functions it appears you are coding for EcmaScript 2015, and this could use classes. While only really syntactic sugar over the prototype syntax, they can streamline some things... 

There are other improvements that can be made here, too, depending on how much you simplified for this question, and how far you want to go. For a few examples: 

Everything in your code should either require the interface or the interface. If the former, it can accept any of the four classes. If the latter, it requires the plus four bit. Since a plus four can always be downgraded to a pure zipcode, this set of inheritance will let you pass a +4 wherever you are looking for a . Also, by always requiring the interface, rather than the concrete type, you can trivially implement the null object pattern you asked about. 

Each grouping of numbers is an instance of a object, and we test if two are equal based on the items in each . 

Another possibility would be to store the words in a dictionary of nested dictionaries. The key would be a letter, and the value is another dictionary of every letter that can follow that. Repeat until you've reached the maximum depth. For the sample case, this would look like 

Everyone has had good ideas, but since you're asking about OOP, I'd suggest refactoring it altogether. 

Everything that's the same gets put into . Everything which could vary is defined as an method or property, and then the subclasses implement just those things which make it different. 

But I can understand how some would argue it improves readability to be clear where the values are stored. 

Like your code already uses, is the traditional way of setting cookies. And yes, since the cookie data is sent in a header, there must be a response, otherwise the browser/user won't really be able to receive the cookie. General Feedback Passing instance/member variables to method Why pass to from the method? If the method was called outside this class (and the scope of the method changed to for sub-classes or for anywhere else in the code) then it might make sense to accept that parameter. 

If the aim is to ensure that is both and in fact a Boolean, then the strict equality comparison operator (I.e. ) can be used. 

Then another area that could be simplified using arrow functions is the end of the function - specifically this block: 

Then there is no need to wrap in calls to the jQuery Selector function (i.e. ). And after the loop, then add that table element to the DOM: 

Those assignments can occur outside the click handler (optionally in a DOM-ready callback) - and const can be used since the value shouldn't change within the lifetime of the page. Use for pairs Instead of with a conditional: 

Then the function can iterate over those titles and add the title attributes to the elements using the iterator variable, eliminating the need for and : 

By doing it this way, you separate the formula (which is basically just Ingredient/Percentage pairs) from each application of it. You can use the same object to calculate the weights for 10000g of dough or 50000g of dough - simply call with a different value. Notice how many fewer properties you need on each class, and the question of "late setting" of some of them is entirely irrelevant. Effectively, weight is not an intrinsic property of an ingredient, because it varies based on the total weight, so shouldn't be a property of . 

LINQ has extension methods for any which will help with this. There's , which will return the first elements, and which will skip elements, then return the rest. Of course, these don't actually change the they're operating on - they just return a new one. But that's a safer pattern to use - it means you have the option of keeping the untrimmed version around if you need to. 

I find this much more readable than trying to do conversions to an Enum, and more straightforward than a decision grid. That being said, it doesn't scale as well as either option. 

Edit: Stole the idea from Jesse C. Slicer's answer, but didn't modify the function signature. You can also return if that is more useful to you, or you can go with his idea of returning , in which case you don't need that at all. 

Well, it depends on how large of an application you create. For the sample code given, you could just move the methods from to the Vue instance, unless that feels like too much coupling of the view layer and controller code. What you describe sounds like Vuex. On the When should I used it? section of the documentation, it mentions that "A simple global event bus may be all you need." Other feedback in every function Are there any functions that should not have strict mode invoked? If not, then just add one to the beginning of each file. Or are there external scripts that don't have scrict mode invoked? naming of The Storage class doesn't appear to actually store data - it merely fetches data (like you typed: "actually looks, that I don't really need it here, because it does really nothing helpful, I use only fetch() method of it"). xhr class The xhr class could be replaced by the Fetch API, or a similar tool like reqwest, superagent, etc. without specifying radix App.getDate() has the following line: 

That declaration of could be stored outside of the function, possibly in an external JSON file. You could also consider using the Map instead of a plain object. Other review points Multiple jQuery libraries loaded I noticed that the linked map page includes two versions of jQuery (i.e. 3.3.1 and 3.2.1). While those two likely won't have any conflicting code, including that library twice is pointless, and while most browser cache it, this leads to an additional 34.6 KB that the user must download. You might consider whether you really need jQuery... check out youmightnotneedjquery.com/ for alternatives. The page already has 6 other scripts included... I ran the page through the Yslow plugin - gave it a B rating: 

If is your slowdown, you're not going to be able to get a huge improvement, but you can get some by parallelizing all the calls to it. Replace your loops with this version: 

You're right that all the casting is a sign that there's better way. Rather than using the value of an as the index to an array, you should use a structure that's designed to store two values in the first place. There's a couple of alternatives here. My first instinct is to use a . That most explicitly matches the concept of what you're trying to do (each has a value ), but it's not actually the best option. You're not going to be looking up the value based on the key, the order of the keys may change which could lead to hard-to-reproduce bugs, and it's less memory-efficient. Instead, I'd use a , , or (in C# 7) . They're all effectively the same thing in this case, and best convey the concept "here is a pair of related values" without implying the A->B relationship of the Dictionary. (Note that you can also use arrays instead of , like I do below). To make handle this, you would need to make it generic, so that you can pass any arbitrary type in and get that same type out. Here's what the code would look like using C# 7's ValueTuples: 

Unfortunately the MDN page for HTMLSelectElement.value yields a Page Not Found message and none of the archive results appear to be any different. Perhaps the only browsers that don't support on the selectList element also don't support ecmascript-6 so it is a moot point. EDIT Now that I think about it, it feels like the current implementation of has multiple responsibilities: 

This is known as the Singleton Pattern closed before last table In the first block of HTML, the tag is closed: 

And Matt's jsbin includes an ES2015 example, which should be fsmiloar to OOP users in other languages like C++, Java, PHP, etc. 

Obviously that block of statements and blocks would become quite large for 10 different fields... That could be compacted by defining a mapping, such as: 

So it might be wise to create an element and have that element appear/update when appropriate, instead of using . Rewrite See the code below, which takes into consideration the recommendations above. UPDATE: Apparently using the attribute is forbidden. In that case, a simpler way to ensure that all questions are completed is to use a FormData object and then get the keys with FormData.keys() and because that returns an iterator, convert that to an array with . Finally, return the equality of the length of that array with the array containing the correct answers. 

The first method is an all-purpose "Add"-type method which will either add it or update it depending on whether or not it exists. The second is specifically for dictionaries where the value is a . It'll let you add an element to the , creating the key if neccesary. 

Just to build on what @svick said, this is definitely not a good way to handle things. If you want to catch all exceptions, simply . If you don't want to catch everything, then only catch the specific types you want. There's also the block which you can use to do any cleanup which is necessary, regardless of whether or not you've handled the exception. 

is just a call to get as a (instead of an ). And so on... This lets you easily add a lot of logic ("Do I add this set of tags?"), doesn't require a multitude of s, and you can go back and add more things to a tag later. 

Here's a pseudo-coded recursive function to build the query, since I'm feeling lazy and don't want to double check all the string functions. I haven't tested it for speed - it might be too slow, but I think it should work. 

As an alternative, since you already have the letters and their counts, sort the string then make the regex .