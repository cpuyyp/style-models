I created an apk in Unity (4.6) and when I install that apk on the device it creates 2 instances of the game (2 icons are visible in the screen). Both icons start the same game, and when I uninstall the game it removes both icons. In previous builds this didn't happen, so I'm assuming that the changes I made to the Android Manifest have something to do with it. I included the Game Analytics SDK and it caused some problems when I tried to build the game for Android (with the message that the incompatible manifests can't be merged). So I commented out the part of the manifest that was causing the problem and now I have the problem with multiple instances of the game. I did some research and found that this happens when there are multiple activities in the manifest that are marked as LAUNCHER - this is not the case in my app, only one activity has that property. Also, as far as I can see, there is only one AndroidManifest.xml file in the Unity project (only one appears when I type it in the search). This is the part of the manifest that I needed to change: 

If the commented out part is included, Unity throws the "incompatible manifest merge" error in the building process: 

I have a problem with the usage of XBox controller in Unity game. I connected the controller to the PC and it works fine, I also managed to use it in the game itself - I'm using "A" button to fire and Start to start the game and they work properly. However the game doesn't recognize the x-axis movement. I'm not sure if the problem is in the input settings or my code. This is how the Horizontal movement is defined in the game: 

I'm working on a game for mobile platforms (Android at the moment, in the future it should be available for iOS and WinPhone) and I want to trigger a certain method when the game is un-paused. For this I'm trying to use OnApplicationPause(bool paused) method (when the "paused" variable is false), but the process is not working as expected. These are my questions: 

I made a "game" for a college project that reads data from .txt file at startup and draws some models according to the data in that file. This is the code I use 

This creates 4 bullets (it fits our game desing, the player is restricted to 4 bullets and can refill them with powerups). There are different types of bullets that we create with the same function, and we create them at the start, pool them, and then use them when they are needed. Now this is one of the "heavier" methods, and I'm trying to find a way to speed it up. I tried something like this: 

Get the length of the vector from the slingshot to the mouse/finger/whatever. If it's more than your allowed length then normalise the vector (to make its length 1) then multiply it by the maximum length. 

You could make your class inherit from , calling it something like , or if you like. You'd then pass in the Game into the base constructor, and override the method. If you do this, you can add to your game's Components in your game's constructor, which would make its update method get called automatically. You don't have to use that part of the framework though, so really it's up to you. 

The problem is that or are being cleared somewhere (probably when they get set as a render target), so the only sprite that "survives" is the last one. Since you have all your sprites rendered to you only need to render onto once. 

A is not possible, you can only work within the XNA networking framework on the xbox. This means connecting to xboxes with identical games running. Re. option B, the server. You would have login in your game that checked something like your gamer id/name and if it was you it'd run in server mode, otherwise run in client mode. This is has been done before and is fairly unreliable and not recommended as other xboxes won't always be able to see you and you'd need to leave your server xbox running constantly. You mention a P2P architecture, but also of using the an xbox as a server (and others a clients presumably). This is somewhat contradictory (to me). Another limitation you'd have is there is a limit that 32 (i think) xboxes can connect to each other at once. So if you went down the server xbox route that's 31 players before others wouldn't be able to join your server. XNA on the xbox really isn't geared for a persistent world, MMO-like game for the reasons above, but if you're intent on doing it good luck. 

Update: It seems calling for all sounds i want to play doesn't work. I'm still getting stuttering in various places in my game when i call . 

I'm using the marching square algorithm (2D version of marching cubes) to generate vertices. I end up with vertices arranged in a grid. I want to enable destructible terrain, and the way i was planning on doing this was to start simple - have one vertex buffer with the whole map, and edit the bits that change. In cases where I need to remove vertices I was thinking about just making them transparent so I can still render the whole map in one go. Firstly, is this approach reasonable? Secondly, I want to design my VB so that if I need to change vertices in 3x3, 5x5 or 7x7 etc. grids the locations of the vertices in the VB are close together. Now, from university I vaguely remember an image compression algorithm that walked the image in an unusual way, which i think could apply. Basically it walked in a U / horseshoe direction. It would place a U over the image, large enough to cover the whole thing, then it would break the U up into 4 quadrants, and use a smaller U to walk those, and so on until it got down to the pixel level, or in my case it got down to a single grid unit. Does this sound feasible? What is that algorithm called? (I can't remember the name and haven't found via general searching).