Besides sines and cosines (which 50-75% of programmers I've met didn't know how to use), learn the magical arc-tan function and how it can be used to get the angle of any vector. 

If the concern is for speed running, you can measure how far the player is from the puzzle "entrance" by the time they first see a part of the puzzle, calculate how long it will take to reach the puzzle entrance at top speed, and rewind the puzzle state by that many seconds. Most games just make periodic events happen often enough that you're unlikely to miss one by too long. If you're making a game for speedrunners, you should allow for some creativity when navigating sections anyway. 

Apparently you need to install AIR in your mobile to use Flash apps, and AIR requires Android 2.2 while my Milestone is a feeble 2.1.update1. There is seriously no Flash lite or other alternative? 

I developed a small xna games. For some time I have a problem with the saturation of RAM. In fact everything works perfectly, the game runs with a "Frame" of 60fps. But strangely I do not know for what reason my games every 4 seconds freeze half a second. Yet my average call time of the "Update" function is approximately 7 ms (which is supposed to be good ..) Here is a screen capture of the Task Manager. I can see the ram flush periodically. Have you any idea why the ram saturates at only 50%? 

As you can see , my nearPlane and FarPlane are set to 20f and 100f . So i don't know why the light stop after 2 cubes. it's should be bigger Here is set the value to my custom effect HLSL in the shader file 

What you're attempting to do is not a common strategy (in fact, I don't think it's even a rare strategy), for several reasons: 

The question is a bit vague, so I'll give a primer on the subject. To make an AI opponent, you'll need to create a sub-routine that considers the current state of the board and chooses a move, just like the player would. For example, in Tic-Tac-Toe, the subroutine would look at the state of the nine positions of the board, and choose where to place its own mark. Now, how does this subroutine choose what move to make? In a simple game like Tic-Tac-Toe, each optimal move is obvious from the rules of the game (try to make three in a row and don't leave open lines to the player). For more complex games like chess, that depend on strategies beyond one move, you start looking into AI. AI is basically "guessing for computers" - algorithms that calculate not the best move, but a move that -could be- good. AI algorithms involve, among others: 

I'm just trying to update with "SetData" with new vertices and indices but i throws the exception: "The array is not the proper size for the Amount of data requested." 

I started to make a small game in XNA . And recently i tried to add a "fog" on "pixel shader HLSL" with the class Effect from XNA . I search online about some tutorial and found many sample. But nothing want work on my game :-( . Before i already add a "fog" effect in my game and everything work, because i used the class "BasicEffect" but with the class "Effect" and HLSL, it's really more complicated. If somebody have an idea, it's will be wonderfull. Thanks again. Here is my code HLSL, i use. 

I just want to load a simple *.fx file into my project to make a (pixel shader) effect. But whenever I try to compile my project, I get the following error in visual studio Error List: 

The content pipeline cannot do that (without a bit of hacking about), it processes content as part of the project's build process. Just use regular .net functions for monitoring file changes, maybe and reading files . 

The easiest way to do this is to create a shader for it (See code below). Draw everything to a render target, then use the shader to draw that to your back buffer In your game code record when the player dies, then in subsequent renders interpolate a shader parameter between 1 (full colour) and 0 (full grey-scale) according to 

You could make your class inherit from , calling it something like , or if you like. You'd then pass in the Game into the base constructor, and override the method. If you do this, you can add to your game's Components in your game's constructor, which would make its update method get called automatically. You don't have to use that part of the framework though, so really it's up to you. 

Five terms. h and d are constant, and we want to know j and g based on a variation of s. Let's use one of these equations to define j in terms of g. 

And voila. j is directly proportional to s, and g is directly proportional to the square of s. Going back to code: 

Badweasel correctly pointed out that this solution would require excessive resources for little effect, but you have asked for what security issues remain on your solution. Let's look at the typical avenues for cheating, more or less by order of difficulty: 

Sure. Make non-square tiles. For 75 degrees, you want a tile that's tan(75) = 3.732 times as tall as it is wide. (edit: You might want to use shorter tiles on the 'middle' area between ground and roof, so as to enable buildings of various heights.) 

I developed a small 3d games xna and uses a "DynamicVertexBuffer" and "DynamicIndexBuffer" to store and draw my vertices. Everything works fine, but my problem is the "Update" function where I update my buffer. Each apel update I have to reset my buffer using the keyword "new DynamicVertexBuffer (...." It goes down the performance and reduce the frames per second of my games. Do I have to initialize my buffer each time in my function "Update ()"? Is it okay to reset every time my buffer to each call / frame I can not find a solution to update correctly my Dynamicbuffer with "setData ()" function without having to initialize whenever my buffer just before. Am I obliged to Reset-"DynamicVertexBuffer" and "DynamicIndexBuffer" before the update? If I call "setData ()" before reset it, I throw an exception: Works well but I have initialized every time "dynamicIndexBuffer" and "dynamicVertexBuffer" before update! (Consumes more resources?) 

If you want to make a worldwide grid, I suggest you divide the planet in countries or continents, and make a square grid properly centered on each. Let the ocean cover the seams. 

I will ask you to reconsider your position. Drawing the same art ten times just so it's not 'blurry' will force you to either spend a lot (and I mean a lot) of time on the art or rush it and have the same issue with quality. What if you have to redraw an asset? More common strategies to deal with this issue are: 

In my general experience, this is what companies will allocate, based on how much profit they expect to make: 

TVTropes has an interesting list of archetypes in game characters. While the terms used are less than technical, I'm sure you can translate them to whatever vocabulary you wish to use. 

The above means if we have the angle and one length of a right-angled triangle we can work out the lengths of the other sides. Luckly your problem can be thought of as calculating the length of triangle sides: 

How about POVRay? It's free and can be automated. $URL$ See this page for info on generating several different images: $URL$ 

Shawn Hargreves' blog has some excelent posts on the topic of the content pipeline (as well as many other things): Shawn Hargreaves Blog Index #Content Pipeline There are also many good posts on the App Hub forums, there's a dedicated section for the content pipeline: XNA Framework Content Pipeline - App Hub Forums 

A is not possible, you can only work within the XNA networking framework on the xbox. This means connecting to xboxes with identical games running. Re. option B, the server. You would have login in your game that checked something like your gamer id/name and if it was you it'd run in server mode, otherwise run in client mode. This is has been done before and is fairly unreliable and not recommended as other xboxes won't always be able to see you and you'd need to leave your server xbox running constantly. You mention a P2P architecture, but also of using the an xbox as a server (and others a clients presumably). This is somewhat contradictory (to me). Another limitation you'd have is there is a limit that 32 (i think) xboxes can connect to each other at once. So if you went down the server xbox route that's 31 players before others wouldn't be able to join your server. XNA on the xbox really isn't geared for a persistent world, MMO-like game for the reasons above, but if you're intent on doing it good luck. 

It really depends on what you're trying to render. For example, if you're rendering layers of clouds that are transparent to the background but not necessarily to each other, one useful trick is to draw the background, then non-transparent cloud layers, then draw the background again at 50% transparency over the other layers. 

I'm not accounting for air friction here or other physics engine shenanigans, so you might need to test various constant values to see if you get the right distance and height. 

Hello and welcome to "Linear Acceleration and You: How To Use Math To Throw An Object The Right Way". Assuming an initial horizontal speed of s (in distance per time unit), a jump speed of j (distance per time unit), maximum jump height of h (distance) and gravity of g (distance per time unit squared). Time to reach maximum jump height is t (time units). Your basic jump will take t = j/g time units to reach the top of the jump, and 2j/g from start to end. Therefore, it should cover a horizontal distance of d = s*(2j/g). The maximum jump height, using the basic equation for linear acceleration you learned in Physics 101, is h = g/2 * t² = g/2 * (j/g)² = g/2*j²/g² = j²/2g. And now we have a two-equation system: 

If you want infinite rounds define 2 functions for each enemy type, one will determine health of the enemy spawned, given the round number, the other will determine the number of enemies spawned, given the round number. Functions that would be interesting (given your example) are things like This would mean every 5 rounds the health increases by 5 more. For simple enemies the number to spawn might just be , so each round would have 2 more monsters than the last. Maybe harder enemies might have , so you get a hard enemy every 5 rounds (where gets the remainder). You could add extra functions defining things like enemy speed etc. 

Update: It seems calling for all sounds i want to play doesn't work. I'm still getting stuttering in various places in my game when i call .