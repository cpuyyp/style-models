If there's already a go installed, this will now supersede that. I'm not a go user so I don't know if much more is necessary, but if you look in the directory there's lots of stuff there, including an file. 

I'm not an expert on, or even a user of such things, but unless this places significant load on your desktop machine (e.g, runs one core at 25%+ all the time), then sure. The pi has a single core, 700 Mhz processor. I don't think the I/O can happen fast enough to overwhelm it in this context, which brings up a point worth considering: The pi does not have SATA connectors, nor is is USB 3.0 equipped. So you will be limited to USB 2.0 speeds. Further, the ethernet is on the USB bus. In theory this doesn't matter since the max ethernet speed (100 Mbps) is less than half the maximum bus throughput (480 Mbps1). I have a USB 3.0 harddrive attached to a B+ which I access via ethernet or wifi using ssh encryption, and the highest speed I can get reliably doing transfers is 3-4 MB/s (i.e., 24-32 Mbps). The drive itself is not encrypted. I don't know if the ssh encryption in the transfer adds any overhead. 

If you mean a powered USB hub, generally yes, they should work with no problems. The drives will appear as they normally do. If you are worried, buy from somewhere that will take a return or exchange within a few days without a hassle -- but again, the chance of it not working is very slim. 

The elinux pages are sometimes out-of-date, but it is also worth noting that those lists are not exhauastive by nature, hopefully that does not require further explanation. Whether a device will work is largely dependent on whether a driver for it exists, which is dependent on the operating system. Elinux is obviously linux-centric and I'll presume you're using some form of such too, e.g., Raspbian, although what's really of concern here is the kernel ("Linux" proper actually only refers to the kernel) since that's what controls hardware and where drivers are implemented, and there is really only one series of the kernel version in use on the pi regardless of distro. There are various 4G USB modem drivers referenced by USB ID in the kernel source. The hard part, without actually having the dongle, is getting the USB ID appropriate to the chipset it uses. Sometimes you can find them online. USB IDs are in the form , where the x's are hexadecimal digits. For example, searching "Airtel MF825A USB id" yields various hits including this one, from which it is pretty easy to garner the USB ID is . Now for the even more tedious part, checking the kernel source to see if there's a driver that references this. Despite the awkwardness, this is a pretty reliable technique because it is those numbers that USB devices report when they are plugged in, and then the kernel uses them to locate a driver. All the USB networking driver sources are in the directory, which for the pi kernel in particular you can browse here although it is unlikely to be any different than the vanilla version in this context. Anyway, in that directory does turn up a list of things from the driver, but it doesn't include 1408 -- however, there is a list of other models identified in comments there. If we have one of those, the question then is whether that driver was included in the pre-built pi kernel; you can browser the modules in your own (for , check ) or in the firmware repo in the Foundation's github. It's the directory we want to look in.1 And low and behold, is there, so things such as the "ZTE MF683", mentioned at line 718 of that source, should work. That's an idealized version of a procedure. Basically, if you have something in mind start by searching online for "linux Acme XY700" and go from there. Don't include "raspberry pi" in the search or the results will be much more limited, but once you believe that the device does have a linux driver, you probably do want to make sure it is included in the pi kernel (e.g., by asking here directly). 

This isn't peculiar to Raspbian or even GNU/Linux; evidently it's used on OSX too, although perhaps not the same way. Both operating systems are a form of unix -- I found that OSX question by quickly searching "unix staff group". OSX actually aims for (and receives) certification from SUS and POSIX; the use of there may be to comply with the former. Linux distros are not so certified, however. There's no by default on Fedora, so it is probably just the Debian side of the family. The explanation of purpose from their wiki is: 

The numbers that are important here are and . These are (hopefully obviously) related to . This is from the 2017-03-02 jessie lite image, and the hurdle for you is determining the size of the first parition. The starting block (8192) is always the same, but looking back at a jessie image from Jan/2015, the first partition size is 56M, and in the March/2016 jessie lite, it is 60M. So, most likely it is one of those. You can use, e.g., as the size when creating a partition. (Re)creating a partition table won't do anything to any of the data on the disk. The purpose of the table is to indicate where partitions are located. If the table is wrecked, those can't be found, but unless the card is corrupted significantly beyond the partition table, they are still there. So, if you create a partition table that matches where they are, you will be able to access them. Do that with or , just make sure if you use the latter that's all it is doing (do NOT format the partitions). Presumably you expanded the root filesystem, so when you set the size for the second partition, use the end sector (which will be the default). Beware when entering the starting sector that may offer you something less than 8192, i.e., somewhere before the first partition. Don't go for that. After you're done, you can test by mounting each one manually. If you get something to the effect "wrong fs type or bad starting block", then either the size is wrong (start over, try again) or else too much of the card is corrupted :( If they mount, unmount them and run to fix any corruption problems internal to the filesystem. If this becomes very long winded, there is a chance the filesystem is essentially wrecked anyway. 

There probably will be some indication that the driver found the display. Even if this does work for video and not just backlight control, this will not work as a boot display unless you recompile the kernel, since as is it must mount the root filesystem before it can load the driver. 

The command will change the line if it begins with or then then something ending with or . The line then checks for the same thing and if it's not there, adds it. Don't ask me why this isn't an if/else; efficiency is not a real concern here anyway. So note that won't change or count a line that's been commented out. 

It is possible to backpower the Pi through the USB but I am pretty sure doing this and providing power via another means is probably a bad idea -- as in one which may lead to damage. If that Corsair keyboard is backpowering this way, it may be defective, since that is definitely not something that is a good idea to do to a normal computer (plug a voltage source into the USB jacks). The fact that you can unplug the Pi and have it remain on obviously means it is providing power. Looking at the product description, I don't see any indication that it has some kind of circuitry to play such a role properly; it's also not clear exactly what that "extra power" jack you refer to is. My guess would be that it was meant to be used either with both plugs attached to the same computer (which would be okay; this allows it to get more than 500 mA from a USB 2.0 hub), or else you've confused the "pass through" connector, intended to provide a device jack on the keyboard (i.e., an input), for a second output jack, and because it is wired to the real output, attaching that to a power supply affects the whole circuit. Whoops. Either way, powering that from one place then attaching it as a device to another is, again, a bad idea. It may already have permanently damaged the Pi -- don't do it again with anything else. 

The only way to find out for sure is to try it for a while, say several days, all the while monitoring the state of the system and the applications involved. It is certainly possible to leave a pi on indefinitely, doing various things. If you are playing a video, you may run into a problem with the display going to sleep, but that is a different question, and a bridge you can cross when you get there. By "monitoring", I just mean checking in to see that the resource usage of the system, primarily RAM and CPU, remain constant while the system is doing the same thing over time. Beware that total RAM usage may increase gradually all the way to 100%, but this is not the same as the total RAM used by processes. It includes some kernel "buffers and cache"; there are many explanations of this online, particular WRT the tool , which clearly shows the difference. A few years ago I wrote a simple command-line client-server application for monitoring specific processes over the long term (as in weeks and months) in a style similar to . It can be compiled and used on the pi. You want to make sure your key applications maintain a stable profile, memory wise. If not, this would likely indicate a leak, which will build up over time and eventually crash the application if not the whole system. You also want to make sure they are not prone to over-taxing the CPU, although that problem is easier to deal with. 

There's no way for the interpreter to tell the difference here between two separate arguments, and one with a space in the middle. If the file really is called "TTRLinux v1.2.0.tar.gz", use: 

The web browser options in Raspbian do seem a bit sub par, although to be fair it is not a problem I give a lot of thought to since I use pis headless, sans remote desktop, and only plug in a monitor and fire up the GUI on occasion. However, I believe Ice Weasel is there. Note that the "rebranding and trademark issue" comes down to the firefox logo, so this is literally firefox "rebranded", since its licensing allows for such use of the source code. It also sounds, in the current version of the linked article, like that whole problem is being resolved and in the near future Debian will replace "ice weasel" (get it?) with the "genuine fire fox". So if you can tolerate firefox, there you go. Part of the problem historically is that running full fledged contemporary file browsers on the pi was only marginally feasible -- again this may be a subjective bias of mine since I see the whole desktop that way -- since they just don't have the umph or RAM required. The Pi 3 is probably a slightly different story (I don't have one), although doubling the RAM and adding $5 to the price tag would have made it much more so.