If both hosts are directly connected to the Internet with no NAT or firewall (hardware of software) in between, and you know the dynamic address of the the other host, you should be able to ping the other host. This assumes your ISP is not blocking such things. For instance, the cable ISP I use is blocking the ability to ping from one customer to another within its network. Note: Not having a firewall protecting your company's network is a very foolish thing to do. My guess it that your company has a firewall that prevents pings from one host to another over the Internet. 

The answer to that is that it depends on what your equipment needs. The answer is not an unequivocal Yes or No. A patch cable can be either UTP copper, fiber, or something else, depending on the cable infrastructure used. For instance, a Category-6 cable cannot be used when the equipment to which you are trying to connect has fiber transceivers. 

When you have the modem in bridge mode, your laptop works because it is using DHCP to get its IP address and other information from Comcast. You will need to set the router to do the same thing. I have this same setup with a my cable Internet provider with a Cisco ISR G2 router: 

The three private address ranges, and many other address ranges, are not allowed to be routed on the Internet. IANA owns the private address ranges and has allowed anyone to use them as they wish, as long as they are not routed on the Internet. They are simply network addresses used the same way as public addresses, except that any Internet provider will drop any packets with a private address. Your pings to private addresses on the Internet never made it to the Internet since your provider dropped them at the PE. These private addresses actually save addresses since everyone can reuse the same addresses internally rather than needing unique public addresses. IPv4 would have been exhausted many years ago if we didn't have private addresses. 

Remember the feasible successor rule: A feasible successor is a path whose reported distance is less than the feasible distance. If you look at the three routers which could tell R1 about , what are the reported distances? Compare those against the feasible distance. The feasible distance R1 shows in its topology table for is . Reported distance for: 

You can look at routes in multiple ways. The command shows what's in the RIB like , and I suppose it depends on the IOS version, but I see output on single lines where shows output on two lines. The command shows what's in the FIB, in a very compressed format, just . 

Ethernet Flow Control is different than Storm Control. Ethernet Flow Control was developed because traffic on a link may be generated faster than the receiver can handle it. The IEEE has several efforts for this in 802.1 and 802.3. Unfortunately, this really doesn't help with STP loops. Storm Control is something which some switch vendors have implemented, and it is typically used to limit broadcast and multicast traffic to acceptable levels in order to mitigate STP loops. Cisco does have an implementation for unicast traffic, too. 

The Cisco command is really a macro that allows you to configure the same commands on a range of interfaces, and they don't necessarily need to be contiguous. Example: 

Your premise is not necessarily true. Some Cisco routers do have VTY lines 0 to 15, and some older Cisco switches only have VTY lines 0 to 4. As far as I know, you can configure on a Cisco 1941 router. It won't show lines 5 to 15 unless you actually configure them. I don't have direct experience with the 1941, but every ISR G2 router that I have touched, including the 1921, can configure VTY lines 0 to 15. If you can't on your 1941, it may be a software version thing. Routers generally have more memory because they need it. Routing processes, routing protocol tables, routing tables, access lists, route maps, NAT tables, ARP cache, routing buffers, QoS policies, etc. tend to eat up a lot of RAM, while switches primarily need it for the MAC address table. On the other hand, there are large Cisco switches which can have a lot of memory, but they tend to be layer-3 switches which perform routing functions, too. 

DIDs are assigned by the telcos which own them. A VoIP provider buys a block of DIDs from the telcos it uses where its VoIP network interfaces with the POTS network. Your cell call travels from the cellular network to the POTS network, where it gets routed to the interface with your VoIP provider. POTS call routing is basically the same as it has been for a hundred years, and the subject of POTS routing is far too large to be discussed here, but it basically sets up a single circuit between two points; the cellular network and the VoIP network, in your case. You would need access to the POTS providers' databases to figure out who owns a DID range. 

The metric for EIGRP has not changed since IGRP (it is 256 times the IGRP value), so it is unlikely to ever change. Cisco has many documents available on EIGRP. For instance, Enhanced Interior Gateway Routing Protocol: 

The non-Cisco switch will be running MST if it is using Rapid STP. You need to make sure your Cisco switches are also running MST, not the default PVST+ or Repid PVST+. You need to run the same STP version on all the connected switches for STP to work correctly. Once you fix all that, make sure that the native VLANs on each end of a link are the same. Cisco switches will use CDP to verify this, but your non-Cisco switch probably doesn't have CDP, so it may ignorant of the mismatch. EDIT per the comment: Different versions of STP use different BPDUs to establish the root switch and root ports. Cisco PVST+ (including Rapid PVST+) uses a separate STP instance for each VLAN, while MST uses one instance of STP for each user-defined group of VLANs, and, unless you take pains to do this, the two STP versions probably won't match in this regard. When mixing the two, it is normally best to use MST, and correctly match the VLANs to the STP groups. This works well, but it is certainly more work than using the Cisco STP version everywhere. It is possible to interoperate the two versions, but it can be difficult to get it right so that the root and root ports are correctly identified on each switch in the layer-2 domain. Having inconsistent root switches and root ports can cause STP loops resulting in broadcast storms which can bring down the entire layer-2 domain. It is much easier to use a single STP version across all your switches, and, unfortunately for added complexity, that would probably be be MST when mixing Cisco and non-Cisco switches. 

Bits go to and from the wire at the speed of the wire. This is called serialization. Bits to a 100 Mbps link are serialized at 100 Mbps. They cannot be serialized any faster than the link can take them, and if they were serialized any slower, then the transfer on the link wouldn't be 100 Mbps. Some people refer to serialization delay, but that is the slowing of the data from the (usually) higher speed of the data transfer in the host to the speed of the link. 

That depends on the device. Some devices will let you collect NetFlow information on certain virtual interfaces, e.g. a Cisco 4K switch can have NetFlow on the port channel, and that is usually preferred over the individual channel member ports. Also, a subinterface is a virtual interface. 

The network address for your network, , is , which is the address you are trying to use. You could use the addresses you want to use if you use a shorter network mask, e.g. . 

Statically configuring addresses doesn't scale, and can be a problem when moving devices in a network. That is the reason for DNS. With DNS, you can refer to a host by name, and the DNS will take care of resolving the name to the currently assigned IP address. Statically configuring addresses may make sense on small networks, but even on medium sized networks it can become a burden. 

Most network routing protocols are designed for use in fairly stable networks where paths can be known, but they have the ability to change dynamically as the network changes. These protocols are deterministic, and they are optimized for the accurate, speedy delivery of network traffic. The Spray and Wait algorithm is designed to work where paths may be unknown and may frequently change. These networks are tolerant of delay in delivery of traffic. The abstract for Spray and Wait describes it pretty well: