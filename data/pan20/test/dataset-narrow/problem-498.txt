We are working to translate our site into different languages. Currently, we pull 80% of a page from a database that is already translated. We drop in a language id and output the appropriate content. What I need to store and access are the bits and pieces of text that need to appear on every page, but won't be stored in a database. For example, a save button might say "click to save" in English, or "clique acqui" in French, or "clicken zie here" in German. We might have 10 - 20 different pages (templates) on our site that will require this hard coded translated text. There might be 20 - 40 bits of text on a single page that need to be output into any of ten languages. My solution is to create a global array (or structure) that contains all of the text pieces in different languages. We will populate the array with hard coded strings. When a person changes their language id, we will just access a different part of the array and output the appropriate text. Below, I have a working page that that enables you to toggle your language and access different text pieces. My question is, is there a major pitfall I am overlooking or is there an easier way to get this done? 

I am writing a CAN bus logger application and need to format messages as quick as possible in order to prevent buffer overflows on our device. In some cases I am quick enough, but under heavy loads it is still pretty slow. I believe the bulk of the problem happens in my formatting block (I am using TPL to separate the tasks as much as possible). Here is my consumer block which takes a blocking collection, formats those messages, and passes them into a new blocking collection where they are later printed to a file: 

Now, I would like to localize the enum, and so far my only solution has been to remove the description from the constructor, and check Locale and switch based on number of days: 

I have looked this over several times and have been working on it for quite a while, but cannot find any places where this is bottle necking in a way that I can fix. I am just hoping a second set of eyes to review this will see performance issues that I don't. 

Then, assuming you've called , each time you call swapCursor on it you will see the updated games list. I hope this helps you. If you'd like to learn more about SQLite in Android without the UI aspects, I also have a four post blog segment that will give you pretty broad coverage. NOTE these posts are geared toward a ContentProvider, perhaps I will do another segment on data access without one, but I think you've got the required knowledge down for that. 

For one thing, the domain being global is not very good: what if two users have email addresses on different domains? Are you going to set it to different values in between user creation? Just let the user have its own email address. Globals in general are frowned upon for many reasons, so when you catch yourself thinking "yes, I'll make this a global", please count to ten and then don't do it. To answer your question in the comments, where you assume you have an internal mail server only: a good rule of thumb is to keep outside of your program everything that can conveniently kept out. In this case, the domain is configuration, and as such it should be kept in a configuration file. Your program does not and should not know what the specific domain is. It just needs to know how to read it from an external configuration file/database/what-have-you. Modifying software is not a lot of fun, so if you can make a program whose behavior you can modify without even touching the source, it's way better. What if your domain changes? As it stands, you have to change your program, and possibly even test it again. What if the domain sits in a config file? You change it in there and you're golden. If you think hard enough, you will find that a lot of configuration can be kept outside of the program, even down to the choice of different algorithms to accomplish the same task. Personally, I try to make everything I make as configurable as possible, because recompiling and testing and deploying is boring. Finally, globals are bad because they're hard to keep track of, and it's difficult to know what parts of the code read from and write to them, which makes the whole thing horribly coupled. Do try to avoid them as much as possible. 

I am setting a few vars in JavaScript. I typically like to make my code really readable so that it's easy to go back and edit. I have a few questions about the code below: 1) Is this is a good way to break up the setting of the vars? The comment seems redundant, but it seems to really help break up the code into relevant chunks. 2) When I set a var like this ~~ $IPPWrapper = $("div.iqPaginItemsPerPageWrapper") ~~ I always include the HTML element, in this case the "div". Is this overkill? Is there a performance hit or benefit? I know in the CSS best practices, it's frowned upon. 3) I need to create an array, but I don't know the best type to use. Basically, I am just storing messages that I will use later in popups. Is there a more common or better way to create this array? Thanks in advance for any advice or helpful comments. 

I just read some reviewed code and both reviewers advised setting the variables in a single statement, like this: 

I am using jQuery 1.7.2 I have two ways of writing the same code. One way seems more verbose and the other seems more flexible. Is this the only difference? Is there any performance difference? Is there a better way of writing these? Code sample #1 uses two named functions so they are reusable. It's a bit more code. Code sample #2 uses two unnamed functions that work only on the hover method. It's less code but not reusable. Any thoughts or comments? 

are you sure this is correct? Concatenating a column name to the other like that? Are you assuming the column name will be passed in followed by a comma? And anyway, isn't it going to blow up with a syntax error when you do the `UPDATE`? Or will the column name get passed as an empty string? Might be a good idea to check what garbage you are receiving through your parameters, assuming said checks aren't already in place at an upper layer. How can you be sure all callers will remember to pass your arguments exactly the way you expect them? Plus, just my two cents, but if my assumptions are correct, this is not a very fun API to work with. 

Bearing in mind that a linter can only look at how the code is written and not at what it's actually doing, statements (or the equivalent as with Ruby) that don't do much are completely fine. A switch that tests many conditions is bound to be long-ish, there's not much you can do there. Every one of the warnings you get is a direct consequence of the fact that you're testing 8 values. I would say this is one prime example of a situation in which you just don't waste your time in an attempt to make the linter happy. Extracting methods is going to clutter things up and look dumb. The only viable option that I can think of right now is sticking those ranges along with their readable description in some kind of hash, and retrieving the value from there. But it's a compromise, really: if this method gets called often, you could be instantiating yet another object at each call. I say you just ignore what the linter says in situations like this, or adjust its default settings to make it less bitchy. Your method is fine, the intent is very clear to me, and it's not doing anything complicated. Don't get all caught up in an attempt to please a tool that doesn't understand your code to begin with. 

That way you have string constants for names (which you already do though, great job on that) consolidated in one appropriate class (as I said earlier, leave the openhelper to updating/creating). You can still build your tables with it. Notice that I implemented BaseColumns which has an _ID string you can use as your primary key: 

If you are using a ContentProvider, you can easily load the CursorAdapter and watch for any changes to the Game URI and it will update automatically if you use a CursorLoader. Will edit again if that is an option, otherwise simply get a cursor of all of your Game values and call on the adapter: 

The edits are merely suggestions, they may or may not be considered best practice but they are things I do to stay organized and have worked really well for me so far. EDIT 2 For displaying the information in the ListView, you can use a CursorAdapter. Here is a sample of what it could look like for you: 

One way you can improve this is by writing a data source class that does all your database access, instead of putting it inside the SQLiteOpenHelper. Leave that class to just creating and updating the database. Your data source could be like this: 

And, now that you have that, I personally like to build my content values inside the object itself so I know where to find it: