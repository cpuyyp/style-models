The Server doesn't need wait for the ACK (packet #2) to get to the client before sending the HTTP Response (packet #3). Both of those packets are sent directly one after the other. But either way, it is still a second packet that must be sent, so an increase to your value . 2. Additional Crypto processing causes additional overhead Even if the TCP Ack (packet #2 above) didn't need to be sent, the simple fact that the packets are secured with HTTPS is going to require both parties to validate the packet and decrypt the content before it gets passed to the HTTP interpreter. Which is something the ICMP packet would not require. Hence, additional time added to for the HTTP Request/Response. 3. HTTP packets might call for additional inspection by transient devices. If this communication happens through a Firewall, it is likely the Firewall (or some sort of WAF/IPS) is performing additional processing/inspection/validation on the HTTP packets. In particular, since this a Post request. This is less likely if it is HTTPS. But many transient firewalls can now decrypt HTTPS, inspect the underlying HTTP, and then re-encrypt the HTTPS before sending it on its way. Again, less likely, but not something we can dutifully rule out entirely. Such inspection would not be necessary for simple ICMP packets. And not just because the packets themselves would more than likely be smaller. There is just less malicious intent that can exist with the far simpler ICMP protocol, as such more 'attention' is put in to deeper inspection of the HTTP/HTTPS. 4. An HTTP Post requires more processing by the server Responding to an ICMP Response is (relatively) easy. At best, there is a little bit of data in the ICMP echo Payload to copy to the ICMP Response. Depending the content of the HTTP Post, there is more to consider. Is there data entry validation? Does the content that is posted need to be processed and somehow included in the HTTP Response? Does it have to be processed 'as is', or does it require some analyzing before a useful HTTP Response can be produced? There are literally endless possibilities for what sort of analyzing and/or data is presented in the Post. And this additional processing would also account for an increase to your value. 

Figures. I found it minutes after posting. Was looking in the IANA reservations, didn't think to look up the Ethernet RFC specification: RFC 894 

You asked a good question. Don't let anyone tell you otherwise. Regrettably, there is no rule of thumb for the types of protocols that use TCP verses the types of protocols that use UDP. The decision whether a protocol uses one or the other come down to whomever wrote/created the protocol to begin with. If they didn't want to bother with writing their own "reliable delivery" system, then they can simply use TCP which provides all the reliability innately. If they thought (knowing their own protocol innately) that they could write a better or more appropriate "reliable delivery" system, then they can build that into the protocol itself and simply use UDP as their transport. As an example, take a look at a UDP TFTP sample capture, you'll notice there are built in acknowledgement systems within TFTP itself -- having both those and the additional acknowledgement systems within TCP would simply be redundant. Whereas FTP, which runs over TCP, does not have a built-in acknowlegdment system. A user simply request a file, and the sender sends it. There is a "file transfer complete" notification, but nothing that guarantees having received each bit of the file. FTP is relying on TCP's reliability to ensure the file gets all the way across. That said, I looked through the list of ports on the wiki page you linked, and saw a surprising amount of protocols that supposedly use TCP and UDP. This was foreign to me, and I only know of very few that use both (namely, DNS). But it may be that there is a TFTP implementation that uses TCP, and if so, I'm afraid I have no exposure to it. Domain Name System (DNS) is traditionally the protocol referred to when discussing protocols that use both TCP and UDP. It doesn't use these at the same time, mind you. But different functions within DNS might call for TCP vs UDP. For example, when making a simple A-record resolution request, the "request" and "response" are very lightweight, both requiring a single packet. As such, this is typically done over UDP. But if a request or response requires a larger transfer (above a certain amount of bytes), then DNS chooses to use TCP to ensure "all the bits" get there. This is common with full Zone Transfer requests. 

Great question. I agree that this is not a duplicate of the other. The goal of the three-way handshake is to establish a bidirectional communication channel. The communication that happens within that channel is outside the scope of TCP. Sometimes, a connection is established for the Client to send something to the Server. Other times a connection is established for the Server to send something to the Client. TCP must account for both of these cases. Re-quoting your communication illustration for simplicity and adding line numbers: 

Not additional trips. Just additional data in each lookup, and additional crypto-math at each level. Regular 

Notice RouterA and RouterB are sharing the IP Address and the MAC address . The Host's are configure with a default gateway of , and they each have an ARP mapping indicating the IP address maps to the MAC address. Since both the MAC address and IP address are shared between the two routers, this ARP Mapping will never have to be updated. However, when RouterA is the active HSRP router, the MAC address is being served by the device connected to switchport 1. If RouterA fails, then RouterB sends a Gratuitous ARP to update the switch's MAC address table that the MAC address is now being served by the device connected to switchport 2. The process occurs again if RouterB fails, and RouterA needs to take back over serving the IP/MAC / The Packet Capture of the HSRP transitions and GARP packets in the animation above can be downloaded and studied in Wireshark. 

Given what you said, I think you are forgetting to consider the direction of traffic. Lets start with a high level view of what a TCP connection looks like, then we'll talk about how it applies to NAT. Let's assume my computer has the IP 10.1.1.1, and I am speaking to a server with the IP 3.3.3.3. Let's also say that I am making a WEB/HTTP request, which runs on TCP port 80. On the wire, the picket will have these attributes: 

You're firewall is being told to NAT the Source from to . This is only the Source when the traffic is arriving on your Firewall's Inside interface -- which is to say, when your Firewall is seeing the return traffic of the RDP connection. When you create the NAT rule on the OUTSIDE interface, it is still looking at the Source of the packet -- which is why the connection doesn't work, because you don't actually want to change the Source of the incoming packet, you want to change the destination. By configuring the NAT on the INSIDE interface, you are telling your Firewall that when the Source IP:Port is , change it to . Lucky for you, your Firewall is automatically doing the inverse: changing the Destination IP:Port from to when it sees it on the Outside interface. And lastly, as you've already found out, No, the NAT statement does not work when configured on either interface. The particular NAT statement is looking specifically at the Source, and therefore must be configured from the perspective of when the Source needs to be changed. If you configure it from the Outside interface, the changing the Source will not permit the traffic to get through your NAT and to your internal host. 

*There is no benefit to upgrading in so far as duplicating the licenses... I would say, however, there is significant benefit in terms of security and functionality of upgrading past 8.3. In fact, I would suggest to go all the way to 9.x+ to get cool new IPv6 features... but that is completely outside of the scope of your question. 

Remember, the IPv6 equivalent to RFC1918 IPv4 address is NOT Link Local addresses (FE80::/10). The IPv6 equivalent to what we know as "Private IPv4 addresses" is known as Unique Local Addresses (ULA): 

A Frame is a combination of the L2 header and the Data being carried A Packet is a combination of the L3 header and the Data being carried. In either case, the Data being carried is the payload of the Frame/Packet. This animation will help illustrate the differences: 

Now in your particular case, you want inbound traffic destined to your public IP address to be forwarded through your NAT device to a particular host on your internal network. So using the packet attributes above, you want a packet that looks like this to be NATed: 

I than ran three tests, pinging 3.3.3.3 from R2 natively, then source from interface L0, then sourced from interface fa0/0. All three were successful: 

It won't drop the packets, because the ASA is a Stateful device. First, you have to understand what I mean when I say the ASA is a stateful device. This means if the firewall allowed traffic in the direction outbound, it automatically allows the correlating return traffic back inbound -- even if the inbound ACL or Security-Level would have prevented all traffic inbound. As for ICMP, by default, ICMP is not stateful. Which is to say, if you want to allow ICMP packets to leave your network, you must explicitly allow it (via ACL or Security-Level). And if you intend for ICMP packets to come back into your network, you must also explicitly allow it. However, you can override that default behavior by enabling ICMP inspection. On the ASA inspecting ICMP makes the ASA consider ICMP stateful. Which means, if it allows an ICMP Echo Request leave your network, it will automatically allow the ICMP Echo Response come back into your network. 

Scenario #1: Host sends a packet with SRC 10.70.200.20 and DST 1.1.1.1. Packet gets to ASA, ASA applies your PAT rule and translates it to SRC 1.1.1.1 DST 1.1.1.1 -- ASA detects matching source/destination and drops packet Scenario #2: Host sends a packet with SRC 10.70.200.20 and DST 1.1.1.1. Packet gets to ASA, ASA applies your PAT rule and translates it to SRC 1.1.1.1 DST 1.1.1.1. Packet is forwarded to Upstream Router. Upstream Router has an entry in its Routing Table telling it the 1.1.1.1 IP address exists back towards your ASA and sends it that way. ASA receives a packet with a DST of 1.1.1.1 and a SRC of 1.1.1.1 -- ASA detects matching source/destination and drops packet In my experience, I have seen it mostly be #2 that was in play. I don't believe (don't quote me) the ASA will watch for the land attack on traffic going from higher security level to lower security level (aka, inside to outside). I am guessing this is happening when the Apple devices are trying to talk directly to each other, they detect each other's public IP addresses using STUN or some other system, but they don't realize are on the same internal network, so they both actually share the same public IP address. To circumvent, you will need to create a new PAT rule so that when your inside hosts are speaking to 1.1.1.1, their source should be re-written as 1.1.1.2 (or anything other than 1.1.1.1). This way the SRC and DST don't match, and don't trigger the ASA's LAND Attack defense. 

Fully Working Example For this example, let's assume two sites are connecting to each other via VPN: 

The outer IP header will include the the Source/Destination IP of your VPN gateway device (your NSA 2400) and whatever WAN IP the remote office is using. In your case, you have multiple clients sharing a single source IP -- which is a very common PAT configuration. As such, the Remote router needs to re-write the source IP of each of your clients, as well as the source port. If that router were to have encountered a packet like the one above (with no L4 header between the L3 header and the data), it would drop it claiming it is a malformed packet. NAT Traversal inserts an additional L4 header in the packet. So it would look like this: 

By default, uses HTTP to retrieve files. Which means uses TCP/80... unless you specify HTTPS, in which case it uses TCP/443. 

In the end, after a packet had gone from HostA to HostB and back, the fully populated MAC address tables would look like this: TOP Switch: 

As long as you are translating your "15.0.0.0" address space to something unique on the Internet that doesn't overlap, things will "work fine". However, you won't be able to communicate (easily) to any users who own "the real" 15.0.0.0/8. At the moment some of that space seems to be owned by HP: 

Final Calculation We can take the Bandwidth value determined above (100) and the Delay value determined above (20) and plug them into the simplified formula to get us the final EIGRP Metric for a link with a minimum path bandwidth of 100mbps, and who's full path crosses two 100mbps links: 

(2) The second set of symptoms would look like certain subnets can not communicate through the VPN, and your syslog is full of messages like the above. Symptom #3 Same scenario as the last time, except this time SiteA decides it wants to send some traffic from 10.1.1.0/24 to 10.2.2.0/24. Remember, the already existing SPI from SiteA's perspective is 10.1.0.0/24 to 10.2.2.0/24. So this new traffic will require a completely new tunnel. SiteB will receive the request for a new tunnel/SPI and can either reject it, since it considers the original SPI for 10.1.0.0/23 (although, this is rare). More often, SiteB will accept the request to build a new tunnel from 10.1.0.0/23 to 10.2.2.0/24, which will cause SiteB to tear down the old tunnel. And now you have the same set of symtoms in reverse, 10.1.1.0/24 speaking to 10.2.2.0/24 works, but 10.1.0.0/24 speaking to 10.2.2.0/24 doesn't. (3) The third possible set of symptoms here would look like tunnels rebuilding "randomly", and certain subnets keep loosing connectivity to the other side. NOTE: A lot of the reactions of how the Firewall/Router will work will different depending on the vendor you are using. Most of the examples above are from my years of working with Cisco ASA and PIX products. YMMV, but even still, the concepts are still relevant and apply