I'm not sure which method is throwing an exception here, but if it's belongs to our new method then modify syntax accordingly. 

this line. Apparently this is caused because looses it's once returned from method. So, to prevent from losing it's I've added that extra property to it. Please feel free to tear this implementation down if needed! 

Now error is gone and everything works fine. I know other way to make protocol methods optional is using keywords, but I can't use those as contains some Swift value types those are not convertible to ObjC objects. So, is this solution is acceptable? Are there any things that I can improve? 

Since , you should consider using interfaces instead of classes, for object dependencies. And as the "hidden" dependency of : It highly depends of what the framework is for. You've gone for the common practical approach instead of the academic one (injection). There's no right or wrong here, it highly depends on the framework's purpose and audience, the academic approach may not always be the educative approach. 

Consider all of the above as extreme nitpicking, your code is way past the point of obvious flaws. The real value of the answer, if any, was to point you towards the SPL. If you did consider it and rejected it, would you care to share why? 

So outside world will not have to worry about converting object into . Then simply use this abstraction as: 

There are few things that I think can be improved. First of all you are not bothering to check for ERROR, if any like: 

I have a situation where I have to use protocol to be conformed by which has relationships with other entities. My protocol is like: 

Is there anything that can be used to simplify this code and avoid dictionary conversion? Any suggestions that can improve this code are welcomed! 

I have a situation in my client-server app where I have to send my network strength to server and also receive other clients' strength from server. So I created enum as: 

This is my first foray into the wild world of jQuery plugin development. The plugin "ajaxifies" forms, which isn't particularly spectacular: 

Don't know if this is just poor question formatting, or your style, but please indent properly, this isn't really good: 

Your code is just fine, exactly how I would do it. There isn't much to discuss really, it's kind of simple. It's as effective / efficient as it could be, and fairly readable. 

Doesn't really belong to the Controller as well. The easiest approach would be to have all your database specific functionality in functions in a separate file: 

This is not a good solution to handle fetch requests inside scrolling . 1 Fetch request should be asynchronous, because it may take time 2 Fetch request should be called in table view datasource and not in custom cell, because cell can be reused while scrolling 3 Should apply result of fetch request if cell is visible Code in class where datasource is implemented- 

I have an messaging app I am working on where I am using 3rd party messaging library to send and receive messages. It also allows to retract whole conversation with particular contact or retract particular message. To decouple library from my app I have written MessageService and structure is like: App -> | MessageService | <-> | MessagingLibrary MessageService.h file is: 

and avoid the costly call to . And do return something, tell the user if the operation succeeded or not, regardless of what the Java interface does. 

The clause is very similar to the one discussed previously, only this time other than checking if has a index, the author also checks that the value is larger than zero. That's an unsafe check, because at this point we don't now what the type of the value in is, and if it's anything other than a number, there will be automatic type juggling involved, and the check is completely unreliable. From the name and context, I'm assuming the variable should hold an integer (if anything) that limits the search. If the variable doesn't hold anything, the limit is set to zero (), curiously using a string form of zero. I'd rewrite that check as: 

I have a service which connects to server using socket and stays connected, I used this enum to manage connection state: 

But for sending to server, I have to convert it to String and vice a versa. So I added one more extension as: 

I am unit testing the controller class which takes this protocol and operates on it according to various states. There are some functions in this controller class that only interacts with only one method out of many protocol methods, and I while testing those methods, I wrote following unit test: 

Let me try to clean it little bit. 1 First of all you made global. I think it's not necessary. You can declare it locally where needed. 2 function looks very messy. You can abstract that creation of object. 3 You can improve loop code So here is what I would propose: 

checks whether the value is an integer and whether it's a string that only contains digits (thus a integer in string form), any of the two is acceptable for the following check, . I've also moved out of the check, I'm initializing it to zero and will override if and only if there's a need. But let's see what happens if the check is true: 

As this is a learning experience, you should be concentrating on learning the language and its quirks. Java <> PHP, in quite a few ways. You shouldn't limit yourself in copying the Java interface, it's a good interface to clone but now that you've done that you should explore enhancing it with native PHP functionality. You should take as much advantage of native stuff as possible, the performance difference is noticeable. I have to admit that the ArrayObject was an off hand example, my primary intention was to point you towards the SPL. I did base something similar on an ArrayObject, but the requirements weren't exactly the same. Still bits and pieces of your code could be rewritten to take advantage of native functionality. For example, this: 

This works fine! But what I felt is in is something odd man out! If I don't store MOC in object, then it crashes on 

You can absolutely extract validation part out of this method because almost every validation is depending on object. 1 Write a method in class that will validate situation and return message if not valid situation. 2 As only one validation is happening on i.e. method, pass result of this method while validating . 3 According to result of new method show an alert or proceed. Here is how I'm trying to clean it- New method in class of : 

The first clause, essentially checks if there's an "old_keyword" index in the array (and whether it's or not), that's a pretty typical check for arrays. The second check, that executes if and only if the first one passes, checks whether what's in is not the same as what's in . I'm assuming that the author had some reason for that, but can't imagine what that reason is. Summarizing what happens here, if: 

This way a function to get cabin information is available to all your controllers, you don't have to rewrite it every time you need it. Don't repeat yourself. If there's any HTML / CSS or any other presentation logic in your Controller, and of course any persistent data logic, you are doing it wrong (in MVC terms). But MVC for small sites may be an overkill. It's a correct approach conceptually, but you will have to decide for yourself if it's the right one for your application. But if you decide it is, you should follow it as is. A very easy approach to separate presentation from logic would be to use a template engine. There are quite a few of them out there, and there isn't one that's better than the others. Using one is more important than which one. And of course it wouldn't hurt if you didn't try to reinvent the wheel and started using an MVC framework. Or if that feels too much, a micro framework. There's is an often quoted article by Rasmus Lerdorf that some people perceive as advocating against template engines and frameworks. It's not, the only point of the article is that you don't have to use them. In the article there's a very nice and tidy approach on how to get an MVC kind of structure out of the box, without the added complexity of any third library. If you really don't want to use any third library, you should copy Rasmus' style. 

So I tried to make all the protocol methods optional by adding extension to it as (in test class file only): 

Here, as name suggest, this protocol is only related to cell selection. It has nothing to do with . Try to remove that variable from protocol. 

I wanted to have as property to know current connection state of service but in extension of service provider class. Why in extension and not in class itself? Because class is not Swift class, its ObjC class and there is no way we I can declare swift enum with associated values in ObjC class. So I used associative stored property in swift extension, but as has associated values I need to do little more. First I created extension to enum to make dictionary convertible as: