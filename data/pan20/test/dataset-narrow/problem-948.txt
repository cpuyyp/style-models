This block will provide Power Delivery interface to your Type-C laptop. It is a one-chip solution. You will also need to implement a variable DC-DC converter, to convert 20V from your powerbank to a variable (5-9-12-15-20 whatever) for delivery, circled in RED. The DC-DC converter will be controlled by the above PD interface chip. The suggested design of this variable supply is given here. Keep in mind that PD must start with "safe +5V" level, and only then negotiate and enable higher charging voltages. If you apply 20 V upfront, without any PD protocol in place, the laptop will unlikely to accept the voltage. Well-designed laptop will do nothing, and a bad one may fry itself. This is what it takes to make your powerbank to charge your Type-C laptop. Somehow I doubt that this process will cost you less than a different powerbank with already built-in PD over Type-C. EDIT: I linked wrong PMP11451, it is a full AC-DC design. But you must get the idea. 

The problem occurs because partitions on your USB drive got contaminated by foreign operating system, which causes Windows confusion. Try to clean up your flash drive (or HDD) using the standard Microsoft low-level utility DISKPART. For instructions, look here, how-clean-and-format-storage-drive-using-diskpart. 

Apparently the IRTOY has a bug, and needs total reboot, and the power-off is the only means to do this. Bad. One solution to toggle the VBUS power by software would be to use a USB hub with switchable port power controllers (These are usually difficult to find, but still easier than to find a PC mainboard with port power controllers). Then you should manage to issue ClearPortFeature(PORT_POWER) to the port with connected IRTOY, and then SetPortFeature(PORT_POWER). How exactly to do this from application space I am not sure, but the free USB Device Tree Viewer (by Uwe Sieber) can set the port VBUS off and on using pop-up option "Restart Device". Keep in mind that a USB port usually have a sizable capacitor attached, so it might take some time to bleed the VBUS, so the Clear and Set command must be properly apart in time. Unfortunately, the USBTreeView does it too fast. Alternatively, you can restart the entire hub, it takes long enough time to turn VBUS off on its downstream ports. If Uwe doesn't have his source code open, you will need to go to Microsoft SDK for main USBView source code, and figure out how to issue the port disable/enable commands to driver. 

Note: If the output says something about , you must create inside ffmpeg's bin folder a new folder named with a file inside () that specifies where ffmpeg must look for fonts. I have used this file in order for it to work (tested on Windows): 

assings the backup extension to the files and the option makes it to use , and so on, so in order to change it you must create a script to change the behaviour. This script would create a copy of every image under to a single folder destination (would not create any subdirectory), avoiding collisions by appending a number to the file, just before the extension. Note that every time it is run, it will duplicate every file, just as your script does. The part is needed for filenames with spaces. 

I have used this for the same purpose and it didn't change the duration of the audio. Also, (IMHO) trying to increase the quality is just overkill, but you could try with 320k. 

Note that if you need more than two audios, you would need to apply the correspoding gain. Note: ouput could be clipped because of that second filter, check result! 

On vlc's preferences, at the bottom, set to and on the list on the left scroll down to . Under (i'm guessing the name, since mine is in another language), there should be a setting. Set it to and save. 

Man page of about reads: , so it only writes data physically "once" (read it as "not forcing a flush every X blocks or bytes, but a single flush at the end"). If you are using to do your tests, it is the best way to get the most accurate results. On the contrary, not using that specific flag, would render your results unrealistic: omiting it would probably miss the time for the encryption itself since is just copying data around. Nevertheless, I also thought there were something going on as for your results, but I found this article that shows almost the same: ecryptfs is painfully slow. And your test (a single file being copied) is the best-case scenario for ecryptfs! As ecryptfs writes an encrypted file (with a custom header with metadata inside) for every clear-text version, having lots of little files implies even a greater performance drop. However, ecryptfs has its benefits: you can send an encrypted file right away without loosing the encryption. Your backups (assuming you are backing up your encrypted data) would be faster since you would only copy files as big as your data (and even faster if they are incremental, as you would only copy modified files). dm-crypt, on the other hand, may be way faster but you would need to send the whole container (a whole filesystem) to keep the encryption as it is. And the backups would also consist of the whole container, not being able to do incremental backups in most cases. I have used (and still use) both methods (not the same tools, though) to hold encrypted data: file-based (ecryptfs) is easier to keep synchronized via online hosting services such as dropbox between PCs, but it is pretty slow when doing changes and has caused me some issues with the underlaying filesystem (it assumes it can write the files and issues related to limits on the filesystem tend to break the whole thing up); I prefer the block device encryption: I treat them as simple partitions, so the limits and issues do not break so badly. The only drawback is copying the container, which can take way longer. 

According to Intel's guide to USB design, when a PC system is on AC power but in standby (soft off), the USB ports receive their power from +5VSB (always ON) power, which is built into every ATX12V PSU. It is designed so a USB peripheral (keyboard, mouse) can wake the computer up. This is a common USB framework, and the ports don't have any requirement to be colored in any special way. When the system is active, it is recommended that USB port power gets switched to standard +5V rail, providing more power. And a system designer can choose which ports are powered by this schema, and which are active only in system ON mode. Apparently the mobo ports follow the recommendation to switch back to standby power (motherboard "intervenes"), while the front ports are connected to headers that don't do this switch. 

A USB device with at least one GPIO. This one would do FTDI. Design/buy a boost converter circuit (add-on board) from 5V to 18V; Have a transistor to drive 18V pulses to your "18V device" using the GPIO as control for the transistor. Any BJT or FET will do. Read the Adafruit board documents on how to control the GPIO via Python. Patience and luck (if your square wave needs to be in low-kHz range). 

The "WD My Passport" 3TB(TB?, or USB3.0?) drive does not publish any specifications about the spin-up current, which is a suspect in my books. If you could measure this in-rush/spin-up current, it will help you to determine if it can "overpower" your hub port. EDIT: SUMMARY. A USB3 HDD has all rights to consume up to 900mA from the cable, per specifications. A USB2 hub must cut-off VBUS power if the connected device tries to consume more than 500mA. Therefore these two devices are not compatible and are not guaranteed to work together. COMMENT: In theory, a HDD can determine if the connection is USB2 or USB3, and scale its consumption accordingly. Unfortunately, inexpensive USB-SATA bridges do not have this intelligence yet. 

Make sure you have installed the or the Ubuntu box would not see the new CPU and could have some issues when unpluggin. Alternatively, if you experience issues with hot-plugging, disable the feature, stop the VM, perform the CPU operation and start it again: 

is a server-wide keyword, so there should be a single instance of it per proccess (usually a single instance per Linux server). Assuming typical Debian installation, you can just grep the values: 

With that configuration, from your public IP they would only get contents from the VirtualHost with IP 192.168.0.112 

Websites with moredate or large demand. Any disk could handle a few MB/s, which will top most broadband connections, so even large files would not impact an HDD-powered server, but serving different files for several simultaneous users (even small ones) would be the worst case scenario for an HDD, since it's read speed would be wasted going back and forth between the files. Nevertheless, you could improve that in a HDD server by doing RAM cache (on modern Linux images the OS does the RAM cache of recently used files automatically), so it is possible that you would not have much improvement on your users' browsing experience. Try monitoring disk activity on your server and check if has large I/O. NOTE: starting a service on the server would be greatly improved if you employ a SSD, so you would expect lower downtimes during upgrades or maintenance. 

There is an option under the tab which toogles matching if a keepass entry's title is contained in the target window title which you can turn off to avoid that behabiour (at least under keepass 2.x, I do not longer have 1.x installed so I cannot confirm there is such option in the older version) Nevertheless, that could render most of your auto-type features disabled if you do not customize each entry to have a , so you might need to modify most of your entries. A workaround could be changing your google's title to be "My main Google account" (or whatever you like) to avoid the matching in "Google Chrome" and keep the option I mentioned early enabled (you may still need to add (s) to match your google's entry. 

Try to use a very basic formatting of the USB drive, FAT32, formatted under Windows. BIOS/UEFI don't like odd partitions from Linux or Apple, and most other exotic formats. 

Functionality of service buttons (PwrOn, Reset) is provided by a section of mainboard's ICH (aka "South Bridge" ) powered from always-on +5VSB (standby) voltage. You need to check for quality of this rail. The rail can have a problem on PSU side, or it could be overloaded by excessive amount of bus-powered USB devices. Or it could be a gradual deterioration (fatigue) of ICH chip itself (or partial damage due to ESD event). To check if the PSU is good, plug the PSU into AC outlet without connecting to mainboard or anything else. Its 20/25 pin connector must have the +5VSB pin (pin9, violet) delivering +5V relative to ground wires (black wires). It should hold +5V with at least 2A load (on a 2.5 Ohm resistor). If PSU is good, connect it to bare mainboard, and check if this rail is affected. 

With unlimited SMA passthrough connectors, the solution is straightforward. You need to make a pair of special USB cables. And I am sure there is no COTS of this sort. You need to take two cheap SMA cables (of proper gender), cut the other end, and solder it to board similar to this one, but with USB plug. This will make the enclosure-to-host part of USB cable. Within the enclosure you need to make another half of the cable, from two SMA to proper USB plug. If your device has the Type-B connector, just use a cut of proper end of normal USB cable. You can do the same for Type-A plug, without any interposer board. This arrangement will also work even for HS USB communication. Only make sure that you connect SMA connectors in right way, D+ to D+, and D- to D-, and that the coax cables are of the same length. And you will need a third SMA channel to pass the VBUS (red wire) through. 

After doing some testing, it seems that the problem is caused by the filter. According to documentation: 

Local port forwarding is when the LISTEN port is established on the client side. I.e. you open a local port 80 on your machine, connected to someotherplace:80 on your server side. Reverse port forwarding is when the LISTEN port is established on the server side. I.e. you open a remote port 8080 on the server, conected to your_proxy:8080 Dynamic acts as a SOCKS proxy. Sample scenarios: 

I had some issues last time I updated VirtualBox. I installed the update without issues as a limited user, but I was not able to use 64 bit neither more than one core after that. Try running the installer again as Administrator. 

If your intermediate host allows TCP forwarding, you could achieve what you want, but the ssh connection to the intermediate server is still needed. Both these commands would be run from your home: 

Tcpview from sysinternals shows all network related stuff, including which program is using the ports: 

NOTE: actually my excel is in another language with different decimal separator, so it looks like this: 

Two completely different protocols. FTPS is FTP with SSL for security. It uses a control channel and opens new connections for the data transfer. As it uses SSL , it requires a certificate. SFTP (SSH File Transfer Protocol / Secure File Transfer Protocol) was designed as an extension of SSH to provide file transfer capability, so it usually uses only the SSH port for both data and control. In most SSH server installations you will have SFTP support, but FTPS would need an aditional configuration of a supported FTP server. 

For Windows 7, you need to find a Win7 driver for XHCI controller for Skylake 170 chipset. If Dell doesn't offer it, try other places as ASUS, Lenovo, MSI, etc. Maybe Intel itself. Or HP, they are conservative and might still support Win7. And check out this Tomshardware thread. 

I is obvious that two USB3 drives in USB3 ports will perform the file transfer tasks faster, because both are operating at SuperSpeed. If one drive is in USB2 port, obviously the overall file transfer performance will be limited to USB2 speeds, be it READ or WRITE speed. The USB2 speeds are always quite lower than for USB3 mode. Please note, the particular performance of drives is irrelevant here, unless it falls below 30MB/s mark, which is unlikely. However, if two USB drives are of USB2 type, then the issue could be more interesting. The result between "two-in-a-hub" and "in different system ports" will depend on bus topology and the number of (E/x)HCI controllers in the system. If the drives are connected to DIFFERENT host controllers, the overall file transfer could be faster. 

Now to your questions: A. There could be Type-C video cards, but I have no info if anyone makes them. B. There could be Type-C DP-only graphics cards, but see (A). Not sure what do you mean under "shared". C. No, there is no "graphics card" in a monitor itself in any case. In case of a dedicated graphics card with Type-C connector (used as a dedicated DP port), the graphics controller resides on host system, as a usual PCIe card. In case of "video over USB" and DisplayLink, the graphics is done in software by means of Virtual Graphics Card Technology. For some discussion about DisplayPort and USB over Type-C, see this superuser thread. 

Also, you could just replace on second line with the first expression (including backquotes) and get the same result, but I find it a little easier to read splitting command in two. 

Server done, let's configure your client PC: On putty, configure your Debian's public IP as and as port. Make sure is still selected. Change to the settings, select and fill your "restrictive proxy" settings. Change to the settings and stablish a keepalive of -. Change to the . On stablish , and on , . Leave selected and press . You shoud see in the space above something like . Change back to the settings, write down a name on the first row of and save all these tedious settings to help restablish the connection on following days. Now you can try to the connection to your Debian. If you see the user prompt, we are just a step from finishing with this. If not... we will have to search for another way. Now, on Firefox, set at port as your proxy. 

As for your last question, in your example (assuming empty rules before those commands) you are setting a first rule and a second rule that would accept traffic from a certain network. IPTABLES grabs a match as soon as it can, so the first rule always matches (no condition set) so every rule after that won't execute. Exceptions to a rule must be defined before the rule. In the first example , you are setting a last rule that will catch whatever was not matched before, so any exception added will be executed before that default rule (). inserts into a certain position (for example, in my previous command, I am setting the ESTABLISHED,RELATED rule to be the first so it matches no matter what you set after that. appends to the rule list, so if will be matched just before the default. If you want to achieve the same as the first example with explicit rules (like ), you should exchange possitions of those. 

Their mentioning of "OTG" only means that the flash drive has its Type-C plug configured as "USB device", by having 5.1k resistor pull-down on CC line. This is the standard Type-C convention, per Type-C specifications. This CC configuration (5.1k to ground) signals to a more sophisticated dual-role Type-C device/phone that the phone must assume the host role if the Kingston flash is plugged in with Type-C end. This all has nothing to do with flash-drive being as host device, it is never a host, and the CC-pin never changes. So the original premise of this question is wrong, there is no such thing as USB flash storage with OTG function. 

It is very likely that ALL your USB ports are connected to the same source on your mainboard. It is a typical practice to provide the USB VBUS power directly from +5VStandby voltage rail, which is provided directly from the PSU of your PC box. This is done primarily for the purpose to have wake-up capabilities from keyboard or mouse, when the PC is in standby (sleep/hibernate) mode. Different PSUs provide different load capacity on the +5VSB rail. I am just looking at Zalman 600W PSU, and it says Max Load of only 2.5A on +5VSB rail, which is the minimum by AT12V PSU specifications. Smaller older PSUs can have as low as 0.8A of load on 5VSB. Clearly this is not much. 

Third scenario happens when a device assert the chirp, but the host doesn't respond with chirp toggling. This means that the USB host is not HS, and the link proceeds as a FS link. More details of this process are covered in this SU post.