The last step however is not, in terms of algorithmic complexity, as efficient as it could be. We are iterating over until finding one which equals . Since is sorted, a simple would be more algorithmically palatable; although in practice, for small numbers, linear iteration might be faster. Result 

Beware of recursion While recursion is elegant, in languages like C++ it can lead to Stack Overflow. As such, unbounded recursion should be avoided, and therefore your implementation of or or should be converted to an iterative approach (use a loop). Encapsulation It is generally recommended to encapsulate functionality. At the moment, anybody can fiddle with your internals (and point its member to whatever they want without using your functions). Once becomes however, only a specific set of functions will be able to access it: 

Here, the caller will automatically invoke the copy constructor or move constructor of as appropriate, and you then inside move the item (if possible) or copy it (if necessary). It is slightly less efficient if the item is not movable, but this is an edge case not worth suffering for. It is also a good occasion for getting rid of the unnecessary method: just use when you need to, the additional check is not worth worrying about. 

Avoid special cases I applaud the effort in not allocating memory in the default constructor. Unfortunately here it comes at the cost of a special case that you have to remember in every single method. It also, quite unfortunately, leaks to the client: may return a null pointer! In this specific case, I advise cheating by using a sentinel value: your empty string should pass itself off as . The default constructor thus becomes: 

It is interesting to discuss what happens in the case throws an exception when adding or removing an element. In the case of /, this may occur either: 

Do note the consistency in the naming; both times the argument is named instead of being once and once . Consistency may be the hobgobelin of little minds, but it does help readers. 

Attempting to shoehorn multiple responsibilities into a single class is a violation of the Single Responsibility Principle and will, in the mid-term to long-term, lead to an unmaintainable mess. Therefore, I advise to use two classes: 

Foreword Bearing in mind that this post was created more than 4 years ago, you likely have changed the code and learned more about PHP features - perhaps you don't even use/maintain this code anymore. I honestly have never played Minecraft, nor had any reason to monitor server statuses. But I wanted to give some feedback to this question. Feedback The code looks pretty sophisticated. I honestly haven't used before. That is neat that the class can function as a stand-alone CLI tool. Suggestions Utilize member variable instead of passing The methods and make calls to private methods like , and , which all appear to be private methods. Instead of passing the hostname and portnumber to those methods, the methods can utilize the member variables using . That way, the member variables don't need to be passed around. Mapping Character to colors The statement in could be replaced by a lookup in an array. 

Typo There appears to be a typo for the variable - should it not be ? For the sake of readability, I would correct that: 

There is already a reference to the data cell, so add the index parameter to the callback function and use that to reference with the modulo operator: 

It would be wise to cache those DOM references once the DOM is ready in constants and then reference those constants when the form is submitted. 

Well, it depends on how large of an application you create. For the sample code given, you could just move the methods from to the Vue instance, unless that feels like too much coupling of the view layer and controller code. What you describe sounds like Vuex. On the When should I used it? section of the documentation, it mentions that "A simple global event bus may be all you need." Other feedback in every function Are there any functions that should not have strict mode invoked? If not, then just add one to the beginning of each file. Or are there external scripts that don't have scrict mode invoked? naming of The Storage class doesn't appear to actually store data - it merely fetches data (like you typed: "actually looks, that I don't really need it here, because it does really nothing helpful, I use only fetch() method of it"). xhr class The xhr class could be replaced by the Fetch API, or a similar tool like reqwest, superagent, etc. without specifying radix App.getDate() has the following line: 

It might be more efficient to start from the highest primes, as it reduces the size of the list to iterate further. I'm not quite sure about it; you can test it using on the iterators to reverse them. 

This function will work no matter the endianness of the host, even on the crazy middle-endians ones. Oh, and it optimizes well in general, in case you were wondering: 

1 Doubly linked lists are actually very tricky from a memory management point of view; there are risks of cycles, ... Putting this altogether: 

Now, only knows of this optimization1. Its methods will always return a valid pointer so all the methods and other clients will be able to use a uniform treatment without NULL-check. 1 And it will have to special-case it in its special methods; should never be called on ! 

If you wish to add or remove elements at a specific index, it is easy enough to add dedicated methods. However, adding an element at a specified index whilst still offering the Strong Exception Guarantee is inefficient without further guarantees: it requires making a full copy each time in the worst case. You can special case adding/removing from the last position, but still... ... it is much easier to place as a requirement to the Strong Exception Guarantee that the swap method of offer the No Exception Guarantee. It is generally an easy guarantee to provide, so this should not cause your users much trouble. This is the assumption I will take here. 

What does do? Finally, a trick question: what do think is and does? is a so called stream manipulator, it is a function whose signature is: 

For simplicity's sake, I will only demonstrate operations at the head of the list; the tail is symmetric. 

Clearly lay out requirements Code answers a requirement. It may be clear in your head, but it is not clear to us. It may be clear now, but it will not be months from now. Therefore, before coding, you need to define requirements, and then use these requirements to inform your choices. In this case, there are two sets of requirements: 

Exception Safety Your container is not exception safe. The first difficulty of writing a container in C++ is handling the memory when everything goes well. Other answers already address this point so I won't reiterate it. The second difficulty of writing a container in C++ is handling the memory when the user is being adversarial. It is possible, in C++, to throw an exception: 

The code looks pretty good - like a nice application of generators and iterators for promises. The only thing I could think of that could be updated is the variable in the function could be declared with the const statement, since it doesn't appear to be re-assigned (unless I am missing something). 

Then another area that could be simplified using arrow functions is the end of the function - specifically this block: 

Additionally, the function inserts images into the DOM, then immediately looks them up just to set the src attribute. Because jQuery is available, one can supply the attributes when creating the item using . So the code to add each item could go from: 

Notice that conditional checks that the id attribute of the select list is included in the keys (using Object.keys() and Array.includes()) of an object called . With this this approach, when adding the price variables (with ) try adding the prices to an object instead of individual variables, like below: 

Initial Thoughts Initially I was thinking of suggesting a view class that could hold the states and weekdays in instance variables, then have methods to get the header for each state and then display the cells for each weekday, but that seems like a lot of extra overhead just to display a table, and wouldn't provide the desired separation of business logic and display templates. Simple improvements As GrumpyCrouton mention in the SO answer, PHP Short echo tags could be used to shorten the inline echo statements (i.e. to ). could be eliminated by using the associative array syntax of 

This is known as the Singleton Pattern closed before last table In the first block of HTML, the tag is closed: 

Could be simplified using Object.values(), Array.prototype.forEach() and Array.prototype.push(), thus reducing the need for the iterator value . Actually, I removed the variable inside the callback function and referenced the one outside the callback function, thus reducing the need for that extra variable, as well as . 

incrementing a counter variable inside a The statement has "two syntaxes"1 and because the array indexes of are numeric, the second one can be used to have the value of updated automatically (i.e. to have each numeric index assigned , starting at 0), reducing the initial assignment of the counter variable (i.e. ) and updating the counter value at the end of each block (i.e. ). 

Also, for style points, let's avoid modifying the arguments of the validation function. Since now does not allocate, it comes at no extra cost: 

Unfortunately, the C++ standard library does not allow one to pass an existing buffer to a string (sigh) and is generally pretty lacking in raw buffers (sigh), so you'll have to roll your own. I would do so in two steps: an abstract base class which exposes a way to write bytes in slices and a ready-made implementation based on + size + capacity (not , because it zeroes the memory when resizing...). The second is an issue for extension, and performance. In order to format their own types, users are encouraged to "pre-format" their own types into strings, which will result in needless temporary allocations. There is unfortunately no simple way to solve this issue, it's a fundamental limitation of -based solution. It will be up to the users of the solution to decide whether the cost of temporary allocations is worth bearing, or not, on a per-call-site basis. 

Note that the Strong Exception Guarantee would sometimes require expensive operations (copy and swap). In this case, it is better to stick to the Basic Exception Guarantee and document the behavior. 1 If an exception attempts to "leave" a method, the program terminates abruptly. It's better than corrupting memory, but still very annoying. 

1. Header Names I recommend using for purely C++ header files, and reserving to C-compatible header files. 2. Header Guards As mentioned, you should rather than . If you really wish to use the error prone header guards; then I recommend following the Boost convention for naming: which helps prevent clashes in header guard names. It's significantly more work, of course... 3. Namespace By defining symbols in the global namespace, you open your code up to conflicts with C libraries, or other uncouth C++ libraries. Instead, decide on a namespace, generally the project name, and wrap any single item you define in this namespace. 4. Use , and pick an underlying type. Any new should really be , which introduces a scope for the enumerators rather than injecting them in the surrounding scope. Since you are no longer polluting the surrounding namespace, you can without fear pull out at namespace level, making it easier for people to name the type. I also encourage you to pick a type. By default the compiler will use , which is... 3 bytes too wide in your case. You can easily use instead, it is large enough. Also, you might as well dispense with pointless abbreviations. This gives: 

Notice that the last 3 elements of the series data array are a , when really the first of those should be a and the other two should be a , since there are only 4 records: 1 in September and three in October. This is because the s of the statement do not contain , and thus whenever a line matches, every case after that is executed (and thus the associated counts for subsequent months get increased). Making the code work The answer by Your Common Sense is good, though there is still one thing that could be improved. Instead of using a operator and the string for the on the dateoforder, use an equals operator with . Refer to this answer for a detailed explanation of why that should be used. 

Bug I tried converting from base 10 to base 2 (i.e. binary) and the output was , which is invalid for a base 2 number. Also, when I ran the output was , not Your Question 

And could also allow it to be simplified even further, though the variables outside the loop would have to be imported into the callback function with the statement, which might seem a bit wonky: 

Could be simplified with the use of http_build_query() with encoding type to replace the rawurlencode: 

As was already mentioned in Arnav's answer, it would be wise to set the event handler for that element in Javascript. One technique is to use jQuery's method (which is really just a shortcut for ) So at the beginning of the script, where constants and variables are defined, add , and in the DOM-ready callback, assign that value: 

Those assignments can occur outside the click handler (optionally in a DOM-ready callback) - and const can be used since the value shouldn't change within the lifetime of the page. Use for pairs Instead of with a conditional: 

For more information about Javascript code that interacts with the DOM, read this article. I know it criticizes use of jQuery at first, but the rest of the information is really valuable. 

jQuery Since you have 5 js libraries, I would question whether jQuery is really necessary (and suggest you look at youmightnotneedjQuery.com if you haven't yet). The Fetch API or one of the three suggested on YMNNJQ could perhaps replace the jQuery AJAX code (i.e. ). I see places in the jQuery code like . Alternatives to using that jQuery pseudo selector would be to add an id attribute to that first element and using that with , or select it with document.querySelector() and then use appendChild() to add the HTML. and I would definitely recommend replacing with and where appropriate in the .gs files and unless browser compatibility is an issue, use it in the regular javascript files as well. Notice in the example above, I used - this is because that value is a constant and should not be re-assigned.