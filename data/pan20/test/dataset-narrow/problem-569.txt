I didn't test the code on my end (I didnt want to bother creating a test table), but I imagine it should run in a matter of seconds. Note : Microsoft Scripting Runtime To use the code as is, you will need to add a reference to the Microsoft Scripting Runtime Library. There are plenty of resources for adding references, but ask if you get lost. RubberDuck. Use It. Love It. Prof-It I tend to be shameless about my plugs for Rubberduck, largely because the head of the tool, Mat's Mug, is unabashed in his attempts to convert everyone on SO to using RD. That said, it is an amazing tool, especially for beginners, and it would make most of the above comments stupidly easy to implement. Honestly, it would. Check it out here: $URL$ Wrapping Up Let me know how the code above works for you, and do your best to use it as an example for future projects. If you manage to implement even half of those suggestions you'll save yourself potentially months of costly learning experiences through failed projects. Best of luck! EDIT: Use this code instead to fix the error from above. The error is caused by adding a custom-type to a collection (I have never used Types outside of a class before so I didn't think of the error in advance). This approach is slightly more advanced, but it shouldnt be too complex. In a Class Module named 'Record' 

Disclaimer: I know you are asking a relatively straightforward question, but this is CR after all... Checking an array versus a range is perfectly fine (assuming this function will generally be called from the worksheet), but there are some important considerations to be made. First, it took me a few minutes to decode what your code is doing. Given that you are quite active in the community (and thus you are helping reach many people) it would be worth investing in a copy of 'Clean Code' by Robert C Martin. This is a book that was recommended to me by Mat's Mug, and has completely change how I think about code, and how I approach coding. As a result, the first thing I noticed was how the small things within your code add up towards a larger potential for bugs. For example: 

I've done my best to refactor your code in such a way that you can use it to learn to improve your coding, but also in such a way that it all makes sense. I'll post it and then explain the process and some tips. The Code 

This is very common, and I made the same error in naming when I first started off. For a while, it will be unlikely that you have any issues with this. There will come a point though where you are debugging your code, and you have multiple Worksheet variables, and WS just doesnt tell you what you need. Consider useful names that tell you something about what the variable contains such as these: 

The object is the workbook that is running the code, and by using a string argument as a call to the collection we can return the specific worksheet back. Working on the Worksheet Now lets get into the meat of the problem. Your code is slow because you are operating on the worksheet. Its that simple. A hundred calls to the will be slower than a hundred calls to . An array is faster, and is easier to use. Even worse is when you not only access the cells by a range reference, but when you do : 

I tried adapting you code to use an array for this (someone probably beat me to the punch). I commented old code so you could see the logic of what is happening: 

Based on your 'final version' I figured I would offer some advice. While the great advice offered by Mat's Mug and Vityata seem to have helped you, it also seems as though you are still not quite there. First code, then explanations: 

There are two problems with the first version. The problem that is solved by the second version is that we specify the property we are accessing. The default property of a is so we don't need , but it is discouraged to implicitly access . The second issue is that we rely implicitly on ActiveSheet.Range("SomeRange"). This is a silent killer. I refuse to work with the Active Anything unless I absolutely must and even then, I prefer not to. It is always best to specifically call the object you are working with. 

To make easy, do this: Alt + T Alt + O Editor Tab Make sure 'Require Variable Declaration' is checked Indentation Make sure your code is properly indented before posting it. If you did, you would've noticed that you were missing the at the end of your block (which prevents the code from compiling). You would've also noticed the lack of and . Select Case vs. If...Or...Or...Or...Or... Any time you are doing multiple "If it is this, or that, or..." conditionals, you should use a statement. There is a slight performance increase, but it is also cleaner and easier to read. Additionally, it makes it easy to edit the conditions as needed. works by taking an input variable, and checking the condition against 's. If the condition matches, it runs the code inside the block, otherwise it goes to or in the absence of . For example: 

Can you find the one difference I made between the first GetSpecString and the second? How long did it take you to find it? This was done to prove a point of course, but imagine if you, in all your wisdow, edited the first spec string, but forgot to make the same change to the second. Now you have two possible 'routes' your code can take, and it will take you forever to figure out why. Something like: 

First of all: qualify your references! Coding like can cause major issues since the compiler will infer the parent to be the activeworkbook. This works when the activeworkbook is the intended target, but can have drastic consequences elsewhere. Same goes for references to Cells, Rows, Range, etc. Also, as noted by Mate, declare your variables. Always have at the top of your module. This prevents you from 'using' a variable that is undeclared. This is specifically helpful in cases where a simple typo could otherwise create an entirely new variable and as a result could have unintended consequences. Focus on not taking action within the workbook. Matching values by filtering a range can have serious performance issues (as you are noting). In my own work, I use a dictionary and a couple of arrays. I went from literally taking hours to compile data (we are talking ~60k rows of data to possibly search through, and matching against 10 or more data sets) to literally processing this data in minutes with dictionaries and arrays.These are powerful tools. Use them. Finally, in the future please post all of your code. It seems like you cut off the top of your function which makes it difficult to see if there is part of the picture we are missing. EDIT: See the Dictionary example below 

I also want to note here that your original property accessors dont use 'value'. You must switch to using value. The reason why is quite simple: 

While your code isnt hugging the left-hand side of the window, there are lines that, by their indentation, seem like they are actually procedure declarations (Sub Foo's) and not declarations within a procedure. Dim Blocks This gets its own header because it is something often overlooked. It wasn't long ago when, like you, my Dim blocks were like the glossary at the end of a textboox chapter. At times, I was proud of them. "Look at how much I must be accomplishing with this sub. I have so many variables declared!" "My Dim block looks so nice, and uniform. Surely my code is organized." Hyperbole, of course, but I truly was proud of my code. Then came along Mat's Mug to trample all over it (indirectly). I saw his advice about how they can actually be ineffective, ugly, and work against code cleanliness. I decided to give his way a try, and sure enough my code went from "Okay" to "Much Better". Why are they bad? First, they encourage lazy coding. When you are declaring all your variables at the top, there is no need to question 'Do I really need this here?' and further 'Should this actually be a function?'. These two steps are vital to cleaner code. Even further, they make it more difficult to see when a variable is declared but unused, or when the name doesnt fit the function. In short, declare your variables as close to their first use as possible, and as a result you should see an improvement in your code. Variant - The VBA Programming Menace Variants can be used effectively, and they do have their place within code, so don't think I just write them off completely. I have a few procedures where I use Variants like: