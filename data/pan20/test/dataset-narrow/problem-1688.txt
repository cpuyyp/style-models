If promoted enter your password (the default is "raspberry") Type "Y" and press enter. This is now installing xrdp onto your Pi which is the software we are going to use for the remote desktop connection. Wait for it to complete. Restart your Pi. We are going to check that xrdp is going to start up automatically. When your Pi has booted to the command prompt look for [ ok ] Starting Remote Desktop Protocol server : xrdp sesman. This shows you that xrdp is installed and automatically starting up on start up of your Pi The last step is to make a note of the IP address of your Pi which should also be displayed on the start up screen. Run the command 

So I had a look and the "hat" (Hardware Attached on Top) seems to occupy all the GPIO pins on the Pi, but there are some exposed on the hat itself: 

On your Raspberry Pi, boot into the graphical desktop. Select Menu > Preferences > Raspberry Pi Configuration > Interfaces. Ensure VNC is Enabled. 

I may be wrong there, it could just be formatting on the question (your if's CONTENTS required no indentation). 

So I have achieved this by creating a Raspberry Pi Bluetooth Low Energy Peripheral device. The code is on Github for the Raspberry Pi peripheral and for the accompanying Android app. Just make sure your raspberry pi is up to date. Raspberry Pi Bluetooth Ble Peripheral with Bleno: 

And my code (simply) is like below. You can check out the sub project as well but that has other stuff in it like hosting it's own web site and displaying on a Nokia 5110 screen. 

What I recommend is that you time the gif's so they only play once, since they seem to repeat, also they are different lengths so you want to make the delay a variable. Here is a basic solution: 

This kind of data is heavy. You better be able to store a LOT of information Perhaps work with averages over some shorter time rather than a single value. I use an average over 5 minutes, so if my sensor is initialising, I don't trust the -1000ºc that it sends me. Averages are better anyway, especially if you are going to be raising alarms and get people up late at night. Do what you need for the project. Over engineering and hard policy decisions will ultimately hurt you (e.g. we MUST use RF, or we MUST use Arduino's / ESP8266 boards) because if you can't adapt to the problem, you'll try hacking too much and end up with a mess. Tackle one problem at a time. Get the sensor data, then work on comms, etc. etc. 

This website gives a few examples: Computer hope. Also, as stated in the comments perhaps you should try typing: 

And you will get the latest version of Pixel. You don't download it separately from Raspbian (Stretch, Jessie or otherwise) More on this can be found on the Wikipedia entry for Raspbian. EDIT Since the question has been edited to clarify that the Pi has no internet connection, I will edit this answer. To install components offline you need to find the .deb and transfer it to 

Launch Remote Desktop Connection which can be found at Start->All Programs->Accessories->Remote Desktop Connection Type in the IP Address for your Pi which you noted above. Click Connect (you may get a security warning at this stage just click OK if you do. After all it is your Pi on your network so nothing to worry about security wise). Leave the Module on the default of sesman-Xvnc and enter your username and password for your Pi. (The default is pi and raspberry if you haven't changed them). Click OK and after a few moments you should be greeted my your Raspberry Pi's desktop! 

What you could do is set up your PI as a little WiFi server for the devices to connect to and then let them send the data to the Pi for collection, and the Pi can upload it somewhere else. The problem with RF is it's going to be line of sight, and very unreliable. WiFi would be a way better way to go in my opinion. Or better yet if you just need one sensor wire the sensor straight to the Pi and upload via WiFi. Lessons learned: 

That web page is looking at the versions of Raspbian. Pixel is a desktop environment. Recently Raspbian Stretch was released and can be seen on the page you referenced by the latest folder date (2017-09-08). So you would be able to get Pixel (the desktop environment for Raspberry Pi) on Stretch or on later versions of Jessie. According to the Raspberry Pi web site, all you need to do yo update the version of Pixel is run the following commands: 

Works fine, but if I change MAX to 255 and use it only works sometimes, and when it does work only the left will run. What should I do to make them both be able to work, and work consistently? This does not work consistently when I compile and run as follows: 

EDIT If you REALLY want to avoid the use of extra cables, you could mount the SD card to your normal pc (assuming linux I show how to mount here) and add the following to /data/misc/wifi/wpa_supplicant.conf: 

What you would need to do is utilise a socket. A socket allows a server and client to communicate directly with an ongoing connection. The advantage of this is fairly high. Let's say you want a user interface on the Raspberry Pi, you'll find most interfaces are fairly lacking. Except on of course: HTML. This pretty much sounds like what you want. You have a server which presents a UI, as well as a socket that can communicate directly with the pages. Then you can even allow the pages to give feedback to the server, or simply allow the server to react to physical elements like a button push and then inform the sockets of a state change. 

Unfortunately, this doesn't work. Even though it seems to be replicated in many tutorials and blogs. However if I take the GROUND from the 6v and attach it to the 5v of the Pi, my creation can't go fast enough: 

It's unlikely that your phone would adhere to a Sony standard, so type 3 is not really worth considering. But you need to remember that the NFC reader is looking for a Tag to read from or write. So the question is, are you just tapping your phone hoping it will read / write something, or are you emulating or transmitting a "tag" for your hardware to read? I would recommend researching Host Card Emulation. Or you can use vsmartcard's solution to test, just make sure about the protocol and tag types. I think you should also install NFC tools and check that your phone is capable of reading the same tags as your hardware. Remember your phone can be both "tag" and "reader" so there will be some setup involved in getting it right. Perhaps Android Beam would be the best way to be in a "tag" like state. 

There are different images being provided. I have a similar screen and had to try another image until it worked. Unzipping and burning image to SD Card using Win32DiskImager. Did you try any of the other images provided here as part of the referenced tutorial? 

You could simply download the latest Raspbian image and burn it on the SD Card using Win32DiskImager as recommended by the Foundation. Then at your own risk, you could update the Firmware using rpi-update. 

Ensure main speaker has power. Power adapter to mini USB and Pi audio to 3.5mm input. It should then be loud with or without second speaker connected. 

It depends. The Raspberry Pi 3 can use anywhere from 230mA when idle, to 350mA when using the camera, to 720mA when using all 4 cores of its CPU and that is not counting any additional draw from USB devices. So to quote RaspiTV: "It’s important to understand that the 2.5A is specified to work in pretty much all circumstances you can think of. But in many cases, a bit less will be OK, depending on what you’ve got plugged into your Pi." If you are interested to learn more, here is a great analysis from RaspiTV. 

Not sure if this helps, but from what I've read about the design of the Pi and the use of Broadcom's SoC, the CPU and GPU are on the same chip and share memory, and on early models there was only pre-determined splits of RAM between the two Units until that was made obsolete by a new version of start.elf, so this might be the most efficient or most backwards compatible way to do the boot sequence. 

You might be able to use your screen, if you can find an HDMI LVDS Converter Board like this one for your panel, in order to connect your Pi via HDMI. The Pi also comes with a DSI Connector, but you would need to get signals to your panel, use GPIO pins, a software driver, so not as simple as HDMI. 

From the pictures it looks like the main speaker needs power via mini USB and audio via 3.5mm cable, and it then provides audio to the second speaker via the cable coming at its base. If that is the case, I would venture the Pi can drive the speaker without power but would be barely audible, since the speaker's amplifier wouldn't be powered, so I would try the following and please report back: 

If you are referring to this 3.5 inch LCD touch screen, which connects via SPI and needs a special Raspbian image with their own driver, I wouldn't count on being able to switch back and forth between using the LCD screen and HDMI. So if you downloaded their special image, that corresponds to your Pi, either Pi 2 or Pi 3, then imaged an SD Card and the LCD screen still doesn't work, the only option is to contact Kuman. And to be able to go back to using your Pi via HDMI, best bet is to reimage SD Card with standard Raspbian image. 

Short of testing from another computer or tablet running a newer version of VNC viewer, I would suggest double checking the username and password, by default it is 'pi' and 'raspberry' and may be trying 'raspberrypi.local' instead of the IP. BTW, the other thing I've noticed with a headless Pi is that the resolution in VNC is very small as there is not HDMI monitor connected, so I've Set Resolution via Raspberry Pi Configuration to DMT mode 85 1280x720 60Hz 16:9 to fit nicely on an Chromebook, which is what we use at the school for our Pi-related projects. 

Based on the measurements made by RaspiTV, here are some estimates: 100 mA: No peripherals connected, WiFi And Bluetooth off 160 mA: Bluetooth turned on 170 mA: WiFi turned on 230 mA: Camera connected and capturing Overall, using WiFi and accounting for the 5V power adapter, you are only looking at 1.1 Watts. 

I would think that crontab with @reboot would have worked. Here is a nice step by step on how to Launch a Python script on startup. Please try to see if that works. 

I would probably base it on the library I need to use. I would always try to stick with Python 3 as it is the new version, but if a library I need has not been upgraded/converted, then I'll have to use Python 2. Please see here for a list of Python libraries already converted to 3 and those yet to be. 

The Pi Zero doesn't have a built-in Microphone input nor Audio output, therefore, you will need either a USB Sound Card or a pHAT. In case it helps, I bought a "USB Sound Card for Pi" on ebay for $3, which has two inputs, mic and stereo jack, and I use Audacity on the Pi to record and play audio, and it works great. If you already have all the necessary hardware and want to 'program' a way to record and then play the recording, I would recommend looking into PyAudio in Python. 

I think the biggest issue is if the Pi turns off or reboots as the SD Card could get corrupted or even damaged. 

What you are looking for is a way to setup a headless Raspberry Pi without ever needing to connect it to a monitor, keyboard and mouse. This easiest way I have found to do this is by using PiBakery to image your Pi's SD Card, since you can specify your WiFi login details and enable the VNC server all from your laptop. So basically, install and use PiBakery to image the SD Card providing your WiFi details and enabling VNC, then insert the SD Card in the Pi and connect it to power. Then install VNC Viewer on your laptop, open it and go to 'raspberry.local', enter 'pi' as username and 'raspberry' for the password, and you are in. Finally, go to Preferences, Raspberry Pi Configuration, and Set Resolution to DMT mode 85 1280x720 for example, and restart your Pi, so you'll get a bigger resolution via VNC on your headless Pi. 

Ensure you have updated your PATH and made it your default in .profile. Please see detailed instructions from Java here. From memory, last time I did it, I think I edited this file: 

I enjoy trying to understand power consumption as some of my projects rely on battery power and I need to know how long it is going to last. So, here is my attempt at answering your questions. 

I've been thinking about a project like this, but I would probably use WiFi to control smart plugs, and run OpenHAB on my Raspberry Pi. So if you think that is an option, check out OpenHAB, and how to hack/use a cheap smart plug.