I'm not sure if the title is very good, feel free to suggest a better one. People can "comment" on different objects of my site,similarly to StackExchange (for example they can comment on a Question, an Answer or a Comment). The way I've decided to design it is something like this: 

For a given user_id, I want a list of "conversations" for this user. A conversation would be all messages involving the same 2 users. Kinda of like Facebook. What would be the best way to achieve this? I was starting to write a simple query with GROUP BY but then realized the pair of user ids could be both ways - but to me it's still the same conversation. 

You are correct in your description but the conclusion is not correct. It may still be faster to use the index anyway even if it has to go off to the table for the rest of it. The data pages contain many fewer rows than the index so there's lots of extra I/O when scanning. Generally the index will tend to give you benefits if it selects few rows even if it's not a great fit. 

for a blob of text use varchar(max) if you're storing XML use XML There are BLOBs for binary data These are often stored off-table (automatically) for various performance reasons. So yet you can, but nevertheless, you might be doing something a bit wrong. If you share what you're trying to do, we can be more specific. 

I came to a execution plan where oracle choose to access the index but instead of using the columns as predicate it only filter by them. My question is what are the reasons that can cause that(all the involved columns are in the index). For example(However I want it to be more a generic question): 

I want to dedicate some time to learn more about performance and tuning issues. I assign for that a clean DB. I want to know how can I load into it some data and performance-problem queries/DML/DDL? Do you know some scripts that can cause/generate that (purposely or not)? The idea is to learn the basic(and maybe more) of em/awr/addm etc - tuning and performance wise. I dont really know what specific to ask, but I'm guessing index problems, selects issues, wrong way to access the data, etc.. Books are great but I have the knowledge I need some actual work on that. Maybe its not a Q&A at all, but for me any answer (as long as it is an answer to my question) will do. EDIT I dont want just a server load script - because thats has no point, plus thats not what I want. 

Sorry if the title is not clear - feel free to improve. Here are 3 tables (not all data is relevant to the question): 

I am using MySQL Workbench, and when I try to "synchronize" it with my remote database, it keeps detecting some changes to make. Specifically, the most recurrent ones are: 

Let's say I have 3 main tables: , , and have a MANY_MANY relationship (). and have a MANY_MANY relationship (). I would like for a given category to retrieve all the linked urls. What is the easiest, most efficient way to do this? Could I maybe build a "VIEW"? What would be the query? I am using MySQL. 

Probably too much info for here but basically I'm taking the approach of a generic "object_type" VARCHAR ("QUESTION" for example) and an "object_id". Is this a good approach? Can I make foreign keys? What would you suggest to improve performance? I am using MySQL and PHP (and Yii). 

I'd go b. A person is a person. Record that then layer over what role they take in your organisation. Consider that an employee might also be a customer. A person might take the role of other participants that you have not yet thought of or chosen to model. A customer can also be a business which would have a different shape. Lots of potential reasons to keep them separate. 

Every R (relational) DBMS I've used has. MySQL is peculiar in so many ways I struggle to put it head to head with any of the "normal" RDBMS for anything other than a basic data dump for a simple application. There are plenty of DBs that are not relational that don't have the concept. As far as I know though, there are none other of either sort that support the syntax without the functionality. 

Note that Content is meant to have either a , or a - not both. I need a way to connect a Content ID to a Tag ID. I was thinking of creating a VIEW, and here are 2 possibilities I came up with so far. Option 1: 

My question is which one is the better approach (or if there is one better)? Note also that currently some Contents are not tagged at all. Bonus challenge: a VIEW that connects content_id straight to category_id 

I was compliant and executed all the queries given to me (and added the semi-colon that they forgot). MySQL didn't complain and executed them. However it didn't help, I can run it 20 times in a row, it will still ask the same useless changes. 

What is the difference between column and column in table? Are they correlate? Please provide also an example. 

Now, in order to be able to I need to copy the logs from the backuped DB to the target archive dir. What I do is coping the last 2 days and it always passed. Some day it will not. So how can I know during backup time(right after it) what files exactly in addition I need to backup..? 

I have a dump file using with compression (oracle version >= 11g). Before running I want to check if there is enough space on the machine but it seems as there is no parameter in the utility to assists me ( doesn't work) What are my possibilities? 

The answer is kind of "no" but more "your question does not have an answer because it's based upon incorrect assumptions". 1) Tables are not really stored in a particular order. 2) Even if they were, how would the DB know that the question had been answered until it had finished reading the entire table. Putting things "up front" would not help. 3) What you ask (range of values) is in the realm of an index. An index has more structure and roughly the concept of "beginning and end" so would be the way to go. Build an index on the values you intend to query. 4) The way indexes are structured means that individual rows can be selected from billions with just a handful of I/O reads. However you need to have the right values indexed to match the queries. Look at the plan to see if it's working for you.