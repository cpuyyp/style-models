EDIT Now you have the right port it appears to be a protocol problem. I would verify that the proxy_ajp_module is loading correctly: 

In terms of schema updates does 'Exchange 2007 SP3' and 'Server 2008' do the same thing? I'd like to add a 2008r2 DC to an existing 2003-level forest (which requires 2008 adprep on the forest) and I've not yet had the need to apply SP3 to Exchange (which brings 2008 compatibility to Exchange). Domain functional level will stay at 2003, as all my existing DCs are 2003. 

Have you got the right port there? There are two different connectors in the JIRA server XML. The HTTP one is on 8080 by default. The AJP one is normally 8009 by default: 

This has both and properties. Otherwise I think you'd have to get it from a fqdn/DN as squillman suggests. 

...concerns me a little. Especially when the rest of the error says your AD server is 'server.techsoft.local'. It looks like exchange is trying to query AD with 'MAILSERVER\Administrator' (local admin) which AD would have no knowledge of (unless AD is local to the machine and the domain actually is 'MAILSERVER' making Administrator the domain administrator...). Can you check the user roles on the server (Organization Configuration screen)? Have you run the BPA tools in the toolbox? 

Active Directory Migration Tool (google admt 3.2) will do a lot of legwork for you in terms of user/computer account migration (including deploying agents to remotely reboot computers to join a new domain!). You just need to ensure an forest-level trust is in place. As for the scripts (how many??), i'd just take a copy of them and redeploy them on the new domain. 

I'd actually forgotten about this, I'm thinking of investigating Microsoft's Lync Server since it's new enterprise voice features cover a lot of what i'm looking for. 

UDP src/dest can easily be mistaken by Snort. Without knowing more about what the traffic is it's hard to say. That UDP portscan rule misfires all the time on VoIP traffic, DNS requests and other things. If you don't have any port forwards or 1:1 NAT to that internal IP, then it's not traffic sourced from the remote IP, it's from the local IP. 

Probably pieces (maybe more than just dirname) of stock FreeBSD that we don't include in pfSense as they aren't needed for firewall or related purposes. You can just copy over from a stock 7.2 release for 1.2.3. 

Depends on what you need to permit outbound from those servers. Assuming you're using the default of filtering on member interfaces and not the bridge itself, just make sure you're not permitting traffic to your LAN subnet on the DMZ firewall rules. If you need to permit some outbound traffic on DMZ to any destination, add a block rule above all your pass rules with the destination of your LAN subnet to ensure those rules can't apply to LAN-destined traffic. 

CARP is like VRRP, HSRP and most other routing redundancy protocols, you must have 3 static IPs in the same subnet. That may change at some point in the future, but it's true for the time being. 

I'm guessing your listing of LAN1 and LAN2 as both 192.168.1.0/24 is wrong given the capture shows one is 192.168.16.0 and one is 192.168.67.0 apparently, hopefully both /24s. The static route filtering option has no applicability here. I'm guessing you either have overlapping networks (not a /24 mask on both, maybe /16 on some hosts), or one of the affected systems is dual homed on both networks which causes asymmetric routing. 

Proxy ARP isn't going to break anything (assuming it's configured correctly, it's possible to screw up any type of IP configuration and break things), CARP and proxy ARP are just two different means of accomplishing the same end result. If you have redundant firewalls, or want to add a secondary in the future, use CARP. If you need anything running on the firewall itself to bind to the addresses, you have to use CARP (or IP aliases in 2.0). If you don't have a secondary and don't ever plan on adding one, and don't have a need to bind anything on the firewall to those IPs, it doesn't matter either way. Sometimes proxy ARP is preferable if you never want anything on the firewall to be able to bind to those IPs, you're strictly using them for NAT. The various virtual IPs and which to use where are covered in much more depth in $URL$ 

You can in WSUS 3, your replica server needs to be configured to store updates locally. An option will be available to store updates locally, download files from Microsoft Update, but do not download from the upstream server. Mentioned here screenshot below: 

on the command line will give you the version and build number. For 2008 R1/R2 in particular you can always check the build number: $URL$ Although it's a bit harder to detect 2003 R1/R2, not sure if you want to? EDIT: If you want build number or a plain text version number then you can also check the registry: HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion 

I think you will need to enable Named Pipes in Configuration Manager and restart the services. Also start the SQL Browser service. 

Transport rule would do it, it is ridiculous, but any question deserves an answer. I would just add an exception for when the email body contains the disclaimer text. There's enough flexibility in the transport rules to do whatever you want. 

have you created a separate batch file for each service? have you changed all references to the lock files and directories this file references? you can create a copy of service.bat and use this to install the second service, but there are several references to: 

You can also force the Outlook clients to update the address book with the Send/Recieve -> Download Address Book option. 

You can add an additional email address to the Owner's account once the exchange account is disabled to catch any new mail. 

EDIT: There is a class for specific partitions: Win32_DiskPartition this does contain an property. The property will give you both the disk and partition id (but you will have to parse it). 

ok it would appear the problem is resolved after uninstalling KB968389 (ref) and then reinstalling again. this has had me stumped for a few months, i would never have guessed it was NTLM related... to quote: 

This is a time/space tradeoff that allows you to reduce the number of computations from 2168 down to 2112 with a space cost of 256 64-bit blocks (512 petabytes). Now, for some bizarre reason, all security tools seem to report 3DES-EDE as 112-bit without actually qualifying why. 3DES-EDE does not have a 112-bit key length, nor does it really even have a 112-bit effective key length unless you specify that your attacker has 512PiB of lightning-fast storage available alongside their massive array of DES-cracking ASICs. The practice of reporting it as 112-bit appears to have started with the "sslscan" tool, and has been copied by various other tools since then, leading to all sorts of confusion and misconceptions (I even saw this incorrectly marked in a security exam!) This isn't to say you shouldn't disable 3DES - it's an old algorithm now and there are problems with it, so it's probably worth moving away from it. It's just worth knowing why. If you want to do so, add and to your list of disabled algorithms. These names are defined in the cryptographic providers documentation, in case you want to disable any others. 

I'm in the middle of doing some testing on a mobile device, and want to test it from the network. The mobile device will only connect to networks via WiFi, and doesn't support ad-hoc mode, so I've set up an old WiFi router as an AP, which is connected via ethernet to a port on my laptop. The router operates under 192.168.0.0/24. My laptop is also connected to our normal network via another ethernet port. This network operates under 10.0.2.0/24, and provides internet connectivity. My laptop is running a VM which has two NICs, each bridged onto the two respective physical NICs. The 10.0.2.0 network is reachable via eth0, and the 192.168.0.0 network is reachable via eth1. The problem I'm having is that all connectivity drops as soon as I run . I've tried changing routing tables and adapter metrics, but have had no luck. Here's the output from : 

The best explanation i've found is here So at least 30 days + 1-5 days before it 'drops' and becomes available again. 

I use the same router in a few locations, where the port doesn't need to change I used NAT>Open Ports to do the same thing. I also changed the port of the management interface (even though it was disabled) to remove the possibility of a conflict. EDIT: Also check for a software firewall on the server hosting the application :) 

Other's have hinted at this, but under EMC (not ADUC) you can go to the properties of the mailbox to remove it from the GAL correctly ("Hide from Exchange address lists"), but also to check which OU the user is in: 

Assuming you mean Oracle VirtualBox VM, have a read of this section of the manual: $URL$ Essentially by using NAT, your VM's will need to be on the subnet chosen by your VirtualBox installation. VirtualBox has a DHCP server which will allocate addresses automatically which is why you can access the internet from your VMs. AD/DNS will need to be on a static address on this subnet, not DHCP. I would start by pinging the IP address and not the name too. 

I believe it can: $URL$ The enterprise voice features require a 'Plus CAL'. There's not a great deal of information around on how Lync connects to SIP trunks or PSTN gateways though. 

we use a similar solution in an 8GB+ repository, although after doing one large checkout i loop through the files that were changed and only update them. we have a large number of files and even took a long time to complete. i was attaching diffs to an email for the changes too but this added about 10secs for each commit. 

looks like this was intended behaviour, but a workaround is shown here essentially you build a variable containing a list of the folders you want to exclude... 

Just add domain forwarding entries at the bottom of the Services>DNS Forwarder page. Add multiple entries for the domain if you have multiple servers for it. 

Using any firewall as DDoS protection is a bad idea. DDoS attacks hit the most resource-intensive portion of any firewall, evaluating its ruleset for huge numbers of new connections. DDoS attacks melt down any firewall very quickly. How quickly and how big of an attack one can handle depends on how big of a firewall. In general, you don't want to look at a firewall as a solution to help with DDoS attacks as it will most likely become the most susceptible thing on your network to succumbing to those attacks. 

Go to Diag>States and filter for xx.xx.174.170:80, what does the state show? Guessing from the description it's probably SINGLE:NO_TRAFFIC, which means it's getting passed in, and the target machine isn't replying or isn't routing its reply correctly. Guessing #2 or 3 here from the description. $URL$ 

Most of the heavy lifting in that circumstance is done by the OpenVPN server system, which sounds like resides on a system separate from the Netgear. From your description, it's unlikely the Netgear is the cause of the slow down, at least not because you're exceeding its capacity. Verify you don't have any traffic shaping or QoS configuration on it that would limit the throughput of the outer portion of the VPN. pfSense would certainly increase your maximum achievable throughput, but that doesn't seem to be the reason for your VPN performance. 

That still sounds a lot like an IP conflict internally, given a reboot of the Cisco resolves it temporarily. Check the ARP cache on pfSense next time it happens for the affected device, see if the MAC matches what you're expecting. 

If you're referring to a DHCP server on the WAN side, you're probably blocking DHCP traffic. Check your firewall logs. 

I recently noticed that my ISP doesn't like routing native SCTP traffic over the Internet, unless it's tunnelled through UDP. A bit of a pain, but I solved the issue by using tunelling. This issue got me thinking - other than TCP and UDP, which transport layer protocols are (generally) allowed to be routed properly across the Internet, over IPv4? Is the "normal" policy to allow all forms of IPv4 traffic, regardless of the protocol? 

I'm getting really slow queries in MS SQL Server 2008 R2 on my dev machine. This problem has been plaguing me for about a month. Other developers don't have the same problem, but we all run the same code. It seems to be that any query that includes a takes >20s, some taking up to a minute. Inserts and updates are fast. The total database size is about 30MB, so it's hardly huge. During the laggy queries, the CPU usage stays flat, the IO rates stay low, and the pagefault delta stays low too. I've not tweaked any performance settings in the db config - it's all stock from the setup. The software that connects to the SQL server is running on the same machine as it. I've tried multiple dev database copies, and customer databases that are known to be fine, all to no avail. Any ideas what might be causing this? 

Before you go changing your SSL config, it might be worth understanding exactly what the vulnerability is here. When 3DES was introduced, there was a requirement that it was interoperable with legacy single-DES systems. The idea behind 3DES is that you can multiply the security by performing multiple DES operations with different keys. In order to provide compatibility, they used an EDE construction: 3 DES operations in sequence - Encrypt, Decrypt, Encrypt - or EDE for short. It turns out that a DES decrypt operation is basically interchangeable with an encrypt operation in terms of security, so this works quite well. When you use three independent keys for each operation (known as keying option 1) you essentially have a 168-bit key. If you want to go back to old single-DES mode, you use a different keying option (3) which has all three subkeys set to the same value, i.e. k1 = k2 = k3, so that two of the operations cancel out and only a single DES operation actually matters. There's also another keying option which has two of the keys with the same value but one different, producing a 112-bit key, but this isn't really used in reality and (somewhat confusingly) is completely unrelated to why you're seeing 3DES reported as 112-bit. To make things even more confusing, you'll sometimes hear people talk about 64-bit DES or 192-bit 3DES. These are, from a cryptographic perspective, identical to 56-bit DES or 168-bit 3DES. DES specifies a key padding system whereby 8 padding bits can be added to a 56-bit key to produce a 64-bit padded key. This was for use in some old systems and it's not really important, but the 8 bits can be ignored and only 56 bits are actually key material. In 192-bit 3DES the same thing happens, where each 56-bit subkey is padded with 8 padding bits, but again the real cryptographic key is only 168 bits long. Now, what's the 112-bit thing all about? 3DES suffers from a problem called a meet-in-the-middle attack. The approach is as follows: