I assume you're referencing this question from the official Raspberry Pi Foundation's forum. If you look at the post again, you'll notice that the post was written in 2014. Your question states that you're using a Raspberry Pi 3 which was released in 2016. I haven't been able to find a more recent posting from the foundation, but one could simply assume that the warning is displayed at a different threshold for the RPi 3. Since the RPi 3 requires significantly more power, it makes sense that it would have a tighter tolerance. 

This is technically possible; it's called bare metal programming. If you choose to go this route, you should know that it's not particularly simple. You'll need to do it in either C or ARM assembly (probably at least a little inline ARM). That being said, this is a huge undertaking, and I highly doubt it'd be worth it for you. Think of every system call your application makes. You'll need to write those from scratch, and somehow incorporate basic drivers for things like HDMI, the SD reader, etc into your program. The RPi is not a simple device, and I do not recommend this course of action for anything other than a learning experience. 

The clear and obvious answer is get a bigger SD card. 8 GB isn't really that large. Short of migrating: 

In addition to the other answers, it's possible that you are using an unsupported WiFi dongle, or more likely, your WiFi dongle does not support your network type. Check what type of signal you're broadcasting (ac, b, g, n, etc), and then check if that's supported by the dongle. 

You call the function in your language of choice. Your function makes a system call with your OS Your OS passes the string you want to print to the display driver. The display driver converts the the string you have to a pixel by pixel grid for you screen. 

Warning: Do not try to use a call in an init script. Init scripts are processed sequentially, and if you sleep in one, all others will wait until that one finishes. 

WARNING: there be dragons here. The way you've asked your question implies that you know little about overclocking, and how it works. This is not necessarily a bad thing. The Raspberry Pi is a good way to learn about such things, but the process of learning is error prone. A mistake could mess up your setup, or even ruin your RPi. Better this device than your main computer though, right? To clarify the rest of my answer, I'm going to define a few terms: 

It appears that simply isn't in the Jessie repository. If you like, you can install it manually using the following steps. 

Like most things regarding the RPi's inner workings, I've had a really rough time figuring out this answer. The documentation continues to be less that thorough. I can tell you that the NewPlexTranscoder is based on ffmpeg, which does not support GPU rendering. Everything is truly reliant on the CPU, so I think it'd be unlikely that the Transcoder would take advantage of it if you were using that given file type. An Alternative If you open your Plex library, the settings for the chosen video library should have an optimize option. You can set the encoding and resolution ahead of time, which will cause Plex to prerender everything in that library. This will probably take quite a while, but may make the service more usable for you once it's done. 

I would highly recommend not turning off the RPi by simply pulling the plug. The only time I've ever had to deal with a corrupted card was because of power issues. You're correct though, you will need some kind of circuit between your power source and the RPi. Otherwise, the RPi just dies, and it won't have time to power down. I would suggest a UPS (uninterruptable power supply) that is capable of then signaling the RPi. Since you're more or less turning the RPi off as soon as the power is cut, you can get by with a pretty small battery. I would suggest something like: $URL$ It already has the signal interface built in, you just need to handle the logic. 

No, unfortunately not. The RPi's hardware does not allow for multiple screen use, and honestly the CPU probably couldn't handle a dual display anyway. 

By CPU Type You could check the RPi version with the command, . The different RPi versions have different CPU architectures. The RPi 2 has an arm7, whereas the 3 has an arm8. 

It depends on what you want. Personally, I'm not a fan of GTK, but it is a viable option. Another would be Qt (pronounced cute). Personally, I prefer the look of it, it is truly cross-platform, and has a really nice designer suite and a python library. Have you considered using a webpage as your application's interface? Python is capable of creating little mini web-servers so you wouldn't even really need Apache for something as simple as you described. If python is doing some of the legwork with your application anyway, it may be a fairly easy system. As far as interfacing Python and C++ goes. I've never really found a better resource than it's own documentation. It is a fairly advanced processes, so just be forewarned (I don't know your skill level). 

There are many ways you could set this up. You could use a whole host of software to mount the RPi's storage as an ftp or sftp drive, you could use OwnCloud, btsync, or a zillion other things that you could find by googling. 

For most of what comes with Raspbian, this is probably a non-issue, but you should keep this in mind for any packages you plan on installing. Each piece of software you install may have a requirement, but it should be fairly easy to discover in its licensing document. Conveniently, most open source software uses a small handful of licenses, so what's true for one application under the GPL, will usually hold for others with a GPL. In short, I would include a mention for everything you used on an about page. It's fairly normal to list your product name, contact, copyright, and then a thank you list. The list could go something like "The Raspberry Pi Foundation, QT 5.5, package etc, etc" 

Based on what you've said in the comments section of Dwebtron's answer, your problem is definitely the power supply. For one thing, your power supply is definitely on the weak side. It's generally recommended that your power supply be able to handle at least 1A. 700mA might power the device, but adding a wifi dongle, and overclocking the RPi would certainly strain it. Your 1A version will definitely help. Secondly, an intermittent power-supply is definitely not a good thing. If the power supply dips enough that the lights are flickering, it's probably dipping enough that the RPi shuts down, or misbehaves unpredictably. This can lead to anything from software/kernel glitches to a corrupted file system. I would recommend an uninterruptable power supply. Something like an external battery backup could help with that and not cost a fortune. 

Of course it's possible. You'll need an application on the RPi that monitors a Bluetooth dongle for traffic, and then execute commands based on what it receives from your phone. How that's implemented is up to you. 

does a decent job of giving you an overview of the entire filesystem, but it isn't very helpful for finding folders that are becoming space hogs. would be much more helpful in this case. 

The second card is actually the one I use as my primary card in my Raspberry Pi. I've never had any problems with it, and have been very happy with its performance. 

There's a file called on the first partition of your SD card. Edit the file as below to force the RPi to use the 4 pin plug. 

Options 1 and 2 will both use a significant amount of resources. If properly configured, they're probably going to be the fastest databases. MySQL will use slightly less, and is configured to give the best performance for data retrieval. PostgreSQL on the other hand has support for much more complicated queries and is optimized for insertion. Since you're on an RPi, you can probably get away with using SQLite. Like PostgreSQL and MySQL, SQLite is a relational database, but it's all stored in a single file. There is no separate server processes that consumes resources. It has all the features of the SQL spec, plus a few extras. Though it does come short of PostgreSQL's more robust feature set. Lastly you could go with option four. If you "need" a database, flat files are probably going to be the least attractive option. They will require the most amount of work from you, but have a relative overhead of 0. I wouldn't recommend this approach for anything other than a particularly small dataset. 

My guess is that the tarballs you've downloaded aren't working for you because they're compiled for processors. The RPi (all versions) are running an processor which is fundamentally different. If you'd like a further explanation of that, our blog has an entry about it. If you don't want to use the version in the Repos, you'll need to install from the source. This isn't going to be a particularly easy or quick process, but you can do it with a relatively small learning curve. We also have a blog entry on that. It's on Tmux, but the principles are the same. The LXDE download page lists where there git repository is. You'll need to clone that repo, build the source, and then install it. 

Insert the microSD card into the converter Insert the converter (containing the microSD card into your laptop) Open the terminal* on your laptop and run the following command: . You'll need to replace X with the device number of your SD card. Eject the converter and remove the microSD card from the converter. 

It looks like the link has the correct permissions, but not he directory beneath it. You should be able to solve this with 

The server should be easy to maintain There shouldn't be a lot of junk installed. This uses extra disk space, bandwidth, and upgrade time. Things like a desktop and Mathematica aren't really needed, so why have them? 

Your device ran fine for a few months, and then died. The second time it ran for less than a day. This implies, in my mind, that something has recently broken. This kind of behavior can be caused by crappy SD cards. You don't mention what brand or model of card you're buying, but if it's an unsupported card, they can be a bit of a time bomb. This is usually less of a problem with the B+ and later models, but you never know with some of the stuff you get in the bargain sections. You also don't mention if the cards themselves work after the system's death. What happens if you put them in your computer? If two cards have literally shit a brick and died, I'd say that's a really good indicator of either the RPi's reader dying, or a factor of crappy cards. If they're not the same card (brand/model) it's definitely more likely to be the former option. Another possibility is that you're doing something to the RPi that's killing it yourself. Have you installed any kernel modifications? If so, they could cause these types of problems. 

It's rather unlikely that you'll be able to salvage any parts of a smartphone. While incredibly common, smartphones are an incredible feat of engineering. There are many, many components all packed into a very small space. The image below is a picture of a Nexus 4 motherboard. The camera is the black thing in the bottom left corner. With the proper equipment and skill, you might be able to remove the camera from the board, but you'd have to somehow figure out which of the chips above it are related to the camera, and develop some kind of driver for it yourself. This would be a Herculean task, and honestly, one I doubt is possible for you. Buying a USB webcam or RPi camera would be much more advisable. 

I don't understand your discomfort with the main site. It may be a little juvenile, but there's nothing inappropriate about you using it. The Raspberry Pi was designed for a young demographic, and its official materials will reflect that. It doesn't make sense for them to have a separate, adult themed site. That would just a tremendous headache for all involved. There is an official forum which doesn't have the kid friendly themeing and the MagPi. Unofficially, you have this site, the entirety of the StackExchange network, plus the magic knowledge machine known as Google. I'm not sure what else you could need. 

37 minutes isn't an unreasonable amount of time for so much data. That puts your average transmission rate at 16.9Mb/s The raspberry pi has a 480Mb/s bus that's shared between both the ethernet and usb ports. Once you include USB overhead (USB is really inefficient), rsync overhead, and the fact that you're both reading and (I assume) writing via this bus, it starts to make more sense. Source: RaspberryPi Forum 

You mentioned that this is a compiled application, that works on x86 processors. This sounds like your problem. The Raspberry Pi's processor doesn't use an x86 architecture, or anything close to it. Rather, the RPi 2 uses an arm7 instruction set. To get it to work on the RPi, you will have to recompile it targeting the RPi's architecture at the very least. Depending on what it is and what it does, you may need to have sections of the code rewritten to address the hardware differences. 

My guess is not. Serial ports usually only allow for one connection through a given port, and the datasheet seems to suggest that it's only meant for one device to be plugged in at a given time (notice the datasheet consistently says 'or'). If you want a definitive answer, I'd suggest contacting the company directly since their documentation is rather sparse. 

A touchscreen is just a generic IO device. Assuming you have an appropriate driver for it to interface with your operating system, it can of course be used to launch and control applications. That being said, I see that you've used android. At the time of this writing, I have still yet to see any usable distribution of Android on the RPi. Even if you manage to find one that works well enough for your needs, it's unlikely you'll find a touchscreen that then supports Android. 

That's not going to happen. Amazon's FireOS is based on Android, but is a closed, proprietary system. Since there isn't even a usable version of Android, FireOS is extremely unlikely to ever become available. 

This is a pretty basic unix permission error. If you had to use to create the folder, that folder is then owned by the root user account. To change that, you need to use the (change ownership) command. Try: 

There are several notable differences between the RPi A, and A+. According to the official release, the differences are as follows: 

No you cannot. The HDMI port on a MacBook is only designed to output video. It isn't capable of receiving video input. This is standard practice and will be true of any standard laptop or even desktop on the market. 

I had this problem late last week. It seems that the RPi foundation is having trouble with their mirror director service. Until they fix the problem, you can get around it by changing your sources file. 

(emphasis mine) That means that SimpleCV is actually more complex than OpenCV. It's "simple" from the user's perspective. It's designed to be an easy to use library, not the fastest or strongest kid on the block. Language Choice: Your suggestion of SimpleCV implies that you're using Python. While Python is adequate for a great number of tasks, the RPi probably doesn't have enough horsepower to run live image processing with Python. Compared to Java or C, Python is incredibly slow and adds a ton of overhead to anything you're doing. Your task is resource intensive enough that you would probably be better off with Java or even C. A Common Pitfall for Python Programmers: I don't know about your use case, but many image recognition projects rely on multithreading to get work done in a reasonable amount of time. If you're doing this with Python, you're probably not actually getting multithreaded performance like you'd expect. Do the nature of how most scripting languages are designed, only one thread is ever executed at a given time. Switching to a multiprocess application may help, but again, probably not nearly as much as switching to Java or C.