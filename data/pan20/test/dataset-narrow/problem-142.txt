If a layer 2 managed switch supports management functions and entails a "management plan" it must require an OS. If it is a typical network operating system, *nix based, does is have a full file system? Would I be able to write an application and run it on the cpu of the switch? 

Is there an actual difference between a CRC error and a FCS error? After reading a lot, they seem like the same thing, but most switches and readings refer to them as separate entities. Is there an overlap of these counters on a switch interface? 

As a UDP segment traverses down the stack, each layer adds a header. What occurs for this to happen? Does the kernel do a bunch stuff then add the header? I am particularly interested in the transition from the network to data-link layer on an Ethernet system. Is ARP performed and then the cache searched in order to provide the next hope information? 

If I want to send an IPv6 UDP multicast message, how does L3 to L2 address resolution occur? I think I understand ARP and how this same idea applies to unicast, but I am struggling to grasp the idea of how it works for multicast. I am aware of MLD and NDP, but not sure how they come into play with my question. 

Generally it comes down to interoperability - if you can guarantee that using a /31 is fine for both hosts on the link, and you are 100% sure that if one of the hosts fail, you will not be replacing it with something that can't handle a /31, you should absolutely just use a /31. In reality, the prime candidate for issues is going to be a routing protocol like OSPF, but as usual, this is implementation dependent - the vast majority of routers out there will behave properly when using a /31 - the adage "test your equipment" holds true. 

This is not so much related to MLD so much as it is to listening on the built-in IPv6 multicast groups. ff02::1 is the all-nodes multicast - I'm actually surprised you don't see that too (are you sure that you don't?) ff02::2 is the all-routers multicast, any device configured to forward IPv6 packets will listen on it. 

Enable IPv6 throughout the network, until IPv6 capabilities and connectivity are on par with IPv4. Wait for the day to come when IPv4 is no longer relevant. 

Your output looks strange as I do not see Encryption Domains (Local and Remote subnets) at both end. Indeed, your Encryption Domains are also your VPN IP peers (10.140.134.50 and 192.168.1.10), that is incorrect! When see only encaps/decaps packets at one end, it is likely an issue with routing, thus return traffic cannot hit Firewalls/Routers for being encrypted. You can try initiating traffic from Router end and see whether the traffic is encrypted (encaps packets counters). 

What you are concerning is about IP split horizon on Frame Relay. However, you should NOT have this issue as you are using multipoint physical interface Frame Relay on R1 and split horizon is disabled by default, BUT it could be the problem with packet-tracer IOS or the IOS version itself. The best way of verifying is to run the following command on R1 

Auto-summary: a router summaries its locally-originated BGP networks to their classful boundaries. Also, all reditributed subnets (into BGP, if a router has) will be summarized to their classful boundaries into BGP table. Synchronization: If your AS is a transit AS, synchronization prevents a BGP speaker from advertising a route to an EBGP peer until all routers within the speakerâ€™s AS have learned about the route via an IGP. 

Determining a loop really depends on the brand of switch that you have. For example, on an Extreme switch, I can run elrp-client on a VLAN and the switch will basically send out a broadcast frame on all ports for that VLAN and see if it returns by any of them, if so, it tells me which port(s) the frame was received back on, thereby revealing the loop candidates. On a Cisco, you can enable storm control, which is a bit more of a blunt instrument since it will basically block the port for a period of time until the status clears (or you clear the errdisable state) - generally speaking however, this sort of thing is only relevant when you're using Cisco switches in a mixed topology of devices that do not do spanning tree nor forward BPDUs. 

Assuming it's a real 5520 and not a fake that's actually a converted 5510 (yep, a bunch of those were floating around - you'll know it by the fact it's only got a single RAM slot) you'll want PC3200 with CAS latency (CL) of 3 running at 400MT/s, unbuffered, ECC. Not sure if the ASAs are also picky about the chip arrangement too, so if you want to play it super safe, make sure the RAM you buy has the memory spread across 8 chips. 

I am afraid that the interface f1/0 (with IP 200.100.30.252/29) on R2 is NOT really up, causing the issue. Please check it again. And please use the next-hop IP addresses for all static default routes The configuration on R1 looks good as I used that to reproduce the following case and I can ping both IPs 200.100.30.251 and 200.100.30.252 from R3. 

In additional, the Conn Flags U is a signal of a good (up) connection. You can check all UP connections by using the command I hope it is useful. 

The best way is to request a network downtime (non-production or off-business hours) and test your network with different cases. Note that EIGRP provides very fast convergence. 

If you have any spare switches, the trick is to place them between your C800 router and end devices (here are laptops as you commented). BVI bridge interface will go down when all of the bridge ports are down. Therefore, If you can keep one of those ports up (by connecting it to a switch, and of course this switch must stay up together with C800 router), BVI will remain up. Updated answer: You can try to disable keepalive to see if it works for you for not. 

Given the prudence and importance of address conservation, the general approach to using a /31 should be "if it works, use it". Of course, you could take this a step further and start using private space for your point-to-point links, but this obviously can be problematic if you're going to run traceroutes from across the internet rather than within your own network, although even that can be mitigated somewhat by configuring your router to issue ICMP errors with a specific source IP address. In short, do whatever you can to waste as few addresses as possible (within the limits of best-practice and feasibility, don't start throwing NAT concentrators up everywhere) 

There is of course also the possibility of using large packets if the attacker knows that a well-crafted packet can cause additional processing time on the server in excess of the additional bandwidth cost. Simply dropping UDP packets below a certain size is far too blunt of an instrument to really be commendable, not least because this may well just result in your attacker changing strategy. For example, if the focus was to hammer your servers, the attacker could switch to an DNS amplification attack that aims to exhaust your available bandwidth. 

I am trying to grasp the idea of how a switch communicates. Does a layer 2 switch require the entire stack to do it's job, same for layer 3? If a switch can support SNMP which sits on top of UDP, it must have a full stack? I believe most switches have some type of network operating system if any at all, so it is hard to understand what a switch actually entails. 

I am looking for a common MIB that supports checking of crc errors, does this depend on hardware vendor and a custom MIB like CISCO? 

If UDP and/or TCP send packets via IP to an Internet Protocol Address, how can a layer-2 switch forward these? Is this possible or do you need a layer-3 switch? 

If an Ethernet link is up on my end, does it necessarily mean the computer on the other end is alive and I can talk to him? Or does it mean that my PHY is just ready to send data onto the medium? I know there are various ways to check "link state" and that there are operational vs administrative states of an interface. 

With your first setup, ASA5508 G1/3 is a routed/L3 interface, you can connect it to L3 port (as you are doing) or to a L2 access switch port (access a VLAN, given that you have its L3 VLAN interface in your network). With your second setup, you configure ASA5508 G1/3 into sub-interface (encapsulation dot1q), you have to configure the other end, L3 port, as a sub-interface as well (encapsulation dot1q) or a L2 trunk port (trunk a VLAN, given that you have its L3 VLAN interface in your network). Let us assume you have VLAN 10 and its L3 Interface in your network (in the same IP range with ASA5508 G1/3 interface), the following configuration should work for you. Later, you can trunk more VLANs between firewalls and switch. 

So the trick is to use different route_map (or access-list) names for differnet nat statements. Here are examples: 

The issue is L3 connections between R1/R5 and R3 are not correctly configured. You did not configure interfaces on R1/R5 connecting to R3 with IP addresses. 

Larger images will consume more RAM - it does not impact the CPU once loaded although it will also incur a longer boot time since it of course has to be decompressed into memory and that takes time. On more modern platforms with speedy Intel Xeons, the decompression difference isn't very significant. On older MIPS or PowerPC processors, it is. 

Small packets aimed at hammering the application of the server. Large packets aimed at exhausting available bandwidth. 

Using a /127 isn't terrible, but letting it go into your backbone as a /127 is. The reason for this is that, essentially, most modern router TCAMs can typically only handle up to 64 bits of address width at a time - this means that if you're in a situation where all routes are /64 or shorter, lookups can occur in a single cycle. Anything longer and it has to perform another lookup operation. Even on a TCAM that only has 32 or 48 bit width, going beyond /64 is obviously still significant. So, my personal recommendation is to allocate a /64 for every P2P link even if you only use a /127 on the wire - that way, when you bring up your routing protocol, you can then aggregate the /127 to a /64. My personal favourite, however is to allocate a reasonable chunk of your IPv6 space purely for facilitating P2P links (in my case, I reserved a /48) - this /48 is then blocked on all network edge interfaces at ingress as a destination. In this way, you're free to just go ahead and use a /64 on your P2P links and still have traceroutes, ICMP errors et. al work, but you are not vulnerable to NDP attacks from outside. Obviously not everyone is going to care about this and if the additional cost of using longer prefixes is acceptable to you (or you have super-duper 128 bit TCAMs) then you can of course ignore everything above. How scalable do you want your network to be? 

With your setup, the configuration looks fine and packet-tracer tells you that your static NAT for DMZ Web_Server is good. To test this out, put a laptop/PC in the network 192.168.1.0/24 between ASA outside interface and ISP router inside interface (you may need a switch here), then access the Web_Server at or using ... 

I believe that is because R1 does not have a route for network 192.168.1.8/29 (where you have R0's f0/0 interface, PC0 and PC1). Therefore, R1 does not know where to return the traffic to PC1. PC1 has the IP 192.168.1.11 with default gateway 192.168.1.9. It can ping 192.168.1.1 because this IP is on R0 and R0 know where to return traffic to PC1 (f0/0 directly connected network). Simply add the following static route on R1 and try again: 

Updated answer: Below is my setup. Both IP_Phone and PC (in VLAN 12 on Switch1) can get the IP addresses from DHCP server: 

1 Your configurations at Cisco ASA and 891 router look fine to me and I was able to apply most of them in the following case and it works properly: