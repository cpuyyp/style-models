Luckily, there is a video of a lecture given by Troy Lee about exactly the same subject. Grothendieck Inequalities, XOR Games, and Communication Complexity, presented at the Institute of Advance Study in 2009. This was a great talk! 

The following answer is a shameless self-promotion, but I don't have any other reference. I did some stuff some years ago on how to deal with "premature" local optima in local search algorithms, i.e., when you get stuck too soon in the search. However, this is not a TCS answer, so maybe out of scope for this site. The paper is this: Ant Colony Optimization with Adaptive Fitness Function for Satisﬁability Testing. Also check the references. The idea is to make your fitness landscape to adapt during the search. To do that, you add some weight schemes to the objective function. Then you change the weights according to some rules based on how good or bad your doing. Please consult the paper about how to define these weight schemes. The target problem in the paper was random MAX-SAT, because that problem has a bunch of feasible solutions with the same fitness, and that gives you a lot of plateaus, and in general evolutionary algorithms don't work very well for MAX-SAT. So changing the landscape really helps. However, it should be easy to adapt the weight schemes to different problems. 

There was a talk at last year's AQIS'10 (Asian Quantum Information Science Conference) by Harry Buhrman, which dealt exactly on what your asking. The title was Quantum Non-locality, Communication Complexity, and Grothendieck Inequalities. I have the proceedings with me, and sadly there is only a 1-page abstract of his talk. However, the references give a good account of what you should check. I'll transcribe it below: 

The IEICE Transactions from Japan has a very fast review process. The first round of review takes at most 3 months, and the second round between 2-3 months. So, in 5-6 months you get a definitive answer. I don't know the numbers, but several professors told me that's the case, and I confirmed that by personal experience. These journals are very popular in Japan, with many papers published every month. 

As @Steven Stadnicki points out in his comment, acording to your question, the contents of the matrices are not important here, but the number $k$ and $n$. Therefore, you can look at $\mathcal{F}$ as a family of intersecting $k$-subsets of $\{1,\dots,n\}$. You can derive properties from something called a Sunflower. Definition: A sunflower with $m$ petals and a core $Y$ is a collection of sets $S_1,\dots,S_m$ such that $S_i\cap S_j=Y$ for all $i\neq j$. Moreover, the sets $S_i\setminus Y\neq \emptyset$. Sunflower Lemma: Let $\mathcal{F}$ be a family of sets each of cardinality $k$. If $|\mathcal{F}|>k!(k-1)^k$ then $\mathcal{F}$ contains a sunflower with $k$ petals. You can make relaxations to the sunflower, like the petals not being intersected by a set of size smaller than $c$. In this case we have the following lemma. Lemma: Let $\mathcal{F}$ be a family of sets each of cardinality $k$. If $|\mathcal{F}| > (c-1)^k$ then $\mathcal{F}$ contains a flower with $k$ petals. There are more properties that you can look for in the book: Extremal Combinatorics with Applications to Computer Science by Stasys Jukna. The definitions and lemmas above are from chapter 7. Take a look at the excercises, and maybe also chapter 8 on Intersecting Families. 

This book is great for explaining lower bounds, if you have access to it. Introduction to Circuit Complexity by Heribert Vollmer. I just finished reading it, and although it says "introduction" is a very deep treatment on circuit complexity. It explains with details all (most popular) techniques for proving circuit lower bounds in chapter 3. 

There are well known techniques for proving lower bounds on the communication complexity of boolean functions, like fooling sets, the rank of the communication matrix, and discepancy. 1) How do we use these techniques for lower bounding partial boolean functions? More specifically, how do you count the rectangles in the communication matrix? Do you also count the "undefined part" of the function? Or do you leave it out? Another thing, what are the known relations between the communication complexity of total and partial functions? For example, is there a function $f$ with a promise version of it, call it $f'$, such that $C(f)\neq C(f')$? (here $C$ could be any communication complexity measure like deterministic, probabilistic with all its flavors, quantum). A concrete example is the equality function EQ, and its promise version defined in this paper denoted as EQ'. It is known that $C(EQ)=n$ and $C(EQ')=\Omega(n)$ where $C$ is the bounded error communication complexity (see the paper). There is no matching upper bound here, but they are asymptotically the same. 2) Is there a function defined in the same spirit of EQ and EQ', but with a different complexity? 

My answer only applies to Japan, I don't know about other countries. There is a special position termed "Research Student". I did that for 6 months before my masters . I know that in general any student (foreigner or japanese) can do this. However, it is very common for foreigners to do this before starting the masters or phd program. It gives you adaptation time, and you also start studying the basics of your future research. Most student also start preparing for admissions. During my time as a research student, I worked as a research assistant for my current advisor in different projects. I also took the time to really study quantum computing, which at that time I had 0 intuition for quantum mechanics. That was perfect for me, before doing any serious stuff. EDIT: Q: Are research student positions elusively research positions (i.e. no mandatory coursework)? A: There is no mandatory coursework for research students. However, there are a lot of things you can do. In my case, I started directly doing research (mostly learning the basics), prepared myself for admissions, and colaborated in some projects. I also attended group seminars, school seminars, etc. You gain access to all activities in the university. You can also attend classes if you want, but that doesn't count for coursework in the graduate course. Another example is when you come from another university (from anywhere in the world) and you want to learn the tools of the trade in some field. So you talk with a professor, and if he agrees you can spend some time in his group as a research student. Q: Also, are you expected to then stay for a Masters/PhD at the institute where you held the research student position? A: No, you can change universities if you want. I have a friend that did exactly that. This is a position that doesn't give you a degree nor a diploma or anything, besides the experience. It is very important also to note Okamoto-sensei's comment below. Specially, note that you don't get paid for doing this, unless 1) you have a good scholarship, like MEXT's scholarship; or 2) you get some funds from a company or a professor looking for phd students. To give you and idea, I post a couple of links explaining the requirements to be a research student. The first link is from my own university, and the second is from the university of Tokyo: 1) $URL$ 2) $URL$ You can also find more information here $URL$ 

Job Briet, Harry Buhrman, Troy Lee, and Thomas Vidick. Multi-player xor games with clique-wise entanglement. Jop Briet, Harry Buhrman, and Ben Toner. A generalized grothendieck inequality and entanglement in xor games. link R. Cleve, P. Hoyer, B. Toner, and J. Watrous. Same as the link given in Marcin Kotowski's answer. B.S. Tsirelson. Some results and problems on quantum Bell-type inequalities. Hadronic J. Suppl. 8(4):329-345, 1993. 

This is a classic! Probabilistic Computations: Toward a Unified Measure of Complexity. Andrew Yao. FOCS'77. Here Yao gives his famous Minmax principle. I read it and is so easy to read and fun. And the proof is just beautiful and the result amazing. 

How about this result on quantum computing. Mario Szegedy. Quantum Speed-Up of Markov Chain Based Algorithms. In FOCS'04. He extends Markov chains to quantum Markov chains, and shows that the quantum hitting time is upper bounded by the square root of the classical hitting time. He does this by relating the singular vectors of the classical Markov chain to the singular vectors of the quantum Markov chain. Before this paper, there wasn't any known relation between random and quantum walks. I cannot imagine how to do the same using non-spectral techniques. 

My questions are: 1- How do I get the bound reported in other papers? 2- You can see from the figure, that the reported lower bound (green) also lower bounds Paturi's bound and the adversary bound. Isn't that weakening the "real" lower bound? For example, if Paturi says that for all symmetric functions we have this bound, then how can you get a matching upper bound for quantum counting ($\sqrt{(t+1)(n-t+1)}$)? Isn't that upper bound violating Paturi's theorem? 

Now let $Thr_t(x)$ be the threshold function, i.e. $Thr_t(x)=1$ if $x\geq t$. In this paper (cf. section 8, page 15) says that $\widetilde{deg}(f)=\sqrt{(t+1)(N-t+1)}$. Observe that for the threshold function we have $\Gamma(Thr_t)=|2(t-1)-n+1|$, because when $|x|=t-1$ the function changes from 0 to 1. Am I right? If I apply directly Paturi's theorem to this value of $\Gamma$, I don't get the lower bound on the threshold function reported in other papers. Is the value of $\Gamma(Thr_t)$ above correct? What am I missing? Edit: I also tried computing the quantum adversary lower bound for threshold. First, let's review the theorem. 

There is a nice paper that helps visualize the internal structure of SAT instances. See Visualizing SAT Instances and Runs of the DPLL Algorithm by Carsten Sienz (Appeared in SAT 2004). Basically, it draws a graph which the author calls "variable interaction graph" (according to some rules) to visualize the relation between the satisfied clauses. The author shows this by several partial runs of DPLL. The main claim is that these visualization techniques could be used to detect structure and design an appropiate algorithm for it. However, it is still not clear how can we detect efficiently structures like the one presented in the paper. It is well known that SAT algorithms for one specific problem behave poorly in other problems. So there is "no-free-lunch", although this claim cannot be formally stated as far as I know. 

First I'll give some background and define approximate rank. A good reference is the recent survey by Lee and Schraibman Lower Bounds on Communication Complexity. 

I'm not very familiar with the field, but my advisor Shigeru Yamashita is. I recommend you to check his home page. Here are some interesting papers he has: 

It will depend on the model of communication: (1) If the proof is known by both players, (2) if only parts of it is known by Alice and the rest by Bob, or (3) if only one of the players receives the proof (say Alice). Plus, if the communication uses public or private coins. For instance, in (3) with public coins, Merlin could send a copy of y to Alice, and check its correctness via a SMP-protocol or fingerprinting protocol. Then you can always communicate with Bob with $O(1)$ bits to tell him the correct answer. Also, considering the protocol in Robin Kothari's answer, Merlin could send the whole conversation in the proof, and then Alice and Bob just need to check if their parts are correct. For more information on model (3) you can check Hartmut Klauck's paper. There you will also find a MA-protocol that meets your requirements, i.e., a "verifier-heavy" protocol. For model (2) you have Francois Le Gall's paper where he studies quantum/classical gaps. For (1) I have no reference to give you. 

In decision tree complexity of a boolean function, a very well know lower bound method is to find a (approximate) polynomial that represents the function. Paturi gave a characterization for symmetric boolean (partial and total) functions in terms of a quantity denoted $\Gamma$: 

A transduction-based framework to synthesize RSFQ circuits. Shigeru Yamashita, Katsunori Tanaka, Hideyuki Takada, Koji Obata, Kazuyoshi Takagi. In ASP-DAC 2006. Transformation rules for designing CNOT-based quantum circuits. Kazuo Iwama, Yahiko Kambayashi, Shigeru Yamashita. DAC 2002. DDMF: An Efficient Decision Diagram Structure for Design Verification of Quantum Circuits under a Practical Restriction. Shigeru YAMASHITA, Shin-ichi MINATO and D. Michael MILLER. IEICE Transactions on Fundamentals of Electronics, Communications and Computer Sciences E91.A (2008) , No. 12 pp.3793-3802. 

A result by Krause says that $R_\epsilon^{pri}(A)\geq \log rank^\alpha(A)$ where $\alpha=1/(1-2\epsilon)$ and $R_\epsilon^{pri}$ is the bounded-error private-coin communication complexity of $A$ with error upper-bounded by $\epsilon$. The above was for background. Now to answer the question, Paturi and Simon showed that $rank^\infty(A)$ completely characterizes the unbounded-error communication complexity of $A$. They also showed that this agrees with the minimum dimension of an arrangement realizing the boolean function whose communication matrix is $A$. The unbounded-error communication complexity of the equality function is $O(1)$. Keep that in mind. The communication matrix for equality is just the identity, i.e., a boolean matrix with $2^n$ rows and $2^n$ columns with all ones in the diagonal. Let's denote this by $I_{2^n}$. Alon showed that $rank^2(I_{2^n})=\Omega(n)$ which is tight up to a logarithmic factor (with the theorem by Krause we obtain $R_\epsilon^{pri}(EQ)=\Omega(\log n)$). The identity matrix has full rank, i.e., $2^n$. Thus, we have exponentially large separations for $\alpha=2$ and $\alpha\to\infty$. 

In my opinion, I like the following paper: Katalin Friedl, Gabor Ivanyos, Miklos Santha. Efficient testing of groups. In STOC'05. Here they define a "classical" tester for abelian groups. However, first they start by giving a quantum tester, and then they go on by eliminating all the quantum parts. What I like of this paper is that they use the quantum tester to gain intuition and use it to approach the problem. May sound a more difficult approach (start from quantum and the go classical), but the authors are well known researchers in quantum computing. So maybe for them its easier to start with that. I would say that their main technical contribution is a tester for homomorphism, which they use to eliminate the quantum parts. 

If I define $B$ as the set of all inputs with the number of 1s greater than or equal to $t$, and $A$ all the inputs with 1s strictly less than $t$, I get (after some algebra) that $\frac{mm'}{\ell\ell'}=n^2 \ln(\frac{n}{t}) \ln(\frac{n}{n-t})$. So still I'm not getting the same lower bounds reported in other papers. Now, let's compare these bounds. The figure below shows for $n=200$ and without the square roots, a comparison between Paturi's theorem bound (blue), adversary bound (red), and the reported bound from other papers (green). 

I totally recommend the draft of a book Mathematical Foundations of Automata Theory by Jean-Eric Pin. Also, you should check his home page for more automata related stuff. Note however that this books is oriented to semigroup-theory, so it depends on what you want to teach to your students. 

My main problem is that, intuitively, the complexity classes for ZK might be very different depending on if we allow the cheating-verifiers such oracle access. I cannot find any reference regarding relativized classes of ZK. If anyone could direct me to any reference I will really appreciate it. I'm aware of the Random Oracle model (RO), where all parties, even malicious ones, have access to a random oracle. But the goals, motivation, and applications of RO are not the ones I'm interested. I'm interested in relativization results in the Baker-Gill-Solovay sense. 

For any number of rounds, the lower bound on disjointness is $\Omega(n)$ (cf. The Probabilistic Communication Complexity of Set Intersection. SIAM J. Discrete Math. Volume 5, Issue 4, pp. 545-557 (November 1992)). For 1-way, Kremer, Nisan, and Ron showed that for any given $f$, $R_\epsilon^1(f)=\Omega(VC(f))$, where $R_\epsilon^1(f)$ is the randomized 1-way communication complexity of $f$ with error $\epsilon$, and $VC(f)$ is the VC-dimension of $f$. Then we have that $VC(DISJ)=n$. But in fact there is a tight lower bound for DISJ, which is $\Omega(n\log n)$ (cf. Mihai Patrascu's blog). 

Edit: The answer below is regading the existence of solutions to a given computational problem, not on the existence of algorithms. Initially, I misinterpreted the question. Answer There is a complexity class that captures this kind of computational problems. It is known as TFNP. It was defined in this paper: Nimrod Megiddo and Christos Papadimitriou. On total functions, existence theorems and computational complexity. Theoretical Computer Science 81(2):317-324. Here you'll find problems like Trichromatic Triangle, for which the existence of a solution is guaranteed by Sperner's Lemma (see the paper for the definition of this problem). You also have the following paper: Christos Papadimitriou. On the Complexity of the Parity Argument and Other Inefficient Proofs of Existence. Journal of Computer and Systems Science 48(3), 1990. In this paper you'll find: 

See the book Concrete Mathematics - A Foundation for Computer Science by Graham, Knuth and Patashnik. In Chapter 9 they explain the Euler-Maclaurin summation formula. This is a technique that allows you to approximate a finite sum by using integrals. In the same chapter, page 466, they use this technique to approximate the harmonic number (which appears a lot in several areas of TCS). It happened to me one time were I had to use it, and ended up solving an integral using asymptotic approximation techniques for differencial equations!