The server still has to wait for the entire request to be ready before returning it to the client, but declaring them as promises frees your server up to handle more requests "simultaneously". This way, the server can begin processing the next request while it waits on the first one to finish processing. Doing it the way you did it means that each request will block until it's finished. If you get many requests, it can become a problem. 

Another approach would be to make your program "learn" each time you use it. Instead of generating each combination of characters every time the program is run, cache the calculated strings to disk along with the data that allows you to start where you stopped. Then you can check your known list of possible passwords before generating more. Essentially, this is a dictionary attack too, but you're building the password dictionary incrementally each time you run your program. 

Not quite how MVC works. Your view should implement an interface. That interface won't expose anything from the UI. It should only expose the data you need to work with, not UI controls. 

There are several a lot of hardcoded strings in . Some of them may be ok as they only show up once, but the file paths and URL addresses are repeated several times. Those should definitely be stored in constants. If you ever have a need to update them, it would be far too easy to miss one of them. I should also point out that this code will only run if that exact filepath exists on the target machine. It would be much more portable to pull that file path from a config file. 

You're in desperate need of a loop. Anytime you start numbering your variables, you should consider whether a loop would be appropriate. I'm sure you did, but you probably got hung up because your assignments vary by just a little. That can be taken care of with a switch statement. I'll start by defining some constants* for the different string values we have. That way we wont' mess anything up and they'll be consistent. 

But I can't find an instance where is being assigned to. As such, you can pass it too and eliminate an entire class of possible future bugs from the code. A lot of times, we can replace good comments with well named procedures. I think this is one of those cases. 

Is really a valid month? If so, then you're fine, but I have a feeling that this would be more appropriate. 

These fields shouldn't be public. By making them public you've exposed them to the outside world. These are internal details that should be properly encapsulated. Truthfully though, you don't need them at all. I would just work directly with the arguments that you passed in. Rename them though. Your current names don't tell the client what kind of values to expect. What's an "A"? How would another dev know what to pass into this method without looking at the internals? They wouldn't. 

That's starting to look better, but wait. That second call is different than the first. Can we comfortably call it's result as well? I don't believe so. It's being called with different arguments. You have two different tests cases here and should test them separately. I showed you this method because it is okay to have a couple of closely related asserts in a tests, but you should be able to get the results into a single result variable like . 

You're not really getting any benefit from them. It would be much simpler to just use a private field instead. If you instead had some logic that was attached to the field that must be called each time you accessed , then it would be worth it. For example: 

Now my code doesn't have to type check for your class anymore. Even better, I know why you've not implemented this part of the contract and decided that this method should just do nothing at all when called. Of course, if it's not going to do anything, then we can hide it from the public interface of the concrete type by explicitly implementing the interface. 

Anything in the header is available to outside code. There's no reason for anything to have access to . We want this port set up for output and that's it. Don't give yourself an opportunity to muck with that setting after it's been initialized. Minimally, move this to the file, but practically, it's not doing much and could be removed entirely. Sure, you could still access it via , but the point of the abstraction is that this module should be the only one to access by its real name. Anything else should work with the and nothing should be setting that port up for input. 

This is where it just shouldn't matter what type of we have. The code should just work so long as the message returned from the handler adheres to the interface. We can fix this by letting each define it's own behavior. First, let's adjust the interface a little bit. 

So, this might not be quite in line with your 100% automation approach, but the best way to provide a shell script access to a git repository is to use ssh keys to allow access to your git repository. Of course, this means you either need to log on and set up that key and grant access it to Git (goodbye 100% automation) or securely copy a private key that already has access to the repository to your server. You'll probably want to keep that key someplace that requires a password to access it, so... chicken and the egg scenario. Unless your cloud provider gives you the ability to create a template that already has that key on it's file system when it's created. If you can do that, then you definitely want to go the ssh route. Your clone would look something like this. 

The code in question actually looks pretty good beyond the nit-picky stuff. It's just probably not the best approach to take. 

Note that the variable is no longer needed. Also note that this always stops execution prior to disposing of . You should use a block and dispose of in the Finally part. (This is true of both the code I just presented and your original.) Inconsistencies I like that you declare and set the connection string all at once. 

Maybe it's because I "grew up" with a language where everything is passed ByRef by default (.Net passes ByVal by default), but I don't like assigning values to arguments. 

The idea behind polymorphism is that so long as the type adheres to an interface, the client code just doesn't care what the concrete type really is. As you've noticed, this implementation requires you adjust an enum, and at least two other classes every time you add a new child type of . This isn't how it's supposed to work. Right now, the only thing does is turn a into an . This is good. It's a single responsibility, but the name isn't the greatest. It's a factory class that adapts an outside interface into an internal one. Consider a rename for it, but over all it's good. You need a class that is responsible for determining which type of to create based on the state of . It makes sense to have to update this class anytime you create a new implementation of . Don't worry about that. This here is where things get not so good. 

The minimum value of an integer is -2,147,483,648. I don't readily see a reason why you couldn't convert that value. If anything, you would want to check for values less than or greater than , but since the parameter is an integer, the compiler will do that check for you. @Nhgrif pointed out that this is an "off by one issue" that causes an exception when getting the absolute value of . I take back what I said and recommend adding a comment in the code to explain the reason for this check instead. Also consider giving a more meaningful message than . "Can not convert numbers less than '-2,147,483,647'." Would be much more meaningful to someone debugging a program that calls this code. 

Since it appears I'm reviewing your comments, I'll just leave you with one last note. This is the kind of library code that could really benefit from good XML doc comments. For example, your implementation doesn't conform to the standards (per your comments), so it would be beautiful to see the expected return value in the IDE as I'm using your library. 

Just a general comment about the code itself; it's dense. Like, really dense. The readability would be greatly improved if you used more vertical white space. 

A minor point, but what if you want to create a single threaded as well? I would rename your interface to something like so that you could have a different interface . 

6 * 38 = 228 iterations for every row. Wow. Yes. There's no wonder you had to give the OS time to operate. All of this just to set the interior color of a cell. Which is a problem as well. What if the data changes? Well.... it's going to remain the same, forever as far as I can tell. There's nothing here to revert it. There's a better way. Use some conditional formatting to do this. No VBA needed. Just craft a formula that returns a True/False condition. I can't claim this one is perfect or tested, but it should get you started. 

Why not just make them sequential at runtime? Do you really need them to be stored gapless in the database, or do you just need them to be gapless when you go to use the data? I suspect it's the latter. Consider this sample data: 

If you're going to catch an , do something with it. Don't just swallow it and ignore it entirely. You really shouldn't ever catch . You should find out what exceptions could be thrown and catch only those. Otherwise, you could be catching exceptions that you can't recover from. You should only catch ones you know you can recover from. 

But really, never mind that because the real slow down here is opening and closing all of those workbooks. I recommend looking into connecting to those workbooks using ADODB recordsets. That should significantly speed up the process. 

This is really very good in my opinion. I like your use of interfaces, and an abstract base class seems to be the right design choice to me. The double checks here bother me a little bit though. 

Let's check the source sheet for data prior to doing anything else. Remove dead variables & and all related dead code. Change from a variable to a constant, it's value no longer changes. 

Another thing to note is that your compiler offers some built in methods. Add and replace your hack with . 

Do some defensive programming and check all of the incoming args before the real work of your method begins. If something is out of range, or otherwise invalid, raise an error with a meaningful and clear message for the developer calling your function. For example: 

Take note that I added a single line comment before the closing "bracket". Why did I do that? Watch. 

This really needs to be replaced with a constant. A meaningful name will go a long way here. Consider using something like . Whatever you choose, do not use . It's tempting, but then you'd be encoding the value into the identifier. 

Mat's Mug mentioned your method. I don't like it either, but I'm not sure that I agree with his suggestion. I think it could be cleaned up by simply grouping the logic together correctly. 

Note the use of a named parameter to make it clear what represents. I also probably wouldn't inherit from dictionary. 

Your Ruby-Fu is well beyond mine, so I can't offer a "review" really. All I can do is point out a bug, that is really just a misunderstood requirement. In your code, you don't allow ships to "touch", or be placed in adjacent squares. This isn't one of the rules. Ships are allowed in adjacent squares. They just can't (obviously) overlap and occupy the same square. This opens up a strategy against your "AI"'s placement that wouldn't otherwise exist in the game. Let's say I know where the aircraft carrier is. Once I know that, I've eliminated an additional 16 squares from my choices, greatly increasing my chances of finding another one of the ships. 

Don't worry about performance until you've proved that you have a performance problem. Make your code readable and maintainable. A stream would solve this nicely. 

You should use a variable to store the result of this at the beginning of your query and call it each time you would use it later. Something like: 

Which leads me to believe that there's no reason to derive a child class. Instead, change the name of to and make it . Do not derive from . Instead, just have a static class with a bunch of static methods that return s. This will remove the need to have any constructor at all. 

As I think you know, your grammar allows strings like and . This is definitively a bug, and a damn hard one to squish. Part of the problem is that Roman Numerals are not a context free language. (i.e. We want to add in this case, but subtract in that case.) I think you were right about counting the tokens, but I took an approach of doing it in the lexer, which I'm not sure was a good idea. It might have been easier to do at the Parsing stage, but it seemed to make sense to me that this be a Syntax error. Anyway. Here's what I did. I derived a subclass from the Antlr generated . This class counts the number of consecutive tokens and alerts any that there was a SyntaxError. 

Error Handling Anytime you muck around with or settings, you need to have an error handler. It's an absolute must. It can cause all kinds of confusion for the user if something goes wonky and an error is raised that terminates execution. Without the error handler, your user will be left with Calculation set to and SreenUpdating set to False. The code: 

This doesn't do what you think it does. The only variable declared as a here is the very last one (). The rest are declared as . Properly declaring them as types will remove some overhead. 

As I commented, using this method to fake a constructor makes setting a variable to the default instance looks wrong and that's half the battle. We want buggy code to look wrong. We need it to stand out from the thousands of lines of boring code that works just fine. 

You're not actually setting the list. You're appending to it. Setting it twice will result in simply adding all of the new values to the end. 

At this point there's still some duplication, so you could use the concepts from #1 to extract the inner loop to its own subroutine. Some other things you could do better: 

Disclaimer 1: I'm the other dev working on the project. Disclaimer 2: This will be more of a pie in the sky design review than code review. 

I can't say how I would do this differently, because I can't understand what it does. And that is a problem for any future maintainer. Let's take a look at . 

This returns the range of numbers [2..10]. Which is fine, I guess, but it is surprising and as such deserves a doc comment describing what it does. It took me a minute to parse it, which was time that could have been saved with a good comment. Like I said, I don't like it. It should return an empty set, but at that point, just use . If you decide to keep it, I'd move it to a static class of it's own. It doesn't belong in the code behind, nor does it logically group into a class. 

Normally I would say that magic numbers are a bad thing and are to be avoided, but since we're explicitly talking about numbers, I think you're justified in their use here. Why are you doing this? 

During our discussion in the comments, it became clear to me that you're mixing the business objects with how they're displayed. How they're displayed has little to do with how you model your business objects. Or, at least it should. You hear the word "model" tossed around a lot, but in reality, there are two different kinds of models. There are business models, and view models. Many times these are identical, sometimes they're not. In this case, I think it's clear that the business model and the view model are almost, but not quite, the same. Right now, the business wants all of this data in what amounts to a spreadsheet, but what happens when they see the beta version and decide they were wrong and would actually like separate detail screens after all? Then you would have no business or view models to represent these subsets of data. Note that I do not believe this to be a YAGNI situation, because it's very likely that this could happen. If not at beta time, perhaps 6 months from now. Either way, it's likely that you'll need to access these business objects on their own at some point in the future. Set yourself up for success. Minimally, this work will help you to clarify your code. I imagine your class looking something like this.