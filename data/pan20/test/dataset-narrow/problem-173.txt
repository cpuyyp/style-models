So you have both production and guest Untagged on the UniFi ports? That won't fly... The guest network should be Tagged as it goes to the UniFi, and the UniFi system should know what VLAN the Guest network is on. 

And many boxes are far more limited, really - 255 VLANs picked from 1-4093 (not 4094) is the case on some of my switches. The numerical range is available but the switch can only use 255 individual numbers from it at one time. So far this has never even come close to being a practical problem here. 

It is better to be in the same channel as your interfering signals (if you can't find a free channel) rather than in overlapping channels that are not the same channel - if you are in a nearby channel, there is interference, but no communication. On the same channel, the spec requires some cordination to share the channel. Often your best actual bet is to run more wire, and place your APs at lower power nearer your end use devices. Using the 5GHz band is also very helpful as there are more non-overlapping channels in most of the world, and it does not penetrate walls so well, keeping neighboring signals out of your space (or at least greatly reducing them.) 

It's MOSTLY true, but there are exceptions, primarily in largely radio-dead rural environments, and with the application of high-gain sector antennas. A high gain antenna concentrates the radiated radio power (within local legal limits, of course) to a particular physical area, and also has the same amplifying effect on a signal originating from that particular physical area, even if the antenna radiating that signal is a standard low-gain omni-directional antenna. This only works in relatively radio-dead (but tree-free) rural areas because the antenna will also pick up any competing noise source in its "beam." I emphasize this point since many people jump to the conclusion that it can be applied anywhere, and that's not even close to true. I have personally tested my system (16 dB 2.4 GHz sector) and got acceptable performance to 435 meters before I ran out of test range, going to an ordinary (crummy) wifi antenna in a laptop, and wifi in a cell phone. My actual production application for this system is more in the 200m range, feeding athletic fields and backstopped by a hill with no houses or transmitters on it. An online acquaintance has a ski-area setup with mountaintop sectors that typically operates to normal hand-held devices at 1-km ranges - but I reiterate that this only works because it's the only thing in the area operating on those frequencies, and there are no trees to stop them. In general, in the real world, if you want wi-fi over whatever you mean by a "1km distance" (a 2km circle, a 1 km square, etc.) you build a backhaul (preferably fiber, or via point-to-point links on frequencies you will NOT be using for WiFi) and you hang a large number of access points which are serving a much more reasonable radius each, such as 100m (in a clear field) or 30m in urban environments. Or you skip wi-fi entirely and head into 3G/4G cell-phone data schemes. 

Killing DHCP does not make a network secure (or "restricted") against people connecting to it. Look at something like 802.1X and Remote Authentication Dial In User Service RADIUS for that application. It's trivial for an attacker with physical access to connect to the network, gain the general parameters by examination, and assign themselves an address. You evidently have more than one DHCP server on the network, if you turned one off and one is still running. 

Well, you normally don't make the port that the PC "on the VLAN" connects to a trunk, and that's probably the bulk of your problem. So the PC isn't actually ON the VLAN, regardless of what you set its IP address to. The PC conection port should be set to be a member of the VLAN, the VLAN should be that port's PVID, and the VLAN should go untagged out the port, and tag anything coming in untagged from that port. Normally you also want to remove that port from the "default" VLAN, or the VLAN your LAN runs on if you use a non-default VLAN for that purpose. An untagged, PVID'd port on the VLAN in question is the usual way that VLAN problems are debugged. In your case, that should also solve the problem, assuming the SonicWall and its port are set up right. In more extensive setups, you make sure that the "plain untagged port on the VLAN" works as expected and then you can run down problems with things that used tagged/trunked ports, knowing that if the VLAN gets to the switch you tested the untagged port on, it was working there. So, your LAN is on VLAN1, untagged, the SonicWall port from the switch should have VLAN1 as the PVID untagged, but also have/be on VLAN12, tagged. The PC-on-the-VLAN12 port should be removed from VLAN1, have VLAN12 as it's PVID and be untagged and on VLAN12. The PC does not need to know anything about what VLAN it is on. 

I have a few 3Com Baseline 2824 SFP Plus gigabit switches, 3C16487. These are apparently also known as HP JE738A (after HP bought up 3Com) though mine are not badged that way. One does need to find this out to get any useful results from the HP website. The Management software they came with was 1.0.0.7 - I just got them updated to the latest I could find 1.0.1.1 though it felt like I was crawling through a cobwebby basement at HP's website to find that. The download file is a windows .exe self-extracting archive... Unfortunately, the new management software does not solve my biggest issue in using these switches many places - a terrible VLAN implementation, where ports are EITHER "desktop" and untagged and only on one VLAN, or they are "Uplink" and everything is tagged. I frequently have need of "this VLAN tagged and this VLAN not tagged" on a given port, so this limitation makes them far less useful than a Baseline 2948 I have that does manage the tagged/untagged concept â€“ presumably a major difference between the 2800 and 2900 series. I suspect that's as good as they can manage, and I'll just have to find them homes where they can be "one step above a dumb switch," but I thought I'd ask if anyone knew otherwise, in case it turned out I was missing anything. Responding to comment: Is there any way (firmware version I have not located, etc.) to get a more modern approach to VLANs on this model of switch, where ports can be tagged or untagged on different VLANs, rather than this extremely limited approach to VLANs where certain ports are "uplinks" and all traffic is tagged, while other ports are "desktop", limited to one VLAN, and untagged only? 

FWIW this is a great question and I can't disagree with @ytti in that this has a lot of potential to go down a theory/academia rabbithole. From a practical perspective, placing the pollers close to the objects being polled is what you want to do. I'm not a distributed systems expert/SDE, but I'd imagine that any NMS that's designed to be distributed should already have functions in it to separate out db insertion timestamps from actual polled SNMP data and its own timestamps. It's still not an easy problem to solve, but as ytti has already said (and I agree with), doing the db inserts shouldn't take priority over data gathered from polling. Those have the luxury of being wrapped up in TCP for better data integrity protection. With actual SNMP polls and traps, you have "best effort" times two to contend with - number one being UDP obviously, and number 2 being process management/"data integrity" (ie counters being accurate etc) on the box that you're polling. Sometimes a box just starts to choke and returning numbers via SNMP takes a backseat to other things. 

So think of this like a row entry in the table, and we've picked out column 1 from the row, which is ipNetToPhysicalPhysAddress. So in this particular entry, the part is the index of the entry. The 1 is the ifIndex of the interface that the ARP entry is learned on, 'ipv4' is the ipNetToPhysicalNetAddressType which is one of these: and finally, the IP address of the ARP entry, 10.200.17.34. These three things make up the index for that entry. Then the value for ipNetToPhysicalPhysAddress at that specific index is the MAC address . 

What problem are you trying to solve? Most CDN's work off of Anycast/GeoIP to serve the requested content as close to the source of the request as possible. I'm also not sure what you mean or what you're trying to accomplish by "finding out what users are doing" - CDN's are designed to be transparent to users to provide a better user experience when browsing the web (the biggest use case for a CDN - there are obviously others). I'm having a tough time thinking of what an average user would use a CDN for for reasons that would warrant monitoring of this nature. If you did want to build a lookup table or a database, it shouldn't be that difficult, since you could query whois or an IRR to get IP/routing information (assuming the CDN operator does the Right Thing and puts their info in the IRR - most of the big ones do). I'd start with figuring out which CDN's own which blocks and then cross-referencing which IP belongs to which block, and then you could make a distinction on who owns the CDN IP that your users were hitting. It's possible, but it will get hairy very quickly and may very well be an exercise in futility (thinking if CDN's resell services to other smaller companies and solutions like CloudFront). 

I've been spending the last week or so troubleshooting some (maybe related, but probably not) issues with Quagga. I have a test router - 7204VXR-NPEG2 running 12.4(24)T6 - with a single BGP session to a Quagga host. The only BGP session on the 7204 is with the Quagga box. This is an eBGP session. There is literally zero policy configured on either side, yet I get this without fail in output: 

HSRP is Cisco-proprietary. VRRP is not (RFC 5798). There are probably other nitty gritty technical differences, but that is the major one. And IIRC VRRP doesn't have the ability to do interface tracking, while HSRP does - might be wrong on this though. edit: RFC 5798 gives v6 support to VRRP. The original RFC was 2338. 

On most hardware/platforms, the Ethernet checksum is handled by the NIC before it's passed up to Wireshark. There's no way (or really any reason) to pass this up to higher layers because of the fact that the NIC does this in hardware, unless you've coded the hardware/driver to behave this way. Refer to the Ethernet wiki on wiki.wireshark.org for more information. 

Talking about terminology you've really already said transport which I think is what that type of service is most commonly referred to as. Sometimes folks will also refer to it as a "tether". You have another option of moving the interface on your side to the same router and then setting up eBGP multihop*** between you and your provider. Yes, you lose redundancy on your side, but on the opposite side it's going to the same router anyway, so that's kind of a moot point. This also eliminates the need for the provider to do eBGP multipath, in case they're not willing to do that with you (but I've found that in general most providers are fine with turning this on, if it's not turned on already). If that doesn't seem plausible then announcing two /25's is likely your best bet, unless of course your provider is willing to turn on (again, assuming they haven't done so already). ***Doing load balancing with eBGP multihop in your scenario will involve the following: 

The router will not do this by default, unless you enable Proxy ARP on that router's interface(s), but best practices dictate Proxy ARP should be disabled wherever possible. However, host A should know by analyzing its own subnet mask (binary AND against its own subnet mask and Host B's address) that Host B is on a different network, and instead send the traffic to its default gateway (if one is configured), and if necessary, Host A will ARP for its default gateway's MAC address, which the router should respond to when appropriate. 

If you guessed the third option, you'd be correct, as this is the most specific route to the destination address, and thus will be the route that the router uses to send the traffic to that IP address. Now, with that said if you get your own IP space from an RIR and you want to connect to the Internet, you will be required by most transit providers (ISPs) to announce this IP space with a prefix length no longer than a /24. The point of doing this is to keep the global routing table of the Internet as small as possible. In the example you provided, if "the site" has an entire /16 of their own IP address space, that creates a possible 256 subnets (routes) of a /24 mask length. Only under certain circumstances would the site want to do anything besides announce a single /16 prefix to the Internet Service Provider in order to route traffic to their network. This concept is referred to as route aggregation and is generally regarded as a desirable thing to do whenever possible, especially when connecting to the Internet.