Define the local group for the secondary AAA method for authorization, that way if the servers are down it'll use the local priv level for the user account (make sure it's set to 15 for full access) and continue from there. 

There are several in different regions of the world, see link above for map There are 12 companies that operate them, they are funded by whatever their primary business is There are 13 root DNS servers, there is therefore redundancy The root servers aren't the ones that generally handle requests, they are primarily used for spreading DNS information so if I register XYZ.com and point is to my IP address, my provider will send it to the root server for it to be propagated. The root servers are surely load-balanced for the sheer volume of queries, I'm not sure on that exact number (approximate volume can be found here: $URL$ that being said DNS is extremely light weight and connection-less (UDP), a high volume application provider like twitter or facebook has much more powerful systems behind it. 

The active/active cluster allows you to split traffic into groups so the A node handles traffic for some networks while the B node handles traffic for the others, in the event of a failover the stable unit will handle traffic for both A&B traffic groups (assigned on a per context basis). Active/Standby cluster handle all traffic on a single node while the other is brought into use only in the event of a failure. This is generally used when you're going to have more traffic than a single node can handle, if one of the units fails, instead of stopping all traffic destined to the failed ASA it will run in a degraded state until it is replaced. So essentially you're stretching you're hardware and actually utilizing it taking the risk of degradation if there's a failure instead of paying for a standby unit that essentially never sees any traffic pass through. Edit: Forgot to clarify active/active is only available for multi-context mode since it would serve no purpose otherwise since you couldn't create the groups 

You're buying SIP Trunking from a provider, so that you don't have to do all the work yourself of connecting to the global telephone network. If you wanted to "roll your own" SIP trunking service connected to the PSTN, you certainly could. It would just be extremely cost prohibitive if that was not what you were in business to do. In 99% of cases it is simply not your core business, so it doesn't make any sense to waste resources creating that connectivity. The only real times where you don't buy SIP trunking, is when you are connecting systems that you control. For example to connect your PBX to your voice mail system. In most other cases, you purchase the SIP trunk capacity from someone who has already done the work of connecting their systems to the PSTN. 

You're not alone, there is often confusion about the Forwarding Virtual Server, and what role it serves in an F5 LTM. Not having watched the video in question, I can only speculate on exactly what Keith Barker said/why he said it. However, knowing the high quality of his other training videos, I can assume that the following is what he was driving at. Essentially, think of it this way: 

I have understood that real networks have routing changes, leading to out-of-order delivered IP packets. Real networks also have frequent packet loss. However, what I have not understood is why could a perfectly operating network in addition to out-of-order and lost packets deliver packets as duplicates. What could cause delivery of such duplicate packets? Could spanning tree protocol (STP) before converging on a spanning tree cause duplicate packets? Note that I don't currently have a network that would frequently duplicate packets, so this is more of a theoretical question than a practical one. 

When transmitting TCP over IPv4 over Ethernet, there are three levels where checksum (or CRC) is used: 

Another reason: if the time of a HTTPS client is significantly different from the time of a HTTPS server, the connection may not work. I have observed this once, when a laptop had time that was off by probably several months. No HTTPS site worked. Fixing the time allowed HTTPS to work. I'm not sure if this was connected to certificate validity or something else, but the effect of HTTPS not working with severely incorrect time is true. Of course, in a typical switch lifetime of 10 years or so, it is unlikely that the clock of a switch would be severely off so much that HTTPS does not work. This also applies only if the switch implements HTTPS. Some insecure managed switches may support only HTTP. 

As ytti pointed out in the comments above, this can also vary greatly based upon the datalink/network technologies we're discussing. 

Install switches capable of running MST (Multiple Spanning Tree), which allows you to create VLAN to Spanning Tree mappings. (Your core switches (Dell 7048P) DO support MST, but the 5548P switches do not.) You could assign all other VLANS to MST Instance 1, and then assign VLAN 3 to MST Instance 3 (instance numberings are just for example). Then you would tune the settings so that the root bridge for MST Instance 1 is your core stack, and root bridge for MST Instance 3 is the Shipping switch. Install another vendor's switches which are capable of creating a Spanning Tree instance for each VLAN. It is called different things by different vendors, PVST+ in Cisco, VLAN Spanning Tree in Juniper, etc. Similar to MST, tune the Per VLAN Spanning Tree instance for VLAN 3 to make the Shipping switch the root bridge for that instance. 

I don't believe there is a way to directly poll the results of the via SNMP, but you can certainly poll for the IP SLA results and calculate it yourself. Using the CISCO-RTTMON-MIB (1.3.6.1.4.1.9.9.42), you can check the timeout value of your reachability checks, take the true/false value it returns and do the in whatever scripting language you're using to poll via SNMP. 

You'll configure and allow hairpin NAT on your SRX ($URL$ make sure to allow the traffic from the VPN zone to the other VPN zones for services that are needed. Depending on your setup you'll either add the customer network list to the protected networks for split tunneling on the clients, if it's not split you'll don't have to add anything client side. On the site to site VPNs you and your customers will have to add your VPN subnet to their cryptomaps so the client VPN traffic will be encrypted and forwarded to the remote sites. If you are using a pulse appliance for the VPN the configuration could be more simple if you just NAT it out of the pulse box to an already trusted network, that way the traffic appears to the SRX as already coming from the inside and the client sites will already know of the network that it's coming from so no further configuration on their end would be needed. 

To have the router forward dhcp packets you'll need to configure dhcp-relay on each of the router's (sub-?)interfaces that aren't local to the DHCP server. 

You are correct this is a VoIP configuration. This is part of the configuration for CVP call center survivability. If this site lost it's connection to the Internet or WAN (however its connecting back to your Data Center), the 2800 would take over call processing for the IP phones. It is used in combination with the standard SRST functionality on Cisco's ISR and ISR G2 platforms. SRST keeps the phone operative and receiving/placing calls and CVP Survivability keeps your call center functioning. You can read more on CVP survivability here on the Cisco Support Forums. It says, in part: 

Wow I had to dust off the cobwebs there, it has been a long time since someone mentioned Long Reach Ethernet. I'm not aware off-hand of any vendors currently selling/supporting LRE equipment for use in the enterprise... To find the Cisco page on Long Reach Ethernet, I had to dig into the "Wayback Machine". (Looks like Cisco long ago took their page down.) Cisco LRE Archived Page: 

This will cause a temporary outage of the VPN connection, but in most cases I've seen, you're only doing this because the tunnel is already down. All things considered though, it is easier to log into the CLI and reset the tunnel, but I know some folks who are addicted to the ASDM. Source 

For encrypted traffic, really, the only thing you can find is the host of the URL, the port and perhaps the scheme. You find the host by either of the two ways: 

Ethernet switches have a learning process through which they gradually begin to understand the network topology -- which MAC address is behind which port. When seeing a port to send a frame with a certain source MAC address, the MAC address table is updated to indicate that the source MAC is behind the port that sent the packet. Now, when moving a computer to another switch port, it typically after a while sends a frame that teaches the entire network its new location in the network. So, the network will eventually learn the new location of the computer. My question is: do typical Ethernet switches have in addition to this MAC address re-learning a timeout for the MAC address entries in the table? This would be similar to the ARP table timeout in endpoint hosts. If so, what is the range of typical default values for MAC address timeout? 

Telnet belongs to the OSI layer 7 (application layer) and IP belongs to the OSI layer 3 (network layer). At the network layer, the protocol is indeed connectionless, and at the application layer, it is indeed connection-oriented. What solves this impedance mismatch, then? It is TCP. TCP works at OSI layer 4 (transport layer), and provides a reliable connection-oriented infrastructure on top of a connectionless network. So, telnet doesn't directly run on top of IP. There is TCP inbetween. But, it is not incorrect to say that telnet runs on top of IP, as the OSI layer 7 protocol indirectly works on top of the OSI layer 3 protocol, being a higher-layer protocol. 

Are you talking about layer 3 traffic for vlan interfaces that can be seen with 'show interfaces vlan.### extensive', if your trying to find it per vlan in total including layer 2 traffic that's not a capability of the device. The only ways to find the layer 2 traffic rates would be to write a script gathering the interfaces that are in a specific vlan, parse the output for rates and then add them together or in a monitoring application create a view that has the all the interfaces in a vlan and show you the throughput of them, or with SFLOW you could have the device send you the stats and again parse the data somehow to add them together, but this again would mainly layer 3 data (it'll show you inter-vlan communication rates as well though at least). 

Just turn NAT off and the firewall (or open needed ports) on the remote APs, add routes to the remote subnets pointing to the outside interface address of the Router/AP at the remote locations. Bridging will work but will come with a lot more configuration and opens up more problems from in operation. DHCP over WAN will cause local resources at the remote locations to become unavailable if the main site or the connection goes down. Also DHCP over a wireless WAN link can lead to problems if that link is ever saturated or if it get's affected by weather conditions. Also you'll have to think about where your gateway is going to be. Also those links will now have all layer 2 traffic on it when it wouldn't need to be. I don't know the bandwidth of them or current utilization but this could issues that are easily avoided. HTH, Let me know if this makes sense or you need clarification. 

This changes the setting for all IPSec SAs on that router. To verify the global IPSec lifetime, issue the command: 

Have you taken a look at the OID in the RFC1213-MIB? (OID number 1.3.6.1.2.1.4.21) I utilize this to pull the routing table out of several devices. It is referenced by RFC 1213 which, on page 33, gives the following information: 

Another alternative would be to filter the output if you need the exact interface names and switchport info (for scripting purposes for example): 

The router sends the initial request, and simply waits for a well-formed answer from the Radius/TACACS server. There are no active "keepalive" style health checks; the router doesn't ping the server and look at response-times or anything like that. What the router does next, depends on your configured criteria. In general, once the timeout expires (default is 5 seconds), or if a malformed response is received, the router will try the secondary server or fail down to the next configured authentication method. Radius, unlike TACACS, can also mark a server as "dead" and cease to try authentications against it for a preconfigured amount of time. See the following settings to tweak this behavior: Timeout Configuration: 

So before the explanation you could configure a separate OSPF area (or possibly the second ospf process) that is purely for the DMVPN, that way the hub is the DR for that OSPF instance, you can initially make the cost higher to go over the DMVPN than adjust the cost when you're ready to cutover. Another solution could be to run EIGRP over the DMVPN instead since it's all Cisco equipment you don't really have to worry about interoperability, but seeing how you already run OSPF in your LAN you're probably much more comfortable and experienced with it. The only other option (I'm aware of at least) would be to a dual hub topology which may break some things since you you already have L2L tunnels to each site on one of the hubs, I've never had to attempt to configure this in tandem though so I'm unsure what the result would be. You may want to do this after the fact though anyways in order to have some redundancy should the DR go down. The reason that this needs to be configured this way is because the hub is what creates the NHRP mappings in between all the sites, with the nhrp multicast map each site sends it's updates to the hub and the hub then forwards it onto all the other spokes. The spokes learn of the routes in the NHRP 'cloud' but since the DR isn't part of that topology it has no way of sending updates through NHRP since the BDR doesn't send out updates until it becomes the DR, with no way to forward the updates there is no way to propagate the information needed for the spoke-to-spoke tunnels. Furthermore the spoke routers cannot form an adjacency with the DR making it since as defined in the RFC 2328 'On broadcast and NBMA networks, all routers become adjacent to both the designated router and the backup designated router' Reference Sec. 10.4 Let me know if this helps or if you have any more questions! 

You should consider that most CSMA/CD networks although in theory using CSMA/CD in practice are really switched full duplex networks where collisions cannot occur. So, scaling up the speed does not change the situation at all. What about real CSMA/CD networks, then? If you scale up the speed and keep the maximum allowed network size constant, you must scale up the minimum allowed packet size. Otherwise collisions cannot be detected. Eventually, the minimum allowed packet size exceeds whatever packet size is most common in your network, and then in that case you must insert dummy data to the end of the packet so that collisions can be detected. So, if increasing the speed is taken to the extreme, utilization will actually become lower. 

Because data can be corrupted when in the computer's packet buffer memory, not just when traveling over a link, good protocols implement their own checksumming even when operating over TCP, as the checksum of TCP is not that reliable. None of these three checksums are cryptographic quality. For example, the Git version control system protects all data using cryptographic quality SHA-1 (that unfortunately has been recently found to suffer from collisions...) If TCP was designed today, it surely would use a 32-bit or even 64-bit CRC instead of the 16-bit Internet checksum.