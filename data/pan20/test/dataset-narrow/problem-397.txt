There is an answer on Stack Overflow to the question Show a one to many relationship as 2 columns — 1 unique row (ID & comma separated list) which demonstrates how to create a user-defined aggregate in Informix that functions more or less like the GROUP_CONCAT aggregate in MySQL. You can then easily use this to solve the problem in this question: 

There's no need to update statistics on a view in an Informix database. Indeed, AFAIK, there's no way to do so; statistics are not stored for views. 

I'm not immediately sure how to interpret the 'nativecode=08004' part of the message shown. In decimal, error -8004 is about 'Illegal FLOAT constant' and is for one of the Informix SQL compilers. In hex, it corresponds to 32772 decimal, but that isn't a known error number. If it is an SQLSTATE value, then … hmmm, I'm not sure how to find out the interpretation of it. I did a rather specialized search and came across: 

Don't put quotes around things that aren't strings! You have (with some newlines and one space-after-comma added): 

I'm not sure which is best. If the relevant file is in the ILS, then that's simple. Copying a locale file is mostly straight-forward, but you need to consider what will happen if that's not available. 

In an Informix database, there is not a lot of difference between the table and index created by loading an empty table in pre-sorted order and creating a clustered index on the table in the same order. Thus, the net result is basically the same. Further, there are no long-term implications for either method; Informix does not maintain the clustered index in order after the initial clustering operation. The performance benefit from a clustered index with Informix is a second-order effect; there is a small benefit when you are selecting the data in the clustered order, but it is not a huge benefit. However, there are considerable practical advantages to using or using . These include the fact that you don't have to drop the table (and thereby destroy views selecting from the table, or lose permissions granted on the table — though I suppose you could do a full table delete, or even truncate the table, instead of dropping the table), and you don't have to explicitly store the data in a file, and you save the cost of transferring the data from the DBMS to the application for saving the data and the cost of transferring the data from the application back to the DBMS when you recreate (reload) the table. So, unless there are reasons for wanting a copy of the data outside the database, there's no point in using the UNLOAD and LOAD mechanism; you are better off using a clustered index because it is easier to manage the operation that way. 

— the key column. — the flag column, containing or (with a check constraint). — a proxy for the unidentified set of columns containing the other data. Primary key on and . 

Since the file is not anywhere near 128 MiB, I wonder if you were successful in adding that dbspace. One might be forgiven for thinking that in fact you were unsuccessful since the database server doesn't think it exists. Use 'oncheck' or 'onstat' (or both) to check whether the dbspace exists and is intact. If not, arrange to drop it, or simply remove the file and try again with the command. 

How familiar are you with Informix? MySQL? Unix tools (like Perl, Python, etc)? You can get the database schema and the data in Informix's UNLOAD format using Informix's DB-Export () command: 

And so on. By default, (you can also use for that, and for ) will batch the loading into sub-transactions of 1024 rows, but you can configure that, of course. 

This is a mismatch between the list of column names and the list of values in one or the other of the two insert statements. I've tracked that down using careful layout so that I could see that each variable matches each column name. In the first INSERT, you list column in the list of columns but don't pass a value for . In fact, you don't accept a as a parameter, so it is easiest to remove the name. This code 'works' — you'll have to experiment from here: 

For better or worse (and mostly worse), although some of the files necessary to support are present, the file needed in is not present. Thus, you can have or or or but you can't have . You have a few options at this point. 

This will give you a directory containing a file with the schema, and a bunch of unloaded data files such as . You can move the contents of that directory to the new machine in any way you like (compressed tar file plus FTP or or similar). You'll have to process the schema to translate any Informix-specific data types to MySQL equivalents, etc. Then use the appropriate MySQL tools to create the database. Note that DB-Import, the tool used to import an exported database when the target is another Informix system, creates tables and loads them before indexing them. Any stored procedures in the Informix database will need to be rewritten in MySQL stored procedure language. You'll then need to find a way to load the data. Off-hand, I don't know whether MySQL has support for the Informix UNLOAD format; quite possibly not. You then need to know your Unix tools to find a way of converting the data files into a series of SQL (INSERT) statements, for example. Then you create the database in MySQL and load it. 

A given receipt is associated with one contract; a single contract may have multiple receipts over time if it is a pawn contract (buy and sell contracts will have a single receipt). Even if a new receipt is not issued when a pawn contract is cancelled, there'll need to be a database update of the contract or the receipt (or both) to indicate that the contract is cancelled. Is there anything that I'm missing here?