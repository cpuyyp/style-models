Yes, The tunnels IP addresses need to be on their own subnet. The tunnel source and destination identify the points on the network where routers should encapsulate or de-encapsulate the traffic that is sent thru the tunnels. Having a route to your tunnel destination is a requirement for a tunnel interface to show "UP/UP" so really the 192.168.1.0/30 subnet doesn't even exist on the network until your source and destinations are configured. 

You may also have to append your "PERMIT-MNG" ACL to allow outbound IPSEC traffic (depending on what that ACL is configured to do) but you stripped it out of the running config so I can not fully comment on that. 

If "IP routing" is disabled then your frames are NOT getting forwarded by your CPU. I am familiar with the output that you are talking about though. The "show interfaces _ X/X stats" is a hidden command in IOS and as such it really isn't maintained the way most other show commands are. If you do a "show proc cpu sorted | in Input" then you will see the "IP Input" process. That is the best way that you can see how much of a tax the forwarding plane is putting on your CPU. 

You can simply append the ACL "REDIRECT-VIA-FAST-WAN" to route IPSEC traffic out your "fast wan" interface. 

The routes you proposed are incorrect according to the diagram you provided, the routes you need to configure on R2 and R3 are 

Or if your router does not have the "ahp" and "esp" options for an extended ACL, you can simply add in the specific ports that the ipsec client tunnels over, namely UDP ports 500, 10000, and 4500, and also TCP 4500 for good measure. 

All of these terms arbitrary. A Vlan is a Vlan, some perform special functions though. I.E. Private VLAN configuration RSPAN VLAN configuration 

We will redirect the traffic for your RAS VPN out of the preferred WAN interface by applying a route map to the Virtual-Template interface. 

Now we use Zone-Based firewalls (or whatever other catchphrase you want to use for the same technology) that pretty much do the same thing, but they can also adapt based on traffic inspection 

No, But what you CAN do is set up a box with SNORT. Or you can apply an access-list to your Span session port that is just "permit ip any any log" and that will log traffic source and destination addresses (along with TCP/UDP port info). Then if you can redirect these log messages to a syslog server you could export them in realtime to a CSV and have an application like SNORT alalyze the traffic flows. Or you can log them locally on the device and then extract/parse them manually to look for anomalous traffic flows. 

This route-map should classify all traffic going back thru your RAS VPN (any source to a destination of your client ip subnet) and after the encapsulation/encryption it should route traffic out of your fast-wan interface. 

When you manipulate the various k-values in order to affect route preference, this sort of output will sometimes be displayed until you reset your EIGRP neighbors. You can accomplish this by entering the following command(assuming Cisco gear): clear ip eigrp (AS#) neighbors where (AS#) is the EIGRP autonomous system number. The few times I have seen output similar to that posted(all in lab scenarios, btw), this has fixed it. 

Thanks to @Teun Vink for finding the link that addresses this point. If you carefully read the document, you will find that merely adding the privilege exec level 3 show running command will not allow the user to see very much of the actual configuration. Cisco limits the amount of the config that you can see based on your privilege level, and the commands available at that level, for security purposes. If you grant the user privilege exec level 3 show config , he/she will be permitted to view the last configuration that was saved to memory, which may differ from the current running-config. 

@misteryes; Your initial concept, that OSPF routers in an area do not share their routing information, is erroneous. In your first example, the connection to the 10.0.2.0 network is in Router A's database, and that information will be shared with Router B. Router B will update its topological database with this information, and if that is the best route to the 10.0.2.0 network, it will add the route through Router A to its routing table. Your second sub-question is unclear to me. You appear to be somewhat confused by OSPF terminology (most of us were, at one point in our careers). Cisco has some good basic information on how OSPF works available online, as well as the various books available from Cisco Press. The manner in which default routes are handled in OSPF depends upon the way you are implementing it, so there is no one "right answer" to your query. 

I found this information on a Dell support forum: If a packet arrives at the port from an end device carrying no VLAN tag, then the switch will add a VLAN tage which corresponds to the PVID, and then forward it within that VLAN; so the PVID mechanisim allows you to have traffic originating from a non-VLAN aware device to become an 802.1q packet, so that it can traverse to other switches and still be contained within the correct VLAN; so PVID is for non tagged packets arriving at a port on the switch.. I found this at: $URL$ . So it appears to be a Dell proprietary item, which would partially explain its unfamiliarity to many of us. If you are tasked with maintaining or configuring this switch, I believe your best course is going to require becoming intimately familiar with the Dell way of thinking. 

It appears to me that this error is not affecting network performance, as you discovered the log messages on your own, rather than your being inundated with user complaints. This leads me to suspect that the issue lies with some connected, but partially configured or misconfigured software or service that is not currently in use. Your best course may be to let this sleeping dog lie, until such time as some user reports a problem. Alternatively, if you have the time to spare, you can run SPAN sessions as @Daniel Dib suggested, and give the output close scrutiny until you determine a suspect port or device. 

In the above example I took the mac address off of a port, found its IP via arp entries on my core switch, then found the hostname via a "ping -a" from my workstation. $URL$ lets us know that the mac was made by Dell so at this point we can 1) Logically locate the machine on the network 2) Physically locate the machine on premises 3) test further for open tcp ports to the host to guess what operating system is running This may seem like a lengthy process but you can get quite fast at it and it definitely helps when you're mapping out the network of a new client. P.S. If you look up the other mac address from my post, you can probably determine something else about the network I pull this output from. 

Then how will your router know that it is not supposed to take traffic from another local sunbnet and encrypt it. Furthermore if you are running NAT on the same device, it adds further confusion. If your external IP on this VPN device is a public IP, then it also falls within the "any" statement of that ACL. "The reason they cited was because keeping the crypo ACL open like this and then limiting it with an ACL on the interface, you would cut down on the number of SA's built. How does this cut down on the number of SA's and is this the most efficient way to design VPN's?" This is technically incorrect, you will only have a singular SA (security association) between the devices for each tunnel, not for each individual TCP session or traffic flow. 

Reflexive ACLs were the first way to define directional traffic initiation and dynamically open up security for return traffic. Router logic on this below 

The reason for this is that R2 and R3 do not have an interface connected to the 172.16.128.1/19 network, only R1 does. Since that network is not directly connected to R2 or R3, you cannot use it as a "next hop" for your static routes - it is not the next hop. R2 and R3 would have to forward traffic to R1 to reach the internet first, so it must be configured as the gateway for the default routes on R2 and R3. 

So, I am getting deep into my CCIE study and I just read about the TX-ring-limit interface command. I have used QoS a bit to oversubscribe software buffers to prevent frame loss on switches and whatnot, can you use the "TX-ring-limit" in a similar manner to decrease the likelihood of frame loss during bursty traffic on a LAN? Additionally I understand the following: 1) TX-ring-limit should be set to either a value of 1 or 2 for a low speed interface such as a T1 serial 2) Higher values can be configured on higher speed interfaces 3) Setting a high value can introduce jitter on a link because the software queue of a IOS device will send the packets to the hardware queue where they are simply FIFO Has anyone experimented with setting this to a higher value on ethernet LAN interfaces to allow the hardware queue to "hold on to frames" during a bursty traffic period, rather than drop them?