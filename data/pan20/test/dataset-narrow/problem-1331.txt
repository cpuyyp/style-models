In the following example there is a guy and a boat. They have both a position, orientation and velocity. 

The problem I'm facing, is the fact that I don't know how to make some monsters appear harder than others. Since nothing has a level, and characters can only get stronger by acquiring better items, it's difficult for me to "warn" players that a monster is difficult for them. Fortunately, the whole world is designed by hand and we know which areas should be more difficult than others. So this means, I as developer knows which monsters are stronger than others. But new players won't! I don't want them to get frustrated by walking into the wrong monsters reserved for higher players. So then, how can I make monsters appear more dangerous than others? Some things I thought of: 

How do keep my character aligned properly with the boat? It is exactly like in World Of Warcraft, when you board a boat or zeppelin. This is my physics code for the guy and boat: 

I'm building an MMO using Node.js, and there are monsters roaming around. I can make them move around on the server using vector variables acceleration, velocity and position. acceleration = steeringForce / mass; velocity += acceleration * dTime; position += velocity * dTime; Right now I just send the positions over, and tell the players these are the "target positions" of the monsters, and let the monsters move towards the target positions on the client with a speed dependant on the distance of the target position. It works but looks rather strange. How do I synchronise these properly with the players without looking funny to them, taking into account the server lag? The problem is that I don't know how to make use of the correct acceleration/velocity values here; right now they just move directly in a straight line to the target position instead of accelerating/braking there properly. How can I implement such behaviour? 

glBufferData reallocates the VBO in VRAM, use glBufferSubData when updating data. Generally each mesh has its own VBO(s); and own VAO if not batched. There are optimizations where you use a single VBO for all meshes with the same attribs, etc, but don't worry about that. The relation of these things is 

If you're worried about optimization then use vectors more, the optimizer may or may not do that for you. Avoid conditionals, all branches of them will be executed. But the major bottleneck on modern GPUs is from samplers, pow and log are pretty negligible. If possible then just use sRGB internalformat in your framebuffer, most gpus will do the conversion in hardware. 

VBO created and loaded with data VAO is bound Vertex attribs are set, vertexAttribPointer points into the current ARRAY_BUFFER, attribs are part of the state of the VAO Program gets vertex attribs from the current VAO (which may be the default VAO 0 if you never bound one) 

Instead of building the cube in geometry shader from a point, its better to do an instanced render of a simple cube VBO, and forego a geometry shader entirely. The only time you wouldn't want to do that is if each cube has rapidly changing orientation and you need to recalculate its modelview every pass. In which case, have position and orientation as vertex attributes, then build the mvp per point-cube in the vertex shader, then do as Stephane explained in geometry using a corner-table. 

You only truly need a separate class if you're multithreading, so you can have separate constructors, one ran in the render thread. Even then its up to you whether or not you want to do that. The big reason is just organization. More important than anything is to make sure your textures and render programs are static. You also want to render all of a single type of renderer at the same time to avoid render state changes, possibly even rendering everything of the same type in the same draw pass. 

I know ideally these should inherit from each other (or use a CES system). But my question is as follows: Since these classes will be used on the client and server (since both client and server needs to know about these entities) with some but not all shared logic, would it not be crazy to define two separate classes on both the server and client? What are the advantages and disadvantages of sharing classes between server and client? Are there any helpful websites with tips/tricks for this approach? 

The guy is standing on the shore and would like to board. He changes his position so he is now standing on the boat. 

I'm building a game using WebGL and Three.js, and so far I have a terrain with a guy walking on it. I simply cast a ray downwards to know the terrain height. How can I do this for other 3D objects, like the inside of a house? Is this possible by casting many rays in every direction of the player? If not, I would like to know how I can achieve the simplest collision detection possible for other meshes. Do you have to cast a ray to every triangle in every mesh nearby? 

We're creating an action MMO using Three.js (WebGL) with an arcadish feel, and implementing physics for it has been a pain in the butt. Our game has a terrain where the character will walk on, and in the future 3D objects (a house, a tree, etc) that will have collisions. In terms of complexity, the physics engine should be like World of Warcraft. We don't need friction, bouncing behaviour or anything more complex like joints, etc. Just gravity. I have managed to implement terrain physics so far by casting a ray downwards, but it does not take into account possible 3D objects. Note that these 3D objects need to have convex collisions, so our artists create a 3D house and the player can walk inside but can't walk through the walls. How do I implement proper collision detection with 3D objects like in World of Warcraft? Do I need an advanced physics engine? I read about Physijs which looks cool, but I fear that it may be overkill to implement that for our game. Also, how does WoW do it? Do they have a separate raycasting system for the terrain? Or do they treat the terrain like any other convex mesh? A screenshot of our game so far: 

It's almost always better to change a state's object instead of changing an object's state. Mostly for readability, as thats how GL is expected to be used. Even if you have multiple attachments in common between FBOs, I would still suggest binding them to each FBO. As for performance, its implementation dependent, but framebufferTexture is likely slower due to it having to compute the mapping for the fragment outputs into the texture, while a complete framebuffer already has this mapping computed and just needs to load it. 

[s 0 0 x] [0 s 0 y] [0 0 1 0] [0 0 0 1] And multiply it * your modelviewprojection However this only works directly for ortho, for perspective, you'll have to w divide manually then apply this matrix. 

For something with rotation its generally wasd for throttle and roll, shift+wasd or uhjk for strafe orthogonal to forward. Or ws throttle ad strafe qe roll For purely translation, then wasdec or wasdqe. But its ultimately the situation that dictates what is best used. Don't think "I should use the standard", think "Does the standard suit this?" 

Looks not too bad to me. Only thoughts are to consolidate your camera to have a setMVPUniform(GLuint uloc, matrix model) or similar function. Likewise make similar classes for Lights, textures, VAOs, etc. Wrap anything you find yourself copypasting into a function. As long as you keep your things public you'll still have low level access where needed. Definitely make a renderer class for each group of objects which share the same program. 

Either recreate the display or Keep your default framebuffer with no multisamples, make a framebuffer with multisample that is blitted to the default fbo, which may be recreated. 

From what I understand you are trying to render a scene many times from many views into a tilemap. To do that I would make each tile a layer of a Texture_2D_Array, and bind to a 3D framebuffer. In the first phase, render your scene instanced with view per instance, then in geometry shader (only place you can set it) set gl_Layer = instance. In the second phase simply render all layers of the array onto the tile atlas. By using a framebuffer you eliminate the need to cull using discard, which would have a severe performance impact. It will also make the code much more readable than doing all of this in vertex stage. 

as you might expect, I have got a game in development, including a main character—fortunately… This character is on the one hand represented by a bunch of Box2D bodies and on the other hand, graphically, by a bunch of SVG-Elements. The character is a floating one, a kind of Hovercraft, basically based on this tutorial, but more sophisticated all in all. The character can jump, too. To visualize the impulse, which gives the »jump-power« some fire blow out of its very ass straight ahead, what should be animated, during its short visible time. Question: How to animate that bespoken fire? I could use plain css, or JavaScript, or even SVG-Animation Tags themself, BUT I would like to ask for the preferred weapon of choice, faced to the fact that time is running out (less than 3 days) AND flexibility needed for the customer? Intentionally I am not posting any code, since I can imagine a solution based on each one of the methods mentioned above, this question is meant to issue the pros and cons, due to time and flexibility. In this case, all graphics (world, fire, ass, character) are given in SVG and are meant to be displayed as that, whereby the connection between physics and graphics is established by the use of R.U.B.E. I am searching for the most painless way of realization for the ass on fire. Thanks for reading and kind regards to the community! 

I have got a floating character, which should be a robot like thing, floating over the ground, whereby I am using the »hovercar« effect described here. Zhe Image below outlines the basic setup of the physics 

what actually is modifying the private data of the body. But it works and no errors appear, but can I really do this without the risk of breaking the application, or in other words, under which circumstances could this solution might cause errors? n.b.: I am using box2dweb of the latest release. Greetings philipp