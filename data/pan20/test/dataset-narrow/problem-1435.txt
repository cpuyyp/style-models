What I have done is make the server do everything. The client(s) can merely ask the server to do something but can't do anything themselves. In this case, the server will always be the one assigning IDs and problem solved. I have not dealt with client-side prediction while waiting for the server to approve actions like: "Shoot a rocket" or "Make a solar station here". These actions will want to create entities, and entities have IDs. So far, I'm just sitting on my thumb waiting for the server, but I believe what needs to be done is create a temporary entity while you wait for server approval. When you receive server approval, the server will assign an ID and you can either update or overwrite the temporary object. I also have not dealt with an ID overflow, but if the server is in full control and it detects an overflow, it could do whatever handling you deem necessary (restart at 0, pick from a free stack, crash, etc) and all of the clients won't even know or care. The clients will just accept the IDs handed out by the server. 

Seems cumbersome and inefficient, and it probably is, but it's the easiest & most straight-forward way to solve this issue. Below, I've drawn your playable area in white, and the possible collision zones in other colours in the diagram below: 

Edit: Edited in the index/position for and (this is to determine the location of the tile in the 2D array) 

The commonly used formats are PNG and PVR. The PNG (Portable Network Graphics) format is compressed but lossless. It's a commonly used format (basically any image-editing software can write to PNG). The PVR (PowerVR) format is a format that is much closer to the native memory structure of images on the GPU of the iPhone. Therefore it also allows for some byte-orderings that are available on the GPU but not usually used in image-processing, such as RGBA4444 (4 bits instead of 8 bits per channel). Of course a reduction in bits per channel also means a quality-loss... it's highly dependent on your type of image if this quality loss will be noticeable or not. The PVR format is faster to read to the GPU and it gives you more control over how much memory your texture will consume. PNG is ubiquitous and much easier to work with. Almost any image editing software can read/write it and there are tools like ImageOptim that allow even further compression/optimization of PNGs. Update Just to clarify if that wasn't clear from what I have written above: Further optimizing and compressing a PNG will only result in smaller file-size, eg. less disk-space that's being used. That can be important if you aim for a small app-package size (eg. to stay below the 50mb limit to download over cellular networks). Usage of graphics-memory is also important and if you want to optimize graphics-memory consumption, then your only option is to use PVR (unless you load PNGs and convert them to other formats/byte-orderings dynamically... but that's another story). As long as you aren't facing any texture memory issues, PNG is far easier to work with. 

That is to say that menu items, HUDs, buttons, text, loading screens, all of that is not a because they do not exist in the game-world. Also, each has a unique combination of , , and where: 

It heavily depends on the game, but some friends and I were thinking about the same issues only a couple months ago, and here's what we determined. I'm in a pros and cons mood again. Computer Based Server Pros 

In your library however, it doesn't seem to check if if the rectangles it's returning intersect with the query, so you'll need to add that yourself. 

Clicking should be handled in a separate layer. In the past, I've called this layer the HUD (heads up display), and it handles unit selection, giving commands to the selected units, moving the view port, and other user activities that are not part of "the game". So instead of having each unit check where the user has clicked, have your HUD handle each click and pass commands down to the units. That way, you can check to see if you've selected a unit, and if not, then move the selected unit. In very rough pseudocode: 

First off, I know exactly what my drawing problem is, and I have various ideas on how to approach solving it. I am here to figure out how to adjust which frame is drawn so that the isometric "illusion" is maintained. I am writing a 2D, birds-eye view game that takes place in space. I am trying to use isometric graphics in a world where Up is North, no rotating of the game world like in traditional isometric games (remember, the game takes place in space, no terrain). Here is an example sprite I am trying to use: $URL$ Rotated 64 times about it's own vertical axis with a viewing angle of 35 degrees (aka, iso). The image was generated, so this can be changed. For the sake of clarity, I have dictated that North (Up) is 0 degrees, and East (Right) is 90. My problem is that my sprite doesn't always look like it's facing where the game thinks it is due to a difference in the 3D planes used. Not sure if I'm using the terminology correctly, but my spaceship was rotated on one plane, and the view plane is expecting things to be rotated on its own plane. Here's a depiction of the problem: $URL$ On the left, I have side views, on the right I have top-down views. On the top, I have the space ship/sprite sheet view of the world. On the bottom, I have what the sprite looks like when it is drawn to the screen. In the top right is a simplified version of how my spaceship was rotated (even degree separations between each frame). In the bottom right is the angle that the sprite looks like it's facing when a particular angle is drawn on the screen. The problem is most evident at around 45 degrees. Here is an image that is overlaid with a "screen plane" line that is pointed in the direction that the ship is supposed to be facing: $URL$ The red line should always be pointed in the exact same direction as the ship, but as you can see, the projection issue is causing a problem. I hope I am describing the issue well enough. EDIT: The red line is rotated on the screen plane, while the space ship is rotated on the "ship plane", hence the large difference between the ship angle and the screen angle when it is drawn. END EDIT It looks rather odd when this ship is shooting a laser beam at a target that is off to one side, when it should be shooting straight ahead. So... the solutions that I have come up with are: 

You can easily replace your array architecture with an object-based approach where tanks have pointers to there adjacent pipes and the pipes know about their start and end object. What you're doing here is modelling a graph. The tanks are the graphs nodes (vertices) and the pipes are the edges. Of course you can also model a graph using an array. Usually you would use an adjacency matrix for that. The appropriate structure really depends on your architecture and how you're accessing the data and what you're planning to do with it. The object based approach is closer to reality and might be easier to work with. 

Last time I used the Facebook API they didn't provide any multiplayer or gameplay functionality. I'm pretty sure you have to write that yourself. You can still leverage the Facebook API to publish scores/achievements and find friends of a user. Eg. You can get the user-names, profile pictures from FB and also use the Facebook API to post something on the users wall to draw more attention to your game. Achievements and scores are also a part of the Facebook API now. The tutorial you followed is pretty much all there is to it. Facebook gives you the "social" data of users, everything else is up to you. To find friends for a multi-player game (as your question suggests), you could use the FB API to find the friends of a user which are currently online and send a request. Your server-application will have to handle the creation of a multi-player session when requests are being accepted. 

consumer1 gets all the fun, while consumers 2 and 3 starve until consumer 1 has been satisfied. Depending on your game, this may not be desirable. I know in my game, it's not. When I get around to it, I'm going to create a queue where consumers that have been fed in one tick will move to the back of the queue for the next tick, which I believe is what Roy T. is getting at. The example above would look like this: 

I had the exact same issue when working on my game, and it took me forever to get the math right (bleh). So here it is: 

Note that rectangles can be stored at any depth, it does not have to be a leaf quad. If the rectangle straddles the boundary right at the root level, the root quad will store the rectangle. 

Keeping like entities together isn't as important as you might think, which is why it's hard to think of a valid reason other than "because it's a unit". But since you are really doing this for cache coherency as opposed to logical coherency, it might make sense. One difficulty you could have is interactions between components in different buckets. It's not terribly straight forward to find something your AI can shoot at for example, you'd need to go through all buckets that might contain a valid target. Without an external data structure, collision detection could be equally as difficult. To continue about organizing entities together for logical coherency, the only reason that I could have to keep entities together is for identification purposes in my missions. I need to know if you have just created entity type A or type B, and I get around this by... you guessed it: adding a new component that identifies the assemblage that put this entity together. Even then, I'm not gathering all the components together for a grand task, I just need to know what it is. So I don't think this part is terribly useful. 

Iterate through columns (vertical) and check for 3 consecutive items of the same type. If that occurs, replace the last item of the match with a random, but different item. If one item has been changed, set a flag. Do the same for rows (horizontal). Also set the changed flag if any item was changed. Repeat the above two steps as log as the flag is set. 

The bottom "sensor" checks for ground collisions, the front checks for "wall" collisions. Usually you'll need maximum two active sensors. Examples: 

Instead of creating all border/highlight assets manually, you could also create them at runtime, preferably during startup/loading of the game? To do so, I suggest you look into the marching squares algorithm. By focusing on a single color (eg. treating all other colors as "background") you should be able to trace the outline of a single hotspot. Then just move on to the next color and repeat. 

JavaScript already uses events internally, so you could leverage that system for your game messages. While there's apparently a W3C specification for custom events, it isn't really supported in all browsers. Here's an article that explains a possible implementation of custom events. On the other hand you could simply use a framework like YUI, which has custom events implemented and ready to use. 

If you're new to using coroutines, or if you need a refresher, check out this excellent introduction to coroutines. 

My HUD manages which units are selected, and even draws the selection circles around the selected units. I've gone so far that my selected units have no idea that they are selected, any why should they? A real separation of responsibilities is nice. 

For other actions that may affect other users (eg: building an army), updates can be executed when the affected parties do something that may require the army to be there. Everything should be able to break down in to rates, and rates can be multiplied by the amount of time that has passed. I can't think of a case where cron jobs are necessary, other than automated backups. This also effectively removes inactive players from being processed unless they are interacted with. 

I would recommend making a wrapper class for the keyboard that handles this for you, but that is up to you. 

Your co-workers need to have the .Net Framework 3.5 and the XNA Framework 4.0 installed. I don't think there's an easy way around that. Get them to install these first, then you can distribute the exes in a zip file with no problems. 

The reason that sprite fonts are white is so that you can apply your own color in the Spritebatch.DrawString. If I understand correctly, each pixel in your custom font will get multiplied by the parameter. If your source font sprite is black, you won't be able to apply your own color because black is all zeros. If you want to make a custom font and render it black, leave the source white, then use when you draw your string. 

I think you're overcomplicating things. If I understood correctly, you want to find all leaf-nodes within your octree and add these to a list of nodes that should be subdivided. I have no clue what you need the and parameter for.. something like this should work: 

Let's assume your cube has its origin at the center of the cube. To rotate it around a corner, you would have to transform the cube, so that the center lies at the desired corner. To rotate around the lower right corner, you would use something like this: 

Don't use Buttons, use MovieClip instances (different states on different frames) instead. That gives some more work to do since you'll have to switch states manually, but gives more flexibility. Here's an example with 3 different states (normal, hover, click): $URL$ As you can see, it has public methods to trigger all states. The mouse-events are triggered automatically, but you can use these public methods to change states externally (eg. from keyboard input). 

I would model the balloon as a circle shape physics-body and use to apply an upward force to the body. If the applied force is , then the balloon should be standing still in the air. Applying a stronger force will cause the balloon to move upwards. You can then connect another body to the balloon using joints (eg. a distance-joint). If the applied force on the balloon is strong enough, it should also lift the attached body. You might have to experiment with the force to apply and also with the mass of the bodies you want to attach to the balloons (the mass should be rather low to keep things realistic). Destroying the balloon would simply mean to destroy the balloons physics body and maybe also the joint. 

Using that as a template, you should be able to come up with a method for bringing up an in-game dialog. You'll likely need to introduce a variable that indicates whether the user really wants to quit or not. For example: 

Do I have to say that I'm not a lawyer? I'm not a lawyer. In some/most countries, you can use a pseudonym of your choosing called a Trade Name. You just can't use "Incorporated", "Limited" or any other legal label in the name though. This type of business is called a Sole Proprietorship, and I would highly recommend it because it's easy to create (you already have), dissolve (any time), and do any taxes for (It's just personal taxes, nothing special). At any time, you can Incorporate a business by paying a bunch of money to the government and paying someone to handle the complicated taxes, but unless you're making a lot of money or have multiple employees, I'd stick with the Sole Proprietorship. I'm a sole proprietor in Canada and work under the legal name "John McDonald Consulting". Since I charge my customers GST, I have to have a GST number registered with the government where I pay them the GST that I collect each quarter. Your country of residence may be different, check their website. 

I figured out how to detect pixel coordinates on a by using the property to get the center of of the rect in pixel coordinates, then use to get the width and height, make a rect from that, then test it against the mouse coordinates. 

There's a nice article over at Gamasutra that explains the physics in Super Mario Galaxy, which is probably what you're looking for. Basically they use the inverse surface-normal of the closest polygon underneath the player as gravitational force. If the player moves over to another polygon while in the air, they interpolate the normals to smooth motion and orientation of the player. 

The rest of the code recylces the current entity by feeding it back into an object-pool. The method on the bullet is not part of the FlashPunk engine (AFAIK), but it might also feed it back to an object-pool or maybe also free references, so that the bullet can be garbage-collected. This is actually a point where your two code examples might behave differently. If you have the variable as a class-member (eg. outside of the function scope), then you'll keep a reference to the bullet which will prevent garbage-collection of the bullet as long as the variable still points to the bullet. FlashPunk even seems to enforce/encourage good practice by providing object-pools etc. TL, DR: Unless you need the variable outside of your update loop, you should always use the local scoped variables. 

instead of your current . Then you can implement a method in your Enemy Script and destroy the object there, play a sound effect etc. 

You could just calculate the dot-product of your "up-vector" and the normal of the surface below your feet. So assume you have a world where positive-Y is up, then your up-vector is . Then get the normal of the triangle below your feet and calculate the dot-product.