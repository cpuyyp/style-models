Note, not (a partition, into which you could usefully copy a filesystem), but a block device node. Admittedly, a partition device node can also be considered a block device (because it is random access), but hopefully the point is clear. When you write the Raspbian image to a device, it will overwrite everything, so there is no point in preformatting the card. When it is done, there will be two partitions (and an MBR, so it is bootable), but those all come from the image. Note that you can create the card by formatting it with partitions and then copying stuff in from the partitions in the image, but to do that you need to either mount the image, or else do some math based on and copy over the partitions (in which case you don't have to format them, just create the partition table). However, there is not much point to that. 

No. Probably the simple strategy is to mount a share/directory/filesystem from the pi onto whatever computer you want, edit the code this way remotely using whatever software you want, and then to test just use a single, ongoing session. There are piles of ways to do this each with various advantages and disadvantages; a few of the more common ones are: 

There's a chance it won't exist at that point. If so you might try . The point of the is to allow perl style regular expressions, and will look for 15354 but exclude matches preceeded by a , a numeral, or a . Otherwise you will likely get a slew of kernel timestamps in the output. Something should come up there. As a matter of fact, if that's literally the last error message you saw (i.e., you have a record of the actual pid), you could try searching now to see if any record was left from that event. 

There's a possibility overscan might be enabled so going into raspi-config and disable it. If you look in the config.txt file on the SD card you should find some lines of code that look like this: 

On my Pi B+, and B model 2 there is a piece of orange see-through tape stuck across the top of the HDMI connector. What is the purpose of this piece of tape? And are there any damaging effects if I remove it? 

As an update to this Iceweasel is no longer available. Attempting to install it will instead install Firefox. The package for Iceweasel was discontinued in February of 2016. For more information on this please see this thread. To install Firefox start by running: 

Modify the file by running . Change to in the first line, so it reads Modify the file by running . change to in the first line and add to the end of that line. The line should read Create the directory by running in the terminal. (Note the in front of .) Run in the terminal to update the index files. Run to start the upgrade process. This will take a couple of hours. Whenever prompted to update a file during this process, choose the option to accept the new file; if you don't want to be bothered with these prompts, then call with the option using . 

Even if there were a kernel driver to implement the functionality, this isn't, as far as I know, something that is standardized or standardizable -- the point at which you begin setting various specialized functions for the pins is the point at which the pi-as-device becomes something somewhat unique. 

You don't just need a , you need a compiled specifically for the pi's CPU architecture (ARMv6 for A/B/+, and ARMv6 or ARMv7 for the 2). Those don't look to be available; Firebird claims to be open source so you could try compiling it (if you can find the source), but I don't recommend that path. 

I've replaced "command line" here with VC (sometimes VT, virtual terminal), because that's what you are referring to. You can of course start a GUI application from the command line in a terminal emulator on a running GUI desktop. The nomenclature here can be confusing (non GUI "virtual terminal" vs. GUI "terminal emulator"; the former is still considered virtual because historically, a real terminal was an actual piece of hardware, whereas your screen and keyboard are interfaces to a virtual software version). Anyway, the general answer here is no, although there are exceptions. This is not one of them, since it depends on GTK, which is a widget library dependent on the X windows stack. 

The Raspberry Pi is made by a number of different partner companies. It is not actually manufactured by the Raspberry Pi Foundation itself. The manufacture of Raspberry Pi's as far as I am aware is by Element14/Premier Farnell. Originally they were made in China but are now produced in the UK, which is fitting, given the Foundation is a British organisation. You can read more about that here. In terms of a Pi made for commercial use element 14 have an exclusive Raspberry Pi customization area. This allows companies to order customized Pi's in bulk orders. You might also be interested in the Compute Module, which fits in a DDR2 SODIMM connector. This is aimed at people looking to produce custom PCBs. The main thing to note is wherever you buy, say a Pi 3 Model B from. (Assuming its a reputable source). It will have been made to the same specifications as the rest of the Pi 3 Model B's. There is not a specific enterprise model, like there is for other computer hardware such as RAM and hard drives. 

You are certainly not the first person to have asked about using a cooling fan with the Pi. I can understand why people think they need to actively cool their Pi. From a desktop PC user's perspective the idea of running a CPU without any cooling seems bonkers. I have extensively used various models of Pi over the past couple of years and not once I have been concerned about the Pi overheating. Firstly, the SoC which is the main chip on the board, where things like the CPU are located has a thermal limit of 85°C. This means if the Pi approaches this temperature it reduces the performance and the temperature decreases. Having used a Pi 3 in applications such as a media center, not even watching a film at 1080p could get the CPU temperature anywhere near that. Also a cooling fan is rather redundant anyway unless you plan to use heat sinks. Heat sinks allow the thermal energy to be stored up over a large surface area. This makes dissipating the heat energy far more effective than just blowing some air on the SoC. I've had a look at the case you are referring to and I'm struggling to imagine fitting even a tiny cooling fan in it. Yes you could solder it to the GPIO pads on the underside of the Pi, do I recommend it, well... It's one of those were if you have to ask it might not be a good idea. You do risk bricking your Pi in the process and I imagine you are going to void any warranties in the process. I'm also not sure if the GPIO is going to be to handle both the requirements of the case and the fan simultaneously. I suggest if you are concerned about temperatures to keep an eye on them, if they are not going anywhere near 85°C then the cooling fan is really superfluous. 

GNU/Linux, of which openELEC is a form, attaches external storage as subdirectories of the root filesystem -- usually in , although they can go anywhere. I'm actually not a openELEC user so I cannot provide you with specifics, but if you browse through the directory while the drives are attached you should be able to figure that part out. The next aspect has to do with permissions; as a particular user you may be allowed to view a directory but not write things to it. If you know where the second drive is mounted and you are just using this on a home LAN (i.e., don't have to get too paranoid), you can make the directory world writable with: 

I'm not sure whether cares about dependencies, but the file inside the package only lists two, a corresponding and . Before you do that, if you have not, I would do a and retry . Also note that openSSL 1.0.1e is susceptible to the Heartbleed bug, if this is significant to what you are building you may want to upgrade somehow (there's a 1.0.1k in that directory too, which might be for jessie). 

That's very unfortunate. Segmentation faults should not be happening like that, and it strongly implies to me you have filesystem corruption. It could also be the result of something malicious, but that is probably less likely on the pi since it is prone to such corruption if, eg, it is subject to inappropriate voltages, or frequently unplugged without a proper shutdown. Take the SD card out, salvage whatever you want/can off it using another computer, then it there but leave it plugged in and try: 

I'm assuming you are using Raspbian? First things first, make sure you are powering the Pi with a decent 2A 5V power supply. Ensure the Pi has fully recognized the display by running: 

Wait until the messages stop then login as the user pi. You may need to run to get the GUI to load up. This screen might go black as it loads the GUI this is fine. When the GUI has loaded you can install all the new software packages by running: 

You could but its only going to be possible if the USB hub can supply a lot of power reliably. The data lines on the micro USB power socket on the Pi are not connected, so the Pi isn't going to appear as a USB device. 

The manufacture of Raspberry Pi's as far as I am aware is by Element14/Premier Farnell. Originally they were made in China but are now produced in the UK, which is fitting, given the Foundation is a British organisation. You can read more about that here. In terms of a Pi made for commercial use Element14 have an exclusive Raspberry Pi customization area. This would allow you to order customized Pi's in bulk orders. I've not really looked into this too much as I haven't had the need to bulk order Pi's. If you contact Element14 with your request they might be able to find a solution for you. You might also be interested in the Compute Module, which fits in a DDR2 SODIMM connector. This is aimed at people looking to produce custom PCBs. You could probably bulk order them and try to find an electronics company to build a board with your required components. As to another device with extensive customization support, well that really would depend on your needs. It's also a question that wouldn't be on-topic here as it's not related to the Pi and is more of a business operations question anyway. 

I imagine this is similar to how you were doing it before, and if so of course it might be easiest if you just install (I am sure it is available as an option; looks like it is being used in base Debian as a simpler default, although it might be considered a poor choice in Raspbian). 

Yes because is a configuration script for an interactive shell. The shell is the program which gives you a command-line prompt. From (the INVOCATION section): 

There is no point in you formatting the card. The raspbian image contains 2 partitions, one small vfat and one larger ext4. You just follow the instructions and write that image directly onto the card. To reiterate: DO NOT format the card and then copy the image in as a regular file or something. That is not how it works. The image contains two filesystems, and when you write that to the card, the card will then be formatted with the two partitions. Just follow the instructions to the letter. Also DO NOT format the card and then copy the contents of the image onto it. The first partition, as Lawrence says, must be vfat (because of the minimal firmware bootloader used by the pi). This is a "boot partition" and it contains the linux kernel. The kernel then mounts the second ext4 partition as the root filesystem, and that contains raspbian. I.e., this is NOT the way you would normally boot a PC with linux (whether it's on an SD card or a USB key or a DVD or whatever), so don't approach it that way. There's no grub, etc. If you want to change the size of the second partition, install the image to the card, then put it in a PC and use . 

If you think the SD card slot is damaged, then you can attempt a repair (not recommended), or return the Pi to the seller for a new one. The number of times the LED blinks is indicative as to what the problem could be: 

I have seen many tutorials about powering the Pi through the GPIO. My question is why do people do it? By powering the Pi through the GPIO, you lose protection from surges in current and voltage, so your more likely to damage your Pi. 

Using something like this it would be possible to split the 1 HDMI port on the Pi into 2. An alternative is to use this board from Gert, which adds a second HDMI port using the GPIO pins. However this is going to just duplicate them, to get the screens to extend is going to be much more difficult. As a side note, the more you split the signal the more desegregated it is going to get. So this is something to consider Also be aware of the potential stress you could be putting on your Pi through connecting lots of displays to it. 

Now open a web browser on your computer and enter . You will then be prompted to create an account. Click storage & database pull down menu and add in the text box corresponding to . Then select the option in the section. You will then be asked enter the connection details of the database server, so just enter "localhost" as the host and "root" as the username, along with the password you configured when the database was pulled in along with ownCloud. Everything is now setup. To access the files on the database from your phone you can install the ownCloud app or the free ocloud app and you are good to go.