TL;DR -- You'll have to find the MAC in someone's ARP table -- eg. the gateway router. As YLearn originally said, you're looking for a L3 address given only a L2 address. You'll have to find something within an appropriate L3 domain to find it. If the switch doesn't have a L3 interface in the same network, then it's arp table won't show anything. If the device isn't using DHCP (and/or dhcp snooping isn't running on the switch), it won't show up in the snooping table. I would presume there's a router somewhere that's the gateway for the target device; it's arp table should show the ip-mac link. Worst case, the mac would pin the device down to the port. You'll have to watch the traffic on that port to find any IP address(es). 

Syslog is pretty much automatic. (they can be very verbose) You'll have to setup something to parse the syslog output (splunk, etc.) Also, if there's an authentication (accounting) system in place, you could look there for login/logout events. 

Spanning-tree is the protocol designed to detect and prevent loops. bpduguard is intended for access ports -- ports connected to end users/machines (a single node.) A port configured for bpduguard gets disabled upon receiving a bpdu -- any bpdu.[1][2] As such, enabling this feature on a port headed to a simple switch (aka "hub") is asking for trouble, the instant anyone connected to that "hub" sends a bpdu, the 2960 will disable the port leading to it -- cutting off the "hub" and everything connected to it. The best option is to simply let spanning-tree on the 2960 work like normal. If you want the port to pass traffic immediately on link -- thus bypassing the normal stp discovery phase -- enable portfast. But otherwise, leave bpduguard off. [1] $URL$ [2] $URL$ 

Without TACACS, you have to setup a privilege level ("view") that only allows the commands you want them to run. Allowing access to the full config may expose passwords to accounts that have higher access than they do -- eventually, they'll figure that out and bypass such weak controls. TACACS is really the direction you need to move. However, I do understand not wanting that headache. 

The policy has to be attached to the individual PPP interface(s), i.e. the virtual-template or dialer that's cloned for each virtual-access interface. G0/1.1000 has no IP protocol running on it, so the policy does nothing. 

Because you're looking at the UDP Datagram, which is the payload in an IP Datagram. The IP Header has the src/dst IP addresses. 

IPv4 and IPv6 are not the same thing. You cannot NAT between them. There is no amount of "address rewriting" that can convert between them. Can you rewrite the address of an IPX packet to make it Appletalk? NO. There are extensive products to PROXY between the two systems, but they are almost exclusively protocol dependent. (because protocols have a nasty habit of carrying address information within them.) v4 talks to v4; v6 talks to v6. THAT'S IT. 

(If it lets you set the address to "all-ones", it is, indeed, broken.) What you need is an application taking the broadcast frames and forwarding them as unicast to whatever needs it. No router or switch will do this in the manner you need. (Cisco's "helper address" might work for one device, but not for 2+) 

This is a budget question. The cheapest option is to daisy-chain each building. The "cost conscious" option is to link each building back to a central location. And finally, the most future-proof (and expensive) option is a full mesh. I would not recommend the cheap option as the failure of a single link splits the network in half. I wouldn't do the expensive option either as it's far more complicated, and it's unlikely you'll need it -- most of your traffic will be to the DC. (If you have multiple strands to each building, you can create a mesh with cross-connects as needed at the central hub.) 

It would be helpful to know more about the fiber... type, location, environment, any recent changes, etc. Generally speaking a quality cable should last decades if left alone. Patch cables tend to fail due to movement, numerous plug/unplug cycles, and excessive bends. Infrastructure cables (in walls, plenums, underground, or aerial) should last a good long time unless there were material defects in construction or deployment, but age does degrade them, slowly. I'd blamed temperature changes, but I'm not a materials scientist. (something about glass re-crystallization making it brittle and subtly changing it's characteristics.) As Justin said, if it's an infrastructure cable (read: hard/expensive to replace) find an OTDR to see where and what the problem really is. For all we know, there could be a dirty patch connection somewhere. 

No one can guarantee bandwidth once it leaves their network. These sorts of line qualification tests are done to server(s) within the ISP network. I'm not saying you don't have an issue with L3. However, random speedtest sites are not always going to be indicative of reality. 

It really doesn't matter how the patch panel is wired (A vs. B) as long as it's the same at both ends. (i.e. "straight through") The same is true of the cable. Unless your IP cameras have some Special Needsâ„¢ (eg. cisco pre-standard power, ubiquiti non-48V poe, etc.), there shouldn't be any need for hacked up cables. You haven't said exactly what hardware we're dealing with (switches and cameras) 

The TRUNK port to the Linux router will carry both VLANs (tagging one or both.) The linux router would then have a physical interface (eth0) and one or two vlan interfaces (eth0.X and eth0.Y -- depending on the numbers you choose for your vlans) I suggest two tagged VLANs to avoid any confusion between eth0 (untagged) and eth0.#. From there, networking is the same as having multiple physical interfaces. (NOTE: if you use wireshark/tcdump, there are many buggy nic drivers that continue to eat vlan tags in promisc mode. As a result, capturing eth0 may not include any dot1q tags making the traffic look like it's all on the same network. Also, some management adapters will remove tags, even if the system management board isn't there. Broadcom is well known for this.) 

Everything you do on a network can be recorded, correlated, and ultimately traced. (see also: TOR users being exposed) The longer you sit on someone else's network the more likely they are to take notice. 

In a word: NO Multicast is a one-to-many system. TCP requires a one-to-one handshake to synchronize counters (sequence numbers) to ensure reliable transport. This cannot be done with many receivers as the sender has no way to know how many receivers there are and thus how many ACKs to expect, or what to do if one of the receivers disappears mid-transfer, etc. Think of multicast as a speaker in a lecture hall. They don't know how many people are supposed to be there, nor care if some are late or leave. Nor do they know (or care) if everyone in the hall is hearing everything they say. 

You cannot delete the arp cache for a node for which there is an active conversation -- it'll just relearn it instantly. "Dynamic" and "static" have to do with the ARP TABLE itself. A static entry is one you manually added. Dynamic is one learned on the wire. 

It's hard to research because jumbo frames don't exist on the internet. (Internet2, maybe, but that's not a global, public network.) The primary industry use for jumbo frames is large bulk data transfers -- i.e. SAN infrastructure. Use of jumbo on a network connected to the internet is asking for problems -- PMTUd should allow it to work, but there are plenty of networks that will break it. The frame size isn't limited to 9000. In fact, there is no standard defining jumbo frames. (for backward compatibility reasons, it will never be part of any 802 standard) I have gear that allows 16k frames. And I have some gear that will only do 5000 -- it's limitation is buffer space. Longer frames statistically increase the probability of bit errors going undetected. The length of the checksum cannot be altered. It is a fundamental part of ethernet.If you change the FCS algorithm, it will no longer be ethernet. 

The only way to backup the configuration is with CLI commands. The switch has no "cron" capability. And as I recall, v5 software doesn't have an ASCII configuration -- tftp gives you a binary blob. will provide a text configuration, but v5 is rather dumb and includes a mountain of defaults. You'll need an external script to telnet into the switch and collect the output of . [ssh isn't available because you aren't running the export-restricted "crypto" image.] 

They're attached to the blue pair, which is the center pins. So that would be "phone" (or DSL), but why it's RJ45 (4 pair) instead of RJ11/12 (single pair) is unknown. My only advice would be to trace out where they go / what's attached (assuming there is anything still there.) (Note: I've seen some truly odd setups around PBX's. But there's no reason to have a PBX in most houses.) 

Short answer: NO The bidirectional (single wire) SFPs come in pairs because they use different frequencies in each direction. Even if you did split the fiber, the TX and RX wavelengths would (a) be different, and (b) not likely to conform to any standard SR/LR optics. You'll need some form of "media converter" (aka: two port switch) that can take the matching SFP and convert it to whatever standard you want. 

A trunk's native vlan is the vlan to which untagged traffic belongs. switchport access applies only to ports in access mode -- while in trunk mode, those commands do nothing at all. Which vlan is "native" (and this not tagged) is a matter of personal preference. You could leave it at "1" and not allow "1" on the port (switchport trunk allowed vlan) 

(while not network engineering per-se, it's a good question) Unless you plan on buying millions in equipment and/or software annually, Cisco will not want to deal with you directly. This is especially true if you're only interested in individual purchases -- that's why they have resellers and channel partners. If you are, then Cisco will assign you a sales person and sales engineer to meet your needs. Becoming a partner/reseller is an involved process, well beyond the scope of stackexchange. (that's a "how do I start a business" question.) 

Fix? I don't know. But it's abundantly clear the committee members were blind to history: IPv4 had the same horrible, nasty, and insecure feature that was almost instantly abandoned -- ICMP Router Advertisements. The purpose of the RA is to announce a router, the prefix for the segment (served by that router, there can be more than one router on a segment), and flags for "managed" (i.e. use DHCPv6 for addresses) and "other" (i.e. use DHCPv6 for other, non-address elements -- dns servers, domain name, etc.) IPv6 compliant hosts are required to accept and process all RAs they see, however many systems limit the number to mitigate one of the GREAT MANY security issues with RAs. (crashing systems with millions of unique RAs) As there is no support for signing or authentication, any node on a network can originate an RA and pretend to be a router, spoof the origin making some other node (possibly non-existent) eat traffic, or as previously mentioned, spew RAs until everything crashes. 

Dial backup is (almost) always an option, either to a dailup ISP or direct to one of your other sites. This depends on the capability of your router(s) and PBX(s). The simplest is an external analog modem connected to one of the router's serial ports. (commonly done on a Cisco AUX port, but there are limitations there.) A more complex, and expensive option -- if your PBX can do it -- is an ISDN BRI. That can be directly to the router, or again, through an external "modem" (TA). 

You haven't said what's being connected to the port, or if there are any syslog errors (presumably of an "unsupported" SFP) Run "" to see what it thinks about the module(s). Your output shows a direct-attach cable is plugged in. 

Those look like some sort of topology discovery mechanism (like cdp or lldp.) (It's as if it's searching for an NMS or link-partner to know how to configure itself. But I'm not familiar with how Radwin's gear works. I would hope your ISP has any required documentation and experience with this stuff.) 

Look at the release notes for the version you're trying to load. There will be a section about requirements to perform an upgrade. Sometimes you'll need to load an intermediate version to get to the latest. Others need a differently packaged bundle. (signed vs. unsigned, etc.) 

In the immortal words of Cisco (circa 1999), "the PIX is a firewall, not a router" That said, it can be used as a router. But you're better off using anything else, as it's firewall nature is going to be a pain in the ass. (I used to do it with a PIX 520, and I hated it for all time.) If it's what you have, then it's all you have, but I cannot over emphasize how much better off you'll be with an actual router. (buy one, build one, whatever it takes.) 

Why do you say neither side sends an ACK? Each side will ACK any and all data that it receives (in order.) Each side maintains it's own count of data sent and received -- the sequence number. This problem "never appears" because it doesn't exist; state is maintained for each direction, so it doesn't matter who sends what when. If A and B simultaneously send a packet, say 5 bytes at seq:0, then they will each, independently, acknowledge the 5 bytes they've received. The connection is a full-duplex, bidirectional flow. What A sends to B has no bearing on what B sends to A. 

The short list... a) it might be broken (not unlikely with shady eBay stores) b) it might be "stolen" (i.e. still on someone else's inventory and/or contracts) c) (and here's the big one) only slightly better than a snowball's chance of getting a Cisco smartnet contract on it as it very likely wasn't bought from an "authorized" cisco partner/reseller. Which means no legal/legitimate means of getting software upgrades. 

Simple... because switches don't put packets on links where they don't belong / aren't needed. You are neither the server nor the PC, so you won't see either packets. This is where port mirroring comes in -- if your switch supports it. 

You are correct. SR4 works because it's four fibres. LR4 doesn't because it's four lambdas. Even if you break out each one -- good luck finding 10G-LR optics at the exact wavelengths LR4 requires, the module itself doesn't support operating at 4x10G -- the data rate on most is 40G only.