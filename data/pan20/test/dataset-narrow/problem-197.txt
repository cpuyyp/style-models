The outer does not have to respect the in the inner query. Other RDBMSes will actually error in this situation, as an in subqueries is deemed invalid/not necessary. To fix, alter your query so it's of the form: 

You can use to ignore the key violation by declaring an empty block as an exception handler, as follows: 

The answer to your question is that it won't let you. Oracle is stricter than other RDBMSes and you'll get an if you try a with a reserved word. However, you can force it to do so by surrounding the name in quotes, for example: 

Not quite sure what you're doing wrong without seeing the full C you've written. Try and setup this simple case I've made for you, then add functionality bit by bit from there. 

This link explains how semaphores are used & what the 4 different values actually set. sets the maximum number of files that can be open systemwide at any given point in time. Once the limit has been reached, trying to open another file will fail. is (simplified for the sake of this answer) the maximum number of concurrent file read/write operations that can be in progress at any point in time. is the IP port range used for outgoing connections. So when a process opens a connection to the outside world, it'll use a port between 9000 and 65500. This explains what ports are. The following are networking parameters, and basically control how much network data can be in flight at any point in time. is the default OS receive buffer size for all types of connections. is the maximum OS receive buffer size for all types of connections. is the default OS send buffer size for all types of connections. is the maximum OS send buffer size for all types of connections. 

The software isn't on edelivery.oracle.com either, as Oracle removed 12.1.0.1 as soon as 12.1.0.2 was released. Almost as if 12.1.0.1 was a stop-gap release. You'll have to open a support ticket with Oracle, asking for it. 12.1.0.2 was a significant bugfix release, as well as adding lots of new features (JSON storage, rapid home provisioning) - upgrade to it ASAP if you've already got 12c in production. 

I think the problem with your attempt is that you put quotes around the plugin name, along with the fact that you used a suffix to the library name. Step-by-step: Check that your MySQL install is capable: 

In this case, you'll be wanting to use a standby database / data guard, rather than RAC (which uses shared storage). Read Data Guard Concepts and Administration in the Oracle Documentation. There's a step-by-step installation guide on Oracle Base that walks through setting up a physical standby database here. 

... where is the name of the listener that is listening on port 1531. You can get this name from your file. For example: 

You can do this with auditing, but it incurs a performance overhead and does not work retrospectively. Read the section Verifying Security Access with Auditing in the OracleÂ® Database Security Guide 11g Release 2 (11.2). I'll add that in the majority of cases, somebody in the organisation thinks that this type of auditing is required, but more often than not it is just a misguided requirement. 

This is because the maximum possible stored value for the (32-bit signed integer) column is . MySQL is silently ignoring the fact that the value is larger than this & is "truncating" it down to . Multiple values truncated to are causing the unique constraint violation. If is supposed to be a phone number, I suggest changing the datatype to or similar. 

I realize that this is trivial with a normal /, but is a complete and utter nightmare to work with. I realize it's a deprecated data type, but I did not write the application in question. 

This is happening because an underscore in a hostname is not a valid character according to the RFC. 

Your compiled shared library is named , but you've told it to look for one called myprog in the create procedure call (the suffix is a Windows-ism). Rename it from to . 

There's a useful page here that details any pros/cons/issues that you may encounter when setting the parameter. To answer your question, make sure you set when running any Oracle "internal" scripts. IE: patches, upgrades, anything in . 

Run multiple Oracle instances on the same machine Consolidate all of your Oracle instances into a single instance, placing the data in separate schemas 

Rather than doing this, I'd advise on getting the character set info from the view & then using to create a new database, along with to handle tablespace creation. - Much easier and less prone to error. The character set and national character set are really the only things that are a pain to change when a database has already been created & lets you chose them in the UI. I imagine you're needing to package some scripts up to automate creation or something? Anyway, if you really must proceed, you can't do exactly what you're asking out of the box, but you can dump the Control File which will give you most of the information you need to construct a statement, including most pfile parameters (a pfile is required to start a new instance before issuing a statement), redo logs & character set etc. For example: 

The trigger you have written will try and insert a second row, and is causing the triggers view of the table to mutate (as it will end up in an infinite loop, essentially). You actually only need a trigger that sets : 

There are a couple of ways of starting a trace in another session. You can either use a login trigger that sets tracing in the session when it first logs on: 

I imagine you've enabled suplemental logging for the table on all columns, instead of just the ones that you require to be tracked. eg: 

Good question. I'll give a simplified answer. Oracle supports two character sets simultaneously, by way of different datatypes and parameters. A "normal" database-wide characterset and a "national" characterset. Now, the "normal" characterset affects the way that , and data is stored. The "national" characterset affects the way that , and data is stored. These are dictated at database creation time. For example: 

It is actually possible to check the IP address a user is logging in from using a login trigger, and deny the login if the IP address is "wrong", but that is a different question. 

... will get you the next available ID. (You may be able to omit the parameter and have Oracle auto-generate the ID, but I can't remember off-hand if that'll work). 

There are two tables you can get this info from. and . The schema that these tables reside in depends on the APEX version. By way of example, my vanilla Oracle 11.2 install has them in the schema. To list: . 

A tinyint(1) can hold numbers in the range -128 to 127, due to the datatype being 8 bits (1 byte) - obviously an unsigned tinyint can hold values 0-255. It will silently truncate out of range values: 

... will change the password for a given username, whilst suppressing the inputted password. I don't know of a way to do it for a given variable. 

If you only need to run SQLPlus, grab "Instant Client Package - Basic" and "Instant Client Package - SQL Plus: Additional libraries and executable for running SQL Plus with Instant Client" from $URL$ & install them. oci.dll is a windows file, so I have no idea what could be achieved by installing that on Linux. unzip the files into a location of your choice & set LD_LIBRARY_PATH and PATH to point to that directory. If you need any further help after that, edit your question. 

A of 22 is just the largest number of bytes it can take to store the largest possible number (Oracle uses 2 digits per byte). A implies the maximum of 38. You can verify this with : 

MySQL only parses the text of a constraint, it does not actually enforce them. From the documentation: 

If you want to go down this route (be aware there's a limit of 4000 values per , and all of the individual SQL statements are going to flood your shared pool, potentially causing performance problems), you can alter your code to use and concatenate the list into the query. You'd be better off combining the 2 queries in your code into a single query, and avoiding this completely. 

I'll do it in stages to make it easier to understand. I put your data into a table called - added a primary key as I assume you'll have one and it makes things a little easier: 

RDBMS security is normally done on a permissions basis that is enforced by user/role. The data is normally encrypted by the RDBMS on disk, but not in the columnar data itself, as that doesn't really make any sense for an application designed to efficiently store and retrieve data. Restrict by user/role/api. Encrypt on disk. If you're storing more important data I'd love to know why you're using MySQL. 

You can't restrict by IP address. All you can really do is create a new user and only grant them on that one table. 

Oracle doesn't understand the literal date format strings, as they are not in the same format that your client is configured for. You need to use the function to tell Oracle the format of the date string you are presenting it with, like so: 

This can't be done without some kind of workaround, so here's one for you. You can recompile the PL/SQL after creation & raise an exception if the recompilation fails. This will cause SQL*Plus to exit on failure. For example: test.sql: 

I think yours fails because the opening and closing colons won't get matched by both occurrences (because the first match is greedy). 

I have a number of large tables, each with >300 columns. The application I am using creates "archives" of changed rows by making a copy of the current row in a secondary table. Consider a trivial example: 

The release notes for MySQL 5.7 are here. "What's new in MySQL 5.7" can be found here. Changes of note: 

I'd probably use an hint too, plus make sure you gather stats on the table afterwards. Having said that, stats play a big part in testing - you want to make sure that your data/performance test environment is as close to production as possible. Going forward, the stats are the key to this. Stats that are different between test and production will cause different query plans to be picked by the optimiser, which may make your performance testing invalid when production is going tits-up. EDIT: Since you ask about doing this for more than 1 column, here's another example: 

This is a very good question. Assuming that you have a transactions table that stores each debit/credit, there is nothing wrong with your design. In fact, I have worked with prepaid telco systems that have worked in exactly this way. The main thing you need to do is ensure that you're doing a of the balance while you the debit/credit. This will guarantee the correct balance if something goes wrong (because the entire transaction will be rolled back). As others have pointed out, you'll need a snapshot of balances at specific periods of time to verify that all of the transactions in a given period sum with the period start/end balances correctly. Write a batch job that runs at midnight at the period end (month/week/day) to do this. 

Triggers are created on actual tables, and are automatically executed when an action is performed on the table in question, they're not actually created within procedures. So, given the table: 

... can use the functional index to select the pre-calculated value(s) of without having to call the function for each row in the table. Essentially, the query can look like this in pseudo-code: 

You don't need a . The listener will happily start without one, but will just start without supporting any services. will periodically register databases with the listener, but you can force registration manually. Move the file away: 

.. it means that it's listening on all interfaces. If something similar to the following line is returned, and no other lines: 

But, that's not what I think you're asking. You want the next renewal date where the contact period hasn't yet been hit, which can be done as follows: 

The GUI is probably trying to access an Oracle Data Dictionary View (in order to read the column names & data types) that it does not have permission to select from, hence the error message. Ask the Vendors Oracle DBA to trace the ODBC session so that you can track down the exact cause. 

This assumes that you've already partitioned the presented disk(s) (and will be using ), and that you're using . There will be a kernel module loaded if you are: 

So you don't need to specify the full path when you run : Set your variable to the full path of the relevant folder ( ?). Instructions for doing so are a google away. At the same time, make sure is set to and that your has added to it. The problem you're actually having is because of the parameters you're passing to sqlplus. You've been doing: 

Basically, when a row doesn't match, we set some values (that your application will never use, yes I know it is a horrible way of doing it!) in the that the trigger looks for, then fires an error. Test case: 

You can up the to or if you need more information, but be aware that they generate increasing amounts of output. Your issue could be due to either a DB not being able to service a request due to the maximum number of processes being reached (check the alert log), a lack of resources on the box (are kernel parameters set correctly?) or an outright DB crash. 

... to the init.ora for your database instance & then restart the database. You may also be able to change this without restarting (as sysdba from sqlplus):