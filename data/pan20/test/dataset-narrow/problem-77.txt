This sort of thing is possible but not easy in the general case. The first problem is how to split traffic. If the provider of "special services". If the destination IP addresses for the "special services" are well-known and don't conflict with resources you need on the public Internet this is easy, just use static routes. IF they are not well known or there is an addressing conflict then life will get far more painful. You will also want NAT so that the source address used is correct for the network the packets are sent over. The second issue is DNS, assuming the special services are not in the public DNS and the DNS for the special services won't resolve public hostnames you will need a local DNS server that is smart/configurable enough to forward queries to the right place. may prefer other soloutions. 

Not really. Firstly "Latency between AS's" doesn't really make much sense as a concept. Many AS's span the globe. The latency between two geographically close points in dfferent AS's can easilly be far less than the latency between two geographically distant points in the same AS. The default way of keeping traffic between two globe-spanning ASs local was/is to use "hot potato" routing. Basically you get the traffic out of your AS as quickly as possible and let the destination AS worry about where in the world the user is. Some ASs may instead chose to request and respect "multi-exit discriminators" in the routing information they receive so that local traffic stays local while long distance traffic remains in the source AS for longer. Given that AS's can range from something that sits in a single room to something that spans the globe the number of AS's involved isn't really going to be a good indication of latency either. 

Originally circuit switching worked with physical circuits. When a connection was established a complete physical circuit would be tied up by each "hop" of the connection. However this is an inefficient way of running a network. An analog phone call needs about 4kHz of bandwidth. An uncompressed digital phone call needs about 64kbps of data rate. That isn't very much. We can easilly build circuits with a far greater capacity than that and a small number of high capacity circuits are cheaper than a larger number of low capacity circuits. Therefore there is a desire to split each physical circuit into multiple "virtual circuitS". For this we can use frequency division multiplexing (FDM) or time division multiplexing (TDM). Generally frequency division multipexing is associated with analog systems while time division multiplexing is associated with digital systems. The circuit switching can then work with virtual circuits instead of physical circuits. With frequency division multiplexing the signal for each virtual circuit is modulated onto a carrier (in the same way that radio systems modulate signals onto carriers). The modulated signals are then combined and sent down the circuit. At the far end the signals are seperated using frequency filters and then demodulated (again much like a radio system). With time division multiplexing the data for each virtual circuit is sent down the physical circuit at a different time. The physical circuit will switch rapidly between virtual circuits to avoid causing undue latency. There will be headers of some sort to identify which data belongs to which virtual circuit. The virtual circuits may be either be fixed data rate with garuanteed delivery (e.g. a phone call) or variable data rate with the possibility of dropping data (e.g. a "broadband" internet connection). 

have a separate interface on the router for each VLAN. In this case you would need a router that can support multiple independent lan-side interfaces. have the router do 802.1q. In this case your router would need to support 802.1q virtual interfaces. have a layer 3 capable switch handle the routing between the VLANs and use the router for external routing only. The router would then have a static route configured to tell it to send all traffic for other vlans to the switch while the L3 switch would have it's default gateway pointing at the router.. 

The thing you have to understand about Teredo is it's NOT a traditional client-server protocol. It's a NAT traversal based protocol. Relays have more in common with clients than they do with servers. Servers have to have an address and port on the IPv4 internet that is at least reasonablly stable since it will be included in client configuration. Using a well-known port makes configuring clients easier. Clients and relays on the other hand may be behind IPv4 NATs. It is best if a client or relay uses a random port due to the existance of "port-preservative" NATs. I do not know if that help page is simply wrong or if MS made the boneheaded descision to make their teredo relays use a fixed port. Even if they did you can't rely on all teredo traffic using that port. Some teredo traffic will go directly between two clients without every hitting a relay. Some relays will be behind NATs. Many relays will not be running MS implementations. If you want to reliablly monitor teredo traffic I see two options. 

AIUI There are three fields in the IPv4 header that are relavent to fragment detection and reassembly. 

Of course it's possible. Openvpn in bridge mode with Linux boxes as the terminations is one soloution. There are probabll more enterprisy ones too. 

Google advertise routes to the network block 8.8.8.0/24 over BGP to other networks they connect to. These networks will pass on these route advertisement subject to commercial policies. Typically a network will have three main types of interconnection. Transit providers who sell them service. Transit customers who buy service from them and peers. A route recieved from a customer will generally be passed on to customers, providers and peers. A route received from a provider or peer will normally only be passed on to customers. Routes will only generally be passed on if they are considered the best route to a prefix. What exactly "best" means is dependent on local policy. Networks making up the Internet are represented by "AS Numbers". With each AS the route passes through different networks an "AS Path" is built up. This is used to block loops and also in the absense of local rules to the contary is used to dermine the best path. When it comes to actually forwarding the packets longer prefixes win over shorter ones (so a route to 8.8.8.0/24 would win over one to 8.8.0.0/16 ) In the "edge" parts of your ISPs network the packet will likely be carried by default routes towards your ISPs core. There is little reason to import the complete internet routing table on such devices. Within your ISP's core (or for very small ISPs possiblly an upstream provider) there will be routers with a massive routing table covering the whole Internet built up from the routes they have received from other networks. Right now the routing table for the IPv4 Internet has about half a million routes. This table will route the traffic towards Google. When the packet reaches google they will need to route it internally towards one fo theier DNS servers (8.8.8.8 is NOT a single machine). Some operators use a specific internal routing protocol for this, some use BGP internally as well as externally, some may use manual routes. I'm not sure what google does.