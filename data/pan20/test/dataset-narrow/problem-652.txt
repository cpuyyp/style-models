I don't like that you use to set the function. suggests that I can append a bunch of functions and they all get called when the event happens, which is not the case. would be better. It would make sense to take advantage of move semantics. The lambda that gets passed into is moved into and then copied into , when 2 moves would have been enough: 

If your constructor initializes members the class initialization is treated as not existing (so no loss in performance for double-initializing), but if you forget or leave it out you get sane defaults. I would like to see and in the part of for encapsulation. If you let users access those types they will use them which I think is not intended. 

Note that this is a free function, not a member function of . Prefer free functions, because they work in more cases (like multiplying an to a ) and are thus more consistent. This allows you to do this: 

That last line should not compile, but it does. Blame the that should not be there. Unfortunately you need to write 2 classes to get this right in C++, typically and . Looking at the list of things required to make a bidirectional iterator it seems like you are missing some, for example everything around std::iterator_traits which also explains 

To print a matrix we would simply do this: . What you did is combine a container (holding multiple objects) together with input/output and the actual functionality of matrix operations. You should try to make each class only have a single purpose. The only purpose that should have is to do matrix operations. Instead of writing an example by hand I'll refer you to eigen where they did all of this plus some other neat tricks. Now imagine I did and my output said "The sum of 1 and 2 is 3". That would suck. Your shouldn't do that either. 

Now you get more type checking and have less repetitive typing to do ( instead of ). I did not capitalize because it is not a macro-ish constant anymore. A side effect of this is that you cannot do anymore because does not decay into an like does. Instead you can define addition and subtraction operations such as this: 

Some of your member functions should not exist. You don't want algorithms and containers to result in implementations, because that number becomes rather big. Also people tend to forget to add all algorithms to their containers, especially when new ones appear. Instead you are supposed to implement algorithms and containers separately to only need implementations. This applies does not apply to , and that have a non-member function , and because the member functions are more efficient than the free standing functions. Also only moves elements while actually erases them. Unfortunately it doesn't apply to because requires random access iterators which you don't have. Your implementation seems to make a lot of copies. If you can't find a clever efficient way you can just create a and that and then apply the positioning to your list. I would expect a linked list to work with move-only types such as , but it doesn't because you copy s in various functions. I am getting compilation errors with both gcc and clang. It looks like you only tested with VS's compiler which tends to be a bit lenient. Avoid functions. That is what the destructor is for. Also you already have . Your does bad things when . For example you can do 

Expand and Contract (ec) the one Section where multiple Sections can be Expanded or Contracted. Only one Section is Expanded at any given time. (ecp ec paired) 

Case insensitive tasks require extra CPU cycles. RegEx is the usually least efficient string function especially compared to stringtolower() and trim() Using these two function before the RegEx gives the RegEx less work to do. Consider giving the trim additional mask characters: e.g. Plus any other characters that could need to be trimmed (quote marks?). This worked well for you test : 

Below are actual numbers from webpagetest.org. when the content download is less than 1ms webpagetest reports nothing. The numbers for these two figure I got from my Browser. 

At first glance I would first trim without a mask and then stringtolower inside before the preg_replace. 

Responsive Design 101: All, whenever possible, horizontal CSS widths should be instead of or a percentage. All font-size are specified in em. Height should not be specified, so when the width is reduced the height will auto increase. The basic structure of the page: 

At this point in your code Assert RTS and DTR Then Check Port Status by reading DSR and CTS If the device you are connected to does not support hardware handshaking they may have these signal set to an active state or they may be left unconnected. If these signal are not driven by the connected device, be sure your cable loops back your DSR and CTS to your DTR and RTS. Or use an RS-232 loop back adapter. Keeping in mind the PC is a DTE (Data Terminal Equipment) device not DCE (Data data Communication Equipment) When designing the original PC IBM perceived the PC to be a Terminal to their Big Iron so the logic of DTE and DCE are reversed. 

You could just add pairs to the HTML and this routine will automatically find the pairs of divs. There are just a few rules to the id naming convention. This javaScript routine works with between 1 and 100 pairs of divs. It could be expanded to more divs by adding more digits to the id The pairs must be the only divs where the id starts with "d". In the pair, one div must start with "d0" and the other "d1". The following digit or two digits are the pair number. id="d0x" is paired with id="d1x" where x = 0 through 99. This snippet uses the same id pair numbers as the previous snippet: d0x and d1x and pair numbers (x) are 1,2,3,4,and 99. The first part of the JS finds the div pairs The last part sets the height to the max height of the pair. 

Where the width of #page would be device width. A responsive design cannot have a fixed width. A desktop responsive #page will have a max-width and a to center it in larger windows. For mobile the max width should be used in the viewport meta tag. If the max-width: is 60em, then the viewport is 16x or 60 x 16 = 960. 

You may be over thinking it. It's actually very simple. The only ambiguous thing is if the year is two digits. In most cases a two digit year can be fixed like this. I believe in your use the month and year will be all be future and nothing from the 1900s. 

Your solution If I wanted to do the obvious solution of squaring the array and sorting it it would look something like this: 

There are good reasons why existing binary trees are so complicated. If you want lots of performance with lots of flexibility in lots of cases it costs you a lot of effort implementing the tree. Or you just use and don't worry about it. 

Your is not balanced. If I insert numbers from 1 to 1000 I effectively get an inefficient linked list. is indeed a bit tricky. I would just replace the deleted node with the left node and insert the right node into the left node. You could trivially replace with and put above your tree to make it not only work with s, but with any data type. In that case you should make 2 versions of functions that now take an : One that takes a and one that takes a that is then perfect forwarded. 

is a user defined data type and C++ gives you a lot of freedom to make it the way you want. However, if you make it overly complicated people cannot use it effectively. As a rule of thumb you should aim to make your data types behave roughly like an because screwing up the usage of an is pretty hard. To add 2 s you write something like this: 

Don't put into a header, because everyone using your tree now also has the whole standard library in their namespace. Put the public parts above the private parts. People are only interested in what they can actually use, not the implementation details. should be since it cannot be used in a meaningful way anyways. Don't use , use instead. is just a macro for (in theory it could be something else, but in practice it never is). Nonsensical things like and compile even though they are clearly errors. doesn't have that issue. Prefer initializing in the class directly instead of writing a constructor. 

It is a bit annoying to do all those things from the linked documentation, especially when you realize that you need to follow more links because it says "The type satisfies " which has yet another list of requirements and that one links to more requirements. On the upside once you did all of it the standard algorithms work with your iterator and you can delete a bit of code. Also algorithms from other libraries like boost tend to work when you have standard iterators. You can initialize members in the class declaration, for example 

I dislike that your class mixes functionality (a mathematical vector) with memory management. A class should only do one of those. If I prefer I have to rewrite your whole class. There is actually a thing in C++ that is better than smart pointers, which is value semantics. People rarely screw up the lifetime management of an , it just works naturally. When you do tricky lifetime management try to mimic the way does it. The should be (as well as , and ). It should also work on s and not only on pointers. The standard way to add s is this: 

That way you can also leave out the constructor. I dislike the name . The return value tells me if it searched or not? I would prefer so that the return value fits to the name. Your leaks memory. It creates s with but doesn't them unless you manually call for every single item. You have 2 options here: Insert a destructor that deletes all the nodes or just make , and s, which will delete the nodes automatically. If you go the route you will have to change the implementation code a bit, because you cannot copy a (then it wouldn't be unique anymore) and instead or them. Your can be copied but the copy does the wrong thing. Instead of a copy I get 2 trees using the same nodes (because it just makes a copy of the pointer). If I change one tree the other also changes. Instead you should write your own copy constructor that deep-copies the nodes. Same goes for the assignment operator. Also your would benefit from moving, so you should add a move-constructor and move-assignment, too. prints stuff. As a user of your class I don't want that. Or at least let me specify an where you should print it to. should be a function. Right now I cannot search for a value in a , but I should be able to. In you keep the , but it is not used for anything. You could simplify that function to something like this: 

While on the subject of parameters I would suggest using integer parameters over string whenever possible. Integer is compact keeping down the Request Header size, is the easiest to validate, and makes comparison functions faster. Example: On a string true false parameter , no need to do it's not there it's zero. And it resolves typing between numeric 1 and string '1' when it is used as an array dimension. Instead of this: 

I think a good responsive design does not start with downloading 247,387 Bytes of jQuery and 67,546 Bytes of Bootstrap JS. It only requires some simple CSS. Instead of trying to decipher what Bootstrap is doing with jQuery, take that learning curve and use that time to learn CSS. Bootstrap is a band-aid. A band-aid that is not needed. And definitely a cure worse than the disease. When something is not working correctly how do you remedy the problem. It's a CSS problem. You didn't take the time to learn CSS but put on the Bootstrap Band-aid. Felt good at first. Now you have a problem. What to do? Is it a Bootstrap problem? A jQuery problem? A CSS problem? It's a CSS problem buried under 300+KB of Bootstrap and jQuery. Good luck with that. The only reason I know Bootstrap exists, is because so many issues are posted on Stackoverflow. Basically you will at some point have to put yourself at the mercy of others to fix your problem. Will someone be there for you? No it's not that bad. You just have to give up on that creative genius idea that got you stuck. Bootstrap, Mediocre at Best If you are going to use 3rd party tools use something designed by those that know what they are doing. Not Bootstrap Number One, I think a good design has no HTML or CSS errors. I have run bootstrap's pages through the W3C HTML, CSS and Mobile OK Validators. As I recall the page I ran had hundreds of CSS errors. I just now picked a page at random and 44 CSS and 14 HTML Errors. Their pages also score 0% (zero) on W3C MobileOK. Mobile experts? I think not. So when the CSS is not working correctly, what do you do? CSS can be difficult. Now add 300KB of JavaScript and you end up creating work arounds for Bootstrap and jQuery because they are too troublesome to figure out how they work. I find many (e.g. Bootstrap) associate responsive with mobile, which is not the case. Non-Responsive is when the text goes off the right side of the screen and you have to scroll over to read. The horizontal scroll bar will never appear in a response design. Whereas mobile is about font size and readability, viewport, and usability. If the buttons that need to be clicked are too close together and or too small, usability suffers. When on a mobile device have you ever had to zoom in on something to click it or read it? Ever need to zoom and the view port is set to not allow zoom? Why would anyone think they should take away zoom from the user? Keeping that answer to myself. Another requirement is the Web Server be configured correctly. Bootstrap has 9 JS files in their , these 6 are servered from their Server.