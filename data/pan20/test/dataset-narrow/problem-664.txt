You'll notice that if increases by , these column differences remain the same. The only thing that changes is that we obtain one additional column difference in . Hence you do not need to perform the function multiple times. Simply perform it once on the entire \$m \times n\$ matrix to yield a \$m \times (n-1)\$ matrix of column differences and take submatrices of this difference matrix. So the original code you posted: 

The next step is to realize that if is our \$m \times (n-1)\$ difference matrix, yields a \$1 \times (n-1)\$ matrix of column means. If we truncate columns of this matrix as we do when we take submatrix it does not affect the means of the columns that are still there. So instead of performing over and over on submatrices, we can again pull it out the loop, perform once on the entire matrix , and take submatrices of this mean matrix. So now the code could look like this: 

Bugs in nonContiguous If your input string contains spaces then your function produces arbitrary output regardless of whether you are correct or not. 

I hope we can agree that B is the simpler approach. In this case the Jokers are simply gaps between characters chosen from the input string. The problem with integrating this logic with your approach is the order in which the recursion is performed. You know when you skip a character (currently when you are adding a ) but you need to know that another character is added after the skip for you to declare the string as non-contiguous. The method is shown below: 

Problem Background Essentially this problem is asking you to remove all palindromes of even length from the string as they are first encountered. So becomes and NOT even though both and are even-length palindromes. Naming Unfortunately, I cannot think of a succinct name for what operation this function actually does. You could go with but that is a bit much. I would just stick with and document the function with some commented examples. Method The good news is that you do have the right solution by using a stack. The bad news is that you are using some unnecessary intermediary data types for processing. Note that you do not need to put the data into an actual stack. Instead you can just use the output string as the stack. By eliminating these intermediary data types and processing steps, the code is much more readable. Here is a char array solution: 

This will have the exact structure you wish. Simply use to access all values. And done! An alternative with 0 lines of code! 

Knowing it is a rather large script, I've tried to split it into multiple functions, to make it easier to understand, read and maintain in the future. You can see the complete instruction list on $URL$ As far as I know and tested, this is working as it should. All it's functionalities function as intended and there seem to be no obvious errors. Regarding readability, error handling and readability, is there anything else I can improve? 

You trust too much in the user. You have no validation what-so-ever! I could say I have 5 coins and then only give 2 denomination in the wrong order. What would happen? 

You are extremelly inconsistent with your backticks. Either you use it or you don't use it! Don't mix both, please! 

With the replacement as an empty string, you would remove the double-space in . Normalizing it to a single space will return instead of minifying into . 

In the name of all Javascript developers, I thank you for taking this very simple step! You have no idea how much is helps us and helps you! 

Based on what I've seen on Firefox 53.0.3(32-bit), on Windows 10, my implementation is around 5-20% faster most of the time. You can try it bellow: 

Why do you have a at the end? As soon as the script finishes, it will just exit. No need to have the there. 

This could help a lot with any future class change. You repeat 3 times. This shows a little of misuse of the library, and you should be careful with this since it kills performance. Try to save it into a variable or chain it's methods, if possible. You have a "magic" number there! Imagine that now you want to change the width that the class it removed from 990 to, say, 1020. You can argue and say "I just edit it manually, duh!". Now imagine you have 300 lines of code and you don't know where it is and it's previous value. I recommend storing that value in a variable by itself. You can eliminate a lot of bloat by reducing duplicated conditions. You have the following code: 

Besides what Flambino wrote I have a small remark to (3): Why are you storing unnecessary information in the DOM? I would prefer a solution, where you use a simple variable to keep track of whether the button performs an action or not. So you wouldn't have to update the DOM twice for nada. The DOM is a bad place for storing the state of your application. 

It's been a while, since I've been on the ASP-Road, but I hope to provide you some help: 1) Read the Documentation of DataTables, especially the paragraph about Ajax source data. There you learn how to use Datatables with server generated data. Serverside processing might be of interest too. 2) You are free to use a html-skeleton (as you did), but you could use Custom Column Definitions 3) In order to get the Datatables Plugin to work you need a) an Element in your DOM, where the Datatable can hook on: does that; and b) you need data to display. There are two basic formats: I) You have loose data, which is represented as an of . Each representing a Row, which consists of an of columns as in this or this example. II) You have structured data, which comes as as in this example So when I get your example right: 

For this example, the use of is not necessary, but on the other hand gives you something like a lightweight object which could not only contain lables. On top is very readable. 

So if I am getting it right: it puts, what it finds in values. I think, you have a lot of work to do. 

If you read, what I wrote above, you understand, that this is misleading. You are branching on the condition and returning in both cases : That makes no sense at all. Although the request itself is , the answer should be a . The same goes for: 

This gives you nothing in terms of performance. It would be optimized away by the browser. 2) Chain-calling 

This is nowhere perfect, but it is better than storing it in plain text. This is just a tad better than nothing. Still, it isn't safe. 

The on the same line is target of discussion. In my opinion, it should be in a line on it's own but most people prefer this way. Other things like this: 

Your validation is scaringly non-existing! You currently don't even check if has the method . You don't check if is an object! Here's how I would do that: 

And with this, I conclude my review. As I said before: the code is hard to read, follow and is very brittle. Object handling is it's weakness. 

While you're doing right in using (the equivalent of) , you are forgetting that can be called, breaking your code. My suggestion is to use something like this: 

This helps the code to be more readable and reduces the nesting level. Too many chained s and loops will cause your code to be hard to read. 

Still, there is no validation of the data. And there's no way to pick 0.5â‚¬ (50 cents). You should look into that. 

This function should do 1 thing and do it well, not a bunch of them and doing it ok-ish. The already-mentioned readability Variable names should be descriptive. Example of variables you have: 

Created a few variables at the top, with needed information. Created a loop to go through all the elements Reduced the number of local variable to the bare minimum Removed global variables being declared inside the function 

You don't use the variable anywhere, besides in 1 method a few lines below. Instead of all that, you can chain the methods and spare a dangling reference later on. Something like this: 

This code was written purely for fun, but that's not an excuse to write it poorly. Still, I feel that there's something to improve on it. Besides of any performance issue that there might be, and some readability crimes, what else can I improve in this code? 

The method name should be . Boolean methods begin with , like if you were asking a question. Since you are 'asking' if a directory has some defined attributes, you should reflect this in your method name. Based on your current name, I wouldn't expect it to return if it had a file there. One example of this is the method . You have another example on the following line: 

I think, there is room for some improvement: 1) You are mixing OOP with procedural code If you choose one paradigm, you should stick with it. Besides: why are you abstracting into a class and not the whole ? 2) DRY - Don't repeat yourself 

Again: These are very poor specifications! Why on earth do you have to return a to signal, that there was no error, when the previous sentence clearly states, you have to throw an if anything goes wrong? And more: Who cares for a return-value? The only thing, which would make any sense, would be returning some kind of id in a persistence-context or for heavens sake the total number of books, but not a boolean. I am unhappy with that implementation. Of course, your has a -Method and you are checking if the book is literaly a blank book. But doing it this way: 

That is not only handy, but cool B-) Besides it is nearly as readable as and not so noisy like the typical string concatenation and the risk of typos is really low. 

In addition to what has been said, I suggest: 1) Separation of concerns. You have two concerns. a) checking if any number at all is above the treshold; and if so, return a message and b) to do the acual calculation. I would recommend for that using two functions. If you separate your concerns, there is no need for a variable from the filtering: the result is clearly saying either you have an empty array or not. An "errorstate" is given by the exception. 2) Instead of returning "Error"-Messages you should use Exceptions. E.g.: 

And the Class Region could be refactored to a simple Enum (as it goes along with your further domainlogic). 

Think of the simple case: Is it likely, that the caller of your method has the ID of a person or the complete ? Most of the times, I suppose is the former the case. Then you have to build a -Dummy only with the ID to use your method, which makes no sense. On the other hand, you could if you really really can't decide, which one is better simply use method overloading and offering both. But that would perhaps clutter your API. It's up to you. 

The code runs much slower with these bug fixes. Quick Optimization The algorithm cannot be performed in-place so you are using to store the output of applying your filter to . But then you want the output to be placed back in so you perform a deep copy. However a swap of the pointers would suffice so you could use this instead: 

As mentioned in the comments this code is not long winded at all. It is very clean in general. Too clean in fact as you will see below. 

Now you just want to be able to detect if there is a gap in each substring. This can be done quite simply if you keep track of whether you ever add a gap. Use a boolean instead of manipulating the string. 

This has a major impact on the performance of your original code, but as you will see we can do better. Problematic Optimization Flattening the 2D array to 1D sounds like a good idea until you factor in the cost of post-processing. When the array is processed as 1D the border pixels change values and, in fact, exhibit border-wrap effects. We often fix problems like this by wrapping the matrix inside a false border - i.e. we add a \$1\times1\$ border all around the matrix. Unfortunately this would not work here. Instead, you can fix this by applying the filter and then going back and zeroing out border pixels each iteration. More Optimizations 

To accomplish the dynamic range we need to have a strict ordering. Here I will always assume \$b \geq a\$ 

Ignoring integer wraparound the second condition suffices. The only way \$x \cdot y \cdot z = 2\$ for \$x,y,z \in \mathbb{N} \$ is if one and only one of \$\{x, y, z\}\$ is equal to \$2\$ and the rest are equal to \$1\$. If \$\mid\> a-b \mid = 1\$ and \$\mid\> b-c \mid = 1\$ then either \$c = a\$ or \$c = a\pm 2\$. If \$c = a \pm 2\$ then \$b\$ must be between \$a\$ and \$c\$ since it is equidistant from them both (this is 1D). 

This should do it for you. It throws an if the imge is invalid or if it can't write to the location. 

Now, how will you distinguish between an error-ed query and a successful one? You can't! And that makes angels angry and cry. Return in case of error. 

Since the length is 1-based and the indexes are 0-based and returns numbers between 0 and 1 (excluding the 1), you don't need more than this. And now, the You have the following code: 

I'll end the Javascript review here, since it is already too lengthy. Notice that I didn't made any attempt on making the changes incremental. I took right from the original code and showed you with the changes. All these changes are left as an exercise to the O.P.. 

As far as I know, it is working as it should, returning when expected. Is there anything else I can improve on this code, regarding performance or readability? Or even a better way to do this, without that pesky ? 

To avoid 'poisoning' the object, I only created 2 variables and use one of them as an (The other is just to save if we are running in Javascript or PHP). Was this a good decision? What else can I improve on my code? 

It draws a 1-2 pixels high horizontal line, using the specified color. Some HTML engines and browsers use , others , others simply and others need the tag for coloring. And yes, using actually changes the color on some browsers and engines. Is there any other way to write this, but still keep it as compatible as possible with as many email clients as possible? 

Remove . It's useless there. Change the id to Give the class to the . The is the one that will control the width of your . It makes sense to set it this way. Closing in the same line Since you are using jQuery, later on you may want to use the pseudo-selector , which won't work if you have newlines in it.