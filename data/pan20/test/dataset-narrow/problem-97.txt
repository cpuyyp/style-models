It might be an error, and the frame will be discarded. It may be an 'access' port from a service provider running 'provider bridging', then the frame will receive double tagging. It can get even more complex vlan translations. So it all depends on the full network setup. 

Make sure your HTTP client is sending the same request for both cases. Request line format: Exemple for request line: In example above, Request-URI is If your client puts an IP addresses in the place of the hostname , the web server might issue a different result. See also: $URL$ 

EX4200 switch has a firewall filter applied to input of trunk port. Intent is to rate-limit (police) input bandwidth per VLAN id. However the 'show firewall' command points out that policing is taking place only for the filter last "catch all" term (so named ACCEPT_OTHER_VLANS). Traffic from VLAN115 is actually being policed at the 2Mbps limit of the ACCEPT_OTHER_VLANS term. The configuration looks fine to me. Question: For this specific hardware/software, can anyone spot 

The command 'show bgp vpnv4 unicast all neighbors' will display BGP neighbor status for VPNv4 family, including VRF information. 

Both AS A and AS C could use static default routing towards AS B. AS B could point specific static route X to A and specific static route Y to C. No dynamic routing protocol between AS'es. AS B could run OSPF between GW2 and GW3. 

Unfortunately EX switches cannot terminate double-tagged vlans. You would need a bigger box like the MX or M series with IQ/IQ2 module if sticking with Juniper. The best you could do with the EX is strip off the outer-tag and push those inner frames to another EX. 

A traceroute will show you how many layer3 hops you are getting to from A to B. However you could be going through hundreds of switches inbetween. You could also be going through 10 ISP routers running a layer 2 vpn which appears as a single hop. An MPLS network could hide its internals, or show its internals to you. You could have transparent firewalls in the path as well. Either way your Professor is correct in saying that your cannot guarantee that every single device in the path will count as a hop to you. Because of the above points I mentioned, you could be going through 50 devices but it could look like three to you. It doesn't happen all the time though. If you see 15 hops it very well could be 15 hops. This is a basic example of an MPLS set up in regards to TTL: $URL$ 

I too do not have that SUP available, but can easily do this on a Brocade Netiron. Simply put two ports in a VPLS and tag them with different vlans. Like so: 

They all match on the first octect so no worries. You need to figure out where they match on the first different octect. In the example above we write them out and convert them to binary. Make a note of where they are the same in binary: 

If you are running a Cisco switch, you can try to read the CISCO-VTP-MIB with an SNMP tool. For example: 

I have this iBGP session established between a Cisco ASR9K and a Cisco 7600 router. On the ASR9K device, 'show tcp detail pcb all' displays 'MSS 1240, peer MSS 9152, min MSS 1240, max MSS 1240' for this specific iBGP connection. Which is the actual TCP MSS value the ASR9K is using for that connection? Is it 1240 or 9152? See more outputs below. 

Number of interfaces: 3 2) Given the destination IP address A.B.C.D, take the least significant byte D. Example: IP = 1.0.0.5, D = 5 3) Divide the value of D by the number of interfaces, take the remainder, then and add one to it. 

Are you sure both switches are forwarding IP packets? Usually routers have 'ip routing' enabled. Check all your devices for both 'ip routing' and 'ip cef': 

Conversely, whenever a double-tag frame is to be sent on ge-0/0/0, the outter S-VLAN ought to be removed (popped). Can this be done with Juniper EX4200? If so, please point out the specific configuration commands. 

Can EX4200 provide traffic counters thru SNMP for specific VLAN id on a trunk port? If so, please point out directions. 

Traditionally both Layer-2 and Layer-3 switches use MDI-X ports, while routers and servers use MDI ports. But one ought to check. See detailed explanation below, from: $URL$ 

A tunnel give you a route-based VPN option. This allows you to run routing protocols over your tunnels which allows for better failover capabilities. You can also set up a single tunnel, then route many different prefixes over that same single tunnel. If the other side adds a new prefix, just add another static route to the existing tunnel. I also find it easier to do network-wide NAT for overlapping VPN subnets as the tunnel interface is just another layer3 point-to-point interface Tunnels are also handy for times when you need to run two different VRFs over an interface that doesn't support many subinterfaces. A DSL link is an example. In this case you can run a tunnel over the normal link, and have that tunnel in a different VRF 

I would use vlan-based policing which works better on these switches. This is an example matching a speed value of 48Mb 

If you have proper security policies in place, there is no need to separate these two devices out. If you have a properly spec'd firewall, then performance is not a reason to separate them out either. It's good of the vendor to tell you to split these two out as they end up selling you two firewalls instead of a single device. 

There is no country group. Germany is in the RIPE region and hence RIPE assigns the next available AS to the next company that requests that sites in the RIPE region. Everything yellow in the following image sits in the RIPE region: $URL$ 

ECMP takes place when multiple output (equal-cost) paths are available for forwarding packets to the same network destination. The hash function must map information from the incoming packet to the output interface. For example, let me make up an illustrative overly simple hashing function for this: 1) Picture every output interface with an ifIndex like this: 

If you are sending packets toward IP addresses of the device, it will need to handle those packets in the CPU. Consider enabling CoPP: $URL$ 

The first address A of the range has a sequence of H x 0's bits as least significant bits. The last address B of the range shares all the same (32-H) bits from A, AND has H x 1's for the least significant bits. 

I have multiple q-in-q S-VLANs assigned to the trunk port ge-0/0/0. How can I read SNMP traffic counters for a specific VLAN id (S-VLAN) on that trunk port? Hardware is Juniper EX4200-24F. For reference, the VLAN configuration is shown below. For instance, I need to read, thru SNMP, traffic counters for S-VLAN id=4 for packets received/sent on port ge-0/0/0. 

This is a configuration sketch to get you started. Host A will send multicast source network 192.168.0.0/24 to Host B by using BGP. 

Link utilization will depend on how applications+protocols work. For instance, one could have the server trying to send a constant-rate 2Gbps multicast stream that the four clients would like to receive. However, the 1Gbps server link will drop half of the traffic, and receivers' 100Mbps link will only be able to deliver 5% of the original traffic (100Mbps/2000Mbps). And all this while links are running at full capacity. If however, you are running an web server, and all your traffic is HTTP, the traffic pattern is likely: 

I configure all my core OSPF interfaces as p2p. I would do the same for integrated IS-IS. This stops the DR/DIS election process from happening which can take a fair amount of time in a re-convergence scenario. You do not HAVE to have them running as /31. It could be any mask as long as you only have two active speakers. An added advantage on the OSPF side is that you get no type2 generated for the link. From Cisco's site as well in regards to integrated IS-IS ($URL$ 

You're configuring it wrong. In order to get policing working on these switches you need to configure the following (I've taken this from a working switch of mine) 

On frame-relay point-to-point interfaces, your OSPF priority is set to zero automatically. Also you have no DR election on a p2p links 

Int vlanX is simply the Cisco way of creating a layer3 interface on a switch. for Brocade Netirons you use interface ve while Junos uses vlan.x When you bridge on a Cisco router you create a layer3 interface on a BVI interface. On Junos you can create an IRB interface. At the end of the day it's simply a name. It's a routed interface that all the other ports on the same vlan/brocadcast domain is connected to. 

There is no tunneling. This is completely normal. With IP routing you are concerned about the source and destination address which doesn't change unless something is NAT'd. If a router in the middle has an RFC1918 address that's fine as it can still forward transit traffic as again the source and destination is unchanged. Each router will simply reply to the source with their own directly connected interface address. The 10.14.0.1 above is not being routed over the internet, it's simply the device that is attached to the CPE on the WAN side. There is no magic technology being used. It's pure standard routing. 

SyncE is one method for providing high accuracy clocking for TDM over packet protocols. Another mechanism is "IEEE 1588-2008 Precision Time Protocol". 

5) Install Quagga pimd on RouterB, in order to run this IGMPv3 join tool: RouterB: 6) Use Quagga pimd commands on RouterA to verify multicast. For instance: RouterA: RouterA: 7) If things aren't working as expected, try pimd troubleshooting commands: 

No. TCAM circuitry can DIRECTLY lookup keys against entries built with 0s and 1s and Xs (X=don't care). For instance, you could insert entry=1.0.0.X then you can lookup key=1.0.0.1. The TCAM circuitry will find and return the matching 1.0.0.X entry (plus its associated information) without doing the "formal" masking you seem to be picturing. However, TCAM lookup does a kind of masking to distinguish between "care bits" and "don't care bits" 

Fire a continuous ping test over the main path established by OSPF. Disrupt the main path. Wait until OSPF restores connectivity for ping. Record how much time elapsed between steps 2 and 3. 

No, not exactly. There is not a regular masking operation taking place. There is no software querying the CAM/TCAM at forwarding time. While usual memory is designed to be queried by a 'memory address' (pointer), CAM/TCAM is a kind of memory circuit (hardware) designed to lookup by content. It does in hardware what a hash table does in software: an associative array. The point is: TCAM can be programmed with a network prefix entry. For instance, you can insert a /24 prefix into TCAM by marking last 8 bits as "DON'T CARE". With plain binary CAM, you can't insert IP prefix, you can only insert full IP address (or MAC addresses) as lookup key.