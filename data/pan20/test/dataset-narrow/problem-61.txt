In a GRE tunnel, when R1 (public IP , tunnel address ) sends a packet to R3 (public IP , tunnel address ) and R3 receives it, the following happens: 

$URL$ Let's say I have a bunch of hosts connected to a typical router (which is in fact a switch + router) that has a public global IP assigned by my ISP. The hosts use private IPs that are non-routable addresses, and need to be translated using NAT to the public one so that it can talk with the rest of Internet. Now, my router is connected to a network of my ISP. It has some IP address in that network, but that address is different than what my public IP address is, right? - it follows from the article linked above: by this command: 

which assigned a public IP (in other words, inside global IP) to the host . That's quite weird, because you usually give a public IP to all devices in your network, not to just one host. If the inside global IP address is indeed my public IP address, can't I just change my public IP? I guess it has to be configured in the NAT of my home router. If it's not possible, is it just because the router firmware doesn't provide a way to change that IP? 

TLDR Does it mean we need a different subnet for each tunnel? If so, shouldn't all tunnel subnets be /30? We only need two IPs for a tunnel - source and destination. 

Obviously you can't do decimal prefix length so you have to round that up to the closest integer, which is 5. You need 5 bits, or 32-5 = 27, i.e. a /27 network! 

In terms of functionality they would be roughly equal. The difference is typically in how you deploy them and manage them. The classic approach typically involves a physical machine whereas the SDN approach likely uses a virtual firewall spun up in a VM. It also manages the firewall in a completely programmatic way. There are some technologies that relate to SDNish data centers, like VXLAN or NSH (Network Services Header) that you might find support for in a firewall focused on SDN while it might not be there, yet, in a classic firewall. 

I will admit I'm not sure if the UE, provided it is still within radio coverage of both serving areas, would signal PDP deactivation in the "old" serving area before moving into the new area. If nothing else, you will hit the timeout in GGSN. 

Either the UE sends a PDP deactivation request before it is switched off or, if for example you pull the battery on the phone, it won't be able to and then you will instead hit the inactive timeout in the GGSN. 

It would be 3 for the given messages. The first message contains an update and provided that you don't currently have a route for that prefix this would then be the first route that we installed. The subsequent messages contains information for the same prefix and therefore are implicit withdrawals. 

Does anyone know why on earth should I specify the Ipv6 address of the tunnel (last command)? The fact that I've written: 

I just don't get it. We want to convert IPv6 address to IPv4 one, but the quote says the opposite! Ok, but even if we need that, the IPv6 address has 128 bits. The first 48 bits in the conversion above will be 2002:c000:0204::/48, and the rest is for subnet field and 64 bit host addresses within the subnets - what subnet field and what host addresses within what subnets? Could anyone explain what are the remaining 80 bits used for? 

Translating private IP of my host to the public IP of my router with a special port number (that allows the inverse translation back to my private IP to happen when the other host sends a reply). Translating private IP of my host to a public IP that's different from the public IP of my router. The problem is - how does my NAT router know that his public address used for translation isn't already used by some other host on the Internet? 

Pinging 172.16.0.2 from R1 probably wouldn't work, because now I have two tunnels on R1 using the same subnet (R1-R2 and R1-R3). R1 has no idea which tunnel I mean here and therefore it doesn't know the tunnel destination. 

It then puts the IPv6 packet inside an IPv4 packet and sets the IPv4 destination address to 10.0.2.1 - it extracts the destination address from the second address in this line, which created an entry in the routing table: . So if we didn't set the IPv6 tunnel address on R2 (), I guess it wouldn't change anything, because the packet would arrive to R2 anyway. Then why should we do it? By the way, 10.0.2.1 is a private IP address, so it shouldn't be used in a 6to4 address (only public IPs are allowed) - I think the article is wrong in this aspect. 

There is no protocol as such but you could do a GeoIP lookup to get your approximate location and map the location to a timezone. MaxMind offers a GeoIP database that is accessible via various methods, see $URL$ You can even get the data in a CSV file and store locally but given that you are on an embedded device I suspect you are low on storage and might prefer to just do an online lookup. They have a convenient API that can do a lookup on the requestors IP address, so you don't need to use any other method to find your external address. In addition the returned data includes timezone information so it appears you can get all you need with a single HTTP call. See $URL$ I put together a few lines of Python to show how this could work: 

LTE is a standard for building a mobile network. It lists the available bands on which to operate on and Band 4 is one of those bands. See $URL$ for a full list. If someone mentions only "LTE" than the band is not specified but you can look up which bands are in used by a specific operator in a given country on $URL$ For example, where I live (Sweden), that would be band 3, 7, 8 and 20 for my operator but no-one ever refers to it as "LTE with band 3,7,8 and 20", it's just called "4G" or "LTE". There could be a few different reasons for specifically mentioning the support of a band. If it is from a representative of the mobile operator it is likely they perceive it as a selling point. Lower frequencies have lower attenuation and therefore propagate further enabling better coverage. Higher frequencies are usually handed out in larger blocks so to enable higher throughput. Note how 20MHz of 900MHz spectra will enable the same speed as a 20MHz block in the 2600MHz band. Another reason, however a bit unlikely to be pitched by a operator representative, is that certain bands are less commonly supported on handsets, so you might want to check that the device you intend to use support the bands that the operator is using. 

Why is it necessary to configure tunnel source IP? Isn't it something R1 can figure out on its own? When pinging 172.16.0.2, it adds IP and GRE headers, and sets dst IP to - it knows it based based on the configuration above. Can't R1 simply figure the source IP on its own? R1 just checks its routing table to find out the next hop for and chooses the interface with the longest prefix match. There's no ambiguity regarding which interface it should send that packet from. 

When a packet with dst IP address arrives to R1, how does R1 know where to send it? It checks its routing table and knows that is directly connected? Anyway, it adds new IP header (dst IP set to -tunnel destination) and GRE header to that packet. When R2 receives the packet, it knows the packet was addressed to its interface and it matches the tunnel source IP address that was set up on R2. So it removes the outer IP and GRE header, leaving the packet with dst IP and routes it forward (not in this case of course, but it would if the dst IP was different). Suppose there was another router - R3. Is it possible to set up a tunnel between R1 and R3 using the same network - ? When R1 pings the tunnel interface of R2 - , how does it know how to send it there? It probably checks his own Tunnel0 configuration: oh, I should send it to , which is in the same subnet as my Tunnel0 interface . Then it checks address to learn it's . In other words, it can't directly ARP because it's not a physical connection. Let's say I add R3 with Tunnel1 interface whose public IP is . Next I configure Tunnel1 on R1: