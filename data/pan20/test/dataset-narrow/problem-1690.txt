Syntax highlighting, code folding, symbol name auto-completion, completion and snippets, call tips, code navigation, simple project management are all supported. I think you would be hard pressed to find a better alternative that is easier to install and works across as many different OS's and programming languages. The official page can be found here. 

Significant design changes were only made on the early versions of the Pi, this doesn't include the Pi 2 Model B. However for the Pi 2 Model B there was a total of 2 revisions to the PCB. However, I can't seem to find detail on what some of those revisions were. To check what revision you have open a terminal window and run: 

Has anyone set any Guinness World Records related to the Raspberry Pi, like longest time a Raspberry Pi has been continually powered for? 

Any of the OS's that worked with previous models of Pi's should work with the Pi Zero and the Zero W. I'm assuming you already have found the steps required to do the installation, so I'll leave that out of my answer for now. The bigger problem you are going to face is performance. The Pi Zero and Zero W both use a 1GHz single-core CPU and 512MB RAM. According to this source the Pi Zero supposedly performs slightly better than the first generation Pi's. But falls a long way short of the performance of the Pi 2. The minimum to run psx emulations is a Pi 2 or Pi 3 but emulations of much older consoles should work. I suggest you check out this thread for details. 

First go to the official download page for Raspbian. Click the Download Torrent button, the torrent should start to download. The torrent file isn't particularly large so should download within a couple of seconds. You will need a program like BitTorrent to use the torrent file. Once you have installed BitTorrent go to the download location of the Raspbian Torrent file. Right-click on the file and select to open it with BitTorrent. You should be greeted with something like this: 

for refers to root and refers to a regular user. You can use either, but if you are running lots of commands that require root access logging in using is probably more useful than using , just because it saves adding to the start of commands that require root access. 

I have a Raspberry Pi B+ hooked up to my router at home, I can currently access it over the internet using weaved. How do I transfer files from a hard drive connected to the Raspberry Pi to somewhere like $URL$ without using something like the Midori Web Browser? 

Exit the file with saving. I suggest doing this for the different networks you intend to connect to. In the example code above the details for two different networks has been added. Note also that the line determines which network is connected to in preference to another available network. This isn't necessary but might be useful in your case. Next you need to run: 

This might solve the problem but its certainly no guarantee. It might be necessary to backup anything important and have a go at reinstalling the OS on the SD card. The error also could have been caused by you not fully expanding the filesystem to fill the size of the SD card. To check if this is the case or not run: 

I'm at a point where I am trying to get some files off a SD Card that I used in an old Pi. I thought it would be easiest to use FileZilla to simply copy and paste the files from my Pi to my laptop. If only. I can't seem to get a connection with FileZilla, which is strange as I can SSH into my Pi using putty no problem. So my current plan is to plug a memory stick into the Pi and using a LXTerminal command copy everything off the root filesystem and onto the memory stick. Is there a command that would do this? 

The issue is the shutter speed is limited to 2 seconds according to this article: $URL$ Is there any way round this? And is there a command I can use in Python that uses seconds? 

There might be a way round this as people have found workarounds for older versions, but in general I don't think there is any need to. I can understand as someone who has used Kodi for a couple of years the annoyance of an SD card becoming corrupted. But there are other simpler ways to mitigate the problem that don't included low level code tinkering. The number one reason an SD card will become corrupted is if there is a sudden power outage. There are couple of reasons as to why this can happen. Either someone disconnects the power to the Pi mid-way through a write to the SD card. Or the system freezes and you have to disconnect the power. Although, I think the second reason is less likely to cause corruption. Or it suggests there is another fault at play. In the early days of the Pi the power delivery circuit on the board certainly left something to be desired. I can remember the days of causing a system crash simply by plugging in a USB dongle to the Pi whilst it was powered on. If you don't believe me see problems running XBMC on 2011 Raspberry Pi. The other issue is the software in the early days was not fully mature. The Pi was a different take on what a desktop computer could be and ironing out software issues takes time. So, much newer versions of Kodi are less likely to suffer from random system freezes. To solve the sudden power loss problem power your Pi through some kind of uninterruptible power supply (UPS). A regular UPS would work but there are actually specifically Pi designed UPS's. Like this Uninterrupted Power Supply for Raspberry Pi. If a system freeze does happen it should be something you are prepared for. This means setting up the OS with all of the settings and apps and preferences to your taste and then making an image of the SD card. So if something goes wrong you can just re-image the SD card. The other reason an SD card will fail is due to it wearing out. However, this isn't a problem I have experienced myself. If you use a high quality SD card from a reputable brand I think you are probably half way there to solving that problem. To minimize SD card wear means ensuring the SD card is doing the absolute minimum. It shouldn't be used as storage space for your vast collection of films e.t.c... An option that will work with OpenELEC is running it off a USB drive. Of course all of the boot files will have to remain on the SD card. There are a number of tutorials on how to do this. There is one that looks quite easy to follow here, but for completeness I will give you an overview: The first step is setting up the SD card and USB drive. Using a program like MiniTool Partition Wizard format the SD card as FAT32 with a primary active partition of 150MB or larger, in fact the entire SD card could be formatted as FAT32. Just make sure the partition is set to primary active. It might also be useful to label the SD card as something like SYSTEM so you remember what its for in the future. Then format the entire USB drive as one primary active partition with the filesystem type as EXT4, again its worth labeling it as something like STORAGE. Once you have downloaded and extracted OpenELEC go to the root folder. And select these files: 

After you have finished making any changes be sure to reboot the Pi so the changes take effect. If the solutions above don't work then its a case of trying a new cable. You could also try reinstalling Raspbian. The display you are using might not have audio built in or the audio system its connected to might not be switched on. Make sure you check all of the obvious stuff first. 

Assuming you are using a Windows computer the Linux filesystem will not show up. You can use a program like DiskInternals Linux Reader, and the Raspbian filesystem should show up on the SD card. I've used the software before as a way of getting important documents off the SD card quickly before formatting the card for something else. 

I have a Raspberry Pi B+ hooked up to my router and I leave it on all of the time, it rarely gets switched off. Does this cause any damaging effects to the Raspberry Pi? 

If possible I would strongly recommend a clean install of Jessie, it's probably going to be less hassle then running all of these commands. Definitely backup anything important before you attempt the upgrade. 

The Sandisk Ultra/Extreme Plus/ Extreme Pro should work in the Raspberry Pi 2, recent kernel updates have fixed any previous problems associated with those cards. Have a look at the list on this website: $URL$ And this page may also be useful to you: $URL$ 

There a number of things that could be going wrong here. The first is the SD card is bad and that's why its corrupted or you might not have properly imaged the SD card. Its not entirely clear what OS you are using but here are the steps if you have a windows computer. If you are using Linux a similar process applies: First you are going to need to format the SD card, for Windows a piece software called MiniTool Partition Wizard exists. This allows you to see the different partitions on the SD card. Delete any partitions on the SD card and create one primary active partition the size of the SD card. Then in File Explorer right click on the SD card select format and format it to device defaults. Now your SD card is good to go for the installation. Then go to the official download page for Raspbian. Click the Download ZIP button, the ZIP file will start to download. Once the download has completed you will need to unzip the 2017-04-10-raspbian-jessie.zip folder. Inside the unzipped folder you will find a Disc Image File called 2017-04-10-raspbian-jessie. This file is what gets written to your SD card. to write the Disc Image File to your SD card is going to require a program like Win32 Disk Imager. Once you have it installed, open it and you will see a window like this: 

Then in the file set , this means removing the before . This un-comments that piece of code and means that it will run. Then press CTRL+X to exit the file and press the Y key twice. A final thing you could change in the config.txt file is un-commenting the lines: 

Having done some research myself I can't seem to come across any resources that explain how the LEDS work. I suspect the LEDs are something that are hardwired into the Ethernet port and are not controlled through software. For example take a look at this schematic of a RJ-45 Ethernet connector: