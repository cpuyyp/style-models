To qualify the "it can't be done": It could maybe be done by using some local privilege escalation vulnerability (either by exploiting the fact the system is behind on patches, or using something new that hasn't been fixed yet), and using the privileges thus attained. This IS targeting the system with malware. This IS cracking. Doing that to any system of which you are not either the owner or the legit system administrator will very likely be viewed as a malicious and criminal act if discovered. If this is a corporate computer, any other "unexpected" method is likely to land you in similar hot water - even if the responsible system manager did not explicitly set that policy, they are expecting the default policy they know to be valid and effective. 

Exact length of all conductors is not as important with serial-lane buses like SATA or PCI-E, compared to eg parallel SCSI. But keeping both wires of each differential pair same length, not separating the wires from each other and associated shields more than necessary for more length than necessary is essential. $URL$ suggests specs like 4.5GHz(!!!), 50-100ps risetime(!!) on a sata cable. Whether the actual base frequency of the signal is 4.5Ghz is near irrelevant - if the modulation scheme needs bandwidth to that degree, it needs it. The wavelength of a 4.5GHz signal on a common cable will be 4 to 5 centimeters. A common rule of thumb in working with AC signals is that a wire longer than 1/10th of the wavelength (this would be 4mm here) can no longer be treated as "just a wire", since the same effects that will make "just a wire" suddenly act as a coil, antenna, or capacitor plate (none of which you have any good use for here) will start to predominate over "just a wire" behaviour. For example, a an extra quarter-wavelength (about half an inch at 4.5Ghz) piece of cable with nothing connected to the other end, soldered in parallel to the signal wires, would be expected to be just an open circuit. Far from it. This will behave as a dead short if nothing is connected to it, and behave as an open circuit if the end is shorted. These effects are irrelevant for 60Hz AC wiring in your household since the scale is different - they will become relevant when building 60Hz lines spanning hundreds to thousands of miles, and professionals designing such systems are aware of them. RF (you are dealing with RF here. The "coaxial cables and brass piping" kind of RF.) engineers think in pairs of wires (so called transmission lines), and the geometry and material setup of these pairs (separation distance, twisting together, insulation materials nearby even if they are perfect insulators at DC) really matter. Only if such a pair is correctly set up and KEPT at that for its whole length, OR made up out of sections that, while different in build, have the same properties (the cable vs the plug and socket - geometries and materials aren't random here!), will it behave as a cable and not as an antenna, coil, capacitor... A solder splice disturbing the geometry for one or two centimeters is way out of (transmission) line - if this can be done at all, only removing the insulation from the cable for a few mm and soldering them on truly as short as possible stands a chance of working - in the worst case, the missing plastic material from the plug is going to sabotage your effort (this is not about insulation, but so called dielectric properties, which are way different for air vs plastic molding). 

Adjunct: If you can (you can if you are at the local console, you can't if you are connected via ssh or need to keep the system fully running), change to runlevel 1 ("single user mode", the command is "init 1") before doing such a thing. This will stop all non essential processes that could change things in the filesystem while you are copying it. Mind adjusting your fstab, especially if UUIDs are used. Consider using "chroot /where/the/new/root/is/mounted /bin/bash" to test your newly replicated filesystem, and possibly to reinstall your boot loader. You may have to manually mount /proc and /sys under the chroot. If reinstalling a bootloader from chroot, make sure /etc/mtab (in the chrooted system) does not contain garbage that confuses the loader installer. If it is grub 1.x , you might have to delete the (new) /boot/device.map file. If you want to play it safe with /dev, you can populate it (in the new filesystem) with "MAKEDEV generic" - this will create a set of device files "underneath" the udev mount point that will keep your system from crashing hard at startup in case udev is nonfunctional. 

A campus network is not an ISP by every definition - they are providing internet service, but not in the same for-profit, individually billed manner as ISPs commonly do. Whereas ISPs commonly use some kind of account credentials to grant or deny access to the router (or directly connected computer) at a customer's home, campus networks (and some old school cable networks) commonly use an authorization scheme based on the so called MAC address that is unique to every Ethernet network card (or network port built into a computer's main board). You will need to talk to whoever runs that campus network for instructions on how to get the address of your computer(s) authorized. Alternatively, there might be 802.11x authentication in use on that network - again, the responsible staff should be able to tell you. By the way, only plug network cables into jacks where you are SURE they are intended as Ethernet connectors, and for YOU to use. A random RJ45 outlet in a building could just as well be ISDN, or a network you have no business using, or entirely something else. Also, while you CAN change the MAC address of your computer in some cases, DO NOT do that. The trouble and confusion you can cause to network maintainers that way will not make them your friends. 

Some older, low-capacity SD cards (16MB-ish) use flash chips in TSOP/TSSOP style packages. A workshop capable of SMT rework (if you are doing embedded work, you might have that skill inhouse, otherwise check for small companies doing board level phone/laptop repair) could conceivably separate and reattach that chip, so that it can be read and written raw (including the ECC codes) with a device programmer. Still, be aware that you will be mainly testing: 

If you simply want a partition that is out of view to the casual observer, you can create such a partition (and not assign a drive letter) as long as you have (or make, by shrinking another partition - all the usual cautions about resizing partitions apply!) free space left on a drive. The System Reserved partition seems to be mostly there to hold boot loader components etc - damaging anything could make the system unbootable. Notably, instructions do exist on how to install a working Windows 7 without SR, with the boot loader files going to the system partition. I would approach with caution here, scenarios like a C: partition large enough to cross any legacy LBA or partition size limit could yield annoying surprises. 

The most likely explanation is that gnome-screensaver-command, when run in the context udev provides, has no idea whose screensaver on which display it is supposed to command - it is not running under your user account, and it does not have the environment variables that are propagated throughout your X user session. An approach that can likely be made to work: 

Many filesystems (eg ext3/ext4) make decisions about optimizing reserved structures (eg sizes of inode tables, superuser-reserved space, just maybe even the size of pointers used). It is questionable whether these structures remain optimally tuned if the filesystem size is significantly altered, especially by online resizing tools for which altering filesystem fundamentals would be to hazardous. For example, a too-small inode table on ext3 (intended for a much smaller filesystem) could make you run into a condition where the filesystem runs out of "slots" for files, so you can suddenly not create any new file and get an out of space error even with plenty space left. A too-large inode (that was meant for a larger filesystem) table would waste space. 

A rising "uncorrectable" sector count is oftentimes a sign of a slow cascade failure - somehow a tiny hole got knocked into a platter surface, and whatever WAS knocked out of that hole will sooner or later knock another hole somewhere, knocking out more debris. Which can knock futher holes - or even damage the read/write heads, either to a point where they stop working or where they themselves damage the platters. Rinse, repeat, incur data loss. 

If you used the colors exactly as shown in the diagrams, ignore this. If you made a cable which connects the pins in accordance with the EIA standards shown in other answers, but which does not use wires of the same base color to attach the pin pairs 1/2, 3/6, 4/5, 7/8, this will work OK even if tested with most cable testers, but will likely work erratically or not at all if used to carry ethernet signals. The "magic" that allows "plain-wire" cables like Cat5e to carry VHF signals like ethernet over tens of metres is all in these pin pairs (no matter to which EIA standard) being connected by a wire pair twisted together in a defined manner. Using the wires from two separate twists for one connection will negate the magic. Using different colors consistently might work but is technically marginal - the four twisted pairs do not have the exact same twist length (intentionally, otherwise you would still have crosstalk problems), making them subtly different in electrical characteristics, especially propagation speed and crosstalk attenuation relative to the other pairs. A given cable might only be designed/tested to comply to Cat5e ethernet specs if the wire pairs are used as expected. 

Be aware that electronics modules that are not meant to be user-serviceable tend to REALLY dislike (read: you might get away with them, but you might also permanently wreck the component!) some behaviours easily incurred when experimenting around: 

On some old machine types (definitely seen such behaviour on Socket 7 era systems), and with older memtest versions, problems with the L2/L3 caches (which you could in the worst case disable, at a performance penalty) could be misinterpreted as RAM errors. 

The connection standard used for MOST but not all large flat-panel displays (inside notebook computers and flat screen monitors) is called FPD-Link (also called LVDS colloquially. FPD-Link is based on LVDS, but not every LVDS interface is FPD-Link or even a display interface at all). Some other designs are known to use the "embedded display port" interface. This is an interface that is not meant to be interacted with by consumers, but engineers, knowledgeable repair personnel, and people (professional or amateur) with equivalent knowledge. FPDLink does not have entirely standardized physical connectors, and in the worst case the connectors on a certain display and a certain computer would physically mate but be differently wired, resulting in non-function or even equipment damage. Before even trying to "transplant" such panels, check: 

DRAM cells store electrical charges. They are leaky, so as was mentioned, they need to be refreshed. There are manufacturing tolerances, and the influence of temperature and component age, that will define the ACTUAL time it takes for a DRAM cell to be no longer readable reliably if it has not been refreshed. The refresh specification for a given DRAM chip will actually be a worst case value - something that will keep your data readable with monday-production chips that have been running at maximum temperature for 20 years more or less. In most cases, the cell can keep the data far longer. In addition, the circuitry inside a DRAM chip decides whether to read the amount of charge in a given cell as "0" or "1" (in some designs, that might be reversed - low charge means "1"). Charge content that is not high enough to be read as "1" is still in the cell - and in some cases, by running the DRAM chip with an out-of-spec operating voltage (which might stress it, or make it far slower, but will not yet destroy it), the threshold voltage on which 1 is decided from 0 can be manipulated temporarily, so some or all cells become readable again. Also, unless there is actually an output register, there might be subtle voltage or waveform differences even in the quantized (switched to 1 or 0) output signal that can give you a hint at what charge is actually in the cell - comparators (which read amplifiers are) are rarely perfect quantizers, especially if they are built for speed not precision. Also, if a cell reads unreliably, a determined attacker or forensicist can still use statistics to his advantage (count how many times a 0 or 1 is read, and correlate)... 

A simple alternative would be to run the application on the remote PC, possibly under a dedicated user account, and simply control it via RDP, VNC or whatever is convenient. 

General approach to fix a grub bootloader. Warning, this can wreck your windows bootloader or make everything unbootable if something goes awry! 

Explanation for many of these: A lot of circuit designs rely on signal voltages being above the voltage on circuit ground (being disconnected does not count as being at 0 volts!) and below the voltage on a given power input at any given time, and will crash horribly if these assumptions are violated - and most of the scenarios described do exactly that. The last scenario I described is well known to be fatal to these old-school, one or two line alphanumeric LCDs (HD44780 type. Different from a notebook display, but... ) often found on industrial equipment - they tend to go up in smoke if you do that). Also, be aware that old-style (pre-LED) backlight systems are not toys - there is voltage high enough to both shock you and damage other parts of the equipment if accidentally shorted into them. Also, the backlight tubes in these combine the features of being easily broken and being toxic when broken. 

Before trying out the "hardcore" no-extra-tools method I describe below, check if your Optiplex has a PATA port available inside - in which case, likely all you need is an adapter for a 2.5" PATA drive (the plugs are different in 2.5" vs 3.5"/5.25" PATA form factors...) and you can just remove the harddrive from the laptop and access it in the Optiplex. If anything nonessential (CD drive?) is already on the PATA bus, disconnect it unless you know what you are doing with PATA, the Master/Slave/CS mechanics could complicate things. There were laptops that used harddrives on the ancient ST506 or ESDI interfaces - try to check that beforehand (google the model number on the harddrive and get a spec sheet), do not attempt to connect such a drive to a PATA machines. Or, you could get a PATA to USB adapter, they are not expensive. The ports are accessible as device files under DOS (COM1...x , LPT1...x), and can be used as a target for a COPY command or a redirected TYPE command. On the linux end, the ports are also accessible as device files (/dev/ttyS0..x, /dev/lp0..x), and can be read from, eg with "cat /dev/ttyS0 >> some.file.txt". These will need a null modem cable for serial transfer (if you have a normal serial cable that you can physically connect, try swapping the wires to pins 2 and 3 on the 9 pin end), or a corresponding parallel cable (which is rare, most of them had a centronics plug on the other end which doesn't mate to a PC parallel port physically). Actually, any wire hookup connecting pins 2 and 3 crossed and pin 5 to pin 5 (assuming 9 pin pinout) should work on serial if you keep the wires short and close together. Let's ignore parallel for now, since you would need to set up STROBE/ACK signalling correctly to work with the DOS device drivers... In case of using serial ports, you will need to configure the ports on both computers, with stty on the linux side and MODE on the DOS side. Note that these configuration settings are NOT persistent across reboots. I would suggest trying 115200,8,o,1 and downgrading the speed if it doesn't work - i'd keep the parity on, though, since it is there for detecting errors caused by electrical interference. Also, make sure that there is no kind of newline translation mechanism set active (I do not know if some DOS versions manage such via the MODE command). If you need to transfer multiple files, your best bet is combining them into an archive - if PKZIP is available on the DOS machine, it can be unpacked with the "unzip" or "zip x" commands on the linux side. However, you might need to repeat the transfer in the worst case, serial communication can be not 100% reliable against interference.