This is good. It means you can just swap out the color if you want to change the color. You won't need to hunt down each and every usage in your code and make decisions on a one by one basis. However, I don't understand why you're fully qualifying the path. You already included The namespace. So, you could shorten all of those assignments down to just . 

I can't speak to the performance, but you should make sure your resources get closed properly when an exception occurs. Either switch to a using statement, or move your clean up code to a finally block. 

I would discourage the use of and here and prefer css for formatting purposes. (I know, easier said than done, particularly when you compare it to using the HTML tags.) 

You felt the need to go through great lengths in your post here to explain that the client code owns and is responsible for opening/closing connections and closing the returned recordsets, yet I see no comments mentioning this in the code. I would add some proper documentation for something you see as being this important. 

Why I see no reason not to just make these part of the class. It would make calling these much cleaner as you're never passing anything but a into them. 

First thing's first. The indentation is all jacked up. There's not really a standard for formatting SQL, but as a rule of thumb, , , and for any (sub)query should be at the same indentation level. 

Well, if you don't think you could ever get there, maybe you should throw an exception? If you don't think an exception is necessary, or don't want to throw one in production, then consider using to ensure that you're aware of it if you ever do end up in this logic branch. 

It's terribly picky and pedantic, but I find it poor form to use the alias when you're using it as a class. Seeing a ctor called on a camelCased identifier just looks weird to me. Same goes for things like . But, like I said, that's just me being nit picky and pedantic. It's not actually a problem. 

So, you should probably declare them as actual constants. This removes the possibility that you'll mistakenly assign any of them a new value. Except... I would probably inject values into the constructor for all of the "number of characters" fields. 

I'm writing a tool to create shortcut menus for an application that I maintain built on the Access runtime. I compile this app into an *.accde file, so much to my chagrin, all right click menus are disabled. After some research, I've been able to develop this tool to add the menus to the database. This code is called during development, not at runtime. I'm already seeing a lot of duplication, and am not sure what to do about it. So, I figured I'd stop and get some feedback before I started building all of the various menus that I'm going to need. Note: There is not a built in Enumeration of all of the different button types. There are thousands of them and I'm adding them to a self defined enum as I need them. 

There are other things that could be said, I'm sure. I didn't take a hard look at your algoritm. Honestly, I didn't think about it all. Perhaps a better programmer than I can give you some advice about that. 

I take it back, you won't need a custom route. MVC comes "out of the box" with a route, so for the route, all you need to do is create the proper method. 

Thanks for the proper attribution!, but OP's hungarian is showing. Burn it. It mars your otherwise beautiful naming. 

What you're looking for is an Optional Argument. When using optional arguments, you have to supply a default value. So, you just have to check for that default value, and switch your control flow appropriately. It would look something like this. (Note I used empty quotes because isn't a constant expression.) 

VBA suffers from a lack of proper inheritance and we have to make up for it with composition. In a sensible language, like Ruby (hardy har har) or C#, I would create a class that implements and would then inherit it's method. Like I said, that's not an option. So, have you cleaned it up, or made a mess of it? Yes and yes. You can now cleanly dispose of your presenter, but it's not so clean underneath. Interfaces shouldn't implement other interfaces, as you've noticed it's nonsensical. Remove all of the dispose code from . I'm confused by your assertion that Implementing more than one interface is a pain. It's exactly as it should be. What you should do is create a class that is responsible for defining common code. In this case, the Dispose method. Here is an extremely stripped down example. and should remain the same (with the exception of removing the disposable code from ). PresenterBase 

So it turns out that you seem to have a lot of full joins in your query. I can't offer much guidance on how to change it without knowing your table schema, but you should absolutely think about why you're using them and if they can be changed to another kind of join. I'm sure it's a point of expense in the query plan. 

The expensive part of this code is opening and closing the recordset repeatedly. So, instead of opening and closing it every time this is triggered, open it once when the form is first loaded. 

Instead of storing all of the CalendarIDs in project properties, it is much better to store them in an array variable and create a UI to allow the user (me) to select which calendar to work on. This means I only need one Project Property . 

I'm going to second @PetLahev's point about creating a GUI for your co-workers to use and officially recommend using the in your code. That would make all of the code verifying that a directory exists obsolete, because it had to have existed in order for them to have selected it. So now, this snippet 

You've already made it work, we should make it right before trying to make it fast. I recommend adding a reference to the Scripting library that you're using. You already have other references in your code. I don't see a reason not to early bind that one too. It gives you the advantage of intellisense and turns runtime errors (i.e. typos) into compile time errors. The secondary benefit to doing this is it makes it easier to find 's method. The inner loop is completely unnecessary. This should make it a bit faster as we've removed a nested loop, but I think you're correct in thinking that the PDf merge is taking up most of the time. 

The Code The API wrapper library needs an API Key & Token to connect to Survey Monkey. In order to keep them out of the GitHub repo, I created some environment variables and a factory class that knows how to access them and return an instance of . ./SurveyMonkeyApiFactory.cs 

You'll want to store your three different statuses at the module level and create them at an appropriate time. Perhaps on the sheet activate event. Otherwise, you'll need to create them on the fly each time the procedure is run. I'm not sure which way I'd go, but the important part is abstracting the data right now. 

Don't do that. Spell it out for whoever has to read that log. It's also noteworthy that there's a lot of copy paste in the function, as evidence by the snippet above. It's wholly worth while to extract that logic into a function that takes an object and a string in as arguments. 

VBA does't have short circuiting logical operations, so no matter what the return value of is, executes every time as well. We can unroll the logic a bit to make it more efficient, but be sure to leave a comment explaining your actions to your future self. If you're anything like me, you'll instantly want to undo this optimization the next time you see it if there's nothing telling you not to. 

Well, first off, it's much better to wrote actual unit tests instead of manually verifying by reading output from the console. This is a bit of a tricky task, so it would be nice to know we're getting the correct output as we make changes to the method. The second thing I notice is that you repeat this logic a lot. 

Either way, the comment needs to be much more thorough and clear. While we're here, I have a convention for variable names that are used to return values from params like this. I think prefixing them with makes the intention much clearer. I've been bitten by this before..