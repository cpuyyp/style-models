Update: To expand a bit: it is not really useful to know exactly which package A dragged in package B, since package C which also depends on B might have been installed since, and thus removing A should not/will not remove B. would in this case list that both A and C depend on B, but give no indication whether A or C were originally responsible for the installation of B. 

It's always tricky business, and when the goal is to delete files, make extensive test cases. I have quite a few similar s running nightly, and I can't say I wasn't nervous setting them free :-) 

There are tricky licensing issues going on with Java (triply so after Oracle bought Sun). The packages are not the "official" Java installation in Debian and other free operating systems — the open implementation OpenJDK is, available in the packages. The browser plugin functionality that goes with this Java version is called IcedTea, available as . So, if you want to go "the Oracle way", then you should download packages directly from Oracle (given they provide them) and follow their instructions. If you want to go "the Debian way", install e.g. , which should pull in the needed OpenJDK packages. Other references: 

Info on specific package that dragged in a particular package You can use (available in main repositories) to list forwards or backwards dependencies for a package. Example: 

Alternative solution for other browsers: I disable JavaScript on Google Search since I find it mind-numbingly annoying that the search field steals focus whenever I try to e.g. switch tabs with single-key shortcuts in Opera (which also will ruin the search results because of instant search). With JavaScript disabled, the "Cached" links are were they used to be, before the "Instant preview" change. 

directly instead of the construct. What is the certain command? Probably the best and most fail-safe way would be 

Did you wan't the parantheses in the expression, or where they only there since you thought you needed them for the regexp functionality? As it looks, you could probably do what you want with directly: 

Note the lack of space between and its argument (run without arguments to see the syntax). You should also just define a single output directory argument; the in your is expanded by the shell to 

The solution you link never says that it works "automatically". You need to split the tmux window manually every time. irssi by itself has no way to control the tmux layout (though it can be scripted — see the ending remark). If you want to automatically start the FIFO (which means "initiate the output of the nick list" — not including splitting the tmux window and reading the FIFO), add as a startup command, e.g. via 

The 100 ms offset is because of the earlier noted quirk that will always return a time slightly lower than the "actual" idle time when executed like this. It will work without this offset, and will then be more accurate to a tenth of a second, but it will trigger the check frantically during the last milliseconds before an interval end. Not a performance hog in any way, but I would find that inelegant. I have used a similar approach in a Perl script (an irssi plugin) for quite some time, but the above was just written and has not really been tested except for a few trial runs during writing. Try it by running it in a terminal within X. I recommend setting the timeout to e.g. 5000 ms for testing, and adding directly below to get informative output to see how it works. 

This will work unless the file names contain newlines. Run it as above first, and remove the if it looks OK (also see the remark above). 

skips the header, sed picks all character up to character 2 and puts them in group , and the next 19 characters and puts them in group , and then inserts and (start and end bold according to ) before and after group 2. 

(The backslash preceding periods is to escape the "" sign which otherwise means "any character". "" instead mean a literal period. Without escaping you'll match links ending with e.g. "logg" as well.) You could also do line matching directly in the command, but that would be more complicated to change from time to time, I believe. The easiest way is to save the complete list of links in a file as you do and then just search the file with for example as above. Then you also won't have to download and parse the document again if you want to change matching pattern. 

It could be a path problem, but not likely since root should have in its path. However, the crontab commands are most probably not run with Bash, but Dash. The construct is a "Bashism" [1] [2]. Replace 

Try adding the wanted translation rule in the file on the client. How this is done will depend on the client OS ( on *nix systems). If you're using a local DNS you could fix it there, but otherwise you will need to do it on a client basis somehow, and the file should be a global and easy way. Just add the line 

Bulk upload Some alternatives are discussed here. Keep raw format This part of the question is not really on-topic here, but: No, I don't believe you can. Picasa is not a generic storage system - it supports reading of many raw formats, but it will to convert them to JPG before storage. If you want to store your raw files online, I'd suggest a generic storage service (since the launch of Google Drive, perhaps it is easily done within the Google framework if you want to stay there). 

"For every OS" — that is without a doubt not possible to give, but I can add specifics on Debian based systems to the existing answers. Make sure the wanted Java version is installed and run: 

Note that you might hit several files. You have not defined what you want to happen after the file. If you are sure that there is only one file that will match, you can use directly: 

There can't be that many file endings, can there? At least it is a finite number. I find that this task is actually exceptionally suited for terminal work. Aside from the usual extensions 

This opens an Evince session where the PDF is already correctly formatted for direct printing. One could modify this to send the result directly to the printer, but I would rather get the preview in Evince in most cases. 

This will execute the specified command with switch once every stroke of midnight (see for a documentation of the format, or probably just the commented first lines of the crontab itself). Some small pointers: 

Addition: "Bashier" (but not better, so I would prefer the above solution, since it is more portable (even though it probably doesn't matter in this case)): 

I believe you had a trailing for some reason. Perhaps since you thought you had to specify extraction directory in that way (you can specify it with if you want, but is the default). 

to remove it, there should not be anything left behind in the process, except perhaps personal configuration files.