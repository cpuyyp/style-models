i didnt end up figuring out the scramble thing (which seem to only happened to images without transparency and when i was in plain RGB mode without Alpha)... but i did fix the weird tinting issue (mentioned in the comments section). the solution is below: i was binding the texture to my object before drawing the quad, but not "unbinding" it after it had been rendered. i added 

let me know if i left out anything important... or if you need more info from me. thanks a ton, -Dylan 

i've been following tutorials online to load textures using SDL and display them on a opengl quad. but ive been getting weird results that no one else on the internet seems to be getting... so when i render the texture in opengl i get something like this. $URL$ when the original .bmp file is this: $URL$ ive tried other images too, so its not that this particular image is corrupt. it seems like my rgb channels are all jumbled or something. im pulling my hair out at this point. heres the relevant code from my init() function 

thanks so much for reading! P.S. It is possible that this whole thing is bootcamp related somehow, im going to have a buddy test the build on his geniune PC and see if it also runs slow. However, I know I've personally played plenty of steam games in windows on my mac before and seen no performance difference and definitely not struggling at 20fps, even saw some folks on forums claim that games run slightly faster in bootcamp windows on their macs than they do in OSX on the same machine, so its doubtful that it is bootcamp related. 

I have been writing an SDL OpenGL game in c++ for a couple of years now, writing my own engine for the most part (using Box2d for physics). I'm primarily a mac user, so I've been using xCode to write it, and just recently, I installed Windows 10 on a partition of my mac via Bootcamp and decided to work on the windows port (i know, 'windows port', bizarre right?) anyways after a few nights of blood sweat and tears I got everything set up in Visual Studio 2015, and made Visual C++ compiler happy in some areas where it is more strict than g++, and the game finally ran, woo! only to find out very quickly that it runs at less than half the speed. on mac it has no issue running at 50 fps, which is where i happen to cap it, and on windows it struggles to break 20 fps even 10 fps at times. what gives? in theory shouldn't it run about the same? since it is on the exact same hardware and the exact same code? I've heard that windows doesn't support opengl as well as mac does, so is it possible it is some kind of hardware acceleration thing? its worth noting that my draw method is significantly slower than my update method, here are the averages on both systems on OSX: draw() = ~7 ticks, update() = ~1 ticks on Windows: draw() = ~45 ticks, update() = ~5 ticks My iMac has a 3.2GHz quad-core Intel Core i5 processor and a AMD Radeon R9 M390 with 2GB video memory. Here are a couple of snippets of relevant code, my game is hundreds of classes/files at this point but if anybody has any other ideas on which other parts of my code base would be helpful to see, I'm more than happy to post more snippets. in init(): 

I'm using direct2d and direct3d together and having an issue with gamma correction. My direct3d backbuffer is using an SRGB format and when I render images from direct2d onto the direct3d surface, they appear washed out. I can't seem to figure out how to enable SRGB on the direct2d end. Does anyone know who to do this? 

Turns out that removing the normal and color (I wasnt using them anyway) from the VertexShaderInput struct makes the warning go away. I suspect this is just covering up some other problem but unless someone has any other ideas, I'll go with this for now. 

However I'm not making a 2d screen space effect. I'm applying it to a 3d scene and I want it to be placed IN the world, so it can be blocked by other 3D objects. I know the general method for doing this is as a post-process effect applied to a 3D sphere, however I can't find any code/equations that work for that case. All the ones I've found assume you're given a 2d point and a radius. The 2d point is easy to calculate from a 3d point but getting the radius of a 3d sphere projected into 2d space... seems extremely complicated. How can I achieve this kind of outwards-push effect in a 3d space? 

SizeInBytes comes out to 40, which is correct (4*3 + 4*3 + 4*4 = 40). Can anyone find where the mistake is? 

I'm trying to calculate a view/projection/bounding frustum for the 6 directions of a point light and I'm having trouble with the views pointing along the Y axis. Our game uses a right-handed, Y-up system. For the other 4 directions I create the LookAt matrix using (0, 1, 0) as the up vector. Obviously that doesn't work when looking along the Y axis so for those I use an up vector of (-1, 0, 0) for -Y and (1, 0, 0) for +Y. The view matrix seems to come out correctly (and the projection matrix always stays the same), but the bounding frustum is definitely wrong. Can anyone see what I'm doing wrong? This is the code I'm using: 

I also had to make a variable of type "- Record / ResourceDialogUI," which I cleverly also called ResourceDialogUI. I then painstakingly recreated the positions and sizes of the ingame Resources UI to make a UI that looks almost, but not quite, entirely like the defaults. Also I turned off the defaults. I hope these numbers are useful to someone else too. 

One of my favorite ways to play the original StarCraft was in a "Team" game. In this game type, multiple players on the same "team" would share control, resources, supply, and even the same starting location. It was like playing as 1 player, only 2 humans were controlling it. It was a lot of fun. I want to do something very similar in StarCraft 2, but I need to create a custom map in the Galaxy Editor to do it. I found the editor can quite easily emulate this behavior. There is a Trigger action "Set Alliance for Player Group" to "...treat each other as Ally With Shared Vision, Control, And Spending." To use this, I create units for only 1 of the players, and then set all players to be allied with each other in this way. All the other players get no units and no resources. This makes it so 1 player is the actual owner of all the units and everyone else is tagging along with full control. This nearly works! The problem is that if I am not the actual owning player, I can't actually see how many minerals/gas/supply the team has. This makes it pretty difficult to build stuff. What would be the best way to display to the other players how many Minerals/Gas/Supply the team has? 

Edit: dialogSizeX might need to be a little bigger and dialogRightBuffer correspondingly larger to account for supply sizes in the triple digits; otherwise you get ... truncation. Then it's just a matter of updating the numbers at appropriate times using ResourceDialogUI.MineralsText etc. and the "Player Property" getter function to get the values. To update, I simply used a Trigger that fires every .5 seconds, and it works pretty well. It's not as nice as the default text, which "rolls" around to the real numbers, but I'm sure I could polish that. Also of note: Supply is "SuppliesUsed / SuppliesMade." That took me a couple tries. I was not able to get the color to update to red when you need more supplies; the trigger to set the text color on the fly didn't seem to actually do anything. My map lets you join other teams on the fly, so I also added in a Trigger to change the icons to appropriate race-specific icons. Using a local variable "race" which is a "Game Link -> Race," here's what does that: