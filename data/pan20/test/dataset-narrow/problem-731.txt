While we are talking about. It shouldn't be a global function but where you placed it is not very good, because every call will create a new one. 

Private Variables I see the comments that you provided to represent which variables are public or private: 

Style The style is very simple now and does not require a lot of extra functions to make it look OOP like:) Also, uses less code overall to get the same result as your first question:) and like I said in the comments, way better choice of names than what I had! Also, I like how you have the and to make it easier. Especially since is the main one that is used when defining a property. Another good thing is overriding the for the was a good idea:) 

I pretty much second everything in @Joseph the Dreamer's answer except for simplifying the palindrome. You can simplify the regex by making it just . So, we now can get the reduced string. We do not need to check for white spaces since those are non-word characters (). 

Also, I believe has something called that does the same thing. I just created that small helper function because I already had it in my test code:) 

I know what you are thinking... He is a genius! (JK) The point of this function was merely to make it easier for when doing inheritance that it looks somewhat straight forward. Also, made the first to look "closer" to what _C++ does. When I use it I place it before the declaration of the that way it looks "closer" to C++. 

But those comments are not too useful. If you want a better way, which is more of a standard, is to represent private variables with an underscore before the variable name. Which would look like: 

I made a library a while back when I first learned JavaScript to make it look similar to iterators in other languages. Here's the basic structure: 

Then there is no need to reverse the string then compare them. We can save time by checking it at the same time: 

Others I feel like you should look at some of the big name libraries and see how they do a lot of their code. Then, try to bring some of their techniques into your style, because they have been around for a while and there must be a reason for what they do. Some "big names" I know of: (of course), , and . Then some I like: and . There are plenty more out there, but those are the ones I can think of at the moment. 

I feel as though a better way to represent overriding a function would be to maybe place some property on called . 

Here's a version to where it does not flip, but instead reads or writes into the correct location. Fastest way I know to "rotate" it, but does add some overhead when reading and writing. 

The reason for returning a rather than throwing an exception is that a can be expensive especially if there is a good chance of an error being thrown. Now, a means later that there may be some sort of conditional branch, but that is less expensive than if there is a high chance of an error being thrown. Also, there is more usability with returning a , because now you can decide if you want to throw an exception or just print or . 

Your Style My personal opinion is that since JavaScript is a scripting language, I feel that you can develop your own style in what suits what you are building. Your style is useful for what you have been coding, but I would never set on one specific way. It is fine to have a couple of things, like how you are mimicking Python syntax with the declarations requiring as the first param, but you should always mold your style based on what you are coding. 

Current Design The implementation you have here uses less code than before and has readability for those who are accustomed to JavaScript. The simplest way to add readability, say for you blog, would be to add helper functions. But, here is where you must be careful, because you may add too many to the point where you create your own syntax. You can start to see that from what I made below pertaining to the function where it presents its own mini API for interfacing with the chain of overridden methods. 

Thanks! Haven't had this much fun answering a question before:) Lots of fun concepts have been thrown around! 

What you can do is edit the function connected to to make it create the chain similar to what does. EDIT So, after revisiting this... I realized I could have just used to handle this problem... So, the new function would look like this: 

Since the question was more geared towards the optimization of the palindrome detection algorithm, I provided a solution that I have found to work the best for when detecting palindromic inputs. The solution cuts the number of steps down to a quarter of your solution. This is done by assuming that if the first half is the same as the second half then the must be palindrome. So, we start from both ends and work our way to the center (essentially when reaches or passes ). If any where along the way we find a point in which is not equal, then we know that we do not have a palindromic . Therein, we can exit returning . If we successfully exit the loop, then we know we were given a palindromic . Therein, we return . 

Overriding For the , I left the class such that every class used will have the same basic functions. 

Now the tricky part was when you override the method, the context of the method becomes the method that had overridden it. 

First, pull the Regex out of the function. Another thing would be to change it to because in case you missed one of the characters in your long list of non-word characters. You are wasting a lot of time. You loop through once to remove all non-word characters, then once to split, then another to reverse, then another to join, then two more for each lowercase, and then loop through to check to see if they are the same... 

Operands & Randomizer For I added two smart getters and setters and . These allow you to directly set and which will automatically set the . Also, this allows you to always get the most recent values in the s. 

You probably know more about the rotations than I do so I did the ones that I was 100% sure were correct. It is pretty straight forward, when the matrix object is accessed it returns a row object that then figures out what data you actually meant. 

Another thing would be to change the name from to something more descriptive to its purpose. Something maybe along the lines of . 

Can also add a to but this will only be called when is called not when adding a string to it because is called first when adding.