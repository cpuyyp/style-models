I recognise that you asked about your mergesort, but I couldn't help but notice your bubblesort... You're doing once before the loop, and again at the end of each iteration. Instead, you could just use in your condition. Furthermore, your swapping could be rewritten with just one temporary variable: 

Formatting I found this exceedingly difficult to read. The indentation in particular is inconsistent. I highly suspect that this is because your code contains mixed tabs and spaces. (StackExchange silently converts tabs into four spaces. If this is not the case, please ignore this section.) I don't want to start a holy war or anything, but there are three main camps here. 

In addition, in your code, you're running a lot of s here. Rather than calling it each time, you can store the result into a variable and only have to call it once. I didn't do it here because by making the other change, you'll only have to call it once anyway. 

Notice in particular that returns a coded string that includes the algorithm used and the salt. This means that you can store it straight into your database and not have to worry about salting and whatnot. 

Functions should be named according to what they do. This means they should often start with a verb, so rather than , it should be . (There are exceptions. For example, when checking a condition, you can use .) Furthermore, they should be named in ; the first letter should be lowercase, while the first letter in each word should be uppercase. Consider aggregating your dog mood functions into a single method. You'll probably soon learn about s; an enum would be a natural way to store and represent the dog's current mood (à la ). If you're looking for a 40% chance of something, then or will do what you want. will get you a random number from to inclusive, so will actually be a 36% chance. Your chain is needlessly complex. Remember that an will only be considered if all preceding s and s failed. Thus, you can instead use an - ladder similar to the following. (Note that the percentages are accurate only if you change your line to use rather than . 

† I say "probably" because although it's a CSS3 Candidate Recommendation, it's considered at-risk due to poor browser support. ‡ Strictly, your code will be assigning the handler to , but they'll do the same thing. 

This is a little bit messy; this is the issue I was referring to earlier. It's good that you added a comment, but even with the comment it seems a little bit bleh. This is mostly an issue because your and methods both call , even though in this instance you'd prefer to just use the logic. If you can, it'd be better to separate the model logic (the stuff dealing with the adding and deleting on ) from the presentation logic (rendering, clearing input boxes, etc.). That way this method becomes a lot cleaner. There's also a bug here: if you edit to an already existing todo item, the add will fail, but the delete will still run, so you lose your existing item. This will even happen when you edit to the same thing. 

But the problem with that is that statements don't define where the exception lands: so removing the statement means the program will compile, but crash due to an unhandled exception when it runs, whereas removing the label means the program won't compile, which is safer. Furthermore it avoids the expensive cost of throwing and catching exceptions as well as sticking to the mantra of "use exceptions for exceptional circumstances, not for program flow" - which is what it would be if I did convert it to a //. Is my use of then justified? 

jQuery Your code uses jQuery, but you don't seem to be using any features of jQuery that offer any advantages over the DOM - unless you need to target older browsers you can remove your jQuery dependency and thus make your code better: faster (less abstraction, fewer dependencies to download), more portable, more future-proof, etc). Simply replace with and with (you can alias it for brevity if necessary: ). Time-safety The function, when called, returns the current time value the moment the function is called - your code keeps on calling the function which could return different values each time it's called (if there's a long-enough delay in the interpreter, or if your code executes on a time-unit boundary) - issues like these can cause bugs if midnight at the end of a month happens while your function is executing. For this reason, you should get the value of "now" only once, at the start of your function, and perform all operations on that value (you should treat it as an immutable value too, even though is mutable, as that's best-practice). 

Get from their website Modify your initialization code: // Get the ISO culture settings for the current user, e.g. "en-US" or "es-MX": var locale = window.navigator.userLanguage || window.navigator.language; // Configure moment: moment.locale( locale ); 

I want to get a second-opinion on my use of . and only read the -value of a Stored Procedure after the has been closed. This is a problem if you want to interrogate the return-value to make a decision regarding how you want to read the data. In my case, the stored procedure I'm calling returns multiple output data tables followed by an integer return value. The number of output data tables is variable. 

The first alternative that comes to mind is to remove the negation operator () from each and move each subsequent operation to a branch under the , but this results in code many layers deep as there's about 8 or more result sets. Another alternative is to replace with a and throw my own custom exception, e.g. and in the block that surrounds the I would swallow the exception and have the return-value interrogation code in the block, or in code immediately following the block: 

When using locales, use the "locale formats" rather than specific formats. Moment uses to denote a "numeric date" (e.g. "09/07/2016" in en-GB, "07/09/2016" in en-US, or "2016-07-09" in ISO-8601). Everything So your code would become: 

Use ISO-8601 () which is unambiguous and as a bonus: is lexicographically sortable. Use Moment's built-in localization ("i18n") support: $URL$ 

Culture-sensitivity You're using the pattern - only a few countries use dashes between the components and it is not ISO-8601 compliant. If this is intentional then that's fine - but if your users are coming from a variety of different countries (with their own date-formatting preferences) then you have two choices: 

I agree with @ckuhn203 in that the first looks cleaner. I'm not too familiar with C# and its style, but in C I would definitely prefer using a loop: 

The trick is a cool way to truncate floats to integers, but it's much less readable and relies on a side-effect for the heavy lifting. Although is appreciably faster, using is preferable since the intent is immediately obvious. Feel free to disregard this if you've identified this as being a performance bottleneck. If your application is not performing slowly, however, then this may be a case of premature optimisation. 

columns should almost always be s, not s. That's just silly design. Similarly, should be an . should be foreign keyed to some table. is not necessarily a good name. If you only need to differentiate between active and inactive, use a and name it something like . If you need more states, then assign a value like or or , instead of and . There's no reason to have a separate table for and . Rename to something else (?) and get rid of . Whenever you have a top-tier item, set its to or . 

In PHP 5.5+, the best practice is to use and . You can use it in your code like so. Notice that this obsoletes the column in your table. 

I just want to highlight your - chain. You should stick to one style. I understand that you want to put in a comment, but this should not cause you to uncuddle the . You can put the comment on the line after the instead. Also, this function needs to be documented. I've read it over twice and I can't understand why an item has to be to count as an item. It doesn't help that you didn't actually use the form ever. Anyway, I'd rewrite it a bit still: 

I'm sorry this is so short, but I only have time to give it a quick once-over right now. The first thing I noticed was the flickering of the cycling icon as I scroll through the bottom. Compared to the rest of the application, which looks great, this was awful. This is happening because you are assigning the to the on , which doesn't make much sense. If you move this initialisation to a handler instead, the flicker will be gone: 

This post will focus on your implementation of Union-Find. First and foremost, you're not using the member at all, so you should probably remove that. It turns out you actually are using this, just not in your Union-Find class. This is a bad idea. We typically wish to minimise coupling, and using a public member in this manner does precisely the opposite. Next, all your members are . This usually isn't advisable; you should endeavour to make them and provide getters and setters as appropriate. Next, you are in my opinion overloading (not in the programming sense! :P) the member. It's doing double-duty, holding the nonnegative parent node index for child nodes, and the negated size of the set for root nodes. The name therefore cannot be meaningful, since its two purposes are so distinct. If you are pressed for memory then I understand your use of that solution. Keep in mind, however, that since disjoint-set structures are really forests, the classic implementation uses objects containing a reference and optionally an for / . This has the advantage of being more semantically meaningful (and arguably more readable): 

The operator will return null instead of throwing a if . The two following lines could be changed to this : 

What do you usually expect? An , or that ? The thing is, if a user of your method inputs something, they want exactly that to be done, not a fallback scenario. Let the user know it didn't work, it's better this way. Don't think about recursion, your loop is a very good way to tackle this problem. Recursion has no easy way in this problem I think. I think your solution is very fine. 

It reduces noise in the code, I think you should use it in your class since you don't do anything particular in your getters/setters. Also, you don't need to specify the parameterless constructor. If there is no constructor specified in C#, it will assume there is a public parameterless one. The C# naming convention implies that method names should be in PascalCase, which means should be (same for all the other methods). Try to be consistent in your private field naming, some of them have underscores at the beginning, some don't. There's no official documentation specifying you should use the underscore, so pick the way you want and stick with it. Finally, I don't know if it is because you had trouble with formatting your code here, but pay caution to the white spacing of your code! 

You should never expose a . In fact, in most cases you never want to expose a concrete type when it comes to data structures. Since you return a list, I assume the said list won't be modified by the caller. So you should return . This limits the ways a user of your class can screw up your code (as you can't add/remove/insert/etc. from an IEnumerable<> without casting it, then it's just asking for trouble). 

I think you might want to rename your class to since well, the class itself isn't about a missing integer, but about finding a missing integer. And the name fArrayDuplicate doesn't mean much to me. There's nothing talking about duplicates in your code, why is it prefixed with a f? I have a hard time to find a better name, someone might find one. But for now I'd name it or... something like that. 

You're a blind adventurer (bad luck eh). To go through the maze that'll lead you to freedom, you must first find the maze's wall, then follow this wall to find the maze's entry. Then, to get an idea about the size of the maze, you want to see how large is the said entry, so you walk until you touch another wall, which is the other border of the entrance. Still following? If not, here's a that'll show my example : 

Your validation doesn't have to be in the controller, I'd even say it doesn't belong there. You should probably think about having Command validators that would be some other classes that say if your command can be launched. I would want to give you more information, but the lack of context on the code makes it hard for me to show you how I would build the controller but it would go along these lines :