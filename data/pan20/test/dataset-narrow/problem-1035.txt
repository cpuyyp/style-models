It looks like none of these answers are giving exactly what you asked for. You can use this formula to get the "transposed" table in another location. 

This option requires array entry of the formula (i.e., enter with Ctrl+Shift+Enter). Use with the two conditions built into an argument. 

You can get the database references by selecting the appropriate columns from your imported data. Excel will generate the database field references. 

Just be careful that you don't have any formulas in the selection that include the search string but you don't want to change. 

You can do this very quickly with a pivot table. Just select all your data (column headers included) and click on the ribbon. Once you have selected a location for your pivot table, just drag and drop your fields in the Pivot Table Fields List as follows: 

and press Ctrl+Shift+Enter. This will enter the formula into the entire selected range and should give you what you want. 

You can do this with an array formula on the worksheet. Go ahead and create your column headers manually (label as the year, e.g. , because this will be used in the formula). In the first row below the first header, enter the following formula as an array formula (paste the formula into the formula bar and press Ctrl+Shift+Enter), where is your big column of dates and is the header for the first year's column: 

Next, add a field to represent the 5-minute period the timestamp falls in, . Use the formula below to calculate this, where the timestamp is in column . 

You could piece together something with worksheet functions that pairwise compares the values in your source and target tables and then returns if the values match and if not. For example, the following compares on Sheet1 and Sheet2. 

I can't guarantee this will work, but it should at least get you on the right track. If it doesn't work, you may need to tweak the connection string. For more information about ADODB connections and connection strings, see this MSDN page: $URL$ 

There's no need to use any conditions here. Just include in the function. will ignore any non-numeric, non-error values, so it doesn't matter if K23 is blank. 

where is your first data point and is your last data point. As shown below, these methods project dates within 3 days of each other. 

On this sample data, with look-up table located at and user input located at , you would use the following formula: 

2. Use Conditional Formatting to Create a Heatmap Within Your Spreadsheet This requires some data transformation, but the output looks pretty nice, especially for large fine-grained representations. First, you'll need to add a column to the left of your table. This will hold a lookup value that will be used to populate your heat map. In this column you need a key that uniquely identifies each x-y pair in your data. In my example below, I used the formula `=B2&"-"&C2'. Fill this formula down. Next, you'll need to set up a table on your sheet that mimics an x-y graph. So, x on the horizontal (at the top or bottom, your preference), and y on the vertical with descending values. Once you've done this, you can use a VLOOKUP function to populate the heat map. You'll need something like this: . Note that in the first argument, the row number for the x labels and the column for the y labels is fixed. This allows you to fill this formula throughout the table for your heat map. Finally, select the values in the table you just created and apply conditional formatting to them. You can either use one of the pre-defined color scales or create your own to match your needs. Example: 

To collapse the array to just the size of the matches, I believe you'll need a (fairly simple) VBA function. 

It's not entirely clear what you're asking, but I understand this to be your problem: You have an ActiveX Control that runs on a click event. The VBA for this is only called by the button click and cannot be called from any other Sub, but you would like to be able to call this code from another module. I don't believe you can do that, but there is a better approach to the problem. Place the code for your ActiveX control in a new Sub in a module. Then replace the code for the button click event with the following: 

where is your comma-separated list. NOTE: You will have to add the reference to your VBA project (under > in the VBA Project Editor window). 

Now, you just need to find the index of "REPLACE!ME" in the string and return everything to its right. This can be done with the , , and functions. The final function is kind of repetitive, but it gets the job done. 

Doing a projection like this requires you to have some sort of model of how the data is expected to behave, e.g. linearly or exponentially. If you are unsure, it may be helpful to create a scatter plot of your data points and observe any trend that may be underlying your data. Doing this for the data you provided shows a pretty clear linear trend. Here are two options for projecting a linear trend to the completion point. 

The formula then searches for the code from Query sheet column B wrapped in the delimiter characters (e.g. ). For any match, the row number of the match is stored in an array. For non-matches, is stored. The value of this array of row numbers and -1's is taken and passed to the function, which looks for that specific index in column C on the Master sheet. If is passed to the function, i.e., if no matching code was found, an error is returned. 

What this does: indicates that any match should start at the beginning of a line. is any expression that does not contain a space. The match is greedy, so this will match everything up to the first space (or the end of the line, whichever comes first). is everything else on the line. refers to the part of the match inside the parentheses. That is, the entire line is replaced by just the bit from the first column. 

Select column A. Right-click and select . On the Protection tab, uncheck . Click OK. With column A still selected, click on the Home ribbon, and select . From there choose There you can enter the formula and set the formatting to red text. Click OK. On the Review ribbon, click . Choose whatever settings you wish for the protection. Press Alt+F11 to open the VBA editor. In the VBA Project Explorer pane, double click the module for the sheet you are working on. 

The easiest way to do this is to use @Bavi_H 's method, but instead wrap the formula in a function specifying the format. 

If you need to remove any other duplicates (not just the duplicates with blank Field2 values), you can use the Remove Duplicates tool to accomplish this. 

It iterates through the collection on each worksheet. It then checks if the shape is a text box and then moves it if it is. There's no need to rename the text boxes if you do it this way. 

Click OK and observe that your table is filled with the appropriate output values for each input value. 

The columns referred to here match your sample data. You can substitute cell references for the month and name values you're matching. EDIT: To match the month by name rather than number, you can use the following: 

I'm not sure if this will work in general, but for the example format, you can use the following instead. 

Select Column in your table (e.g. ). Press F5. Click the 'Special...' button. Choose 'Blanks' and click 'OK'. Type (I'm assuming the first blank is in row 2, as in your example. It would be if the first blank were in row 3, etc.). Press Ctrl+Enter. 

The Ctrl+Shift+Enter entry enters the formula as an array formula. Array formulas allow you to apply a function to an array of values. In this case, it applies the comparison of A1 to each value in column A on Sheet2. This formula will return an error if no matching invoice number is found. This formula assumes that the dates on Sheet2 are formatted as Excel dates, i.e., they are a number value represented as a date. If by chance your dates are formatted as Text (not General or a Date format), this formula will not work as intended. In this case, use the formula below entered as an array formula. 

You may change the date format, i.e., the argument in the function, to meet your needs. The one I've provided appears to match the date format you have on your sheet. 

Enter the formula using Ctrl+Shift+Enter. This works like the / construction of a , but with a conditional used instead of . Note that this assumes that your table starts at row 1. If your data starts at a different row, you will need to adjust the part by subtracting the difference between the top row and 1. 

Enter this formula as an array formula by pressing Ctrl+Shift+Enter. You can also use this UDF to get a list of the actual values that have duplicates. The following formula will work for this purpose: 

This formula sums the values in A1 and below that occur before the first zero. In enter the similar array formula with an extra condition (also using Ctrl+Shift+Enter): 

VBA solution: Here's a VBA solution using the Worksheet_Change event as you suggested. This will read user input from F1 and put output in F2. The data is assumed to be in columns A and B. To change these locations, you'll need to replace each instance of each with your desired input, output, and data addresses. 

When fails to find something, it returns a error, so your condition should check for this. Try this instead: 

Breaking it down: will sum an array of values. The array can be defined in the function and does not require special array entry. Each factor in the expression represents a condition. If a condition is met, the value of the factor is 1. If it is not met, the factor is equal to 0. As a result, each product in the array will be equal to either 1 or 0. Those that are equal to 1 correspond to rows where all the conditions are met. The conditions: This is true (1) if the value of the cell in column A is the text "textA". This is true (1) if the value of the cell in column B is the text "textB". This uses an arithmetic trick to do your OR comparison. The product of C and D will be 0 only if one of the two (or both) is equal to 0. The sum of all these products is equal to your conditional count. 

You can do this with and . I'm assuming your date columns are sorted from oldest to newest. To find the first date after in , use the following formula. 

When dealing with CSVs in Excel, you should always import the CSV from an open Excel workbook rather than simply opening the CSV with Excel. In Excel 2007 and later, you can import your CSV by choosing on the ribbon. The wizard will walk you through the process and allow you to assign formats to each field (e.g. currency, percent, text). For preserving trailing or leading zeros, your best bet is to import the field as Text. 

Explanation of the pattern: is any string of characters that doesn't contain a tab or newline or carriage returns. This should match only the text in one column of your file. matches the content of the first column because the leading limits the match to the start of a line. The first capturing group matches the contents of the first field and the following tab. matches the contents of the second field and only matches if the parenthetical expression is present. The second capturing group matches the parenthetical expression. The replacement pattern returns the first and second capturing groups. This effectively deletes the surrounding text in the second field because that part of the match is not included in a capturing group. 

Excel stores dates as serial numbers (the number of days since 1/1/1900). If you pass an Excel date into a concatenation formula, it will pass the unformatted serial number instead of the formatted cell contents that show on the sheet. To get around this, use the function to format the date before it is passed to the function. 

Try using negative lookahead. I don't have Notepad++ on this computer, so I can't say for sure if it supports this kind of regular expression. Give it a try. 

You can do this by setting the cell format to and then setting up a custom data validation rule. To set the cell format, right-click the data entry cell and choose . Then set the category to . To set up custom data validation, select the data entry cell, click on the Data ribbon. Set the Allow box to . Then enter the formula below, where is the address of your data entry cell. 

You can handle borders in a similar way if you apply them using conditional formatting. Just apply it to all the data in the column with an appropriate formula rule, such as 

It's worth noting that this is a dynamic solution; when your table is updated, the list of available IP addresses will update too with no user input. Just make sure your formula is filled down sufficiently far. 

Now that you have the framework for your data table, you can perform a What-if analysis. Select your entire table framework ( in this example, which includes the values and the formula). Now, on the Data ribbon, select 'What-if Analysis' -> 'Data Table...'. In the dialog, enter the address of your dummy cell to which your formula refers in the Column input field. (If you table is set up horizontally rather than vertically, you should enter the address in the row input field.) 

where are the first 25 items in your original list. Press Ctrl+Shift+Enter to enter the formula as an array in the 25-cell range. You can then fill down all 25 columns at once until all your data is transposed. If the formulas are troublesome, you can copy the entire transposed range and paste special the values only back into the same range. Example: 

Where E2 is the top-left cell of the selection and B2 is the desired total for the first row. Set your desired format and click OK. 

Then copy the resulting column, and Paste Special -> Values only over column A. Then you can delete the formulas from Column B. 

You can use a combination of , , and to achieve what you want. To find what ID marked for code , assuming your sample table is in range A1:J6, you can use 

This works if all your text is like the sample you provided. Just open your text file in Excel, and add a new sheet to create your table of replacement terms (with headers). I have it set up to read the first column as the "before" terms and the second column as the "after" terms. After doing this, press Alt+F11 to open the VBA editor pane. Insert a new module and paste in the following code. 

Select the matching rows (as pictured above) and press Delete. This will clear out these rows. Remove the filter and your table will show with blank rows where the deleted records were. Select your table and press F5. Click and then choose to go to . Click . This will select all the blank records in your table. Right click the selected range and choose and . This will consolidate your table. 

Here is the ID column in the original data, and are values. is the location of the first ID in the new merged table. Adjust these ranges as necessary to match your data. Finally fill over and down as far as you need to. 

One thing to note about the formulas is the last argument in the function . This returns for the first record in Row 4. If your summary table starts at a different row, you will need to adjust this argument so that it returns for the first row of your table. For example, if your table starts in Row 2, you will need to change the argument to . 

Formula solution: You can achieve the same result with an array formula -- no need to add VBA to your workbook. In your desired output cell, paste the following into the formula bar and then press Ctrl+Shift+Enter.