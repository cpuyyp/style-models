If mod_rewrite is missing, run . Then run and your site should work. If you test your site, disable HTTP cache in your browser! 

That is ok, because RPi supports only the 2.4 GHz band and not the 5 GHz. Follow one of these guides to setting up wireless networking using your 2.4 wifi and it should work. 

To reduce logfile write operations on the RPi you could set up a centralized log server with rsyslog. If you want to keep the entries, just send the messages to the remote log server, else to /dev/null. 

If you have installed Munin through the distribution packages (my recommendation), the webserver will be configured automatically and available at (replace "ip"). You can configure it like any other virtual host, i.e. you can make it accessible per SSL/TLS only, protect it with credentials etc., see Authentication and Authorization - Apache HTTP Server Version 2.4. Munin works great with Apache. lighttpd and nginx are supported as well. Webserver Configuration - Munin Guide Alerts If you have an MTA already up and running (like Exim), you can tell Munin to alert you via email: 

Another solution (you have asked in a comment for a "'production' solution") could be to restrict physical access by encapsulating the Raspberry Pi into a lockable case (container like a server rack or IT cabinet). This way you do not need to partial damage the device with glue or something like that. There are small cabinets available with a glass door. This could be really usefull if you need the status of the LEDs: in case you need this information simply ask your friend to look for the LEDs and report back. Just a few different examples, not a recommendation: $URL$ $URL$ $URL$ Or you could build your own case like you need it. Options are endless. 

Update: With three lines of code, and other examples can be made to run with the Mesa EGL driver. See the answer to my "failed to add service" question. To run these examples on the old proprietary driver, my original answer is below. 

One way to effectively mod this closed-source executable is to intercept SDL function calls with your own modified SDL. 

This actually doesn't matter. With you can use mass storage and gadget serial even if the RNDIS driver isn't installed. 

At the time of writing that toolchain is geared for gcc 4.9 / Raspbian 8 Jessie. Or if you prefer to continue using system packages installed via , try this: 

For streaming V4L2 over ethernet, I recommend webrtc-streamer. VLC doesn't support WebRTC, but could you use a browser instead? 

A software-only solution that comes to mind would be to disable the kernel module for USB support. However, the default Raspbian kernel does not have USB compiled as a module, so you would need to rebuild the kernel with . To set this from (after getting set up to build your own kernel), select Device Drivers -> USB support -> Support for Host-side USB, set to Then to turn USB support off if you turned it on at startup. While it may be tempting to toggle only (USB Mass Storage support), from what I've read it would still get autoloaded whenever a thumb drive is connected. 

All of your sequences work fine for me on macOS. However, on Windows 10 it would show up with the correct amount of space but "Unallocated". For whatever reason, this fixes itself and a drive letter is assigned when I add . Try that. 

In case your web server runs as user (not always a great idea, but that is off-topic) you can run your *.py from *.php this way: 1.) Create the python file, i.e. : 

On Raspbian you have two common options: Option 1: Add the already created user (i.e. with the name "john") to the group "sudo": 

This is the reason why you can connect to raspberry1 on port 3306, but not to raspberry2 on the same port. To make your raspberry2 accessible just set the correct bind_address in mycnf. Security advice: If your RPis are not behind a well managed firewall, please read why it is a bad idea to allow direct connections to your databases and how you can configure MariaDB in a safe way for remote client access. 

You can reduce the sensitivity of the PIR sensor by turning the little yellow trimpot ("Phillips screw") anti-clockwise. On your photo it is the top one. This adafruit overview could be helpful. Make sure that no unwanted infrared transmitter triggers the PIR sensor, like LEDs or (television) remote control unit. Regarding your python script: I would add in a new line after . And to stop the running script from command line by pressing : 

source: Server System Variables - MariaDB Knowledge Base shows in the column "Local Address" for your raspberry1 "0.0.0.0:3306" (all IPv4s are allowed to access this device on port 3306) and for your raspberry2 "127.0.0.1:3306" (only localhost is allowed): 

Then run a configuration file syntax test: (for more details: ). If no error occurs, enable both configurations for your vhost: 

After editing restart the node: Plugins On a Node you can run to get a list of the available, used and unused plugins (please be patient, on a Raspberry Pi 3 this command takes a few minutes to finish). Plugins can vary from simple to complex, please consult the plugin documentation. If you want to edit a plugin, I'd recommend to read "How to write Munin plugins". To debug a plugin you can run (replace "[pluginName]"). To deactivate a plugin run (replace "[pluginName]"). This will not delete the plugin file, just the symbolic link. Then run and Munin will no longer use this plugin. Troubleshooting and Logfiles Make sure that no firewall is blocking the communication. To debug check the logfiles on the respective devices: 

If it's your intent to use your Pi 3 to develop and test both armhf and arm64 applications, you might as well run Pi64 directly. Unlike Raspbian, it has support for MultiArch out of the box without package conflicts. Outside of the Raspbian/Debian ecosystem, other 64-bit distros include Gentoo, openSUSE, and Fedora (see others' comments). 

OpenGL My Pi 2 with Jessie runs Minetest out of the box at 15 fps for a typical scene with trees. (You'll of course get a higher fps looking at the sky.) I've seen a "1 fps" bug affect both Minetest and full-blown Minecraft, and it seems to happen when the OpenGL driver isn't properly configured. Run and select the OpenGL driver with full KMS. Check that contains so that it takes effect on reboot. If that doesn't resolve it, try with fake KMS. If the issue persists and you have a bit more time, rule out the usual concerns with Once you have the lag bug gone, framerate is most visibly affected by drawing text (press F2 to disable chat / log), followed by the HUD due to its transparency and some text (press F1 to disable). Ironically, this means pressing F5 to view the FPS counter makes the framerate instantly drop, so I ended up tweaking to report stats to stdout instead. On the bright side, opaque objects like "Steve" (press F7 to change camera view) are not computationally expensive. You might squeeze out a few more fps by with , , , or disabling fog (press F3), but most options have little effect on performance. In fact a Pi 3 runs Minetest at about the same quality. OpenGL ES (Mesa driver with VC4 support) It's worth noting you can compile Irrlicht for standard GLES and configure Minetest with . I have used these instructions, although for faster compilation and keeping enough RAM on-device I use clang instead of gcc. Also note: requires the branch of minetest. However, the resulting configuration has slightly worse performance than full OpenGL. This makes some sense, given that it's much the same software rendering with limited VC4 acceleration. OpenGL ES (Broadcom VC4 driver) Besides the thread from 2015 you linked, there's this thread last updated in March. I have responded on the latter with instructions for building Minetest linked with brcmEGL + brcmGLESv2. This performs significantly better than the Mesa GLES configuration, often 50+ fps with a fair amount of geometry in the scene. The same tuning tips apply as with OpenGL, although little things like text rendering can cause a more severe fps drop. There may be further bottlenecks in Irrlicht/Minetest aside from rendering that could be identified by first building with . However, now that both minecraft-pi and PC Minecraft run faster on the Pi, that could be a reason Minetest is getting less attention. 

I do not recommended to upgrade Raspbian from Wheezy (Debian 7) to Raspbian Stretch (Debian 9) and skip Raspbian Jessie (Debian 8). Fyi: table of Debian releases Option 1: upgrade from 7 to 8 to 9 Backup first. Then upgrade from Wheezy to Jessie (i.e. like described here) and afterwards from Jessie to Stretch. Option 2: abandon 7, skip 8, install 9 Backup your old Wheezy and all needed data, format the SD card and install Stretch (like described here). This way you will get a stable OS. Weighing up Both options can result in comparable effort, but it is difficult to say from here. If there are only a few projects running on Wheezy and it is simple to redo all needed changes after a new installation, I would vote for option 2. And based on my experiences I do not think that an upgrade from 7 to 8 to 9 will finish without errors. Maybe you have a second SD card and want to try both options. And like always: please do a backup first :-) 

To redirect the requests to your Apache 2.4 name-based virtual host from HTTP to HTTPS you have many options. This one should help you: is the default configuration file for HTTP (port 80): 

Make your script executable: 2.) Create the html file with or , i.e. (optional, you could request the following php file straight): 

An official "Troubleshooting Tutorial" is available. Raspberry Pi specific By default the Master collects the data every 5 minutes. If your Master is under heavy workload, adjust the interval. I recommend to use a fast SD card on the Master. For each Node this process takes around 10-15 seconds (on our setup, wifi only). 

To answer all three questions let's go one level deeper and see the definition of av_malloc() in FFmpeg. It appears to be doing plain memory allocation, not allocating some more obscure video memory via ION nor mmap() nor dmabuf. Because this is plain C code and not throwing exceptions you cannot easily trap it as an exception. However, I imagine you could make your program monitor the amount of available memory and adapt things (stop the stream and restart if necessary) to prevent this from happening. 

That's a loaded question and depends on your needs. One way to look at it: a GLES application written for the Pi could potentially run on other single-board computers that may lack support for full OpenGL. A GLFW/GLEW program could likewise be handy to build and test on a desktop Linux computer. 

Note I suggested putting both lines at the very top even prior to to be on the safe side. If desired to make the code prettier: I'm not sure if the statement can be moved down lower just prior to , but you can try and find out. refers to the Linux Open Sound System (OSS) where sound is sent via I/O writes to . As there's no immediate desire to play sound we could have tested any setting other than . was just the most vanilla one that came to mind. In the future if you wish to support sound in your Pygames via PulseAudio or one of the other drivers--and via the headphone jack or any other hardware--this understanding of SDL could come in handy. 

Makes sense. exists on Raspbian by default, but on Kali you need to explicitly mount the boot partition then manually create . Specific to HDMI, does appear to be supported on Kali just like Raspbian, so you could rule that out.